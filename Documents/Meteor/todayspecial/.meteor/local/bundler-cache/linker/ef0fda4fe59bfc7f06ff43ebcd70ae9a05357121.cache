[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar LocalCollection = Package.minimongo.LocalCollection;\nvar Minimongo = Package.minimongo.Minimongo;\nvar EJSON = Package.ejson.EJSON;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar _ = Package.underscore._;\nvar Session = Package.session.Session;\nvar Mongo = Package.mongo.Mongo;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/angular/packages/angular.js                                                                              //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n(function(){                                                                                                         // 1\n                                                                                                                     // 2\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 3\n//                                                                                                            //     // 4\n// packages/angular/lib/diff-array.js                                                                         //     // 5\n//                                                                                                            //     // 6\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 7\n                                                                                                              //     // 8\n'use strict';                                                                                                 // 1   // 9\n                                                                                                              // 2   // 10\nvar module = angular.module('diffArray', ['getUpdates']);                                                     // 3   // 11\n                                                                                                              // 4   // 12\nmodule.factory('diffArray', ['getUpdates',                                                                    // 5   // 13\n  function(getUpdates) {                                                                                      // 6   // 14\n    var idStringify = LocalCollection._idStringify || Package['mongo-id'].MongoID.idStringify;                // 7   // 15\n    var idParse = LocalCollection._idParse || Package['mongo-id'].MongoID.idParse;                            // 8   // 16\n                                                                                                              // 9   // 17\n    // Calculates the differences between `lastSeqArray` and                                                  // 10  // 18\n    // `seqArray` and calls appropriate functions from `callbacks`.                                           // 11  // 19\n    // Reuses Minimongo's diff algorithm implementation.                                                      // 12  // 20\n    // XXX Should be replaced with the original diffArray function here:                                      // 13  // 21\n    // https://github.com/meteor/meteor/blob/devel/packages/observe-sequence/observe_sequence.js#L152         // 14  // 22\n    // When it will become nested as well, tracking here: https://github.com/meteor/meteor/issues/3764        // 15  // 23\n    function diffArray(lastSeqArray, seqArray, callbacks, preventNestedDiff) {                                // 16  // 24\n      preventNestedDiff = !!preventNestedDiff;                                                                // 17  // 25\n                                                                                                              // 18  // 26\n      var diffFn = Package.minimongo.LocalCollection._diffQueryOrderedChanges ||                              // 19  // 27\n        Package['diff-sequence'].DiffSequence.diffQueryOrderedChanges;                                        // 20  // 28\n                                                                                                              // 21  // 29\n      var oldObjIds = [];                                                                                     // 22  // 30\n      var newObjIds = [];                                                                                     // 23  // 31\n      var posOld = {}; // maps from idStringify'd ids                                                         // 24  // 32\n      var posNew = {}; // ditto                                                                               // 25  // 33\n      var posCur = {};                                                                                        // 26  // 34\n      var lengthCur = lastSeqArray.length;                                                                    // 27  // 35\n                                                                                                              // 28  // 36\n      _.each(seqArray, function (doc, i) {                                                                    // 29  // 37\n        newObjIds.push({_id: doc._id});                                                                       // 30  // 38\n        posNew[idStringify(doc._id)] = i;                                                                     // 31  // 39\n      });                                                                                                     // 32  // 40\n                                                                                                              // 33  // 41\n      _.each(lastSeqArray, function (doc, i) {                                                                // 34  // 42\n        oldObjIds.push({_id: doc._id});                                                                       // 35  // 43\n        posOld[idStringify(doc._id)] = i;                                                                     // 36  // 44\n        posCur[idStringify(doc._id)] = i;                                                                     // 37  // 45\n      });                                                                                                     // 38  // 46\n                                                                                                              // 39  // 47\n      // Arrays can contain arbitrary objects. We don't diff the                                              // 40  // 48\n      // objects. Instead we always fire 'changedAt' callback on every                                        // 41  // 49\n      // object. The consumer of `observe-sequence` should deal with                                          // 42  // 50\n      // it appropriately.                                                                                    // 43  // 51\n      diffFn(oldObjIds, newObjIds, {                                                                          // 44  // 52\n        addedBefore: function (id, doc, before) {                                                             // 45  // 53\n          var position = before ? posCur[idStringify(before)] : lengthCur;                                    // 46  // 54\n                                                                                                              // 47  // 55\n          _.each(posCur, function (pos, id) {                                                                 // 48  // 56\n            if (pos >= position) posCur[id]++;                                                                // 49  // 57\n          });                                                                                                 // 50  // 58\n                                                                                                              // 51  // 59\n          lengthCur++;                                                                                        // 52  // 60\n          posCur[idStringify(id)] = position;                                                                 // 53  // 61\n                                                                                                              // 54  // 62\n          callbacks.addedAt(                                                                                  // 55  // 63\n            id,                                                                                               // 56  // 64\n            seqArray[posNew[idStringify(id)]],                                                                // 57  // 65\n            position,                                                                                         // 58  // 66\n            before                                                                                            // 59  // 67\n          );                                                                                                  // 60  // 68\n        },                                                                                                    // 61  // 69\n                                                                                                              // 62  // 70\n        movedBefore: function (id, before) {                                                                  // 63  // 71\n          var prevPosition = posCur[idStringify(id)];                                                         // 64  // 72\n          var position = before ? posCur[idStringify(before)] : lengthCur - 1;                                // 65  // 73\n                                                                                                              // 66  // 74\n          _.each(posCur, function (pos, id) {                                                                 // 67  // 75\n            if (pos >= prevPosition && pos <= position)                                                       // 68  // 76\n              posCur[id]--;                                                                                   // 69  // 77\n            else if (pos <= prevPosition && pos >= position)                                                  // 70  // 78\n              posCur[id]++;                                                                                   // 71  // 79\n          });                                                                                                 // 72  // 80\n                                                                                                              // 73  // 81\n          posCur[idStringify(id)] = position;                                                                 // 74  // 82\n                                                                                                              // 75  // 83\n          callbacks.movedTo(                                                                                  // 76  // 84\n            id,                                                                                               // 77  // 85\n            seqArray[posNew[idStringify(id)]],                                                                // 78  // 86\n            prevPosition,                                                                                     // 79  // 87\n            position,                                                                                         // 80  // 88\n            before                                                                                            // 81  // 89\n          );                                                                                                  // 82  // 90\n        },                                                                                                    // 83  // 91\n        removed: function (id) {                                                                              // 84  // 92\n          var prevPosition = posCur[idStringify(id)];                                                         // 85  // 93\n                                                                                                              // 86  // 94\n          _.each(posCur, function (pos, id) {                                                                 // 87  // 95\n            if (pos >= prevPosition) posCur[id]--;                                                            // 88  // 96\n          });                                                                                                 // 89  // 97\n                                                                                                              // 90  // 98\n          delete posCur[idStringify(id)];                                                                     // 91  // 99\n          lengthCur--;                                                                                        // 92  // 100\n                                                                                                              // 93  // 101\n          callbacks.removedAt(                                                                                // 94  // 102\n            id,                                                                                               // 95  // 103\n            lastSeqArray[posOld[idStringify(id)]],                                                            // 96  // 104\n            prevPosition                                                                                      // 97  // 105\n          );                                                                                                  // 98  // 106\n        }                                                                                                     // 99  // 107\n      });                                                                                                     // 100\n                                                                                                              // 101\n      _.each(posNew, function (pos, idString) {                                                               // 102\n        if (!_.has(posOld, idString)) return;                                                                 // 103\n                                                                                                              // 104\n        var id = idParse(idString);                                                                           // 105\n        var newItem = seqArray[pos] || {};                                                                    // 106\n        var oldItem = lastSeqArray[posOld[idString]];                                                         // 107\n        var updates = getUpdates(oldItem, newItem, preventNestedDiff);                                        // 108\n        var setDiff = updates.$set;                                                                           // 109\n        var unsetDiff = updates.$unset;                                                                       // 110\n                                                                                                              // 111\n        if (setDiff)                                                                                          // 112\n          setDiff._id = newItem._id;                                                                          // 113\n                                                                                                              // 114\n        if (unsetDiff)                                                                                        // 115\n          unsetDiff._id = newItem._id;                                                                        // 116\n                                                                                                              // 117\n        if (setDiff || unsetDiff)                                                                             // 118\n          callbacks.changedAt(id, setDiff, unsetDiff, pos, oldItem);                                          // 119\n      });                                                                                                     // 120\n    }                                                                                                         // 121\n                                                                                                              // 122\n    diffArray.deepCopyChanges = function (oldItem, newItem) {                                                 // 123\n      var setDiff = getUpdates(oldItem, newItem).$set;                                                        // 124\n                                                                                                              // 125\n      _.each(setDiff, function(v, deepKey) {                                                                  // 126\n        setDeep(oldItem, deepKey, v);                                                                         // 127\n      });                                                                                                     // 128\n    };                                                                                                        // 129\n                                                                                                              // 130\n    diffArray.deepCopyRemovals = function (oldItem, newItem) {                                                // 131\n      var unsetDiff = getUpdates(oldItem, newItem).$unset;                                                    // 132\n                                                                                                              // 133\n      _.each(unsetDiff, function(v, deepKey) {                                                                // 134\n        unsetDeep(oldItem, deepKey);                                                                          // 135\n      });                                                                                                     // 136\n    };                                                                                                        // 137\n                                                                                                              // 138\n    var setDeep = function(obj, deepKey, v) {                                                                 // 139\n      var split = deepKey.split('.');                                                                         // 140\n      var initialKeys = _.initial(split);                                                                     // 141\n      var lastKey = _.last(split);                                                                            // 142\n                                                                                                              // 143\n      initialKeys.reduce(function(subObj, k, i) {                                                             // 144\n        var nextKey = split[i + 1];                                                                           // 145\n                                                                                                              // 146\n        if (isNumStr(nextKey)) {                                                                              // 147\n          if (subObj[k] == null) subObj[k] = [];                                                              // 148\n          if (subObj[k].length == parseInt(nextKey)) subObj[k].push(null);                                    // 149\n        }                                                                                                     // 150\n                                                                                                              // 151\n        else if (subObj[k] == null || !isHash(subObj[k])) {                                                   // 152\n          subObj[k] = {};                                                                                     // 153\n        }                                                                                                     // 154\n                                                                                                              // 155\n        return subObj[k];                                                                                     // 156\n      }, obj);                                                                                                // 157\n                                                                                                              // 158\n      getDeep(obj, initialKeys)[lastKey] = v;                                                                 // 159\n      return v;                                                                                               // 160\n    };                                                                                                        // 161\n                                                                                                              // 162\n    var unsetDeep = function(obj, deepKey) {                                                                  // 163\n      var split = deepKey.split('.');                                                                         // 164\n      var initialKeys = _.initial(split);                                                                     // 165\n      var lastKey = _.last(split);                                                                            // 166\n      return delete getDeep(obj, initialKeys)[lastKey];                                                       // 167\n    };                                                                                                        // 168\n                                                                                                              // 169\n    var getDeep = function(obj, keys) {                                                                       // 170\n      return keys.reduce(function(subObj, k) {                                                                // 171\n        return subObj[k];                                                                                     // 172\n      }, obj);                                                                                                // 173\n    };                                                                                                        // 174\n                                                                                                              // 175\n    var isHash = function(obj) {                                                                              // 176\n      return _.isObject(obj) &&                                                                               // 177\n             Object.getPrototypeOf(obj) === Object.prototype;                                                 // 178\n    };                                                                                                        // 179\n                                                                                                              // 180\n    var isNumStr = function(str) {                                                                            // 181\n      return str.match(/^\\d+$/);                                                                              // 182\n    };                                                                                                        // 183\n                                                                                                              // 184\n    return diffArray;                                                                                         // 185\n}]);                                                                                                          // 186\n                                                                                                              // 187\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 196\n                                                                                                                     // 197\n}).call(this);                                                                                                       // 198\n                                                                                                                     // 199\n                                                                                                                     // 200\n                                                                                                                     // 201\n                                                                                                                     // 202\n                                                                                                                     // 203\n                                                                                                                     // 204\n(function(){                                                                                                         // 205\n                                                                                                                     // 206\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 207\n//                                                                                                            //     // 208\n// packages/angular/lib/get-updates.js                                                                        //     // 209\n//                                                                                                            //     // 210\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 211\n                                                                                                              //     // 212\n'use strict';                                                                                                 // 1   // 213\n                                                                                                              // 2   // 214\n// https://github.com/DAB0mB/get-updates                                                                      // 3   // 215\n(function() {                                                                                                 // 4   // 216\n  var module = angular.module('getUpdates', []);                                                              // 5   // 217\n                                                                                                              // 6   // 218\n  var utils = (function() {                                                                                   // 7   // 219\n    var rip = function(obj, level) {                                                                          // 8   // 220\n      if (level < 1) return {};                                                                               // 9   // 221\n                                                                                                              // 10  // 222\n      return _.reduce(obj, function(clone, v, k) {                                                            // 11  // 223\n        v = _.isObject(v) ? rip(v, --level) : v;                                                              // 12  // 224\n        clone[k] = v;                                                                                         // 13  // 225\n        return clone;                                                                                         // 14  // 226\n      }, {});                                                                                                 // 15  // 227\n    };                                                                                                        // 16  // 228\n                                                                                                              // 17  // 229\n    var toPaths = function(obj) {                                                                             // 18  // 230\n      var keys = getKeyPaths(obj);                                                                            // 19  // 231\n      var values = getDeepValues(obj);                                                                        // 20  // 232\n      return _.object(keys, values);                                                                          // 21  // 233\n    };                                                                                                        // 22  // 234\n                                                                                                              // 23  // 235\n    var getKeyPaths = function(obj) {                                                                         // 24  // 236\n      var keys = _.keys(obj).map(function(k) {                                                                // 25  // 237\n        var v = obj[k];                                                                                       // 26  // 238\n        if (!_.isObject(v) || _.isEmpty(v)) return k;                                                         // 27  // 239\n                                                                                                              // 28  // 240\n        return getKeyPaths(v).map(function(subKey) {                                                          // 29  // 241\n          return k + '.' + subKey;                                                                            // 30  // 242\n        });                                                                                                   // 31  // 243\n      });                                                                                                     // 32  // 244\n                                                                                                              // 33  // 245\n      return _.flatten(keys);                                                                                 // 34  // 246\n    };                                                                                                        // 35  // 247\n                                                                                                              // 36  // 248\n    var getDeepValues = function(obj) {                                                                       // 37  // 249\n      var values = _.values(obj).map(function(v) {                                                            // 38  // 250\n        if (!_.isObject(v) || _.isEmpty(v))                                                                   // 39  // 251\n          return v;                                                                                           // 40  // 252\n        else                                                                                                  // 41  // 253\n          return getDeepValues(v);                                                                            // 42  // 254\n      });                                                                                                     // 43  // 255\n                                                                                                              // 44  // 256\n      return flatten(values);                                                                                 // 45  // 257\n    };                                                                                                        // 46  // 258\n                                                                                                              // 47  // 259\n    var flatten = function(arr) {                                                                             // 48  // 260\n      return arr.reduce(function(flattened, v, i) {                                                           // 49  // 261\n        if (_.isArray(v) && !_.isEmpty(v))                                                                    // 50  // 262\n          flattened.push.apply(flattened, flatten(v));                                                        // 51  // 263\n        else                                                                                                  // 52  // 264\n          flattened.push(v);                                                                                  // 53  // 265\n                                                                                                              // 54  // 266\n        return flattened;                                                                                     // 55  // 267\n      }, []);                                                                                                 // 56  // 268\n    };                                                                                                        // 57  // 269\n                                                                                                              // 58  // 270\n    var setFilled = function(obj, k, v) {                                                                     // 59  // 271\n      if (!_.isEmpty(v)) obj[k] = v;                                                                          // 60  // 272\n    };                                                                                                        // 61  // 273\n                                                                                                              // 62  // 274\n    var assert = function(result, msg) {                                                                      // 63  // 275\n      if (!result) throwErr(msg);                                                                             // 64  // 276\n    };                                                                                                        // 65  // 277\n                                                                                                              // 66  // 278\n    var throwErr = function(msg) {                                                                            // 67  // 279\n      throw Error('get-updates error - ' + msg);                                                              // 68  // 280\n    };                                                                                                        // 69  // 281\n                                                                                                              // 70  // 282\n    return {                                                                                                  // 71  // 283\n      rip: rip,                                                                                               // 72  // 284\n      toPaths: toPaths,                                                                                       // 73  // 285\n      getKeyPaths: getKeyPaths,                                                                               // 74  // 286\n      getDeepValues: getDeepValues,                                                                           // 75  // 287\n      setFilled: setFilled,                                                                                   // 76  // 288\n      assert: assert,                                                                                         // 77  // 289\n      throwErr: throwErr                                                                                      // 78  // 290\n    };                                                                                                        // 79  // 291\n  })();                                                                                                       // 80  // 292\n                                                                                                              // 81  // 293\n  var getDifference = (function() {                                                                           // 82  // 294\n    var getDifference = function(src, dst, isShallow) {                                                       // 83  // 295\n      var level;                                                                                              // 84  // 296\n                                                                                                              // 85  // 297\n      if (isShallow > 1)                                                                                      // 86  // 298\n        level = isShallow;                                                                                    // 87  // 299\n      else if (isShallow)                                                                                     // 88  // 300\n        level = 1;                                                                                            // 89  // 301\n                                                                                                              // 90  // 302\n      if (level) {                                                                                            // 91  // 303\n        src = utils.rip(src, level);                                                                          // 92  // 304\n        dst = utils.rip(dst, level);                                                                          // 93  // 305\n      }                                                                                                       // 94  // 306\n                                                                                                              // 95  // 307\n      return compare(src, dst);                                                                               // 96  // 308\n    };                                                                                                        // 97  // 309\n                                                                                                              // 98  // 310\n    var compare = function(src, dst) {                                                                        // 99  // 311\n      var srcKeys = _.keys(src);                                                                              // 100\n      var dstKeys = _.keys(dst);                                                                              // 101\n                                                                                                              // 102\n      var keys = _.chain([])                                                                                  // 103\n        .concat(srcKeys)                                                                                      // 104\n        .concat(dstKeys)                                                                                      // 105\n        .uniq()                                                                                               // 106\n        .without('$$hashKey')                                                                                 // 107\n        .value();                                                                                             // 108\n                                                                                                              // 109\n      return keys.reduce(function(diff, k) {                                                                  // 110\n        var srcValue = src[k];                                                                                // 111\n        var dstValue = dst[k];                                                                                // 112\n                                                                                                              // 113\n        if (_.isDate(srcValue) && _.isDate(dstValue)) {                                                       // 114\n          if (srcValue.getTime() != dstValue.getTime()) diff[k] = dstValue;                                   // 115\n        }                                                                                                     // 116\n                                                                                                              // 117\n        if (_.isObject(srcValue) && _.isObject(dstValue)) {                                                   // 118\n          var valueDiff = getDifference(srcValue, dstValue);                                                  // 119\n          utils.setFilled(diff, k, valueDiff);                                                                // 120\n        }                                                                                                     // 121\n                                                                                                              // 122\n        else if (srcValue !== dstValue) {                                                                     // 123\n          diff[k] = dstValue;                                                                                 // 124\n        }                                                                                                     // 125\n                                                                                                              // 126\n        return diff;                                                                                          // 127\n      }, {});                                                                                                 // 128\n    };                                                                                                        // 129\n                                                                                                              // 130\n    return getDifference;                                                                                     // 131\n  })();                                                                                                       // 132\n                                                                                                              // 133\n  var getUpdates = (function() {                                                                              // 134\n    var getUpdates = function(src, dst, isShallow) {                                                          // 135\n      utils.assert(_.isObject(src), 'first argument must be an object');                                      // 136\n      utils.assert(_.isObject(dst), 'second argument must be an object');                                     // 137\n                                                                                                              // 138\n      var diff = getDifference(src, dst, isShallow);                                                          // 139\n      var paths = utils.toPaths(diff);                                                                        // 140\n                                                                                                              // 141\n      var set = createSet(paths);                                                                             // 142\n      var unset = createUnset(paths);                                                                         // 143\n      var pull = createPull(unset);                                                                           // 144\n                                                                                                              // 145\n      var updates = {};                                                                                       // 146\n      utils.setFilled(updates, '$set', set);                                                                  // 147\n      utils.setFilled(updates, '$unset', unset);                                                              // 148\n      utils.setFilled(updates, '$pull', pull);                                                                // 149\n                                                                                                              // 150\n      return updates;                                                                                         // 151\n    };                                                                                                        // 152\n                                                                                                              // 153\n    var createSet = function(paths) {                                                                         // 154\n      var undefinedKeys = getUndefinedKeys(paths);                                                            // 155\n      return _.omit(paths, undefinedKeys);                                                                    // 156\n    };                                                                                                        // 157\n                                                                                                              // 158\n    var createUnset = function(paths) {                                                                       // 159\n      var undefinedKeys = getUndefinedKeys(paths);                                                            // 160\n      var unset = _.pick(paths, undefinedKeys);                                                               // 161\n                                                                                                              // 162\n      return _.reduce(unset, function(result, v, k) {                                                         // 163\n        result[k] = true;                                                                                     // 164\n        return result;                                                                                        // 165\n      }, {});                                                                                                 // 166\n    };                                                                                                        // 167\n                                                                                                              // 168\n    var createPull = function(unset) {                                                                        // 169\n      var arrKeyPaths = _.keys(unset).map(function(k) {                                                       // 170\n        var split = k.match(/(.*)\\.\\d+$/);                                                                    // 171\n        return split && split[1];                                                                             // 172\n      });                                                                                                     // 173\n                                                                                                              // 174\n      return _.compact(arrKeyPaths).reduce(function(pull, k) {                                                // 175\n        pull[k] = null;                                                                                       // 176\n        return pull;                                                                                          // 177\n      }, {});                                                                                                 // 178\n    };                                                                                                        // 179\n                                                                                                              // 180\n    var getUndefinedKeys = function(obj) {                                                                    // 181\n      return _.keys(obj).filter(function (k) {                                                                // 182\n        var v = obj[k];                                                                                       // 183\n        return _.isUndefined(v);                                                                              // 184\n      });                                                                                                     // 185\n    };                                                                                                        // 186\n                                                                                                              // 187\n    return getUpdates;                                                                                        // 188\n  })();                                                                                                       // 189\n                                                                                                              // 190\n  module.value('getUpdates', getUpdates);                                                                     // 191\n})();                                                                                                         // 192\n                                                                                                              // 193\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 406\n                                                                                                                     // 407\n}).call(this);                                                                                                       // 408\n                                                                                                                     // 409\n                                                                                                                     // 410\n                                                                                                                     // 411\n                                                                                                                     // 412\n                                                                                                                     // 413\n                                                                                                                     // 414\n(function(){                                                                                                         // 415\n                                                                                                                     // 416\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 417\n//                                                                                                            //     // 418\n// packages/angular/modules/angular-meteor-subscribe.js                                                       //     // 419\n//                                                                                                            //     // 420\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 421\n                                                                                                              //     // 422\n'use strict';                                                                                                 // 1   // 423\nvar angularMeteorSubscribe = angular.module('angular-meteor.subscribe', []);                                  // 2   // 424\n                                                                                                              // 3   // 425\nangularMeteorSubscribe.service('$meteorSubscribe', ['$q',                                                     // 4   // 426\n  function ($q) {                                                                                             // 5   // 427\n    var self = this;                                                                                          // 6   // 428\n                                                                                                              // 7   // 429\n    this._subscribe = function(scope, deferred, args) {                                                       // 8   // 430\n      var subscription = null;                                                                                // 9   // 431\n      var lastArg = args[args.length - 1];                                                                    // 10  // 432\n                                                                                                              // 11  // 433\n      // User supplied onStop callback                                                                        // 12  // 434\n      // save it for later use and remove                                                                     // 13  // 435\n      // from subscription arguments                                                                          // 14  // 436\n      if (angular.isObject(lastArg) &&                                                                        // 15  // 437\n          angular.isFunction(lastArg.onStop)) {                                                               // 16  // 438\n        var onStop = lastArg.onStop;                                                                          // 17  // 439\n                                                                                                              // 18  // 440\n        args.pop();                                                                                           // 19  // 441\n      }                                                                                                       // 20  // 442\n                                                                                                              // 21  // 443\n      args.push({                                                                                             // 22  // 444\n        onReady: function() {                                                                                 // 23  // 445\n          deferred.resolve(subscription);                                                                     // 24  // 446\n        },                                                                                                    // 25  // 447\n        onStop: function(err) {                                                                               // 26  // 448\n          if (!deferred.promise.$$state.status) {                                                             // 27  // 449\n            if (err)                                                                                          // 28  // 450\n              deferred.reject(err);                                                                           // 29  // 451\n            else                                                                                              // 30  // 452\n              deferred.reject(new Meteor.Error(\"Subscription Stopped\",                                        // 31  // 453\n                \"Subscription stopped by a call to stop method. Either by the client or by the server.\"));    // 32  // 454\n          } else if (onStop)                                                                                  // 33  // 455\n            // After promise was resolved or rejected                                                         // 34  // 456\n            // call user supplied onStop callback.                                                            // 35  // 457\n            onStop.apply(this, Array.prototype.slice.call(arguments));                                        // 36  // 458\n                                                                                                              // 37  // 459\n        }                                                                                                     // 38  // 460\n      });                                                                                                     // 39  // 461\n                                                                                                              // 40  // 462\n      subscription =  Meteor.subscribe.apply(scope, args);                                                    // 41  // 463\n                                                                                                              // 42  // 464\n      return subscription;                                                                                    // 43  // 465\n    };                                                                                                        // 44  // 466\n                                                                                                              // 45  // 467\n    this.subscribe = function(){                                                                              // 46  // 468\n      var deferred = $q.defer();                                                                              // 47  // 469\n      var args = Array.prototype.slice.call(arguments);                                                       // 48  // 470\n      var subscription = null;                                                                                // 49  // 471\n                                                                                                              // 50  // 472\n      self._subscribe(this, deferred, args);                                                                  // 51  // 473\n                                                                                                              // 52  // 474\n      return deferred.promise;                                                                                // 53  // 475\n    };                                                                                                        // 54  // 476\n  }]);                                                                                                        // 55  // 477\n                                                                                                              // 56  // 478\nangularMeteorSubscribe.run(['$rootScope', '$q', '$meteorSubscribe',                                           // 57  // 479\n  function($rootScope, $q, $meteorSubscribe) {                                                                // 58  // 480\n    Object.getPrototypeOf($rootScope).$meteorSubscribe = function() {                                         // 59  // 481\n      var deferred = $q.defer();                                                                              // 60  // 482\n      var args = Array.prototype.slice.call(arguments);                                                       // 61  // 483\n                                                                                                              // 62  // 484\n      var subscription = $meteorSubscribe._subscribe(this, deferred, args);                                   // 63  // 485\n                                                                                                              // 64  // 486\n      this.$on('$destroy', function() {                                                                       // 65  // 487\n        subscription.stop();                                                                                  // 66  // 488\n      });                                                                                                     // 67  // 489\n                                                                                                              // 68  // 490\n      return deferred.promise;                                                                                // 69  // 491\n    };                                                                                                        // 70  // 492\n}]);                                                                                                          // 71  // 493\n                                                                                                              // 72  // 494\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 495\n                                                                                                                     // 496\n}).call(this);                                                                                                       // 497\n                                                                                                                     // 498\n                                                                                                                     // 499\n                                                                                                                     // 500\n                                                                                                                     // 501\n                                                                                                                     // 502\n                                                                                                                     // 503\n(function(){                                                                                                         // 504\n                                                                                                                     // 505\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 506\n//                                                                                                            //     // 507\n// packages/angular/modules/angular-meteor-stopper.js                                                         //     // 508\n//                                                                                                            //     // 509\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 510\n                                                                                                              //     // 511\n'use strict';                                                                                                 // 1   // 512\n                                                                                                              // 2   // 513\nvar angularMeteorStopper = angular.module('angular-meteor.stopper',                                           // 3   // 514\n  ['angular-meteor.subscribe']);                                                                              // 4   // 515\n                                                                                                              // 5   // 516\nangularMeteorStopper.factory('$meteorStopper', ['$q', '$meteorSubscribe',                                     // 6   // 517\n  function($q, $meteorSubscribe) {                                                                            // 7   // 518\n    function $meteorStopper($meteorEntity) {                                                                  // 8   // 519\n      return function() {                                                                                     // 9   // 520\n        var args = Array.prototype.slice.call(arguments);                                                     // 10  // 521\n        var meteorEntity = $meteorEntity.apply(this, args);                                                   // 11  // 522\n                                                                                                              // 12  // 523\n        angular.extend(meteorEntity, $meteorStopper);                                                         // 13  // 524\n        meteorEntity.$$scope = this;                                                                          // 14  // 525\n                                                                                                              // 15  // 526\n        this.$on('$destroy', function () {                                                                    // 16  // 527\n          meteorEntity.stop();                                                                                // 17  // 528\n          if (meteorEntity.subscription) meteorEntity.subscription.stop();                                    // 18  // 529\n        });                                                                                                   // 19  // 530\n                                                                                                              // 20  // 531\n        return meteorEntity;                                                                                  // 21  // 532\n      };                                                                                                      // 22  // 533\n    }                                                                                                         // 23  // 534\n                                                                                                              // 24  // 535\n    $meteorStopper.subscribe = function() {                                                                   // 25  // 536\n      var args = Array.prototype.slice.call(arguments);                                                       // 26  // 537\n      this.subscription = $meteorSubscribe._subscribe(this.$$scope, $q.defer(), args);                        // 27  // 538\n      return this;                                                                                            // 28  // 539\n    };                                                                                                        // 29  // 540\n                                                                                                              // 30  // 541\n    return $meteorStopper;                                                                                    // 31  // 542\n}]);                                                                                                          // 32  // 543\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 544\n                                                                                                                     // 545\n}).call(this);                                                                                                       // 546\n                                                                                                                     // 547\n                                                                                                                     // 548\n                                                                                                                     // 549\n                                                                                                                     // 550\n                                                                                                                     // 551\n                                                                                                                     // 552\n(function(){                                                                                                         // 553\n                                                                                                                     // 554\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 555\n//                                                                                                            //     // 556\n// packages/angular/modules/angular-meteor-collection.js                                                      //     // 557\n//                                                                                                            //     // 558\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 559\n                                                                                                              //     // 560\n'use strict';                                                                                                 // 1   // 561\n                                                                                                              // 2   // 562\nvar angularMeteorCollection = angular.module('angular-meteor.collection',                                     // 3   // 563\n  ['angular-meteor.stopper', 'angular-meteor.subscribe', 'angular-meteor.utils', 'diffArray']);               // 4   // 564\n                                                                                                              // 5   // 565\n// The reason angular meteor collection is a factory function and not something                               // 6   // 566\n// that inherit from array comes from here:                                                                   // 7   // 567\n// http://perfectionkills.com/how-ecmascript-5-still-does-not-allow-to-subclass-an-array/                     // 8   // 568\n// We went with the direct extensions approach.                                                               // 9   // 569\nangularMeteorCollection.factory('AngularMeteorCollection', [                                                  // 10  // 570\n  '$q', '$meteorSubscribe', '$meteorUtils', '$rootScope', '$timeout', 'diffArray',                            // 11  // 571\n  function($q, $meteorSubscribe, $meteorUtils, $rootScope, $timeout, diffArray) {                             // 12  // 572\n    function AngularMeteorCollection(curDefFunc, collection, diffArrayFunc, autoClientSave) {                 // 13  // 573\n      var data = [];                                                                                          // 14  // 574\n      // Server backup data to evaluate what changes come from client                                         // 15  // 575\n      // after each server update.                                                                            // 16  // 576\n      data._serverBackup = [];                                                                                // 17  // 577\n      // Array differ function.                                                                               // 18  // 578\n      data._diffArrayFunc = diffArrayFunc;                                                                    // 19  // 579\n      // Handler of the cursor observer.                                                                      // 20  // 580\n      data._hObserve = null;                                                                                  // 21  // 581\n      // On new cursor autorun handler                                                                        // 22  // 582\n      // (autorun for reactive variables).                                                                    // 23  // 583\n      data._hNewCurAutorun = null;                                                                            // 24  // 584\n      // On new data autorun handler                                                                          // 25  // 585\n      // (autorun for cursor.fetch).                                                                          // 26  // 586\n      data._hDataAutorun = null;                                                                              // 27  // 587\n                                                                                                              // 28  // 588\n      if (angular.isDefined(collection)) {                                                                    // 29  // 589\n        data.$$collection = collection;                                                                       // 30  // 590\n      } else {                                                                                                // 31  // 591\n        var cursor = curDefFunc();                                                                            // 32  // 592\n        data.$$collection = $meteorUtils.getCollectionByName(cursor.collection.name);                         // 33  // 593\n      }                                                                                                       // 34  // 594\n                                                                                                              // 35  // 595\n      angular.extend(data, AngularMeteorCollection);                                                          // 36  // 596\n      data._startCurAutorun(curDefFunc, autoClientSave);                                                      // 37  // 597\n                                                                                                              // 38  // 598\n      return data;                                                                                            // 39  // 599\n    }                                                                                                         // 40  // 600\n                                                                                                              // 41  // 601\n    AngularMeteorCollection._startCurAutorun = function(curDefFunc, autoClientSave) {                         // 42  // 602\n      var self = this;                                                                                        // 43  // 603\n      self._hNewCurAutorun = Tracker.autorun(function() {                                                     // 44  // 604\n        // When the reactive func gets recomputated we need to stop any previous                              // 45  // 605\n        // observeChanges.                                                                                    // 46  // 606\n        Tracker.onInvalidate(function() {                                                                     // 47  // 607\n          self._stopCursor();                                                                                 // 48  // 608\n        });                                                                                                   // 49  // 609\n        if (autoClientSave) {                                                                                 // 50  // 610\n          self._setAutoClientSave();                                                                          // 51  // 611\n        }                                                                                                     // 52  // 612\n        self._updateCursor(curDefFunc(), autoClientSave);                                                     // 53  // 613\n      });                                                                                                     // 54  // 614\n    };                                                                                                        // 55  // 615\n                                                                                                              // 56  // 616\n    AngularMeteorCollection.subscribe = function() {                                                          // 57  // 617\n      $meteorSubscribe.subscribe.apply(this, arguments);                                                      // 58  // 618\n      return this;                                                                                            // 59  // 619\n    };                                                                                                        // 60  // 620\n                                                                                                              // 61  // 621\n    AngularMeteorCollection.save = function(docs, useUnsetModifier) {                                         // 62  // 622\n      // save whole collection                                                                                // 63  // 623\n      if (!docs) docs = this;                                                                                 // 64  // 624\n      // save single doc                                                                                      // 65  // 625\n      docs = [].concat(docs);                                                                                 // 66  // 626\n                                                                                                              // 67  // 627\n      var promises = docs.map(function(doc) {                                                                 // 68  // 628\n        return this._upsertDoc(doc, useUnsetModifier);                                                        // 69  // 629\n      }, this);                                                                                               // 70  // 630\n                                                                                                              // 71  // 631\n      var allPromise = $q.all(promises);                                                                      // 72  // 632\n                                                                                                              // 73  // 633\n      allPromise.finally(function() {                                                                         // 74  // 634\n        // calls digestion loop with no conflicts                                                             // 75  // 635\n        $timeout(angular.noop);                                                                               // 76  // 636\n      });                                                                                                     // 77  // 637\n                                                                                                              // 78  // 638\n      return allPromise;                                                                                      // 79  // 639\n    };                                                                                                        // 80  // 640\n                                                                                                              // 81  // 641\n    AngularMeteorCollection._upsertDoc = function(doc, useUnsetModifier) {                                    // 82  // 642\n      var deferred = $q.defer();                                                                              // 83  // 643\n      var collection = this.$$collection;                                                                     // 84  // 644\n      var upsertResult = function(action, _id) {                                                              // 85  // 645\n        return {_id: _id, action: action }                                                                    // 86  // 646\n      }                                                                                                       // 87  // 647\n      var fulfill, createFulfill;                                                                             // 88  // 648\n                                                                                                              // 89  // 649\n      // delete $$hashkey                                                                                     // 90  // 650\n      doc = $meteorUtils.stripDollarPrefixedKeys(doc);                                                        // 91  // 651\n      var docId = doc._id;                                                                                    // 92  // 652\n      var isExist = collection.findOne(docId);                                                                // 93  // 653\n                                                                                                              // 94  // 654\n      // update                                                                                               // 95  // 655\n      if (isExist) {                                                                                          // 96  // 656\n        // Deletes _id property (from the copy) so that                                                       // 97  // 657\n        // it can be $set using update.                                                                       // 98  // 658\n        delete doc._id;                                                                                       // 99  // 659\n        var modifier = useUnsetModifier ? {$unset: doc} : {$set: doc};                                        // 100\n        createFulfill = _.partial(upsertResult, 'updated');                                                   // 101\n        fulfill = $meteorUtils.fulfill(deferred, null, createFulfill);                                        // 102\n        // NOTE: do not use #upsert() method, since it does not exist in some collections                     // 103\n        collection.update(docId, modifier, fulfill);                                                          // 104\n      // insert                                                                                               // 105\n      } else {                                                                                                // 106\n        createFulfill = _.partial(upsertResult, 'inserted');                                                  // 107\n        fulfill = $meteorUtils.fulfill(deferred, null, createFulfill);                                        // 108\n        collection.insert(doc, fulfill);                                                                      // 109\n      }                                                                                                       // 110\n                                                                                                              // 111\n      return deferred.promise;                                                                                // 112\n    };                                                                                                        // 113\n                                                                                                              // 114\n    AngularMeteorCollection.remove = function(keyOrDocs) {                                                    // 115\n      var keys;                                                                                               // 116\n      // remove whole collection                                                                              // 117\n      if (!keyOrDocs) {                                                                                       // 118\n        keys = _.pluck(this, '_id');                                                                          // 119\n      } else {                                                                                                // 120\n        // remove docs                                                                                        // 121\n        keys = _.map([].concat(keyOrDocs), function(keyOrDoc) {                                               // 122\n          return keyOrDoc._id || keyOrDoc;                                                                    // 123\n        });                                                                                                   // 124\n      }                                                                                                       // 125\n      // Checks if all keys are correct.                                                                      // 126\n      check(keys, [Match.OneOf(String, Mongo.ObjectID)]);                                                     // 127\n                                                                                                              // 128\n      var promises = keys.map(function(key) {                                                                 // 129\n        return this._removeDoc(key);                                                                          // 130\n      }, this);                                                                                               // 131\n                                                                                                              // 132\n      var allPromise = $q.all(promises);                                                                      // 133\n                                                                                                              // 134\n      allPromise.finally(function() {                                                                         // 135\n        $timeout(angular.noop);                                                                               // 136\n      });                                                                                                     // 137\n                                                                                                              // 138\n      return allPromise;                                                                                      // 139\n    };                                                                                                        // 140\n                                                                                                              // 141\n    AngularMeteorCollection._removeDoc = function(id) {                                                       // 142\n      var deferred = $q.defer();                                                                              // 143\n      var collection = this.$$collection;                                                                     // 144\n      var fulfill = $meteorUtils.fulfill(deferred, null, { _id: id, action: 'removed' });                     // 145\n      collection.remove(id, fulfill);                                                                         // 146\n      return deferred.promise;                                                                                // 147\n    };                                                                                                        // 148\n                                                                                                              // 149\n    AngularMeteorCollection._updateCursor = function(cursor, autoClientSave) {                                // 150\n      var self = this;                                                                                        // 151\n                                                                                                              // 152\n      // XXX - consider adding an option for a non-orderd result                                              // 153\n      // for faster performance.                                                                              // 154\n      if (self._hObserve) {                                                                                   // 155\n        self._hObserve.stop();                                                                                // 156\n        self._hDataAutorun.stop();                                                                            // 157\n      }                                                                                                       // 158\n                                                                                                              // 159\n      var serverMode = false;                                                                                 // 160\n      function setServerUpdateMode(name) {                                                                    // 161\n        serverMode = true;                                                                                    // 162\n        // To simplify server update logic, we don't follow                                                   // 163\n        // updates from the client at the same time.                                                          // 164\n        self._unsetAutoClientSave();                                                                          // 165\n      }                                                                                                       // 166\n                                                                                                              // 167\n      var hUnsetTimeout = null;                                                                               // 168\n      // Here we use $timeout to combine multiple updates that go                                             // 169\n      // each one after another.                                                                              // 170\n      function unsetServerUpdateMode() {                                                                      // 171\n        if (hUnsetTimeout) {                                                                                  // 172\n          $timeout.cancel(hUnsetTimeout);                                                                     // 173\n          hUnsetTimeout = null;                                                                               // 174\n        }                                                                                                     // 175\n        hUnsetTimeout = $timeout(function() {                                                                 // 176\n          serverMode = false;                                                                                 // 177\n          // Finds updates that was potentially done from the client side                                     // 178\n          // and saves them.                                                                                  // 179\n          var changes = collectionUtils.diff(self, self._serverBackup,                                        // 180\n            self._diffArrayFunc);                                                                             // 181\n          self._saveChanges(changes);                                                                         // 182\n          // After, continues following client updates.                                                       // 183\n          if (autoClientSave) {                                                                               // 184\n            self._setAutoClientSave();                                                                        // 185\n          }                                                                                                   // 186\n        }, 0);                                                                                                // 187\n      }                                                                                                       // 188\n                                                                                                              // 189\n      this._hObserve = cursor.observe({                                                                       // 190\n        addedAt: function(doc, atIndex) {                                                                     // 191\n          self.splice(atIndex, 0, doc);                                                                       // 192\n          self._serverBackup.splice(atIndex, 0, doc);                                                         // 193\n          setServerUpdateMode();                                                                              // 194\n        },                                                                                                    // 195\n                                                                                                              // 196\n        changedAt: function(doc, oldDoc, atIndex) {                                                           // 197\n          diffArray.deepCopyChanges(self[atIndex], doc);                                                      // 198\n          diffArray.deepCopyRemovals(self[atIndex], doc);                                                     // 199\n          self._serverBackup[atIndex] = self[atIndex];                                                        // 200\n          setServerUpdateMode();                                                                              // 201\n        },                                                                                                    // 202\n                                                                                                              // 203\n        movedTo: function(doc, fromIndex, toIndex) {                                                          // 204\n          self.splice(fromIndex, 1);                                                                          // 205\n          self.splice(toIndex, 0, doc);                                                                       // 206\n          self._serverBackup.splice(fromIndex, 1);                                                            // 207\n          self._serverBackup.splice(toIndex, 0, doc);                                                         // 208\n          setServerUpdateMode();                                                                              // 209\n        },                                                                                                    // 210\n                                                                                                              // 211\n        removedAt: function(oldDoc) {                                                                         // 212\n          var removedIndex = collectionUtils.findIndexById(self, oldDoc);                                     // 213\n                                                                                                              // 214\n          if (removedIndex != -1) {                                                                           // 215\n            self.splice(removedIndex, 1);                                                                     // 216\n            self._serverBackup.splice(removedIndex, 1);                                                       // 217\n            setServerUpdateMode();                                                                            // 218\n          } else {                                                                                            // 219\n            // If it's been removed on client then it's already not in collection                             // 220\n            // itself but still is in the _serverBackup.                                                      // 221\n            removedIndex = collectionUtils.findIndexById(self._serverBackup, oldDoc);                         // 222\n                                                                                                              // 223\n            if (removedIndex != -1) {                                                                         // 224\n              self._serverBackup.splice(removedIndex, 1);                                                     // 225\n            }                                                                                                 // 226\n          }                                                                                                   // 227\n        }                                                                                                     // 228\n      });                                                                                                     // 229\n                                                                                                              // 230\n      this._hDataAutorun = Tracker.autorun(function() {                                                       // 231\n        cursor.fetch();                                                                                       // 232\n        if (serverMode) {                                                                                     // 233\n          unsetServerUpdateMode();                                                                            // 234\n        }                                                                                                     // 235\n      });                                                                                                     // 236\n    };                                                                                                        // 237\n                                                                                                              // 238\n    AngularMeteorCollection.stop = function() {                                                               // 239\n      this._stopCursor();                                                                                     // 240\n      this._hNewCurAutorun.stop();                                                                            // 241\n    };                                                                                                        // 242\n                                                                                                              // 243\n    AngularMeteorCollection._stopCursor = function() {                                                        // 244\n      this._unsetAutoClientSave();                                                                            // 245\n                                                                                                              // 246\n      if (this._hObserve) {                                                                                   // 247\n        this._hObserve.stop();                                                                                // 248\n        this._hDataAutorun.stop();                                                                            // 249\n      }                                                                                                       // 250\n                                                                                                              // 251\n      this.splice(0);                                                                                         // 252\n      this._serverBackup.splice(0);                                                                           // 253\n    };                                                                                                        // 254\n                                                                                                              // 255\n    AngularMeteorCollection._unsetAutoClientSave = function(name) {                                           // 256\n      if (this._hRegAutoBind) {                                                                               // 257\n        this._hRegAutoBind();                                                                                 // 258\n        this._hRegAutoBind = null;                                                                            // 259\n      }                                                                                                       // 260\n    };                                                                                                        // 261\n                                                                                                              // 262\n    AngularMeteorCollection._setAutoClientSave = function() {                                                 // 263\n      var self = this;                                                                                        // 264\n                                                                                                              // 265\n      // Always unsets auto save to keep only one $watch handler.                                             // 266\n      self._unsetAutoClientSave();                                                                            // 267\n                                                                                                              // 268\n      self._hRegAutoBind = $rootScope.$watch(function() {                                                     // 269\n        return self;                                                                                          // 270\n      }, function(nItems, oItems) {                                                                           // 271\n        if (nItems === oItems) return;                                                                        // 272\n                                                                                                              // 273\n        self._unsetAutoClientSave();                                                                          // 274\n        var changes = collectionUtils.diff(self, oItems,                                                      // 275\n          self._diffArrayFunc);                                                                               // 276\n        self._saveChanges(changes);                                                                           // 277\n        self._setAutoClientSave();                                                                            // 278\n      }, true);                                                                                               // 279\n    };                                                                                                        // 280\n                                                                                                              // 281\n    AngularMeteorCollection._saveChanges = function(changes) {                                                // 282\n      // First applies changes to the collection itself.                                                      // 283\n      var newDocs = [];                                                                                       // 284\n      for (var itemInd = changes.added.length - 1; itemInd >= 0; itemInd--) {                                 // 285\n        this.splice(changes.added[itemInd].index, 1);                                                         // 286\n        newDocs.push(changes.added[itemInd].item);                                                            // 287\n      }                                                                                                       // 288\n      // Then saves all new docs in bulk.                                                                     // 289\n      if (newDocs.length) {                                                                                   // 290\n        this.save(newDocs);                                                                                   // 291\n      }                                                                                                       // 292\n                                                                                                              // 293\n      // Collects docs to remove.                                                                             // 294\n      var removeDocs = [];                                                                                    // 295\n      for (var itemInd = 0; itemInd < changes.removed.length; itemInd++) {                                    // 296\n        removeDocs.push(changes.removed[itemInd].item);                                                       // 297\n      }                                                                                                       // 298\n      // Removes docs in bulk.                                                                                // 299\n      if (removeDocs.length) {                                                                                // 300\n        this.remove(removeDocs);                                                                              // 301\n      }                                                                                                       // 302\n                                                                                                              // 303\n      // Collects set and unset changes.                                                                      // 304\n      var setDocs = [], unsetDocs = [];                                                                       // 305\n      for (var itemInd = 0; itemInd < changes.changed.length; itemInd++) {                                    // 306\n        var change = changes.changed[itemInd];                                                                // 307\n        if (change.setDiff) {                                                                                 // 308\n          setDocs.push(change.setDiff);                                                                       // 309\n        }                                                                                                     // 310\n        if (change.unsetDiff) {                                                                               // 311\n          unsetDocs.push(change.unsetDiff);                                                                   // 312\n        }                                                                                                     // 313\n      }                                                                                                       // 314\n      // Then saves all changes in bulk.                                                                      // 315\n      if (setDocs.length) {                                                                                   // 316\n        this.save(setDocs);                                                                                   // 317\n      }                                                                                                       // 318\n      if (unsetDocs.length) {                                                                                 // 319\n        this.save(unsetDocs, true);                                                                           // 320\n      }                                                                                                       // 321\n    };                                                                                                        // 322\n                                                                                                              // 323\n    return AngularMeteorCollection;                                                                           // 324\n}]);                                                                                                          // 325\n                                                                                                              // 326\nangularMeteorCollection.factory('$meteorCollectionFS', ['$meteorCollection', 'diffArray',                     // 327\n  function($meteorCollection, diffArray) {                                                                    // 328\n    function $meteorCollectionFS(reactiveFunc, autoClientSave, collection) {                                  // 329\n      return new $meteorCollection(reactiveFunc, autoClientSave, collection, noNestedDiffArray);              // 330\n    }                                                                                                         // 331\n                                                                                                              // 332\n    var noNestedDiffArray = function(lastSeqArray, seqArray, callbacks) {                                     // 333\n      return diffArray(lastSeqArray, seqArray, callbacks, true);                                              // 334\n    };                                                                                                        // 335\n                                                                                                              // 336\n    return $meteorCollectionFS;                                                                               // 337\n}]);                                                                                                          // 338\n                                                                                                              // 339\nangularMeteorCollection.factory('$meteorCollection', [                                                        // 340\n  'AngularMeteorCollection', '$rootScope', 'diffArray',                                                       // 341\n  function(AngularMeteorCollection, $rootScope, diffArray) {                                                  // 342\n    function $meteorCollection(reactiveFunc, autoClientSave, collection, diffArrayFunc) {                     // 343\n      // Validate parameters                                                                                  // 344\n      if (!reactiveFunc) {                                                                                    // 345\n        throw new TypeError('The first argument of $meteorCollection is undefined.');                         // 346\n      }                                                                                                       // 347\n                                                                                                              // 348\n      if (!(angular.isFunction(reactiveFunc) || angular.isFunction(reactiveFunc.find))) {                     // 349\n        throw new TypeError(                                                                                  // 350\n          'The first argument of $meteorCollection must be a function or\\\n            a have a find function property.');                                                               // 352\n      }                                                                                                       // 353\n                                                                                                              // 354\n      if (!angular.isFunction(reactiveFunc)) {                                                                // 355\n        collection = angular.isDefined(collection) ? collection : reactiveFunc;                               // 356\n        reactiveFunc = _.bind(reactiveFunc.find, reactiveFunc);                                               // 357\n      }                                                                                                       // 358\n                                                                                                              // 359\n      // By default auto save - true.                                                                         // 360\n      autoClientSave = angular.isDefined(autoClientSave) ? autoClientSave : true;                             // 361\n      var ngCollection = new AngularMeteorCollection(reactiveFunc, collection,                                // 362\n        diffArrayFunc || diffArray, autoClientSave);                                                          // 363\n                                                                                                              // 364\n      return ngCollection;                                                                                    // 365\n    }                                                                                                         // 366\n                                                                                                              // 367\n    return $meteorCollection;                                                                                 // 368\n }]);                                                                                                         // 369\n                                                                                                              // 370\nangularMeteorCollection.run([                                                                                 // 371\n  '$rootScope', '$meteorCollection', '$meteorCollectionFS', '$meteorStopper',                                 // 372\n  function($rootScope, $meteorCollection, $meteorCollectionFS, $meteorStopper) {                              // 373\n    var scopeProto = Object.getPrototypeOf($rootScope);                                                       // 374\n    scopeProto.$meteorCollection = $meteorStopper($meteorCollection);                                         // 375\n    scopeProto.$meteorCollectionFS = $meteorStopper($meteorCollectionFS);                                     // 376\n }]);                                                                                                         // 377\n                                                                                                              // 378\n                                                                                                              // 379\n// Local utilities                                                                                            // 380\nvar collectionUtils = {                                                                                       // 381\n                                                                                                              // 382\n  findIndexById: function(collection, doc) {                                                                  // 383\n    var foundDoc = _.find(collection, function(colDoc) {                                                      // 384\n      // EJSON.equals used to compare Mongo.ObjectIDs and Strings.                                            // 385\n      return EJSON.equals(colDoc._id, doc._id);                                                               // 386\n    });                                                                                                       // 387\n    return _.indexOf(collection, foundDoc);                                                                   // 388\n  },                                                                                                          // 389\n                                                                                                              // 390\n  // Finds changes between two collections and saves differences.                                             // 391\n  diff: function(newCollection, oldCollection, diffMethod) {                                                  // 392\n    var changes = {added: [], removed: [], changed: []};                                                      // 393\n                                                                                                              // 394\n    diffMethod(oldCollection, newCollection, {                                                                // 395\n      addedAt: function(id, item, index) {                                                                    // 396\n        changes.added.push({item: item, index: index});                                                       // 397\n      },                                                                                                      // 398\n                                                                                                              // 399\n      removedAt: function(id, item, index) {                                                                  // 400\n        changes.removed.push({item: item, index: index});                                                     // 401\n      },                                                                                                      // 402\n                                                                                                              // 403\n      changedAt: function(id, setDiff, unsetDiff, index, oldItem) {                                           // 404\n        changes.changed.push({setDiff: setDiff, unsetDiff: unsetDiff});                                       // 405\n      },                                                                                                      // 406\n                                                                                                              // 407\n      movedTo: function(id, item, fromIndex, toIndex) {                                                       // 408\n        // XXX do we need this?                                                                               // 409\n      }                                                                                                       // 410\n    });                                                                                                       // 411\n                                                                                                              // 412\n    return changes;                                                                                           // 413\n  }                                                                                                           // 414\n};                                                                                                            // 415\n                                                                                                              // 416\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 977\n                                                                                                                     // 978\n}).call(this);                                                                                                       // 979\n                                                                                                                     // 980\n                                                                                                                     // 981\n                                                                                                                     // 982\n                                                                                                                     // 983\n                                                                                                                     // 984\n                                                                                                                     // 985\n(function(){                                                                                                         // 986\n                                                                                                                     // 987\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 988\n//                                                                                                            //     // 989\n// packages/angular/modules/angular-meteor-object.js                                                          //     // 990\n//                                                                                                            //     // 991\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 992\n                                                                                                              //     // 993\n'use strict';                                                                                                 // 1   // 994\n                                                                                                              // 2   // 995\nvar angularMeteorObject = angular.module('angular-meteor.object', ['angular-meteor.utils', 'angular-meteor.subscribe', 'angular-meteor.collection', 'getUpdates', 'diffArray']);\n                                                                                                              // 4   // 997\nangularMeteorObject.factory('AngularMeteorObject', [                                                          // 5   // 998\n  '$q', '$meteorSubscribe', '$meteorCollection', '$meteorUtils', 'diffArray', 'getUpdates',                   // 6   // 999\n  function($q, $meteorSubscribe, $meteorCollection, $meteorUtils, diffArray, getUpdates) {                    // 7   // 1000\n    // A list of internals properties to not watch for, nor pass to the Document on update and etc.           // 8   // 1001\n    AngularMeteorObject.$$internalProps = [                                                                   // 9   // 1002\n      '$$collection', '$$options', '$$id', '$$hashkey', '$$internalProps', '$$scope',                         // 10  // 1003\n      'save', 'reset', 'subscribe', 'stop', 'autorunComputation', 'unregisterAutoBind', 'unregisterAutoDestroy', 'getRawObject',\n      '_auto', '_setAutos', '_eventEmitter', '_serverBackup'                                                  // 12  // 1005\n    ];                                                                                                        // 13  // 1006\n                                                                                                              // 14  // 1007\n    function AngularMeteorObject (collection, id, options){                                                   // 15  // 1008\n      // Make data not be an object so we can extend it to preserve                                           // 16  // 1009\n      // Collection Helpers and the like                                                                      // 17  // 1010\n      var data = new function SubObject() {};                                                                 // 18  // 1011\n      var doc = collection.findOne(id, options);                                                              // 19  // 1012\n      angular.extend(data, doc);                                                                              // 20  // 1013\n      angular.extend(data, AngularMeteorObject);                                                              // 21  // 1014\n                                                                                                              // 22  // 1015\n      data._serverBackup = doc || {};                                                                         // 23  // 1016\n      data.$$collection = collection;                                                                         // 24  // 1017\n      data.$$options = options;                                                                               // 25  // 1018\n      data.$$id = id || new Mongo.ObjectID();                                                                 // 26  // 1019\n                                                                                                              // 27  // 1020\n      return data;                                                                                            // 28  // 1021\n    }                                                                                                         // 29  // 1022\n                                                                                                              // 30  // 1023\n    AngularMeteorObject.getRawObject = function () {                                                          // 31  // 1024\n      return angular.copy(_.omit(this, this.$$internalProps));                                                // 32  // 1025\n    };                                                                                                        // 33  // 1026\n                                                                                                              // 34  // 1027\n    AngularMeteorObject.subscribe = function () {                                                             // 35  // 1028\n      $meteorSubscribe.subscribe.apply(this, arguments);                                                      // 36  // 1029\n      return this;                                                                                            // 37  // 1030\n    };                                                                                                        // 38  // 1031\n                                                                                                              // 39  // 1032\n    AngularMeteorObject.save = function(custom) {                                                             // 40  // 1033\n      var deferred = $q.defer();                                                                              // 41  // 1034\n      var collection = this.$$collection;                                                                     // 42  // 1035\n      var createFulfill = _.partial($meteorUtils.fulfill, deferred, null);                                    // 43  // 1036\n      var oldDoc = collection.findOne(this.$$id);                                                             // 44  // 1037\n      var mods;                                                                                               // 45  // 1038\n                                                                                                              // 46  // 1039\n      // update                                                                                               // 47  // 1040\n      if (oldDoc) {                                                                                           // 48  // 1041\n        if (custom)                                                                                           // 49  // 1042\n          mods = { $set: custom };                                                                            // 50  // 1043\n        else {                                                                                                // 51  // 1044\n          mods = getUpdates(oldDoc, this.getRawObject());                                                     // 52  // 1045\n          // If there are no updates, there is nothing to do here, returning                                  // 53  // 1046\n          if (_.isEmpty(mods)) {                                                                              // 54  // 1047\n            return $q.when({ action: 'updated' });                                                            // 55  // 1048\n          }                                                                                                   // 56  // 1049\n        }                                                                                                     // 57  // 1050\n                                                                                                              // 58  // 1051\n        // NOTE: do not use #upsert() method, since it does not exist in some collections                     // 59  // 1052\n        collection.update(this.$$id, mods, createFulfill({ action: 'updated' }));                             // 60  // 1053\n      }                                                                                                       // 61  // 1054\n      // insert                                                                                               // 62  // 1055\n      else {                                                                                                  // 63  // 1056\n        if (custom)                                                                                           // 64  // 1057\n          mods = _.clone(custom);                                                                             // 65  // 1058\n        else                                                                                                  // 66  // 1059\n          mods = this.getRawObject();                                                                         // 67  // 1060\n                                                                                                              // 68  // 1061\n        mods._id = this.$$id;                                                                                 // 69  // 1062\n        collection.insert(mods, createFulfill({ action: 'inserted' }));                                       // 70  // 1063\n      }                                                                                                       // 71  // 1064\n                                                                                                              // 72  // 1065\n      return deferred.promise;                                                                                // 73  // 1066\n    };                                                                                                        // 74  // 1067\n                                                                                                              // 75  // 1068\n    AngularMeteorObject.reset = function(keepClientProps) {                                                   // 76  // 1069\n      var self = this;                                                                                        // 77  // 1070\n      var options = this.$$options;                                                                           // 78  // 1071\n      var id = this.$$id;                                                                                     // 79  // 1072\n      var doc = this.$$collection.findOne(id, options);                                                       // 80  // 1073\n                                                                                                              // 81  // 1074\n      if (doc) {                                                                                              // 82  // 1075\n        // extend SubObject                                                                                   // 83  // 1076\n        var docKeys = _.keys(doc);                                                                            // 84  // 1077\n        var docExtension = _.pick(doc, docKeys);                                                              // 85  // 1078\n        var clientProps;                                                                                      // 86  // 1079\n                                                                                                              // 87  // 1080\n        angular.extend(Object.getPrototypeOf(self), Object.getPrototypeOf(doc));                              // 88  // 1081\n        _.extend(self, docExtension);                                                                         // 89  // 1082\n        _.extend(self._serverBackup, docExtension);                                                           // 90  // 1083\n                                                                                                              // 91  // 1084\n        if (keepClientProps) {                                                                                // 92  // 1085\n          clientProps = _.intersection(_.keys(self), _.keys(self._serverBackup));                             // 93  // 1086\n        } else {                                                                                              // 94  // 1087\n          clientProps = _.keys(self);                                                                         // 95  // 1088\n        }                                                                                                     // 96  // 1089\n                                                                                                              // 97  // 1090\n        var serverProps = _.keys(doc);                                                                        // 98  // 1091\n        var removedKeys = _.difference(clientProps, serverProps, self.$$internalProps);                       // 99  // 1092\n                                                                                                              // 100\n        removedKeys.forEach(function (prop) {                                                                 // 101\n          delete self[prop];                                                                                  // 102\n          delete self._serverBackup[prop];                                                                    // 103\n        });                                                                                                   // 104\n      }                                                                                                       // 105\n                                                                                                              // 106\n      else {                                                                                                  // 107\n        _.keys(this.getRawObject()).forEach(function(prop) {                                                  // 108\n          delete self[prop];                                                                                  // 109\n        });                                                                                                   // 110\n                                                                                                              // 111\n        self._serverBackup = {};                                                                              // 112\n      }                                                                                                       // 113\n    };                                                                                                        // 114\n                                                                                                              // 115\n    AngularMeteorObject.stop = function () {                                                                  // 116\n      if (this.unregisterAutoDestroy)                                                                         // 117\n        this.unregisterAutoDestroy();                                                                         // 118\n                                                                                                              // 119\n      if (this.unregisterAutoBind)                                                                            // 120\n        this.unregisterAutoBind();                                                                            // 121\n                                                                                                              // 122\n      if (this.autorunComputation && this.autorunComputation.stop)                                            // 123\n        this.autorunComputation.stop();                                                                       // 124\n    };                                                                                                        // 125\n                                                                                                              // 126\n    return AngularMeteorObject;                                                                               // 127\n}]);                                                                                                          // 128\n                                                                                                              // 129\n                                                                                                              // 130\nangularMeteorObject.factory('$meteorObject', [                                                                // 131\n  '$rootScope', '$meteorUtils', 'getUpdates', 'AngularMeteorObject',                                          // 132\n  function($rootScope, $meteorUtils, getUpdates, AngularMeteorObject) {                                       // 133\n    function $meteorObject(collection, id, auto, options) {                                                   // 134\n      // Validate parameters                                                                                  // 135\n      if (!collection) {                                                                                      // 136\n        throw new TypeError(\"The first argument of $meteorObject is undefined.\");                             // 137\n      }                                                                                                       // 138\n                                                                                                              // 139\n      if (!angular.isFunction(collection.findOne)) {                                                          // 140\n        throw new TypeError(\"The first argument of $meteorObject must be a function or a have a findOne function property.\");\n      }                                                                                                       // 142\n                                                                                                              // 143\n      var data = new AngularMeteorObject(collection, id, options);                                            // 144\n      data._auto = auto !== false; // Making auto default true - http://stackoverflow.com/a/15464208/1426570  // 145\n      angular.extend(data, $meteorObject);                                                                    // 146\n      data._setAutos();                                                                                       // 147\n      return data;                                                                                            // 148\n    }                                                                                                         // 149\n                                                                                                              // 150\n    $meteorObject._setAutos = function() {                                                                    // 151\n      var self = this;                                                                                        // 152\n                                                                                                              // 153\n      this.autorunComputation = $meteorUtils.autorun($rootScope, function() {                                 // 154\n        self.reset(true);                                                                                     // 155\n      });                                                                                                     // 156\n                                                                                                              // 157\n      // Deep watches the model and performs autobind                                                         // 158\n      this.unregisterAutoBind = this._auto && $rootScope.$watch(function(){                                   // 159\n        return self.getRawObject();                                                                           // 160\n      }, function (item, oldItem) {                                                                           // 161\n        if (item === oldItem) return;                                                                         // 162\n                                                                                                              // 163\n        var id = item._id;                                                                                    // 164\n        delete item._id;                                                                                      // 165\n        delete oldItem._id;                                                                                   // 166\n                                                                                                              // 167\n        var updates = getUpdates(oldItem, item);                                                              // 168\n        if (_.isEmpty(updates)) return;                                                                       // 169\n                                                                                                              // 170\n        self.$$collection.update({_id: id}, updates);                                                         // 171\n      }, true);                                                                                               // 172\n                                                                                                              // 173\n      this.unregisterAutoDestroy = $rootScope.$on('$destroy', function() {                                    // 174\n        if (self && self.stop) {                                                                              // 175\n          self.stop();                                                                                        // 176\n        }                                                                                                     // 177\n      });                                                                                                     // 178\n    };                                                                                                        // 179\n                                                                                                              // 180\n    return $meteorObject;                                                                                     // 181\n}]);                                                                                                          // 182\n                                                                                                              // 183\nangularMeteorObject.run([                                                                                     // 184\n  '$rootScope', '$meteorObject', '$meteorStopper',                                                            // 185\n  function ($rootScope, $meteorObject, $meteorStopper) {                                                      // 186\n    var scopeProto = Object.getPrototypeOf($rootScope);                                                       // 187\n    scopeProto.$meteorObject = $meteorStopper($meteorObject);                                                 // 188\n}]);                                                                                                          // 189\n                                                                                                              // 190\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1184\n                                                                                                                     // 1185\n}).call(this);                                                                                                       // 1186\n                                                                                                                     // 1187\n                                                                                                                     // 1188\n                                                                                                                     // 1189\n                                                                                                                     // 1190\n                                                                                                                     // 1191\n                                                                                                                     // 1192\n(function(){                                                                                                         // 1193\n                                                                                                                     // 1194\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1195\n//                                                                                                            //     // 1196\n// packages/angular/modules/angular-meteor-user.js                                                            //     // 1197\n//                                                                                                            //     // 1198\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1199\n                                                                                                              //     // 1200\n'use strict';                                                                                                 // 1   // 1201\n                                                                                                              // 2   // 1202\nvar angularMeteorUser = angular.module('angular-meteor.user', ['angular-meteor.utils']);                      // 3   // 1203\n                                                                                                              // 4   // 1204\n// requires package 'accounts-password'                                                                       // 5   // 1205\nangularMeteorUser.service('$meteorUser', [                                                                    // 6   // 1206\n  '$rootScope', '$meteorUtils', '$q',                                                                         // 7   // 1207\n  function($rootScope, $meteorUtils, $q){                                                                     // 8   // 1208\n    var pack = Package['accounts-base'];                                                                      // 9   // 1209\n    if (!pack) return;                                                                                        // 10  // 1210\n                                                                                                              // 11  // 1211\n    var self = this;                                                                                          // 12  // 1212\n    var Accounts = pack.Accounts;                                                                             // 13  // 1213\n                                                                                                              // 14  // 1214\n    this.waitForUser = function(){                                                                            // 15  // 1215\n                                                                                                              // 16  // 1216\n      var deferred = $q.defer();                                                                              // 17  // 1217\n                                                                                                              // 18  // 1218\n      $meteorUtils.autorun($rootScope, function(){                                                            // 19  // 1219\n        if ( !Meteor.loggingIn() )                                                                            // 20  // 1220\n          deferred.resolve( Meteor.user() );                                                                  // 21  // 1221\n      });                                                                                                     // 22  // 1222\n                                                                                                              // 23  // 1223\n      return deferred.promise;                                                                                // 24  // 1224\n    };                                                                                                        // 25  // 1225\n                                                                                                              // 26  // 1226\n    this.requireUser = function(){                                                                            // 27  // 1227\n                                                                                                              // 28  // 1228\n      var deferred = $q.defer();                                                                              // 29  // 1229\n                                                                                                              // 30  // 1230\n      $meteorUtils.autorun($rootScope, function(){                                                            // 31  // 1231\n        if ( !Meteor.loggingIn() ) {                                                                          // 32  // 1232\n          if ( Meteor.user() == null)                                                                         // 33  // 1233\n            deferred.reject(\"AUTH_REQUIRED\");                                                                 // 34  // 1234\n          else                                                                                                // 35  // 1235\n            deferred.resolve( Meteor.user() );                                                                // 36  // 1236\n        }                                                                                                     // 37  // 1237\n      });                                                                                                     // 38  // 1238\n                                                                                                              // 39  // 1239\n      return deferred.promise;                                                                                // 40  // 1240\n    };                                                                                                        // 41  // 1241\n                                                                                                              // 42  // 1242\n    this.requireValidUser = function(validatorFn) {                                                           // 43  // 1243\n      return self.requireUser().then(function(user){                                                          // 44  // 1244\n        var valid = validatorFn( user );                                                                      // 45  // 1245\n                                                                                                              // 46  // 1246\n        if ( valid === true )                                                                                 // 47  // 1247\n          return user;                                                                                        // 48  // 1248\n        else if ( typeof valid === \"string\" )                                                                 // 49  // 1249\n          return $q.reject( valid );                                                                          // 50  // 1250\n        else                                                                                                  // 51  // 1251\n          return $q.reject( \"FORBIDDEN\" );                                                                    // 52  // 1252\n\t    });                                                                                                      // 53  // 1253\n\t  };                                                                                                         // 54  // 1254\n                                                                                                              // 55  // 1255\n    this.loginWithPassword = $meteorUtils.promissor(Meteor, 'loginWithPassword');                             // 56  // 1256\n    this.createUser = $meteorUtils.promissor(Accounts, 'createUser');                                         // 57  // 1257\n    this.changePassword = $meteorUtils.promissor(Accounts, 'changePassword');                                 // 58  // 1258\n    this.forgotPassword = $meteorUtils.promissor(Accounts, 'forgotPassword');                                 // 59  // 1259\n    this.resetPassword = $meteorUtils.promissor(Accounts, 'resetPassword');                                   // 60  // 1260\n    this.verifyEmail = $meteorUtils.promissor(Accounts, 'verifyEmail');                                       // 61  // 1261\n    this.logout = $meteorUtils.promissor(Meteor, 'logout');                                                   // 62  // 1262\n    this.logoutOtherClients = $meteorUtils.promissor(Meteor, 'logoutOtherClients');                           // 63  // 1263\n    this.loginWithFacebook = $meteorUtils.promissor(Meteor, 'loginWithFacebook');                             // 64  // 1264\n    this.loginWithTwitter = $meteorUtils.promissor(Meteor, 'loginWithTwitter');                               // 65  // 1265\n    this.loginWithGoogle = $meteorUtils.promissor(Meteor, 'loginWithGoogle');                                 // 66  // 1266\n    this.loginWithGithub = $meteorUtils.promissor(Meteor, 'loginWithGithub');                                 // 67  // 1267\n    this.loginWithMeteorDeveloperAccount = $meteorUtils.promissor(Meteor, 'loginWithMeteorDeveloperAccount');        // 1268\n    this.loginWithMeetup = $meteorUtils.promissor(Meteor, 'loginWithMeetup');                                 // 69  // 1269\n    this.loginWithWeibo = $meteorUtils.promissor(Meteor, 'loginWithWeibo');                                   // 70  // 1270\n  }                                                                                                           // 71  // 1271\n]);                                                                                                           // 72  // 1272\n                                                                                                              // 73  // 1273\nangularMeteorUser.run([                                                                                       // 74  // 1274\n  '$rootScope', '$meteorUtils',                                                                               // 75  // 1275\n  function($rootScope, $meteorUtils){                                                                         // 76  // 1276\n    $meteorUtils.autorun($rootScope, function(){                                                              // 77  // 1277\n      if (!Meteor.user) return;                                                                               // 78  // 1278\n      $rootScope.currentUser = Meteor.user();                                                                 // 79  // 1279\n      $rootScope.loggingIn = Meteor.loggingIn();                                                              // 80  // 1280\n    });                                                                                                       // 81  // 1281\n  }                                                                                                           // 82  // 1282\n]);                                                                                                           // 83  // 1283\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1284\n                                                                                                                     // 1285\n}).call(this);                                                                                                       // 1286\n                                                                                                                     // 1287\n                                                                                                                     // 1288\n                                                                                                                     // 1289\n                                                                                                                     // 1290\n                                                                                                                     // 1291\n                                                                                                                     // 1292\n(function(){                                                                                                         // 1293\n                                                                                                                     // 1294\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1295\n//                                                                                                            //     // 1296\n// packages/angular/modules/angular-meteor-methods.js                                                         //     // 1297\n//                                                                                                            //     // 1298\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1299\n                                                                                                              //     // 1300\n'use strict';                                                                                                 // 1   // 1301\n                                                                                                              // 2   // 1302\nvar angularMeteorMethods = angular.module('angular-meteor.methods', ['angular-meteor.utils']);                // 3   // 1303\n                                                                                                              // 4   // 1304\nangularMeteorMethods.service('$meteorMethods', [                                                              // 5   // 1305\n  '$q', '$meteorUtils',                                                                                       // 6   // 1306\n  function($q, $meteorUtils) {                                                                                // 7   // 1307\n    this.call = function(){                                                                                   // 8   // 1308\n      var deferred = $q.defer();                                                                              // 9   // 1309\n      var fulfill = $meteorUtils.fulfill(deferred);                                                           // 10  // 1310\n      var args = _.toArray(arguments).concat(fulfill);                                                        // 11  // 1311\n      Meteor.call.apply(this, args);                                                                          // 12  // 1312\n      return deferred.promise;                                                                                // 13  // 1313\n    };                                                                                                        // 14  // 1314\n  }                                                                                                           // 15  // 1315\n]);                                                                                                           // 16  // 1316\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1317\n                                                                                                                     // 1318\n}).call(this);                                                                                                       // 1319\n                                                                                                                     // 1320\n                                                                                                                     // 1321\n                                                                                                                     // 1322\n                                                                                                                     // 1323\n                                                                                                                     // 1324\n                                                                                                                     // 1325\n(function(){                                                                                                         // 1326\n                                                                                                                     // 1327\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1328\n//                                                                                                            //     // 1329\n// packages/angular/modules/angular-meteor-session.js                                                         //     // 1330\n//                                                                                                            //     // 1331\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1332\n                                                                                                              //     // 1333\n'use strict';                                                                                                 // 1   // 1334\nvar angularMeteorSession = angular.module('angular-meteor.session', ['angular-meteor.utils']);                // 2   // 1335\n                                                                                                              // 3   // 1336\nangularMeteorSession.factory('$meteorSession', ['$meteorUtils', '$parse',                                     // 4   // 1337\n  function ($meteorUtils, $parse) {                                                                           // 5   // 1338\n    return function (session) {                                                                               // 6   // 1339\n                                                                                                              // 7   // 1340\n      return {                                                                                                // 8   // 1341\n                                                                                                              // 9   // 1342\n        bind: function(scope, model) {                                                                        // 10  // 1343\n          var getter = $parse(model);                                                                         // 11  // 1344\n          var setter = getter.assign;                                                                         // 12  // 1345\n          $meteorUtils.autorun(scope, function() {                                                            // 13  // 1346\n            setter(scope, Session.get(session));                                                              // 14  // 1347\n          });                                                                                                 // 15  // 1348\n                                                                                                              // 16  // 1349\n          scope.$watch(model, function(newItem, oldItem) {                                                    // 17  // 1350\n            Session.set(session, getter(scope));                                                              // 18  // 1351\n          }, true);                                                                                           // 19  // 1352\n                                                                                                              // 20  // 1353\n        }                                                                                                     // 21  // 1354\n      };                                                                                                      // 22  // 1355\n    }                                                                                                         // 23  // 1356\n  }                                                                                                           // 24  // 1357\n]);                                                                                                           // 25  // 1358\n                                                                                                              // 26  // 1359\n                                                                                                              // 27  // 1360\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1361\n                                                                                                                     // 1362\n}).call(this);                                                                                                       // 1363\n                                                                                                                     // 1364\n                                                                                                                     // 1365\n                                                                                                                     // 1366\n                                                                                                                     // 1367\n                                                                                                                     // 1368\n                                                                                                                     // 1369\n(function(){                                                                                                         // 1370\n                                                                                                                     // 1371\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1372\n//                                                                                                            //     // 1373\n// packages/angular/modules/angular-meteor-reactive-scope.js                                                  //     // 1374\n//                                                                                                            //     // 1375\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1376\n                                                                                                              //     // 1377\n/**                                                                                                           // 1   // 1378\n * Created by netanel on 29/12/14.                                                                            // 2   // 1379\n */                                                                                                           // 3   // 1380\nvar angularMeteorReactiveScope = angular.module('angular-meteor.reactive-scope', []);                         // 4   // 1381\n                                                                                                              // 5   // 1382\nangularMeteorReactiveScope.run(['$rootScope', '$parse', function($rootScope, $parse) {                        // 6   // 1383\n  Object.getPrototypeOf($rootScope).getReactively = function(property, objectEquality) {                      // 7   // 1384\n    var self = this;                                                                                          // 8   // 1385\n    var getValue = $parse(property);                                                                          // 9   // 1386\n    objectEquality = !!objectEquality;                                                                        // 10  // 1387\n                                                                                                              // 11  // 1388\n    if (!self.hasOwnProperty('$$trackerDeps')) {                                                              // 12  // 1389\n      self.$$trackerDeps = {};                                                                                // 13  // 1390\n    }                                                                                                         // 14  // 1391\n                                                                                                              // 15  // 1392\n    if (!self.$$trackerDeps[property]) {                                                                      // 16  // 1393\n      self.$$trackerDeps[property] = new Tracker.Dependency();                                                // 17  // 1394\n                                                                                                              // 18  // 1395\n      self.$watch(function() {                                                                                // 19  // 1396\n        return getValue(self)                                                                                 // 20  // 1397\n      }, function(newVal, oldVal) {                                                                           // 21  // 1398\n        if (newVal !== oldVal) {                                                                              // 22  // 1399\n          self.$$trackerDeps[property].changed();                                                             // 23  // 1400\n        }                                                                                                     // 24  // 1401\n      }, objectEquality);                                                                                     // 25  // 1402\n    }                                                                                                         // 26  // 1403\n                                                                                                              // 27  // 1404\n    self.$$trackerDeps[property].depend();                                                                    // 28  // 1405\n                                                                                                              // 29  // 1406\n    return getValue(self);                                                                                    // 30  // 1407\n  };                                                                                                          // 31  // 1408\n  Object.getPrototypeOf($rootScope).getCollectionReactively = function(property) {                            // 32  // 1409\n    var self = this;                                                                                          // 33  // 1410\n    var getValue = $parse(property);                                                                          // 34  // 1411\n                                                                                                              // 35  // 1412\n                                                                                                              // 36  // 1413\n    if (!self.hasOwnProperty('$$trackerDeps')) {                                                              // 37  // 1414\n      self.$$trackerDeps = {};                                                                                // 38  // 1415\n    }                                                                                                         // 39  // 1416\n                                                                                                              // 40  // 1417\n    if (!self.$$trackerDeps[property]) {                                                                      // 41  // 1418\n      self.$$trackerDeps[property] = new Tracker.Dependency();                                                // 42  // 1419\n                                                                                                              // 43  // 1420\n      self.$watchCollection(property, function() {                                                            // 44  // 1421\n        self.$$trackerDeps[property].changed();                                                               // 45  // 1422\n      });                                                                                                     // 46  // 1423\n    }                                                                                                         // 47  // 1424\n                                                                                                              // 48  // 1425\n    self.$$trackerDeps[property].depend();                                                                    // 49  // 1426\n                                                                                                              // 50  // 1427\n    return getValue(self);                                                                                    // 51  // 1428\n  };                                                                                                          // 52  // 1429\n}]);                                                                                                          // 53  // 1430\n                                                                                                              // 54  // 1431\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1432\n                                                                                                                     // 1433\n}).call(this);                                                                                                       // 1434\n                                                                                                                     // 1435\n                                                                                                                     // 1436\n                                                                                                                     // 1437\n                                                                                                                     // 1438\n                                                                                                                     // 1439\n                                                                                                                     // 1440\n(function(){                                                                                                         // 1441\n                                                                                                                     // 1442\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1443\n//                                                                                                            //     // 1444\n// packages/angular/modules/angular-meteor-utils.js                                                           //     // 1445\n//                                                                                                            //     // 1446\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1447\n                                                                                                              //     // 1448\n'use strict';                                                                                                 // 1   // 1449\nvar angularMeteorUtils = angular.module('angular-meteor.utils', []);                                          // 2   // 1450\n                                                                                                              // 3   // 1451\nangularMeteorUtils.service('$meteorUtils', [                                                                  // 4   // 1452\n  '$q', '$timeout',                                                                                           // 5   // 1453\n  function ($q, $timeout) {                                                                                   // 6   // 1454\n    var self = this;                                                                                          // 7   // 1455\n    this.getCollectionByName = function(string){                                                              // 8   // 1456\n      return Mongo.Collection.get(string);                                                                    // 9   // 1457\n    };                                                                                                        // 10  // 1458\n    this.autorun = function(scope, fn) {                                                                      // 11  // 1459\n      // wrapping around Deps.autorun                                                                         // 12  // 1460\n      var comp = Tracker.autorun(function(c) {                                                                // 13  // 1461\n        fn(c);                                                                                                // 14  // 1462\n                                                                                                              // 15  // 1463\n        // this is run immediately for the first call                                                         // 16  // 1464\n        // but after that, we need to $apply to start Angular digest                                          // 17  // 1465\n        if (!c.firstRun) $timeout(angular.noop, 0);                                                           // 18  // 1466\n      });                                                                                                     // 19  // 1467\n      // stop autorun when scope is destroyed                                                                 // 20  // 1468\n      scope.$on('$destroy', function() {                                                                      // 21  // 1469\n        comp.stop();                                                                                          // 22  // 1470\n      });                                                                                                     // 23  // 1471\n      // return autorun object so that it can be stopped manually                                             // 24  // 1472\n      return comp;                                                                                            // 25  // 1473\n    };                                                                                                        // 26  // 1474\n    // Borrowed from angularFire - https://github.com/firebase/angularfire/blob/master/src/utils.js#L445-L454        // 1475\n    this.stripDollarPrefixedKeys = function (data) {                                                          // 28  // 1476\n      if( !angular.isObject(data) ||                                                                          // 29  // 1477\n        data instanceof Date ||                                                                               // 30  // 1478\n        data instanceof File ||                                                                               // 31  // 1479\n        (typeof FS === 'object' && data instanceof FS.File)) {                                                // 32  // 1480\n        return data;                                                                                          // 33  // 1481\n      }                                                                                                       // 34  // 1482\n      var out = angular.isArray(data)? [] : {};                                                               // 35  // 1483\n      angular.forEach(data, function(v,k) {                                                                   // 36  // 1484\n        if(typeof k !== 'string' || k.charAt(0) !== '$') {                                                    // 37  // 1485\n          out[k] = self.stripDollarPrefixedKeys(v);                                                           // 38  // 1486\n        }                                                                                                     // 39  // 1487\n      });                                                                                                     // 40  // 1488\n      return out;                                                                                             // 41  // 1489\n    };                                                                                                        // 42  // 1490\n    // Returns a callback which fulfills promise                                                              // 43  // 1491\n    this.fulfill = function(deferred, boundError, boundResult) {                                              // 44  // 1492\n      return function(err, result) {                                                                          // 45  // 1493\n        if (err)                                                                                              // 46  // 1494\n          deferred.reject(boundError == null ? err : boundError);                                             // 47  // 1495\n        else if (typeof boundResult == \"function\")                                                            // 48  // 1496\n          deferred.resolve(boundResult == null ? result : boundResult(result));                               // 49  // 1497\n        else                                                                                                  // 50  // 1498\n          deferred.resolve(boundResult == null ? result : boundResult);                                       // 51  // 1499\n      };                                                                                                      // 52  // 1500\n    };                                                                                                        // 53  // 1501\n    // creates a function which invokes method with the given arguments and returns a promise                 // 54  // 1502\n    this.promissor = function(obj, method) {                                                                  // 55  // 1503\n      return function() {                                                                                     // 56  // 1504\n        var deferred = $q.defer();                                                                            // 57  // 1505\n        var fulfill = self.fulfill(deferred);                                                                 // 58  // 1506\n        var args = _.toArray(arguments).concat(fulfill);                                                      // 59  // 1507\n        obj[method].apply(obj, args);                                                                         // 60  // 1508\n        return deferred.promise;                                                                              // 61  // 1509\n      };                                                                                                      // 62  // 1510\n    };                                                                                                        // 63  // 1511\n  }                                                                                                           // 64  // 1512\n]);                                                                                                           // 65  // 1513\n                                                                                                              // 66  // 1514\nangularMeteorUtils.run(['$rootScope', '$meteorUtils',                                                         // 67  // 1515\n  function($rootScope, $meteorUtils) {                                                                        // 68  // 1516\n    Object.getPrototypeOf($rootScope).$meteorAutorun = function(fn) {                                         // 69  // 1517\n      return $meteorUtils.autorun(this, fn);                                                                  // 70  // 1518\n    };                                                                                                        // 71  // 1519\n}]);                                                                                                          // 72  // 1520\n                                                                                                              // 73  // 1521\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1522\n                                                                                                                     // 1523\n}).call(this);                                                                                                       // 1524\n                                                                                                                     // 1525\n                                                                                                                     // 1526\n                                                                                                                     // 1527\n                                                                                                                     // 1528\n                                                                                                                     // 1529\n                                                                                                                     // 1530\n(function(){                                                                                                         // 1531\n                                                                                                                     // 1532\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1533\n//                                                                                                            //     // 1534\n// packages/angular/modules/angular-meteor-camera.js                                                          //     // 1535\n//                                                                                                            //     // 1536\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1537\n                                                                                                              //     // 1538\n'use strict';                                                                                                 // 1   // 1539\n                                                                                                              // 2   // 1540\nvar angularMeteorCamera = angular.module('angular-meteor.camera', ['angular-meteor.utils']);                  // 3   // 1541\n                                                                                                              // 4   // 1542\n// requires package 'mdg:camera'                                                                              // 5   // 1543\nangularMeteorCamera.service('$meteorCamera', [                                                                // 6   // 1544\n  '$q', '$meteorUtils',                                                                                       // 7   // 1545\n  function ($q, $meteorUtils) {                                                                               // 8   // 1546\n    var pack = Package['mdg:camera'];                                                                         // 9   // 1547\n    if (!pack) return;                                                                                        // 10  // 1548\n                                                                                                              // 11  // 1549\n    var MeteorCamera = pack.MeteorCamera;                                                                     // 12  // 1550\n                                                                                                              // 13  // 1551\n    this.getPicture = function(options){                                                                      // 14  // 1552\n      options = options || {};                                                                                // 15  // 1553\n      var deferred = $q.defer();                                                                              // 16  // 1554\n      MeteorCamera.getPicture(options, $meteorUtils.fulfill(deferred));                                       // 17  // 1555\n      return deferred.promise;                                                                                // 18  // 1556\n    };                                                                                                        // 19  // 1557\n  }                                                                                                           // 20  // 1558\n]);                                                                                                           // 21  // 1559\n                                                                                                              // 22  // 1560\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1561\n                                                                                                                     // 1562\n}).call(this);                                                                                                       // 1563\n                                                                                                                     // 1564\n                                                                                                                     // 1565\n                                                                                                                     // 1566\n                                                                                                                     // 1567\n                                                                                                                     // 1568\n                                                                                                                     // 1569\n(function(){                                                                                                         // 1570\n                                                                                                                     // 1571\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1572\n//                                                                                                            //     // 1573\n// packages/angular/angular-meteor.js                                                                         //     // 1574\n//                                                                                                            //     // 1575\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1576\n                                                                                                              //     // 1577\n// Define angular-meteor and its dependencies                                                                 // 1   // 1578\nvar angularMeteor = angular.module('angular-meteor', [                                                        // 2   // 1579\n  'angular-meteor.subscribe',                                                                                 // 3   // 1580\n  'angular-meteor.collection',                                                                                // 4   // 1581\n  'angular-meteor.object',                                                                                    // 5   // 1582\n  'angular-meteor.user',                                                                                      // 6   // 1583\n  'angular-meteor.methods',                                                                                   // 7   // 1584\n  'angular-meteor.session',                                                                                   // 8   // 1585\n  'angular-meteor.reactive-scope',                                                                            // 9   // 1586\n  'angular-meteor.utils',                                                                                     // 10  // 1587\n  'angular-meteor.camera'                                                                                     // 11  // 1588\n]);                                                                                                           // 12  // 1589\n                                                                                                              // 13  // 1590\nangularMeteor.run(['$compile', '$document', '$rootScope', function ($compile, $document, $rootScope) {        // 14  // 1591\n    // Recompile after iron:router builds page                                                                // 15  // 1592\n    if(Package['iron:router']) {                                                                              // 16  // 1593\n      var appLoaded = false;                                                                                  // 17  // 1594\n      Package['iron:router'].Router.onAfterAction(function(req, res, next) {                                  // 18  // 1595\n        Tracker.afterFlush(function() {                                                                       // 19  // 1596\n          if (!appLoaded) {                                                                                   // 20  // 1597\n            $compile($document)($rootScope);                                                                  // 21  // 1598\n            if (!$rootScope.$$phase) $rootScope.$apply();                                                     // 22  // 1599\n            appLoaded = true;                                                                                 // 23  // 1600\n          }                                                                                                   // 24  // 1601\n        })                                                                                                    // 25  // 1602\n      });                                                                                                     // 26  // 1603\n    }                                                                                                         // 27  // 1604\n  }]);                                                                                                        // 28  // 1605\n                                                                                                              // 29  // 1606\n// Putting all services under $meteor service for syntactic sugar                                             // 30  // 1607\nangularMeteor.service('$meteor', ['$meteorCollection', '$meteorCollectionFS', '$meteorObject', '$meteorMethods', '$meteorSession', '$meteorSubscribe', '$meteorUtils', '$meteorCamera', '$meteorUser',\n  function($meteorCollection, $meteorCollectionFS, $meteorObject, $meteorMethods, $meteorSession, $meteorSubscribe, $meteorUtils, $meteorCamera, $meteorUser){\n    this.collection = $meteorCollection;                                                                      // 33  // 1610\n    this.collectionFS = $meteorCollectionFS;                                                                  // 34  // 1611\n    this.object = $meteorObject;                                                                              // 35  // 1612\n    this.subscribe = $meteorSubscribe.subscribe;                                                              // 36  // 1613\n    this.call = $meteorMethods.call;                                                                          // 37  // 1614\n    this.loginWithPassword = $meteorUser.loginWithPassword;                                                   // 38  // 1615\n    this.requireUser = $meteorUser.requireUser;                                                               // 39  // 1616\n    this.requireValidUser = $meteorUser.requireValidUser;                                                     // 40  // 1617\n    this.waitForUser = $meteorUser.waitForUser;                                                               // 41  // 1618\n    this.createUser = $meteorUser.createUser;                                                                 // 42  // 1619\n    this.changePassword = $meteorUser.changePassword;                                                         // 43  // 1620\n    this.forgotPassword = $meteorUser.forgotPassword;                                                         // 44  // 1621\n    this.resetPassword = $meteorUser.resetPassword;                                                           // 45  // 1622\n    this.verifyEmail = $meteorUser.verifyEmail;                                                               // 46  // 1623\n    this.loginWithMeteorDeveloperAccount = $meteorUser.loginWithMeteorDeveloperAccount;                       // 47  // 1624\n    this.loginWithFacebook = $meteorUser.loginWithFacebook;                                                   // 48  // 1625\n    this.loginWithGithub = $meteorUser.loginWithGithub;                                                       // 49  // 1626\n    this.loginWithGoogle = $meteorUser.loginWithGoogle;                                                       // 50  // 1627\n    this.loginWithMeetup = $meteorUser.loginWithMeetup;                                                       // 51  // 1628\n    this.loginWithTwitter = $meteorUser.loginWithTwitter;                                                     // 52  // 1629\n    this.loginWithWeibo = $meteorUser.loginWithWeibo;                                                         // 53  // 1630\n    this.logout = $meteorUser.logout;                                                                         // 54  // 1631\n    this.logoutOtherClients = $meteorUser.logoutOtherClients;                                                 // 55  // 1632\n    this.session = $meteorSession;                                                                            // 56  // 1633\n    this.autorun = $meteorUtils.autorun;                                                                      // 57  // 1634\n    this.getCollectionByName = $meteorUtils.getCollectionByName;                                              // 58  // 1635\n    this.getPicture = $meteorCamera.getPicture;                                                               // 59  // 1636\n}]);                                                                                                          // 60  // 1637\n                                                                                                              // 61  // 1638\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1639\n                                                                                                                     // 1640\n}).call(this);                                                                                                       // 1641\n                                                                                                                     // 1642\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage.angular = {};\n\n})();\n","servePath":"/packages/angular.js","sourceMap":{"version":3,"sources":["/packages/angular/packages/angular.js"],"names":[],"mappingsfile":"/packages/angular.js","sourcesContent":["(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/angular/lib/diff-array.js                                                                         //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n'use strict';                                                                                                 // 1\n                                                                                                              // 2\nvar module = angular.module('diffArray', ['getUpdates']);                                                     // 3\n                                                                                                              // 4\nmodule.factory('diffArray', ['getUpdates',                                                                    // 5\n  function(getUpdates) {                                                                                      // 6\n    var idStringify = LocalCollection._idStringify || Package['mongo-id'].MongoID.idStringify;                // 7\n    var idParse = LocalCollection._idParse || Package['mongo-id'].MongoID.idParse;                            // 8\n                                                                                                              // 9\n    // Calculates the differences between `lastSeqArray` and                                                  // 10\n    // `seqArray` and calls appropriate functions from `callbacks`.                                           // 11\n    // Reuses Minimongo's diff algorithm implementation.                                                      // 12\n    // XXX Should be replaced with the original diffArray function here:                                      // 13\n    // https://github.com/meteor/meteor/blob/devel/packages/observe-sequence/observe_sequence.js#L152         // 14\n    // When it will become nested as well, tracking here: https://github.com/meteor/meteor/issues/3764        // 15\n    function diffArray(lastSeqArray, seqArray, callbacks, preventNestedDiff) {                                // 16\n      preventNestedDiff = !!preventNestedDiff;                                                                // 17\n                                                                                                              // 18\n      var diffFn = Package.minimongo.LocalCollection._diffQueryOrderedChanges ||                              // 19\n        Package['diff-sequence'].DiffSequence.diffQueryOrderedChanges;                                        // 20\n                                                                                                              // 21\n      var oldObjIds = [];                                                                                     // 22\n      var newObjIds = [];                                                                                     // 23\n      var posOld = {}; // maps from idStringify'd ids                                                         // 24\n      var posNew = {}; // ditto                                                                               // 25\n      var posCur = {};                                                                                        // 26\n      var lengthCur = lastSeqArray.length;                                                                    // 27\n                                                                                                              // 28\n      _.each(seqArray, function (doc, i) {                                                                    // 29\n        newObjIds.push({_id: doc._id});                                                                       // 30\n        posNew[idStringify(doc._id)] = i;                                                                     // 31\n      });                                                                                                     // 32\n                                                                                                              // 33\n      _.each(lastSeqArray, function (doc, i) {                                                                // 34\n        oldObjIds.push({_id: doc._id});                                                                       // 35\n        posOld[idStringify(doc._id)] = i;                                                                     // 36\n        posCur[idStringify(doc._id)] = i;                                                                     // 37\n      });                                                                                                     // 38\n                                                                                                              // 39\n      // Arrays can contain arbitrary objects. We don't diff the                                              // 40\n      // objects. Instead we always fire 'changedAt' callback on every                                        // 41\n      // object. The consumer of `observe-sequence` should deal with                                          // 42\n      // it appropriately.                                                                                    // 43\n      diffFn(oldObjIds, newObjIds, {                                                                          // 44\n        addedBefore: function (id, doc, before) {                                                             // 45\n          var position = before ? posCur[idStringify(before)] : lengthCur;                                    // 46\n                                                                                                              // 47\n          _.each(posCur, function (pos, id) {                                                                 // 48\n            if (pos >= position) posCur[id]++;                                                                // 49\n          });                                                                                                 // 50\n                                                                                                              // 51\n          lengthCur++;                                                                                        // 52\n          posCur[idStringify(id)] = position;                                                                 // 53\n                                                                                                              // 54\n          callbacks.addedAt(                                                                                  // 55\n            id,                                                                                               // 56\n            seqArray[posNew[idStringify(id)]],                                                                // 57\n            position,                                                                                         // 58\n            before                                                                                            // 59\n          );                                                                                                  // 60\n        },                                                                                                    // 61\n                                                                                                              // 62\n        movedBefore: function (id, before) {                                                                  // 63\n          var prevPosition = posCur[idStringify(id)];                                                         // 64\n          var position = before ? posCur[idStringify(before)] : lengthCur - 1;                                // 65\n                                                                                                              // 66\n          _.each(posCur, function (pos, id) {                                                                 // 67\n            if (pos >= prevPosition && pos <= position)                                                       // 68\n              posCur[id]--;                                                                                   // 69\n            else if (pos <= prevPosition && pos >= position)                                                  // 70\n              posCur[id]++;                                                                                   // 71\n          });                                                                                                 // 72\n                                                                                                              // 73\n          posCur[idStringify(id)] = position;                                                                 // 74\n                                                                                                              // 75\n          callbacks.movedTo(                                                                                  // 76\n            id,                                                                                               // 77\n            seqArray[posNew[idStringify(id)]],                                                                // 78\n            prevPosition,                                                                                     // 79\n            position,                                                                                         // 80\n            before                                                                                            // 81\n          );                                                                                                  // 82\n        },                                                                                                    // 83\n        removed: function (id) {                                                                              // 84\n          var prevPosition = posCur[idStringify(id)];                                                         // 85\n                                                                                                              // 86\n          _.each(posCur, function (pos, id) {                                                                 // 87\n            if (pos >= prevPosition) posCur[id]--;                                                            // 88\n          });                                                                                                 // 89\n                                                                                                              // 90\n          delete posCur[idStringify(id)];                                                                     // 91\n          lengthCur--;                                                                                        // 92\n                                                                                                              // 93\n          callbacks.removedAt(                                                                                // 94\n            id,                                                                                               // 95\n            lastSeqArray[posOld[idStringify(id)]],                                                            // 96\n            prevPosition                                                                                      // 97\n          );                                                                                                  // 98\n        }                                                                                                     // 99\n      });                                                                                                     // 100\n                                                                                                              // 101\n      _.each(posNew, function (pos, idString) {                                                               // 102\n        if (!_.has(posOld, idString)) return;                                                                 // 103\n                                                                                                              // 104\n        var id = idParse(idString);                                                                           // 105\n        var newItem = seqArray[pos] || {};                                                                    // 106\n        var oldItem = lastSeqArray[posOld[idString]];                                                         // 107\n        var updates = getUpdates(oldItem, newItem, preventNestedDiff);                                        // 108\n        var setDiff = updates.$set;                                                                           // 109\n        var unsetDiff = updates.$unset;                                                                       // 110\n                                                                                                              // 111\n        if (setDiff)                                                                                          // 112\n          setDiff._id = newItem._id;                                                                          // 113\n                                                                                                              // 114\n        if (unsetDiff)                                                                                        // 115\n          unsetDiff._id = newItem._id;                                                                        // 116\n                                                                                                              // 117\n        if (setDiff || unsetDiff)                                                                             // 118\n          callbacks.changedAt(id, setDiff, unsetDiff, pos, oldItem);                                          // 119\n      });                                                                                                     // 120\n    }                                                                                                         // 121\n                                                                                                              // 122\n    diffArray.deepCopyChanges = function (oldItem, newItem) {                                                 // 123\n      var setDiff = getUpdates(oldItem, newItem).$set;                                                        // 124\n                                                                                                              // 125\n      _.each(setDiff, function(v, deepKey) {                                                                  // 126\n        setDeep(oldItem, deepKey, v);                                                                         // 127\n      });                                                                                                     // 128\n    };                                                                                                        // 129\n                                                                                                              // 130\n    diffArray.deepCopyRemovals = function (oldItem, newItem) {                                                // 131\n      var unsetDiff = getUpdates(oldItem, newItem).$unset;                                                    // 132\n                                                                                                              // 133\n      _.each(unsetDiff, function(v, deepKey) {                                                                // 134\n        unsetDeep(oldItem, deepKey);                                                                          // 135\n      });                                                                                                     // 136\n    };                                                                                                        // 137\n                                                                                                              // 138\n    var setDeep = function(obj, deepKey, v) {                                                                 // 139\n      var split = deepKey.split('.');                                                                         // 140\n      var initialKeys = _.initial(split);                                                                     // 141\n      var lastKey = _.last(split);                                                                            // 142\n                                                                                                              // 143\n      initialKeys.reduce(function(subObj, k, i) {                                                             // 144\n        var nextKey = split[i + 1];                                                                           // 145\n                                                                                                              // 146\n        if (isNumStr(nextKey)) {                                                                              // 147\n          if (subObj[k] == null) subObj[k] = [];                                                              // 148\n          if (subObj[k].length == parseInt(nextKey)) subObj[k].push(null);                                    // 149\n        }                                                                                                     // 150\n                                                                                                              // 151\n        else if (subObj[k] == null || !isHash(subObj[k])) {                                                   // 152\n          subObj[k] = {};                                                                                     // 153\n        }                                                                                                     // 154\n                                                                                                              // 155\n        return subObj[k];                                                                                     // 156\n      }, obj);                                                                                                // 157\n                                                                                                              // 158\n      getDeep(obj, initialKeys)[lastKey] = v;                                                                 // 159\n      return v;                                                                                               // 160\n    };                                                                                                        // 161\n                                                                                                              // 162\n    var unsetDeep = function(obj, deepKey) {                                                                  // 163\n      var split = deepKey.split('.');                                                                         // 164\n      var initialKeys = _.initial(split);                                                                     // 165\n      var lastKey = _.last(split);                                                                            // 166\n      return delete getDeep(obj, initialKeys)[lastKey];                                                       // 167\n    };                                                                                                        // 168\n                                                                                                              // 169\n    var getDeep = function(obj, keys) {                                                                       // 170\n      return keys.reduce(function(subObj, k) {                                                                // 171\n        return subObj[k];                                                                                     // 172\n      }, obj);                                                                                                // 173\n    };                                                                                                        // 174\n                                                                                                              // 175\n    var isHash = function(obj) {                                                                              // 176\n      return _.isObject(obj) &&                                                                               // 177\n             Object.getPrototypeOf(obj) === Object.prototype;                                                 // 178\n    };                                                                                                        // 179\n                                                                                                              // 180\n    var isNumStr = function(str) {                                                                            // 181\n      return str.match(/^\\d+$/);                                                                              // 182\n    };                                                                                                        // 183\n                                                                                                              // 184\n    return diffArray;                                                                                         // 185\n}]);                                                                                                          // 186\n                                                                                                              // 187\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/angular/lib/get-updates.js                                                                        //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n'use strict';                                                                                                 // 1\n                                                                                                              // 2\n// https://github.com/DAB0mB/get-updates                                                                      // 3\n(function() {                                                                                                 // 4\n  var module = angular.module('getUpdates', []);                                                              // 5\n                                                                                                              // 6\n  var utils = (function() {                                                                                   // 7\n    var rip = function(obj, level) {                                                                          // 8\n      if (level < 1) return {};                                                                               // 9\n                                                                                                              // 10\n      return _.reduce(obj, function(clone, v, k) {                                                            // 11\n        v = _.isObject(v) ? rip(v, --level) : v;                                                              // 12\n        clone[k] = v;                                                                                         // 13\n        return clone;                                                                                         // 14\n      }, {});                                                                                                 // 15\n    };                                                                                                        // 16\n                                                                                                              // 17\n    var toPaths = function(obj) {                                                                             // 18\n      var keys = getKeyPaths(obj);                                                                            // 19\n      var values = getDeepValues(obj);                                                                        // 20\n      return _.object(keys, values);                                                                          // 21\n    };                                                                                                        // 22\n                                                                                                              // 23\n    var getKeyPaths = function(obj) {                                                                         // 24\n      var keys = _.keys(obj).map(function(k) {                                                                // 25\n        var v = obj[k];                                                                                       // 26\n        if (!_.isObject(v) || _.isEmpty(v)) return k;                                                         // 27\n                                                                                                              // 28\n        return getKeyPaths(v).map(function(subKey) {                                                          // 29\n          return k + '.' + subKey;                                                                            // 30\n        });                                                                                                   // 31\n      });                                                                                                     // 32\n                                                                                                              // 33\n      return _.flatten(keys);                                                                                 // 34\n    };                                                                                                        // 35\n                                                                                                              // 36\n    var getDeepValues = function(obj) {                                                                       // 37\n      var values = _.values(obj).map(function(v) {                                                            // 38\n        if (!_.isObject(v) || _.isEmpty(v))                                                                   // 39\n          return v;                                                                                           // 40\n        else                                                                                                  // 41\n          return getDeepValues(v);                                                                            // 42\n      });                                                                                                     // 43\n                                                                                                              // 44\n      return flatten(values);                                                                                 // 45\n    };                                                                                                        // 46\n                                                                                                              // 47\n    var flatten = function(arr) {                                                                             // 48\n      return arr.reduce(function(flattened, v, i) {                                                           // 49\n        if (_.isArray(v) && !_.isEmpty(v))                                                                    // 50\n          flattened.push.apply(flattened, flatten(v));                                                        // 51\n        else                                                                                                  // 52\n          flattened.push(v);                                                                                  // 53\n                                                                                                              // 54\n        return flattened;                                                                                     // 55\n      }, []);                                                                                                 // 56\n    };                                                                                                        // 57\n                                                                                                              // 58\n    var setFilled = function(obj, k, v) {                                                                     // 59\n      if (!_.isEmpty(v)) obj[k] = v;                                                                          // 60\n    };                                                                                                        // 61\n                                                                                                              // 62\n    var assert = function(result, msg) {                                                                      // 63\n      if (!result) throwErr(msg);                                                                             // 64\n    };                                                                                                        // 65\n                                                                                                              // 66\n    var throwErr = function(msg) {                                                                            // 67\n      throw Error('get-updates error - ' + msg);                                                              // 68\n    };                                                                                                        // 69\n                                                                                                              // 70\n    return {                                                                                                  // 71\n      rip: rip,                                                                                               // 72\n      toPaths: toPaths,                                                                                       // 73\n      getKeyPaths: getKeyPaths,                                                                               // 74\n      getDeepValues: getDeepValues,                                                                           // 75\n      setFilled: setFilled,                                                                                   // 76\n      assert: assert,                                                                                         // 77\n      throwErr: throwErr                                                                                      // 78\n    };                                                                                                        // 79\n  })();                                                                                                       // 80\n                                                                                                              // 81\n  var getDifference = (function() {                                                                           // 82\n    var getDifference = function(src, dst, isShallow) {                                                       // 83\n      var level;                                                                                              // 84\n                                                                                                              // 85\n      if (isShallow > 1)                                                                                      // 86\n        level = isShallow;                                                                                    // 87\n      else if (isShallow)                                                                                     // 88\n        level = 1;                                                                                            // 89\n                                                                                                              // 90\n      if (level) {                                                                                            // 91\n        src = utils.rip(src, level);                                                                          // 92\n        dst = utils.rip(dst, level);                                                                          // 93\n      }                                                                                                       // 94\n                                                                                                              // 95\n      return compare(src, dst);                                                                               // 96\n    };                                                                                                        // 97\n                                                                                                              // 98\n    var compare = function(src, dst) {                                                                        // 99\n      var srcKeys = _.keys(src);                                                                              // 100\n      var dstKeys = _.keys(dst);                                                                              // 101\n                                                                                                              // 102\n      var keys = _.chain([])                                                                                  // 103\n        .concat(srcKeys)                                                                                      // 104\n        .concat(dstKeys)                                                                                      // 105\n        .uniq()                                                                                               // 106\n        .without('$$hashKey')                                                                                 // 107\n        .value();                                                                                             // 108\n                                                                                                              // 109\n      return keys.reduce(function(diff, k) {                                                                  // 110\n        var srcValue = src[k];                                                                                // 111\n        var dstValue = dst[k];                                                                                // 112\n                                                                                                              // 113\n        if (_.isDate(srcValue) && _.isDate(dstValue)) {                                                       // 114\n          if (srcValue.getTime() != dstValue.getTime()) diff[k] = dstValue;                                   // 115\n        }                                                                                                     // 116\n                                                                                                              // 117\n        if (_.isObject(srcValue) && _.isObject(dstValue)) {                                                   // 118\n          var valueDiff = getDifference(srcValue, dstValue);                                                  // 119\n          utils.setFilled(diff, k, valueDiff);                                                                // 120\n        }                                                                                                     // 121\n                                                                                                              // 122\n        else if (srcValue !== dstValue) {                                                                     // 123\n          diff[k] = dstValue;                                                                                 // 124\n        }                                                                                                     // 125\n                                                                                                              // 126\n        return diff;                                                                                          // 127\n      }, {});                                                                                                 // 128\n    };                                                                                                        // 129\n                                                                                                              // 130\n    return getDifference;                                                                                     // 131\n  })();                                                                                                       // 132\n                                                                                                              // 133\n  var getUpdates = (function() {                                                                              // 134\n    var getUpdates = function(src, dst, isShallow) {                                                          // 135\n      utils.assert(_.isObject(src), 'first argument must be an object');                                      // 136\n      utils.assert(_.isObject(dst), 'second argument must be an object');                                     // 137\n                                                                                                              // 138\n      var diff = getDifference(src, dst, isShallow);                                                          // 139\n      var paths = utils.toPaths(diff);                                                                        // 140\n                                                                                                              // 141\n      var set = createSet(paths);                                                                             // 142\n      var unset = createUnset(paths);                                                                         // 143\n      var pull = createPull(unset);                                                                           // 144\n                                                                                                              // 145\n      var updates = {};                                                                                       // 146\n      utils.setFilled(updates, '$set', set);                                                                  // 147\n      utils.setFilled(updates, '$unset', unset);                                                              // 148\n      utils.setFilled(updates, '$pull', pull);                                                                // 149\n                                                                                                              // 150\n      return updates;                                                                                         // 151\n    };                                                                                                        // 152\n                                                                                                              // 153\n    var createSet = function(paths) {                                                                         // 154\n      var undefinedKeys = getUndefinedKeys(paths);                                                            // 155\n      return _.omit(paths, undefinedKeys);                                                                    // 156\n    };                                                                                                        // 157\n                                                                                                              // 158\n    var createUnset = function(paths) {                                                                       // 159\n      var undefinedKeys = getUndefinedKeys(paths);                                                            // 160\n      var unset = _.pick(paths, undefinedKeys);                                                               // 161\n                                                                                                              // 162\n      return _.reduce(unset, function(result, v, k) {                                                         // 163\n        result[k] = true;                                                                                     // 164\n        return result;                                                                                        // 165\n      }, {});                                                                                                 // 166\n    };                                                                                                        // 167\n                                                                                                              // 168\n    var createPull = function(unset) {                                                                        // 169\n      var arrKeyPaths = _.keys(unset).map(function(k) {                                                       // 170\n        var split = k.match(/(.*)\\.\\d+$/);                                                                    // 171\n        return split && split[1];                                                                             // 172\n      });                                                                                                     // 173\n                                                                                                              // 174\n      return _.compact(arrKeyPaths).reduce(function(pull, k) {                                                // 175\n        pull[k] = null;                                                                                       // 176\n        return pull;                                                                                          // 177\n      }, {});                                                                                                 // 178\n    };                                                                                                        // 179\n                                                                                                              // 180\n    var getUndefinedKeys = function(obj) {                                                                    // 181\n      return _.keys(obj).filter(function (k) {                                                                // 182\n        var v = obj[k];                                                                                       // 183\n        return _.isUndefined(v);                                                                              // 184\n      });                                                                                                     // 185\n    };                                                                                                        // 186\n                                                                                                              // 187\n    return getUpdates;                                                                                        // 188\n  })();                                                                                                       // 189\n                                                                                                              // 190\n  module.value('getUpdates', getUpdates);                                                                     // 191\n})();                                                                                                         // 192\n                                                                                                              // 193\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/angular/modules/angular-meteor-subscribe.js                                                       //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n'use strict';                                                                                                 // 1\nvar angularMeteorSubscribe = angular.module('angular-meteor.subscribe', []);                                  // 2\n                                                                                                              // 3\nangularMeteorSubscribe.service('$meteorSubscribe', ['$q',                                                     // 4\n  function ($q) {                                                                                             // 5\n    var self = this;                                                                                          // 6\n                                                                                                              // 7\n    this._subscribe = function(scope, deferred, args) {                                                       // 8\n      var subscription = null;                                                                                // 9\n      var lastArg = args[args.length - 1];                                                                    // 10\n                                                                                                              // 11\n      // User supplied onStop callback                                                                        // 12\n      // save it for later use and remove                                                                     // 13\n      // from subscription arguments                                                                          // 14\n      if (angular.isObject(lastArg) &&                                                                        // 15\n          angular.isFunction(lastArg.onStop)) {                                                               // 16\n        var onStop = lastArg.onStop;                                                                          // 17\n                                                                                                              // 18\n        args.pop();                                                                                           // 19\n      }                                                                                                       // 20\n                                                                                                              // 21\n      args.push({                                                                                             // 22\n        onReady: function() {                                                                                 // 23\n          deferred.resolve(subscription);                                                                     // 24\n        },                                                                                                    // 25\n        onStop: function(err) {                                                                               // 26\n          if (!deferred.promise.$$state.status) {                                                             // 27\n            if (err)                                                                                          // 28\n              deferred.reject(err);                                                                           // 29\n            else                                                                                              // 30\n              deferred.reject(new Meteor.Error(\"Subscription Stopped\",                                        // 31\n                \"Subscription stopped by a call to stop method. Either by the client or by the server.\"));    // 32\n          } else if (onStop)                                                                                  // 33\n            // After promise was resolved or rejected                                                         // 34\n            // call user supplied onStop callback.                                                            // 35\n            onStop.apply(this, Array.prototype.slice.call(arguments));                                        // 36\n                                                                                                              // 37\n        }                                                                                                     // 38\n      });                                                                                                     // 39\n                                                                                                              // 40\n      subscription =  Meteor.subscribe.apply(scope, args);                                                    // 41\n                                                                                                              // 42\n      return subscription;                                                                                    // 43\n    };                                                                                                        // 44\n                                                                                                              // 45\n    this.subscribe = function(){                                                                              // 46\n      var deferred = $q.defer();                                                                              // 47\n      var args = Array.prototype.slice.call(arguments);                                                       // 48\n      var subscription = null;                                                                                // 49\n                                                                                                              // 50\n      self._subscribe(this, deferred, args);                                                                  // 51\n                                                                                                              // 52\n      return deferred.promise;                                                                                // 53\n    };                                                                                                        // 54\n  }]);                                                                                                        // 55\n                                                                                                              // 56\nangularMeteorSubscribe.run(['$rootScope', '$q', '$meteorSubscribe',                                           // 57\n  function($rootScope, $q, $meteorSubscribe) {                                                                // 58\n    Object.getPrototypeOf($rootScope).$meteorSubscribe = function() {                                         // 59\n      var deferred = $q.defer();                                                                              // 60\n      var args = Array.prototype.slice.call(arguments);                                                       // 61\n                                                                                                              // 62\n      var subscription = $meteorSubscribe._subscribe(this, deferred, args);                                   // 63\n                                                                                                              // 64\n      this.$on('$destroy', function() {                                                                       // 65\n        subscription.stop();                                                                                  // 66\n      });                                                                                                     // 67\n                                                                                                              // 68\n      return deferred.promise;                                                                                // 69\n    };                                                                                                        // 70\n}]);                                                                                                          // 71\n                                                                                                              // 72\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/angular/modules/angular-meteor-stopper.js                                                         //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n'use strict';                                                                                                 // 1\n                                                                                                              // 2\nvar angularMeteorStopper = angular.module('angular-meteor.stopper',                                           // 3\n  ['angular-meteor.subscribe']);                                                                              // 4\n                                                                                                              // 5\nangularMeteorStopper.factory('$meteorStopper', ['$q', '$meteorSubscribe',                                     // 6\n  function($q, $meteorSubscribe) {                                                                            // 7\n    function $meteorStopper($meteorEntity) {                                                                  // 8\n      return function() {                                                                                     // 9\n        var args = Array.prototype.slice.call(arguments);                                                     // 10\n        var meteorEntity = $meteorEntity.apply(this, args);                                                   // 11\n                                                                                                              // 12\n        angular.extend(meteorEntity, $meteorStopper);                                                         // 13\n        meteorEntity.$$scope = this;                                                                          // 14\n                                                                                                              // 15\n        this.$on('$destroy', function () {                                                                    // 16\n          meteorEntity.stop();                                                                                // 17\n          if (meteorEntity.subscription) meteorEntity.subscription.stop();                                    // 18\n        });                                                                                                   // 19\n                                                                                                              // 20\n        return meteorEntity;                                                                                  // 21\n      };                                                                                                      // 22\n    }                                                                                                         // 23\n                                                                                                              // 24\n    $meteorStopper.subscribe = function() {                                                                   // 25\n      var args = Array.prototype.slice.call(arguments);                                                       // 26\n      this.subscription = $meteorSubscribe._subscribe(this.$$scope, $q.defer(), args);                        // 27\n      return this;                                                                                            // 28\n    };                                                                                                        // 29\n                                                                                                              // 30\n    return $meteorStopper;                                                                                    // 31\n}]);                                                                                                          // 32\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/angular/modules/angular-meteor-collection.js                                                      //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n'use strict';                                                                                                 // 1\n                                                                                                              // 2\nvar angularMeteorCollection = angular.module('angular-meteor.collection',                                     // 3\n  ['angular-meteor.stopper', 'angular-meteor.subscribe', 'angular-meteor.utils', 'diffArray']);               // 4\n                                                                                                              // 5\n// The reason angular meteor collection is a factory function and not something                               // 6\n// that inherit from array comes from here:                                                                   // 7\n// http://perfectionkills.com/how-ecmascript-5-still-does-not-allow-to-subclass-an-array/                     // 8\n// We went with the direct extensions approach.                                                               // 9\nangularMeteorCollection.factory('AngularMeteorCollection', [                                                  // 10\n  '$q', '$meteorSubscribe', '$meteorUtils', '$rootScope', '$timeout', 'diffArray',                            // 11\n  function($q, $meteorSubscribe, $meteorUtils, $rootScope, $timeout, diffArray) {                             // 12\n    function AngularMeteorCollection(curDefFunc, collection, diffArrayFunc, autoClientSave) {                 // 13\n      var data = [];                                                                                          // 14\n      // Server backup data to evaluate what changes come from client                                         // 15\n      // after each server update.                                                                            // 16\n      data._serverBackup = [];                                                                                // 17\n      // Array differ function.                                                                               // 18\n      data._diffArrayFunc = diffArrayFunc;                                                                    // 19\n      // Handler of the cursor observer.                                                                      // 20\n      data._hObserve = null;                                                                                  // 21\n      // On new cursor autorun handler                                                                        // 22\n      // (autorun for reactive variables).                                                                    // 23\n      data._hNewCurAutorun = null;                                                                            // 24\n      // On new data autorun handler                                                                          // 25\n      // (autorun for cursor.fetch).                                                                          // 26\n      data._hDataAutorun = null;                                                                              // 27\n                                                                                                              // 28\n      if (angular.isDefined(collection)) {                                                                    // 29\n        data.$$collection = collection;                                                                       // 30\n      } else {                                                                                                // 31\n        var cursor = curDefFunc();                                                                            // 32\n        data.$$collection = $meteorUtils.getCollectionByName(cursor.collection.name);                         // 33\n      }                                                                                                       // 34\n                                                                                                              // 35\n      angular.extend(data, AngularMeteorCollection);                                                          // 36\n      data._startCurAutorun(curDefFunc, autoClientSave);                                                      // 37\n                                                                                                              // 38\n      return data;                                                                                            // 39\n    }                                                                                                         // 40\n                                                                                                              // 41\n    AngularMeteorCollection._startCurAutorun = function(curDefFunc, autoClientSave) {                         // 42\n      var self = this;                                                                                        // 43\n      self._hNewCurAutorun = Tracker.autorun(function() {                                                     // 44\n        // When the reactive func gets recomputated we need to stop any previous                              // 45\n        // observeChanges.                                                                                    // 46\n        Tracker.onInvalidate(function() {                                                                     // 47\n          self._stopCursor();                                                                                 // 48\n        });                                                                                                   // 49\n        if (autoClientSave) {                                                                                 // 50\n          self._setAutoClientSave();                                                                          // 51\n        }                                                                                                     // 52\n        self._updateCursor(curDefFunc(), autoClientSave);                                                     // 53\n      });                                                                                                     // 54\n    };                                                                                                        // 55\n                                                                                                              // 56\n    AngularMeteorCollection.subscribe = function() {                                                          // 57\n      $meteorSubscribe.subscribe.apply(this, arguments);                                                      // 58\n      return this;                                                                                            // 59\n    };                                                                                                        // 60\n                                                                                                              // 61\n    AngularMeteorCollection.save = function(docs, useUnsetModifier) {                                         // 62\n      // save whole collection                                                                                // 63\n      if (!docs) docs = this;                                                                                 // 64\n      // save single doc                                                                                      // 65\n      docs = [].concat(docs);                                                                                 // 66\n                                                                                                              // 67\n      var promises = docs.map(function(doc) {                                                                 // 68\n        return this._upsertDoc(doc, useUnsetModifier);                                                        // 69\n      }, this);                                                                                               // 70\n                                                                                                              // 71\n      var allPromise = $q.all(promises);                                                                      // 72\n                                                                                                              // 73\n      allPromise.finally(function() {                                                                         // 74\n        // calls digestion loop with no conflicts                                                             // 75\n        $timeout(angular.noop);                                                                               // 76\n      });                                                                                                     // 77\n                                                                                                              // 78\n      return allPromise;                                                                                      // 79\n    };                                                                                                        // 80\n                                                                                                              // 81\n    AngularMeteorCollection._upsertDoc = function(doc, useUnsetModifier) {                                    // 82\n      var deferred = $q.defer();                                                                              // 83\n      var collection = this.$$collection;                                                                     // 84\n      var upsertResult = function(action, _id) {                                                              // 85\n        return {_id: _id, action: action }                                                                    // 86\n      }                                                                                                       // 87\n      var fulfill, createFulfill;                                                                             // 88\n                                                                                                              // 89\n      // delete $$hashkey                                                                                     // 90\n      doc = $meteorUtils.stripDollarPrefixedKeys(doc);                                                        // 91\n      var docId = doc._id;                                                                                    // 92\n      var isExist = collection.findOne(docId);                                                                // 93\n                                                                                                              // 94\n      // update                                                                                               // 95\n      if (isExist) {                                                                                          // 96\n        // Deletes _id property (from the copy) so that                                                       // 97\n        // it can be $set using update.                                                                       // 98\n        delete doc._id;                                                                                       // 99\n        var modifier = useUnsetModifier ? {$unset: doc} : {$set: doc};                                        // 100\n        createFulfill = _.partial(upsertResult, 'updated');                                                   // 101\n        fulfill = $meteorUtils.fulfill(deferred, null, createFulfill);                                        // 102\n        // NOTE: do not use #upsert() method, since it does not exist in some collections                     // 103\n        collection.update(docId, modifier, fulfill);                                                          // 104\n      // insert                                                                                               // 105\n      } else {                                                                                                // 106\n        createFulfill = _.partial(upsertResult, 'inserted');                                                  // 107\n        fulfill = $meteorUtils.fulfill(deferred, null, createFulfill);                                        // 108\n        collection.insert(doc, fulfill);                                                                      // 109\n      }                                                                                                       // 110\n                                                                                                              // 111\n      return deferred.promise;                                                                                // 112\n    };                                                                                                        // 113\n                                                                                                              // 114\n    AngularMeteorCollection.remove = function(keyOrDocs) {                                                    // 115\n      var keys;                                                                                               // 116\n      // remove whole collection                                                                              // 117\n      if (!keyOrDocs) {                                                                                       // 118\n        keys = _.pluck(this, '_id');                                                                          // 119\n      } else {                                                                                                // 120\n        // remove docs                                                                                        // 121\n        keys = _.map([].concat(keyOrDocs), function(keyOrDoc) {                                               // 122\n          return keyOrDoc._id || keyOrDoc;                                                                    // 123\n        });                                                                                                   // 124\n      }                                                                                                       // 125\n      // Checks if all keys are correct.                                                                      // 126\n      check(keys, [Match.OneOf(String, Mongo.ObjectID)]);                                                     // 127\n                                                                                                              // 128\n      var promises = keys.map(function(key) {                                                                 // 129\n        return this._removeDoc(key);                                                                          // 130\n      }, this);                                                                                               // 131\n                                                                                                              // 132\n      var allPromise = $q.all(promises);                                                                      // 133\n                                                                                                              // 134\n      allPromise.finally(function() {                                                                         // 135\n        $timeout(angular.noop);                                                                               // 136\n      });                                                                                                     // 137\n                                                                                                              // 138\n      return allPromise;                                                                                      // 139\n    };                                                                                                        // 140\n                                                                                                              // 141\n    AngularMeteorCollection._removeDoc = function(id) {                                                       // 142\n      var deferred = $q.defer();                                                                              // 143\n      var collection = this.$$collection;                                                                     // 144\n      var fulfill = $meteorUtils.fulfill(deferred, null, { _id: id, action: 'removed' });                     // 145\n      collection.remove(id, fulfill);                                                                         // 146\n      return deferred.promise;                                                                                // 147\n    };                                                                                                        // 148\n                                                                                                              // 149\n    AngularMeteorCollection._updateCursor = function(cursor, autoClientSave) {                                // 150\n      var self = this;                                                                                        // 151\n                                                                                                              // 152\n      // XXX - consider adding an option for a non-orderd result                                              // 153\n      // for faster performance.                                                                              // 154\n      if (self._hObserve) {                                                                                   // 155\n        self._hObserve.stop();                                                                                // 156\n        self._hDataAutorun.stop();                                                                            // 157\n      }                                                                                                       // 158\n                                                                                                              // 159\n      var serverMode = false;                                                                                 // 160\n      function setServerUpdateMode(name) {                                                                    // 161\n        serverMode = true;                                                                                    // 162\n        // To simplify server update logic, we don't follow                                                   // 163\n        // updates from the client at the same time.                                                          // 164\n        self._unsetAutoClientSave();                                                                          // 165\n      }                                                                                                       // 166\n                                                                                                              // 167\n      var hUnsetTimeout = null;                                                                               // 168\n      // Here we use $timeout to combine multiple updates that go                                             // 169\n      // each one after another.                                                                              // 170\n      function unsetServerUpdateMode() {                                                                      // 171\n        if (hUnsetTimeout) {                                                                                  // 172\n          $timeout.cancel(hUnsetTimeout);                                                                     // 173\n          hUnsetTimeout = null;                                                                               // 174\n        }                                                                                                     // 175\n        hUnsetTimeout = $timeout(function() {                                                                 // 176\n          serverMode = false;                                                                                 // 177\n          // Finds updates that was potentially done from the client side                                     // 178\n          // and saves them.                                                                                  // 179\n          var changes = collectionUtils.diff(self, self._serverBackup,                                        // 180\n            self._diffArrayFunc);                                                                             // 181\n          self._saveChanges(changes);                                                                         // 182\n          // After, continues following client updates.                                                       // 183\n          if (autoClientSave) {                                                                               // 184\n            self._setAutoClientSave();                                                                        // 185\n          }                                                                                                   // 186\n        }, 0);                                                                                                // 187\n      }                                                                                                       // 188\n                                                                                                              // 189\n      this._hObserve = cursor.observe({                                                                       // 190\n        addedAt: function(doc, atIndex) {                                                                     // 191\n          self.splice(atIndex, 0, doc);                                                                       // 192\n          self._serverBackup.splice(atIndex, 0, doc);                                                         // 193\n          setServerUpdateMode();                                                                              // 194\n        },                                                                                                    // 195\n                                                                                                              // 196\n        changedAt: function(doc, oldDoc, atIndex) {                                                           // 197\n          diffArray.deepCopyChanges(self[atIndex], doc);                                                      // 198\n          diffArray.deepCopyRemovals(self[atIndex], doc);                                                     // 199\n          self._serverBackup[atIndex] = self[atIndex];                                                        // 200\n          setServerUpdateMode();                                                                              // 201\n        },                                                                                                    // 202\n                                                                                                              // 203\n        movedTo: function(doc, fromIndex, toIndex) {                                                          // 204\n          self.splice(fromIndex, 1);                                                                          // 205\n          self.splice(toIndex, 0, doc);                                                                       // 206\n          self._serverBackup.splice(fromIndex, 1);                                                            // 207\n          self._serverBackup.splice(toIndex, 0, doc);                                                         // 208\n          setServerUpdateMode();                                                                              // 209\n        },                                                                                                    // 210\n                                                                                                              // 211\n        removedAt: function(oldDoc) {                                                                         // 212\n          var removedIndex = collectionUtils.findIndexById(self, oldDoc);                                     // 213\n                                                                                                              // 214\n          if (removedIndex != -1) {                                                                           // 215\n            self.splice(removedIndex, 1);                                                                     // 216\n            self._serverBackup.splice(removedIndex, 1);                                                       // 217\n            setServerUpdateMode();                                                                            // 218\n          } else {                                                                                            // 219\n            // If it's been removed on client then it's already not in collection                             // 220\n            // itself but still is in the _serverBackup.                                                      // 221\n            removedIndex = collectionUtils.findIndexById(self._serverBackup, oldDoc);                         // 222\n                                                                                                              // 223\n            if (removedIndex != -1) {                                                                         // 224\n              self._serverBackup.splice(removedIndex, 1);                                                     // 225\n            }                                                                                                 // 226\n          }                                                                                                   // 227\n        }                                                                                                     // 228\n      });                                                                                                     // 229\n                                                                                                              // 230\n      this._hDataAutorun = Tracker.autorun(function() {                                                       // 231\n        cursor.fetch();                                                                                       // 232\n        if (serverMode) {                                                                                     // 233\n          unsetServerUpdateMode();                                                                            // 234\n        }                                                                                                     // 235\n      });                                                                                                     // 236\n    };                                                                                                        // 237\n                                                                                                              // 238\n    AngularMeteorCollection.stop = function() {                                                               // 239\n      this._stopCursor();                                                                                     // 240\n      this._hNewCurAutorun.stop();                                                                            // 241\n    };                                                                                                        // 242\n                                                                                                              // 243\n    AngularMeteorCollection._stopCursor = function() {                                                        // 244\n      this._unsetAutoClientSave();                                                                            // 245\n                                                                                                              // 246\n      if (this._hObserve) {                                                                                   // 247\n        this._hObserve.stop();                                                                                // 248\n        this._hDataAutorun.stop();                                                                            // 249\n      }                                                                                                       // 250\n                                                                                                              // 251\n      this.splice(0);                                                                                         // 252\n      this._serverBackup.splice(0);                                                                           // 253\n    };                                                                                                        // 254\n                                                                                                              // 255\n    AngularMeteorCollection._unsetAutoClientSave = function(name) {                                           // 256\n      if (this._hRegAutoBind) {                                                                               // 257\n        this._hRegAutoBind();                                                                                 // 258\n        this._hRegAutoBind = null;                                                                            // 259\n      }                                                                                                       // 260\n    };                                                                                                        // 261\n                                                                                                              // 262\n    AngularMeteorCollection._setAutoClientSave = function() {                                                 // 263\n      var self = this;                                                                                        // 264\n                                                                                                              // 265\n      // Always unsets auto save to keep only one $watch handler.                                             // 266\n      self._unsetAutoClientSave();                                                                            // 267\n                                                                                                              // 268\n      self._hRegAutoBind = $rootScope.$watch(function() {                                                     // 269\n        return self;                                                                                          // 270\n      }, function(nItems, oItems) {                                                                           // 271\n        if (nItems === oItems) return;                                                                        // 272\n                                                                                                              // 273\n        self._unsetAutoClientSave();                                                                          // 274\n        var changes = collectionUtils.diff(self, oItems,                                                      // 275\n          self._diffArrayFunc);                                                                               // 276\n        self._saveChanges(changes);                                                                           // 277\n        self._setAutoClientSave();                                                                            // 278\n      }, true);                                                                                               // 279\n    };                                                                                                        // 280\n                                                                                                              // 281\n    AngularMeteorCollection._saveChanges = function(changes) {                                                // 282\n      // First applies changes to the collection itself.                                                      // 283\n      var newDocs = [];                                                                                       // 284\n      for (var itemInd = changes.added.length - 1; itemInd >= 0; itemInd--) {                                 // 285\n        this.splice(changes.added[itemInd].index, 1);                                                         // 286\n        newDocs.push(changes.added[itemInd].item);                                                            // 287\n      }                                                                                                       // 288\n      // Then saves all new docs in bulk.                                                                     // 289\n      if (newDocs.length) {                                                                                   // 290\n        this.save(newDocs);                                                                                   // 291\n      }                                                                                                       // 292\n                                                                                                              // 293\n      // Collects docs to remove.                                                                             // 294\n      var removeDocs = [];                                                                                    // 295\n      for (var itemInd = 0; itemInd < changes.removed.length; itemInd++) {                                    // 296\n        removeDocs.push(changes.removed[itemInd].item);                                                       // 297\n      }                                                                                                       // 298\n      // Removes docs in bulk.                                                                                // 299\n      if (removeDocs.length) {                                                                                // 300\n        this.remove(removeDocs);                                                                              // 301\n      }                                                                                                       // 302\n                                                                                                              // 303\n      // Collects set and unset changes.                                                                      // 304\n      var setDocs = [], unsetDocs = [];                                                                       // 305\n      for (var itemInd = 0; itemInd < changes.changed.length; itemInd++) {                                    // 306\n        var change = changes.changed[itemInd];                                                                // 307\n        if (change.setDiff) {                                                                                 // 308\n          setDocs.push(change.setDiff);                                                                       // 309\n        }                                                                                                     // 310\n        if (change.unsetDiff) {                                                                               // 311\n          unsetDocs.push(change.unsetDiff);                                                                   // 312\n        }                                                                                                     // 313\n      }                                                                                                       // 314\n      // Then saves all changes in bulk.                                                                      // 315\n      if (setDocs.length) {                                                                                   // 316\n        this.save(setDocs);                                                                                   // 317\n      }                                                                                                       // 318\n      if (unsetDocs.length) {                                                                                 // 319\n        this.save(unsetDocs, true);                                                                           // 320\n      }                                                                                                       // 321\n    };                                                                                                        // 322\n                                                                                                              // 323\n    return AngularMeteorCollection;                                                                           // 324\n}]);                                                                                                          // 325\n                                                                                                              // 326\nangularMeteorCollection.factory('$meteorCollectionFS', ['$meteorCollection', 'diffArray',                     // 327\n  function($meteorCollection, diffArray) {                                                                    // 328\n    function $meteorCollectionFS(reactiveFunc, autoClientSave, collection) {                                  // 329\n      return new $meteorCollection(reactiveFunc, autoClientSave, collection, noNestedDiffArray);              // 330\n    }                                                                                                         // 331\n                                                                                                              // 332\n    var noNestedDiffArray = function(lastSeqArray, seqArray, callbacks) {                                     // 333\n      return diffArray(lastSeqArray, seqArray, callbacks, true);                                              // 334\n    };                                                                                                        // 335\n                                                                                                              // 336\n    return $meteorCollectionFS;                                                                               // 337\n}]);                                                                                                          // 338\n                                                                                                              // 339\nangularMeteorCollection.factory('$meteorCollection', [                                                        // 340\n  'AngularMeteorCollection', '$rootScope', 'diffArray',                                                       // 341\n  function(AngularMeteorCollection, $rootScope, diffArray) {                                                  // 342\n    function $meteorCollection(reactiveFunc, autoClientSave, collection, diffArrayFunc) {                     // 343\n      // Validate parameters                                                                                  // 344\n      if (!reactiveFunc) {                                                                                    // 345\n        throw new TypeError('The first argument of $meteorCollection is undefined.');                         // 346\n      }                                                                                                       // 347\n                                                                                                              // 348\n      if (!(angular.isFunction(reactiveFunc) || angular.isFunction(reactiveFunc.find))) {                     // 349\n        throw new TypeError(                                                                                  // 350\n          'The first argument of $meteorCollection must be a function or\\\n            a have a find function property.');                                                               // 352\n      }                                                                                                       // 353\n                                                                                                              // 354\n      if (!angular.isFunction(reactiveFunc)) {                                                                // 355\n        collection = angular.isDefined(collection) ? collection : reactiveFunc;                               // 356\n        reactiveFunc = _.bind(reactiveFunc.find, reactiveFunc);                                               // 357\n      }                                                                                                       // 358\n                                                                                                              // 359\n      // By default auto save - true.                                                                         // 360\n      autoClientSave = angular.isDefined(autoClientSave) ? autoClientSave : true;                             // 361\n      var ngCollection = new AngularMeteorCollection(reactiveFunc, collection,                                // 362\n        diffArrayFunc || diffArray, autoClientSave);                                                          // 363\n                                                                                                              // 364\n      return ngCollection;                                                                                    // 365\n    }                                                                                                         // 366\n                                                                                                              // 367\n    return $meteorCollection;                                                                                 // 368\n }]);                                                                                                         // 369\n                                                                                                              // 370\nangularMeteorCollection.run([                                                                                 // 371\n  '$rootScope', '$meteorCollection', '$meteorCollectionFS', '$meteorStopper',                                 // 372\n  function($rootScope, $meteorCollection, $meteorCollectionFS, $meteorStopper) {                              // 373\n    var scopeProto = Object.getPrototypeOf($rootScope);                                                       // 374\n    scopeProto.$meteorCollection = $meteorStopper($meteorCollection);                                         // 375\n    scopeProto.$meteorCollectionFS = $meteorStopper($meteorCollectionFS);                                     // 376\n }]);                                                                                                         // 377\n                                                                                                              // 378\n                                                                                                              // 379\n// Local utilities                                                                                            // 380\nvar collectionUtils = {                                                                                       // 381\n                                                                                                              // 382\n  findIndexById: function(collection, doc) {                                                                  // 383\n    var foundDoc = _.find(collection, function(colDoc) {                                                      // 384\n      // EJSON.equals used to compare Mongo.ObjectIDs and Strings.                                            // 385\n      return EJSON.equals(colDoc._id, doc._id);                                                               // 386\n    });                                                                                                       // 387\n    return _.indexOf(collection, foundDoc);                                                                   // 388\n  },                                                                                                          // 389\n                                                                                                              // 390\n  // Finds changes between two collections and saves differences.                                             // 391\n  diff: function(newCollection, oldCollection, diffMethod) {                                                  // 392\n    var changes = {added: [], removed: [], changed: []};                                                      // 393\n                                                                                                              // 394\n    diffMethod(oldCollection, newCollection, {                                                                // 395\n      addedAt: function(id, item, index) {                                                                    // 396\n        changes.added.push({item: item, index: index});                                                       // 397\n      },                                                                                                      // 398\n                                                                                                              // 399\n      removedAt: function(id, item, index) {                                                                  // 400\n        changes.removed.push({item: item, index: index});                                                     // 401\n      },                                                                                                      // 402\n                                                                                                              // 403\n      changedAt: function(id, setDiff, unsetDiff, index, oldItem) {                                           // 404\n        changes.changed.push({setDiff: setDiff, unsetDiff: unsetDiff});                                       // 405\n      },                                                                                                      // 406\n                                                                                                              // 407\n      movedTo: function(id, item, fromIndex, toIndex) {                                                       // 408\n        // XXX do we need this?                                                                               // 409\n      }                                                                                                       // 410\n    });                                                                                                       // 411\n                                                                                                              // 412\n    return changes;                                                                                           // 413\n  }                                                                                                           // 414\n};                                                                                                            // 415\n                                                                                                              // 416\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/angular/modules/angular-meteor-object.js                                                          //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n'use strict';                                                                                                 // 1\n                                                                                                              // 2\nvar angularMeteorObject = angular.module('angular-meteor.object', ['angular-meteor.utils', 'angular-meteor.subscribe', 'angular-meteor.collection', 'getUpdates', 'diffArray']);\n                                                                                                              // 4\nangularMeteorObject.factory('AngularMeteorObject', [                                                          // 5\n  '$q', '$meteorSubscribe', '$meteorCollection', '$meteorUtils', 'diffArray', 'getUpdates',                   // 6\n  function($q, $meteorSubscribe, $meteorCollection, $meteorUtils, diffArray, getUpdates) {                    // 7\n    // A list of internals properties to not watch for, nor pass to the Document on update and etc.           // 8\n    AngularMeteorObject.$$internalProps = [                                                                   // 9\n      '$$collection', '$$options', '$$id', '$$hashkey', '$$internalProps', '$$scope',                         // 10\n      'save', 'reset', 'subscribe', 'stop', 'autorunComputation', 'unregisterAutoBind', 'unregisterAutoDestroy', 'getRawObject',\n      '_auto', '_setAutos', '_eventEmitter', '_serverBackup'                                                  // 12\n    ];                                                                                                        // 13\n                                                                                                              // 14\n    function AngularMeteorObject (collection, id, options){                                                   // 15\n      // Make data not be an object so we can extend it to preserve                                           // 16\n      // Collection Helpers and the like                                                                      // 17\n      var data = new function SubObject() {};                                                                 // 18\n      var doc = collection.findOne(id, options);                                                              // 19\n      angular.extend(data, doc);                                                                              // 20\n      angular.extend(data, AngularMeteorObject);                                                              // 21\n                                                                                                              // 22\n      data._serverBackup = doc || {};                                                                         // 23\n      data.$$collection = collection;                                                                         // 24\n      data.$$options = options;                                                                               // 25\n      data.$$id = id || new Mongo.ObjectID();                                                                 // 26\n                                                                                                              // 27\n      return data;                                                                                            // 28\n    }                                                                                                         // 29\n                                                                                                              // 30\n    AngularMeteorObject.getRawObject = function () {                                                          // 31\n      return angular.copy(_.omit(this, this.$$internalProps));                                                // 32\n    };                                                                                                        // 33\n                                                                                                              // 34\n    AngularMeteorObject.subscribe = function () {                                                             // 35\n      $meteorSubscribe.subscribe.apply(this, arguments);                                                      // 36\n      return this;                                                                                            // 37\n    };                                                                                                        // 38\n                                                                                                              // 39\n    AngularMeteorObject.save = function(custom) {                                                             // 40\n      var deferred = $q.defer();                                                                              // 41\n      var collection = this.$$collection;                                                                     // 42\n      var createFulfill = _.partial($meteorUtils.fulfill, deferred, null);                                    // 43\n      var oldDoc = collection.findOne(this.$$id);                                                             // 44\n      var mods;                                                                                               // 45\n                                                                                                              // 46\n      // update                                                                                               // 47\n      if (oldDoc) {                                                                                           // 48\n        if (custom)                                                                                           // 49\n          mods = { $set: custom };                                                                            // 50\n        else {                                                                                                // 51\n          mods = getUpdates(oldDoc, this.getRawObject());                                                     // 52\n          // If there are no updates, there is nothing to do here, returning                                  // 53\n          if (_.isEmpty(mods)) {                                                                              // 54\n            return $q.when({ action: 'updated' });                                                            // 55\n          }                                                                                                   // 56\n        }                                                                                                     // 57\n                                                                                                              // 58\n        // NOTE: do not use #upsert() method, since it does not exist in some collections                     // 59\n        collection.update(this.$$id, mods, createFulfill({ action: 'updated' }));                             // 60\n      }                                                                                                       // 61\n      // insert                                                                                               // 62\n      else {                                                                                                  // 63\n        if (custom)                                                                                           // 64\n          mods = _.clone(custom);                                                                             // 65\n        else                                                                                                  // 66\n          mods = this.getRawObject();                                                                         // 67\n                                                                                                              // 68\n        mods._id = this.$$id;                                                                                 // 69\n        collection.insert(mods, createFulfill({ action: 'inserted' }));                                       // 70\n      }                                                                                                       // 71\n                                                                                                              // 72\n      return deferred.promise;                                                                                // 73\n    };                                                                                                        // 74\n                                                                                                              // 75\n    AngularMeteorObject.reset = function(keepClientProps) {                                                   // 76\n      var self = this;                                                                                        // 77\n      var options = this.$$options;                                                                           // 78\n      var id = this.$$id;                                                                                     // 79\n      var doc = this.$$collection.findOne(id, options);                                                       // 80\n                                                                                                              // 81\n      if (doc) {                                                                                              // 82\n        // extend SubObject                                                                                   // 83\n        var docKeys = _.keys(doc);                                                                            // 84\n        var docExtension = _.pick(doc, docKeys);                                                              // 85\n        var clientProps;                                                                                      // 86\n                                                                                                              // 87\n        angular.extend(Object.getPrototypeOf(self), Object.getPrototypeOf(doc));                              // 88\n        _.extend(self, docExtension);                                                                         // 89\n        _.extend(self._serverBackup, docExtension);                                                           // 90\n                                                                                                              // 91\n        if (keepClientProps) {                                                                                // 92\n          clientProps = _.intersection(_.keys(self), _.keys(self._serverBackup));                             // 93\n        } else {                                                                                              // 94\n          clientProps = _.keys(self);                                                                         // 95\n        }                                                                                                     // 96\n                                                                                                              // 97\n        var serverProps = _.keys(doc);                                                                        // 98\n        var removedKeys = _.difference(clientProps, serverProps, self.$$internalProps);                       // 99\n                                                                                                              // 100\n        removedKeys.forEach(function (prop) {                                                                 // 101\n          delete self[prop];                                                                                  // 102\n          delete self._serverBackup[prop];                                                                    // 103\n        });                                                                                                   // 104\n      }                                                                                                       // 105\n                                                                                                              // 106\n      else {                                                                                                  // 107\n        _.keys(this.getRawObject()).forEach(function(prop) {                                                  // 108\n          delete self[prop];                                                                                  // 109\n        });                                                                                                   // 110\n                                                                                                              // 111\n        self._serverBackup = {};                                                                              // 112\n      }                                                                                                       // 113\n    };                                                                                                        // 114\n                                                                                                              // 115\n    AngularMeteorObject.stop = function () {                                                                  // 116\n      if (this.unregisterAutoDestroy)                                                                         // 117\n        this.unregisterAutoDestroy();                                                                         // 118\n                                                                                                              // 119\n      if (this.unregisterAutoBind)                                                                            // 120\n        this.unregisterAutoBind();                                                                            // 121\n                                                                                                              // 122\n      if (this.autorunComputation && this.autorunComputation.stop)                                            // 123\n        this.autorunComputation.stop();                                                                       // 124\n    };                                                                                                        // 125\n                                                                                                              // 126\n    return AngularMeteorObject;                                                                               // 127\n}]);                                                                                                          // 128\n                                                                                                              // 129\n                                                                                                              // 130\nangularMeteorObject.factory('$meteorObject', [                                                                // 131\n  '$rootScope', '$meteorUtils', 'getUpdates', 'AngularMeteorObject',                                          // 132\n  function($rootScope, $meteorUtils, getUpdates, AngularMeteorObject) {                                       // 133\n    function $meteorObject(collection, id, auto, options) {                                                   // 134\n      // Validate parameters                                                                                  // 135\n      if (!collection) {                                                                                      // 136\n        throw new TypeError(\"The first argument of $meteorObject is undefined.\");                             // 137\n      }                                                                                                       // 138\n                                                                                                              // 139\n      if (!angular.isFunction(collection.findOne)) {                                                          // 140\n        throw new TypeError(\"The first argument of $meteorObject must be a function or a have a findOne function property.\");\n      }                                                                                                       // 142\n                                                                                                              // 143\n      var data = new AngularMeteorObject(collection, id, options);                                            // 144\n      data._auto = auto !== false; // Making auto default true - http://stackoverflow.com/a/15464208/1426570  // 145\n      angular.extend(data, $meteorObject);                                                                    // 146\n      data._setAutos();                                                                                       // 147\n      return data;                                                                                            // 148\n    }                                                                                                         // 149\n                                                                                                              // 150\n    $meteorObject._setAutos = function() {                                                                    // 151\n      var self = this;                                                                                        // 152\n                                                                                                              // 153\n      this.autorunComputation = $meteorUtils.autorun($rootScope, function() {                                 // 154\n        self.reset(true);                                                                                     // 155\n      });                                                                                                     // 156\n                                                                                                              // 157\n      // Deep watches the model and performs autobind                                                         // 158\n      this.unregisterAutoBind = this._auto && $rootScope.$watch(function(){                                   // 159\n        return self.getRawObject();                                                                           // 160\n      }, function (item, oldItem) {                                                                           // 161\n        if (item === oldItem) return;                                                                         // 162\n                                                                                                              // 163\n        var id = item._id;                                                                                    // 164\n        delete item._id;                                                                                      // 165\n        delete oldItem._id;                                                                                   // 166\n                                                                                                              // 167\n        var updates = getUpdates(oldItem, item);                                                              // 168\n        if (_.isEmpty(updates)) return;                                                                       // 169\n                                                                                                              // 170\n        self.$$collection.update({_id: id}, updates);                                                         // 171\n      }, true);                                                                                               // 172\n                                                                                                              // 173\n      this.unregisterAutoDestroy = $rootScope.$on('$destroy', function() {                                    // 174\n        if (self && self.stop) {                                                                              // 175\n          self.stop();                                                                                        // 176\n        }                                                                                                     // 177\n      });                                                                                                     // 178\n    };                                                                                                        // 179\n                                                                                                              // 180\n    return $meteorObject;                                                                                     // 181\n}]);                                                                                                          // 182\n                                                                                                              // 183\nangularMeteorObject.run([                                                                                     // 184\n  '$rootScope', '$meteorObject', '$meteorStopper',                                                            // 185\n  function ($rootScope, $meteorObject, $meteorStopper) {                                                      // 186\n    var scopeProto = Object.getPrototypeOf($rootScope);                                                       // 187\n    scopeProto.$meteorObject = $meteorStopper($meteorObject);                                                 // 188\n}]);                                                                                                          // 189\n                                                                                                              // 190\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/angular/modules/angular-meteor-user.js                                                            //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n'use strict';                                                                                                 // 1\n                                                                                                              // 2\nvar angularMeteorUser = angular.module('angular-meteor.user', ['angular-meteor.utils']);                      // 3\n                                                                                                              // 4\n// requires package 'accounts-password'                                                                       // 5\nangularMeteorUser.service('$meteorUser', [                                                                    // 6\n  '$rootScope', '$meteorUtils', '$q',                                                                         // 7\n  function($rootScope, $meteorUtils, $q){                                                                     // 8\n    var pack = Package['accounts-base'];                                                                      // 9\n    if (!pack) return;                                                                                        // 10\n                                                                                                              // 11\n    var self = this;                                                                                          // 12\n    var Accounts = pack.Accounts;                                                                             // 13\n                                                                                                              // 14\n    this.waitForUser = function(){                                                                            // 15\n                                                                                                              // 16\n      var deferred = $q.defer();                                                                              // 17\n                                                                                                              // 18\n      $meteorUtils.autorun($rootScope, function(){                                                            // 19\n        if ( !Meteor.loggingIn() )                                                                            // 20\n          deferred.resolve( Meteor.user() );                                                                  // 21\n      });                                                                                                     // 22\n                                                                                                              // 23\n      return deferred.promise;                                                                                // 24\n    };                                                                                                        // 25\n                                                                                                              // 26\n    this.requireUser = function(){                                                                            // 27\n                                                                                                              // 28\n      var deferred = $q.defer();                                                                              // 29\n                                                                                                              // 30\n      $meteorUtils.autorun($rootScope, function(){                                                            // 31\n        if ( !Meteor.loggingIn() ) {                                                                          // 32\n          if ( Meteor.user() == null)                                                                         // 33\n            deferred.reject(\"AUTH_REQUIRED\");                                                                 // 34\n          else                                                                                                // 35\n            deferred.resolve( Meteor.user() );                                                                // 36\n        }                                                                                                     // 37\n      });                                                                                                     // 38\n                                                                                                              // 39\n      return deferred.promise;                                                                                // 40\n    };                                                                                                        // 41\n                                                                                                              // 42\n    this.requireValidUser = function(validatorFn) {                                                           // 43\n      return self.requireUser().then(function(user){                                                          // 44\n        var valid = validatorFn( user );                                                                      // 45\n                                                                                                              // 46\n        if ( valid === true )                                                                                 // 47\n          return user;                                                                                        // 48\n        else if ( typeof valid === \"string\" )                                                                 // 49\n          return $q.reject( valid );                                                                          // 50\n        else                                                                                                  // 51\n          return $q.reject( \"FORBIDDEN\" );                                                                    // 52\n\t    });                                                                                                      // 53\n\t  };                                                                                                         // 54\n                                                                                                              // 55\n    this.loginWithPassword = $meteorUtils.promissor(Meteor, 'loginWithPassword');                             // 56\n    this.createUser = $meteorUtils.promissor(Accounts, 'createUser');                                         // 57\n    this.changePassword = $meteorUtils.promissor(Accounts, 'changePassword');                                 // 58\n    this.forgotPassword = $meteorUtils.promissor(Accounts, 'forgotPassword');                                 // 59\n    this.resetPassword = $meteorUtils.promissor(Accounts, 'resetPassword');                                   // 60\n    this.verifyEmail = $meteorUtils.promissor(Accounts, 'verifyEmail');                                       // 61\n    this.logout = $meteorUtils.promissor(Meteor, 'logout');                                                   // 62\n    this.logoutOtherClients = $meteorUtils.promissor(Meteor, 'logoutOtherClients');                           // 63\n    this.loginWithFacebook = $meteorUtils.promissor(Meteor, 'loginWithFacebook');                             // 64\n    this.loginWithTwitter = $meteorUtils.promissor(Meteor, 'loginWithTwitter');                               // 65\n    this.loginWithGoogle = $meteorUtils.promissor(Meteor, 'loginWithGoogle');                                 // 66\n    this.loginWithGithub = $meteorUtils.promissor(Meteor, 'loginWithGithub');                                 // 67\n    this.loginWithMeteorDeveloperAccount = $meteorUtils.promissor(Meteor, 'loginWithMeteorDeveloperAccount');\n    this.loginWithMeetup = $meteorUtils.promissor(Meteor, 'loginWithMeetup');                                 // 69\n    this.loginWithWeibo = $meteorUtils.promissor(Meteor, 'loginWithWeibo');                                   // 70\n  }                                                                                                           // 71\n]);                                                                                                           // 72\n                                                                                                              // 73\nangularMeteorUser.run([                                                                                       // 74\n  '$rootScope', '$meteorUtils',                                                                               // 75\n  function($rootScope, $meteorUtils){                                                                         // 76\n    $meteorUtils.autorun($rootScope, function(){                                                              // 77\n      if (!Meteor.user) return;                                                                               // 78\n      $rootScope.currentUser = Meteor.user();                                                                 // 79\n      $rootScope.loggingIn = Meteor.loggingIn();                                                              // 80\n    });                                                                                                       // 81\n  }                                                                                                           // 82\n]);                                                                                                           // 83\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/angular/modules/angular-meteor-methods.js                                                         //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n'use strict';                                                                                                 // 1\n                                                                                                              // 2\nvar angularMeteorMethods = angular.module('angular-meteor.methods', ['angular-meteor.utils']);                // 3\n                                                                                                              // 4\nangularMeteorMethods.service('$meteorMethods', [                                                              // 5\n  '$q', '$meteorUtils',                                                                                       // 6\n  function($q, $meteorUtils) {                                                                                // 7\n    this.call = function(){                                                                                   // 8\n      var deferred = $q.defer();                                                                              // 9\n      var fulfill = $meteorUtils.fulfill(deferred);                                                           // 10\n      var args = _.toArray(arguments).concat(fulfill);                                                        // 11\n      Meteor.call.apply(this, args);                                                                          // 12\n      return deferred.promise;                                                                                // 13\n    };                                                                                                        // 14\n  }                                                                                                           // 15\n]);                                                                                                           // 16\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/angular/modules/angular-meteor-session.js                                                         //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n'use strict';                                                                                                 // 1\nvar angularMeteorSession = angular.module('angular-meteor.session', ['angular-meteor.utils']);                // 2\n                                                                                                              // 3\nangularMeteorSession.factory('$meteorSession', ['$meteorUtils', '$parse',                                     // 4\n  function ($meteorUtils, $parse) {                                                                           // 5\n    return function (session) {                                                                               // 6\n                                                                                                              // 7\n      return {                                                                                                // 8\n                                                                                                              // 9\n        bind: function(scope, model) {                                                                        // 10\n          var getter = $parse(model);                                                                         // 11\n          var setter = getter.assign;                                                                         // 12\n          $meteorUtils.autorun(scope, function() {                                                            // 13\n            setter(scope, Session.get(session));                                                              // 14\n          });                                                                                                 // 15\n                                                                                                              // 16\n          scope.$watch(model, function(newItem, oldItem) {                                                    // 17\n            Session.set(session, getter(scope));                                                              // 18\n          }, true);                                                                                           // 19\n                                                                                                              // 20\n        }                                                                                                     // 21\n      };                                                                                                      // 22\n    }                                                                                                         // 23\n  }                                                                                                           // 24\n]);                                                                                                           // 25\n                                                                                                              // 26\n                                                                                                              // 27\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/angular/modules/angular-meteor-reactive-scope.js                                                  //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n/**                                                                                                           // 1\n * Created by netanel on 29/12/14.                                                                            // 2\n */                                                                                                           // 3\nvar angularMeteorReactiveScope = angular.module('angular-meteor.reactive-scope', []);                         // 4\n                                                                                                              // 5\nangularMeteorReactiveScope.run(['$rootScope', '$parse', function($rootScope, $parse) {                        // 6\n  Object.getPrototypeOf($rootScope).getReactively = function(property, objectEquality) {                      // 7\n    var self = this;                                                                                          // 8\n    var getValue = $parse(property);                                                                          // 9\n    objectEquality = !!objectEquality;                                                                        // 10\n                                                                                                              // 11\n    if (!self.hasOwnProperty('$$trackerDeps')) {                                                              // 12\n      self.$$trackerDeps = {};                                                                                // 13\n    }                                                                                                         // 14\n                                                                                                              // 15\n    if (!self.$$trackerDeps[property]) {                                                                      // 16\n      self.$$trackerDeps[property] = new Tracker.Dependency();                                                // 17\n                                                                                                              // 18\n      self.$watch(function() {                                                                                // 19\n        return getValue(self)                                                                                 // 20\n      }, function(newVal, oldVal) {                                                                           // 21\n        if (newVal !== oldVal) {                                                                              // 22\n          self.$$trackerDeps[property].changed();                                                             // 23\n        }                                                                                                     // 24\n      }, objectEquality);                                                                                     // 25\n    }                                                                                                         // 26\n                                                                                                              // 27\n    self.$$trackerDeps[property].depend();                                                                    // 28\n                                                                                                              // 29\n    return getValue(self);                                                                                    // 30\n  };                                                                                                          // 31\n  Object.getPrototypeOf($rootScope).getCollectionReactively = function(property) {                            // 32\n    var self = this;                                                                                          // 33\n    var getValue = $parse(property);                                                                          // 34\n                                                                                                              // 35\n                                                                                                              // 36\n    if (!self.hasOwnProperty('$$trackerDeps')) {                                                              // 37\n      self.$$trackerDeps = {};                                                                                // 38\n    }                                                                                                         // 39\n                                                                                                              // 40\n    if (!self.$$trackerDeps[property]) {                                                                      // 41\n      self.$$trackerDeps[property] = new Tracker.Dependency();                                                // 42\n                                                                                                              // 43\n      self.$watchCollection(property, function() {                                                            // 44\n        self.$$trackerDeps[property].changed();                                                               // 45\n      });                                                                                                     // 46\n    }                                                                                                         // 47\n                                                                                                              // 48\n    self.$$trackerDeps[property].depend();                                                                    // 49\n                                                                                                              // 50\n    return getValue(self);                                                                                    // 51\n  };                                                                                                          // 52\n}]);                                                                                                          // 53\n                                                                                                              // 54\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/angular/modules/angular-meteor-utils.js                                                           //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n'use strict';                                                                                                 // 1\nvar angularMeteorUtils = angular.module('angular-meteor.utils', []);                                          // 2\n                                                                                                              // 3\nangularMeteorUtils.service('$meteorUtils', [                                                                  // 4\n  '$q', '$timeout',                                                                                           // 5\n  function ($q, $timeout) {                                                                                   // 6\n    var self = this;                                                                                          // 7\n    this.getCollectionByName = function(string){                                                              // 8\n      return Mongo.Collection.get(string);                                                                    // 9\n    };                                                                                                        // 10\n    this.autorun = function(scope, fn) {                                                                      // 11\n      // wrapping around Deps.autorun                                                                         // 12\n      var comp = Tracker.autorun(function(c) {                                                                // 13\n        fn(c);                                                                                                // 14\n                                                                                                              // 15\n        // this is run immediately for the first call                                                         // 16\n        // but after that, we need to $apply to start Angular digest                                          // 17\n        if (!c.firstRun) $timeout(angular.noop, 0);                                                           // 18\n      });                                                                                                     // 19\n      // stop autorun when scope is destroyed                                                                 // 20\n      scope.$on('$destroy', function() {                                                                      // 21\n        comp.stop();                                                                                          // 22\n      });                                                                                                     // 23\n      // return autorun object so that it can be stopped manually                                             // 24\n      return comp;                                                                                            // 25\n    };                                                                                                        // 26\n    // Borrowed from angularFire - https://github.com/firebase/angularfire/blob/master/src/utils.js#L445-L454\n    this.stripDollarPrefixedKeys = function (data) {                                                          // 28\n      if( !angular.isObject(data) ||                                                                          // 29\n        data instanceof Date ||                                                                               // 30\n        data instanceof File ||                                                                               // 31\n        (typeof FS === 'object' && data instanceof FS.File)) {                                                // 32\n        return data;                                                                                          // 33\n      }                                                                                                       // 34\n      var out = angular.isArray(data)? [] : {};                                                               // 35\n      angular.forEach(data, function(v,k) {                                                                   // 36\n        if(typeof k !== 'string' || k.charAt(0) !== '$') {                                                    // 37\n          out[k] = self.stripDollarPrefixedKeys(v);                                                           // 38\n        }                                                                                                     // 39\n      });                                                                                                     // 40\n      return out;                                                                                             // 41\n    };                                                                                                        // 42\n    // Returns a callback which fulfills promise                                                              // 43\n    this.fulfill = function(deferred, boundError, boundResult) {                                              // 44\n      return function(err, result) {                                                                          // 45\n        if (err)                                                                                              // 46\n          deferred.reject(boundError == null ? err : boundError);                                             // 47\n        else if (typeof boundResult == \"function\")                                                            // 48\n          deferred.resolve(boundResult == null ? result : boundResult(result));                               // 49\n        else                                                                                                  // 50\n          deferred.resolve(boundResult == null ? result : boundResult);                                       // 51\n      };                                                                                                      // 52\n    };                                                                                                        // 53\n    // creates a function which invokes method with the given arguments and returns a promise                 // 54\n    this.promissor = function(obj, method) {                                                                  // 55\n      return function() {                                                                                     // 56\n        var deferred = $q.defer();                                                                            // 57\n        var fulfill = self.fulfill(deferred);                                                                 // 58\n        var args = _.toArray(arguments).concat(fulfill);                                                      // 59\n        obj[method].apply(obj, args);                                                                         // 60\n        return deferred.promise;                                                                              // 61\n      };                                                                                                      // 62\n    };                                                                                                        // 63\n  }                                                                                                           // 64\n]);                                                                                                           // 65\n                                                                                                              // 66\nangularMeteorUtils.run(['$rootScope', '$meteorUtils',                                                         // 67\n  function($rootScope, $meteorUtils) {                                                                        // 68\n    Object.getPrototypeOf($rootScope).$meteorAutorun = function(fn) {                                         // 69\n      return $meteorUtils.autorun(this, fn);                                                                  // 70\n    };                                                                                                        // 71\n}]);                                                                                                          // 72\n                                                                                                              // 73\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/angular/modules/angular-meteor-camera.js                                                          //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n'use strict';                                                                                                 // 1\n                                                                                                              // 2\nvar angularMeteorCamera = angular.module('angular-meteor.camera', ['angular-meteor.utils']);                  // 3\n                                                                                                              // 4\n// requires package 'mdg:camera'                                                                              // 5\nangularMeteorCamera.service('$meteorCamera', [                                                                // 6\n  '$q', '$meteorUtils',                                                                                       // 7\n  function ($q, $meteorUtils) {                                                                               // 8\n    var pack = Package['mdg:camera'];                                                                         // 9\n    if (!pack) return;                                                                                        // 10\n                                                                                                              // 11\n    var MeteorCamera = pack.MeteorCamera;                                                                     // 12\n                                                                                                              // 13\n    this.getPicture = function(options){                                                                      // 14\n      options = options || {};                                                                                // 15\n      var deferred = $q.defer();                                                                              // 16\n      MeteorCamera.getPicture(options, $meteorUtils.fulfill(deferred));                                       // 17\n      return deferred.promise;                                                                                // 18\n    };                                                                                                        // 19\n  }                                                                                                           // 20\n]);                                                                                                           // 21\n                                                                                                              // 22\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/angular/angular-meteor.js                                                                         //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n// Define angular-meteor and its dependencies                                                                 // 1\nvar angularMeteor = angular.module('angular-meteor', [                                                        // 2\n  'angular-meteor.subscribe',                                                                                 // 3\n  'angular-meteor.collection',                                                                                // 4\n  'angular-meteor.object',                                                                                    // 5\n  'angular-meteor.user',                                                                                      // 6\n  'angular-meteor.methods',                                                                                   // 7\n  'angular-meteor.session',                                                                                   // 8\n  'angular-meteor.reactive-scope',                                                                            // 9\n  'angular-meteor.utils',                                                                                     // 10\n  'angular-meteor.camera'                                                                                     // 11\n]);                                                                                                           // 12\n                                                                                                              // 13\nangularMeteor.run(['$compile', '$document', '$rootScope', function ($compile, $document, $rootScope) {        // 14\n    // Recompile after iron:router builds page                                                                // 15\n    if(Package['iron:router']) {                                                                              // 16\n      var appLoaded = false;                                                                                  // 17\n      Package['iron:router'].Router.onAfterAction(function(req, res, next) {                                  // 18\n        Tracker.afterFlush(function() {                                                                       // 19\n          if (!appLoaded) {                                                                                   // 20\n            $compile($document)($rootScope);                                                                  // 21\n            if (!$rootScope.$$phase) $rootScope.$apply();                                                     // 22\n            appLoaded = true;                                                                                 // 23\n          }                                                                                                   // 24\n        })                                                                                                    // 25\n      });                                                                                                     // 26\n    }                                                                                                         // 27\n  }]);                                                                                                        // 28\n                                                                                                              // 29\n// Putting all services under $meteor service for syntactic sugar                                             // 30\nangularMeteor.service('$meteor', ['$meteorCollection', '$meteorCollectionFS', '$meteorObject', '$meteorMethods', '$meteorSession', '$meteorSubscribe', '$meteorUtils', '$meteorCamera', '$meteorUser',\n  function($meteorCollection, $meteorCollectionFS, $meteorObject, $meteorMethods, $meteorSession, $meteorSubscribe, $meteorUtils, $meteorCamera, $meteorUser){\n    this.collection = $meteorCollection;                                                                      // 33\n    this.collectionFS = $meteorCollectionFS;                                                                  // 34\n    this.object = $meteorObject;                                                                              // 35\n    this.subscribe = $meteorSubscribe.subscribe;                                                              // 36\n    this.call = $meteorMethods.call;                                                                          // 37\n    this.loginWithPassword = $meteorUser.loginWithPassword;                                                   // 38\n    this.requireUser = $meteorUser.requireUser;                                                               // 39\n    this.requireValidUser = $meteorUser.requireValidUser;                                                     // 40\n    this.waitForUser = $meteorUser.waitForUser;                                                               // 41\n    this.createUser = $meteorUser.createUser;                                                                 // 42\n    this.changePassword = $meteorUser.changePassword;                                                         // 43\n    this.forgotPassword = $meteorUser.forgotPassword;                                                         // 44\n    this.resetPassword = $meteorUser.resetPassword;                                                           // 45\n    this.verifyEmail = $meteorUser.verifyEmail;                                                               // 46\n    this.loginWithMeteorDeveloperAccount = $meteorUser.loginWithMeteorDeveloperAccount;                       // 47\n    this.loginWithFacebook = $meteorUser.loginWithFacebook;                                                   // 48\n    this.loginWithGithub = $meteorUser.loginWithGithub;                                                       // 49\n    this.loginWithGoogle = $meteorUser.loginWithGoogle;                                                       // 50\n    this.loginWithMeetup = $meteorUser.loginWithMeetup;                                                       // 51\n    this.loginWithTwitter = $meteorUser.loginWithTwitter;                                                     // 52\n    this.loginWithWeibo = $meteorUser.loginWithWeibo;                                                         // 53\n    this.logout = $meteorUser.logout;                                                                         // 54\n    this.logoutOtherClients = $meteorUser.logoutOtherClients;                                                 // 55\n    this.session = $meteorSession;                                                                            // 56\n    this.autorun = $meteorUtils.autorun;                                                                      // 57\n    this.getCollectionByName = $meteorUtils.getCollectionByName;                                              // 58\n    this.getPicture = $meteorCamera.getPicture;                                                               // 59\n}]);                                                                                                          // 60\n                                                                                                              // 61\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}}]