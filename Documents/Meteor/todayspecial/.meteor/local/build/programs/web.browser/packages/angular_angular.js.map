{"version":3,"sources":["meteor://💻app/packages/angular_angular/packages/angular_angular.js"],"names":[],"mappingsfile":"/packages/angular_angular.js","sourcesContent":["(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/angular_angular/angular.js                                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * @license AngularJS v1.4.7                                                                                           // 2\n * (c) 2010-2015 Google, Inc. http://angularjs.org                                                                     // 3\n * License: MIT                                                                                                        // 4\n */                                                                                                                    // 5\n(function(window, document, undefined) {'use strict';                                                                  // 6\n                                                                                                                       // 7\n/**                                                                                                                    // 8\n * @description                                                                                                        // 9\n *                                                                                                                     // 10\n * This object provides a utility for producing rich Error messages within                                             // 11\n * Angular. It can be called as follows:                                                                               // 12\n *                                                                                                                     // 13\n * var exampleMinErr = minErr('example');                                                                              // 14\n * throw exampleMinErr('one', 'This {0} is {1}', foo, bar);                                                            // 15\n *                                                                                                                     // 16\n * The above creates an instance of minErr in the example namespace. The                                               // 17\n * resulting error will have a namespaced error code of example.one.  The                                              // 18\n * resulting error will replace {0} with the value of foo, and {1} with the                                            // 19\n * value of bar. The object is not restricted in the number of arguments it can                                        // 20\n * take.                                                                                                               // 21\n *                                                                                                                     // 22\n * If fewer arguments are specified than necessary for interpolation, the extra                                        // 23\n * interpolation markers will be preserved in the final string.                                                        // 24\n *                                                                                                                     // 25\n * Since data will be parsed statically during a build step, some restrictions                                         // 26\n * are applied with respect to how minErr instances are created and called.                                            // 27\n * Instances should have names of the form namespaceMinErr for a minErr created                                        // 28\n * using minErr('namespace') . Error codes, namespaces and template strings                                            // 29\n * should all be static strings, not variables or general expressions.                                                 // 30\n *                                                                                                                     // 31\n * @param {string} module The namespace to use for the new minErr instance.                                            // 32\n * @param {function} ErrorConstructor Custom error constructor to be instantiated when returning                       // 33\n *   error from returned function, for cases when a particular type of error is useful.                                // 34\n * @returns {function(code:string, template:string, ...templateArgs): Error} minErr instance                           // 35\n */                                                                                                                    // 36\n                                                                                                                       // 37\nfunction minErr(module, ErrorConstructor) {                                                                            // 38\n  ErrorConstructor = ErrorConstructor || Error;                                                                        // 39\n  return function() {                                                                                                  // 40\n    var SKIP_INDEXES = 2;                                                                                              // 41\n                                                                                                                       // 42\n    var templateArgs = arguments,                                                                                      // 43\n      code = templateArgs[0],                                                                                          // 44\n      message = '[' + (module ? module + ':' : '') + code + '] ',                                                      // 45\n      template = templateArgs[1],                                                                                      // 46\n      paramPrefix, i;                                                                                                  // 47\n                                                                                                                       // 48\n    message += template.replace(/\\{\\d+\\}/g, function(match) {                                                          // 49\n      var index = +match.slice(1, -1),                                                                                 // 50\n        shiftedIndex = index + SKIP_INDEXES;                                                                           // 51\n                                                                                                                       // 52\n      if (shiftedIndex < templateArgs.length) {                                                                        // 53\n        return toDebugString(templateArgs[shiftedIndex]);                                                              // 54\n      }                                                                                                                // 55\n                                                                                                                       // 56\n      return match;                                                                                                    // 57\n    });                                                                                                                // 58\n                                                                                                                       // 59\n    message += '\\nhttp://errors.angularjs.org/1.4.7/' +                                                                // 60\n      (module ? module + '/' : '') + code;                                                                             // 61\n                                                                                                                       // 62\n    for (i = SKIP_INDEXES, paramPrefix = '?'; i < templateArgs.length; i++, paramPrefix = '&') {                       // 63\n      message += paramPrefix + 'p' + (i - SKIP_INDEXES) + '=' +                                                        // 64\n        encodeURIComponent(toDebugString(templateArgs[i]));                                                            // 65\n    }                                                                                                                  // 66\n                                                                                                                       // 67\n    return new ErrorConstructor(message);                                                                              // 68\n  };                                                                                                                   // 69\n}                                                                                                                      // 70\n                                                                                                                       // 71\n/* We need to tell jshint what variables are being exported */                                                         // 72\n/* global angular: true,                                                                                               // 73\n  msie: true,                                                                                                          // 74\n  jqLite: true,                                                                                                        // 75\n  jQuery: true,                                                                                                        // 76\n  slice: true,                                                                                                         // 77\n  splice: true,                                                                                                        // 78\n  push: true,                                                                                                          // 79\n  toString: true,                                                                                                      // 80\n  ngMinErr: true,                                                                                                      // 81\n  angularModule: true,                                                                                                 // 82\n  uid: true,                                                                                                           // 83\n  REGEX_STRING_REGEXP: true,                                                                                           // 84\n  VALIDITY_STATE_PROPERTY: true,                                                                                       // 85\n                                                                                                                       // 86\n  lowercase: true,                                                                                                     // 87\n  uppercase: true,                                                                                                     // 88\n  manualLowercase: true,                                                                                               // 89\n  manualUppercase: true,                                                                                               // 90\n  nodeName_: true,                                                                                                     // 91\n  isArrayLike: true,                                                                                                   // 92\n  forEach: true,                                                                                                       // 93\n  forEachSorted: true,                                                                                                 // 94\n  reverseParams: true,                                                                                                 // 95\n  nextUid: true,                                                                                                       // 96\n  setHashKey: true,                                                                                                    // 97\n  extend: true,                                                                                                        // 98\n  toInt: true,                                                                                                         // 99\n  inherit: true,                                                                                                       // 100\n  merge: true,                                                                                                         // 101\n  noop: true,                                                                                                          // 102\n  identity: true,                                                                                                      // 103\n  valueFn: true,                                                                                                       // 104\n  isUndefined: true,                                                                                                   // 105\n  isDefined: true,                                                                                                     // 106\n  isObject: true,                                                                                                      // 107\n  isBlankObject: true,                                                                                                 // 108\n  isString: true,                                                                                                      // 109\n  isNumber: true,                                                                                                      // 110\n  isDate: true,                                                                                                        // 111\n  isArray: true,                                                                                                       // 112\n  isFunction: true,                                                                                                    // 113\n  isRegExp: true,                                                                                                      // 114\n  isWindow: true,                                                                                                      // 115\n  isScope: true,                                                                                                       // 116\n  isFile: true,                                                                                                        // 117\n  isFormData: true,                                                                                                    // 118\n  isBlob: true,                                                                                                        // 119\n  isBoolean: true,                                                                                                     // 120\n  isPromiseLike: true,                                                                                                 // 121\n  trim: true,                                                                                                          // 122\n  escapeForRegexp: true,                                                                                               // 123\n  isElement: true,                                                                                                     // 124\n  makeMap: true,                                                                                                       // 125\n  includes: true,                                                                                                      // 126\n  arrayRemove: true,                                                                                                   // 127\n  copy: true,                                                                                                          // 128\n  shallowCopy: true,                                                                                                   // 129\n  equals: true,                                                                                                        // 130\n  csp: true,                                                                                                           // 131\n  jq: true,                                                                                                            // 132\n  concat: true,                                                                                                        // 133\n  sliceArgs: true,                                                                                                     // 134\n  bind: true,                                                                                                          // 135\n  toJsonReplacer: true,                                                                                                // 136\n  toJson: true,                                                                                                        // 137\n  fromJson: true,                                                                                                      // 138\n  convertTimezoneToLocal: true,                                                                                        // 139\n  timezoneToOffset: true,                                                                                              // 140\n  startingTag: true,                                                                                                   // 141\n  tryDecodeURIComponent: true,                                                                                         // 142\n  parseKeyValue: true,                                                                                                 // 143\n  toKeyValue: true,                                                                                                    // 144\n  encodeUriSegment: true,                                                                                              // 145\n  encodeUriQuery: true,                                                                                                // 146\n  angularInit: true,                                                                                                   // 147\n  bootstrap: true,                                                                                                     // 148\n  getTestability: true,                                                                                                // 149\n  snake_case: true,                                                                                                    // 150\n  bindJQuery: true,                                                                                                    // 151\n  assertArg: true,                                                                                                     // 152\n  assertArgFn: true,                                                                                                   // 153\n  assertNotHasOwnProperty: true,                                                                                       // 154\n  getter: true,                                                                                                        // 155\n  getBlockNodes: true,                                                                                                 // 156\n  hasOwnProperty: true,                                                                                                // 157\n  createMap: true,                                                                                                     // 158\n                                                                                                                       // 159\n  NODE_TYPE_ELEMENT: true,                                                                                             // 160\n  NODE_TYPE_ATTRIBUTE: true,                                                                                           // 161\n  NODE_TYPE_TEXT: true,                                                                                                // 162\n  NODE_TYPE_COMMENT: true,                                                                                             // 163\n  NODE_TYPE_DOCUMENT: true,                                                                                            // 164\n  NODE_TYPE_DOCUMENT_FRAGMENT: true,                                                                                   // 165\n*/                                                                                                                     // 166\n                                                                                                                       // 167\n////////////////////////////////////                                                                                   // 168\n                                                                                                                       // 169\n/**                                                                                                                    // 170\n * @ngdoc module                                                                                                       // 171\n * @name ng                                                                                                            // 172\n * @module ng                                                                                                          // 173\n * @description                                                                                                        // 174\n *                                                                                                                     // 175\n * # ng (core module)                                                                                                  // 176\n * The ng module is loaded by default when an AngularJS application is started. The module itself                      // 177\n * contains the essential components for an AngularJS application to function. The table below                         // 178\n * lists a high level breakdown of each of the services/factories, filters, directives and testing                     // 179\n * components available within this core module.                                                                       // 180\n *                                                                                                                     // 181\n * <div doc-module-components=\"ng\"></div>                                                                              // 182\n */                                                                                                                    // 183\n                                                                                                                       // 184\nvar REGEX_STRING_REGEXP = /^\\/(.+)\\/([a-z]*)$/;                                                                        // 185\n                                                                                                                       // 186\n// The name of a form control's ValidityState property.                                                                // 187\n// This is used so that it's possible for internal tests to create mock ValidityStates.                                // 188\nvar VALIDITY_STATE_PROPERTY = 'validity';                                                                              // 189\n                                                                                                                       // 190\n/**                                                                                                                    // 191\n * @ngdoc function                                                                                                     // 192\n * @name angular.lowercase                                                                                             // 193\n * @module ng                                                                                                          // 194\n * @kind function                                                                                                      // 195\n *                                                                                                                     // 196\n * @description Converts the specified string to lowercase.                                                            // 197\n * @param {string} string String to be converted to lowercase.                                                         // 198\n * @returns {string} Lowercased string.                                                                                // 199\n */                                                                                                                    // 200\nvar lowercase = function(string) {return isString(string) ? string.toLowerCase() : string;};                           // 201\nvar hasOwnProperty = Object.prototype.hasOwnProperty;                                                                  // 202\n                                                                                                                       // 203\n/**                                                                                                                    // 204\n * @ngdoc function                                                                                                     // 205\n * @name angular.uppercase                                                                                             // 206\n * @module ng                                                                                                          // 207\n * @kind function                                                                                                      // 208\n *                                                                                                                     // 209\n * @description Converts the specified string to uppercase.                                                            // 210\n * @param {string} string String to be converted to uppercase.                                                         // 211\n * @returns {string} Uppercased string.                                                                                // 212\n */                                                                                                                    // 213\nvar uppercase = function(string) {return isString(string) ? string.toUpperCase() : string;};                           // 214\n                                                                                                                       // 215\n                                                                                                                       // 216\nvar manualLowercase = function(s) {                                                                                    // 217\n  /* jshint bitwise: false */                                                                                          // 218\n  return isString(s)                                                                                                   // 219\n      ? s.replace(/[A-Z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) | 32);})                         // 220\n      : s;                                                                                                             // 221\n};                                                                                                                     // 222\nvar manualUppercase = function(s) {                                                                                    // 223\n  /* jshint bitwise: false */                                                                                          // 224\n  return isString(s)                                                                                                   // 225\n      ? s.replace(/[a-z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) & ~32);})                        // 226\n      : s;                                                                                                             // 227\n};                                                                                                                     // 228\n                                                                                                                       // 229\n                                                                                                                       // 230\n// String#toLowerCase and String#toUpperCase don't produce correct results in browsers with Turkish                    // 231\n// locale, for this reason we need to detect this case and redefine lowercase/uppercase methods                        // 232\n// with correct but slower alternatives.                                                                               // 233\nif ('i' !== 'I'.toLowerCase()) {                                                                                       // 234\n  lowercase = manualLowercase;                                                                                         // 235\n  uppercase = manualUppercase;                                                                                         // 236\n}                                                                                                                      // 237\n                                                                                                                       // 238\n                                                                                                                       // 239\nvar                                                                                                                    // 240\n    msie,             // holds major version number for IE, or NaN if UA is not IE.                                    // 241\n    jqLite,           // delay binding since jQuery could be loaded after us.                                          // 242\n    jQuery,           // delay binding                                                                                 // 243\n    slice             = [].slice,                                                                                      // 244\n    splice            = [].splice,                                                                                     // 245\n    push              = [].push,                                                                                       // 246\n    toString          = Object.prototype.toString,                                                                     // 247\n    getPrototypeOf    = Object.getPrototypeOf,                                                                         // 248\n    ngMinErr          = minErr('ng'),                                                                                  // 249\n                                                                                                                       // 250\n    /** @name angular */                                                                                               // 251\n    angular           = window.angular || (window.angular = {}),                                                       // 252\n    angularModule,                                                                                                     // 253\n    uid               = 0;                                                                                             // 254\n                                                                                                                       // 255\n/**                                                                                                                    // 256\n * documentMode is an IE-only property                                                                                 // 257\n * http://msdn.microsoft.com/en-us/library/ie/cc196988(v=vs.85).aspx                                                   // 258\n */                                                                                                                    // 259\nmsie = document.documentMode;                                                                                          // 260\n                                                                                                                       // 261\n                                                                                                                       // 262\n/**                                                                                                                    // 263\n * @private                                                                                                            // 264\n * @param {*} obj                                                                                                      // 265\n * @return {boolean} Returns true if `obj` is an array or array-like object (NodeList, Arguments,                      // 266\n *                   String ...)                                                                                       // 267\n */                                                                                                                    // 268\nfunction isArrayLike(obj) {                                                                                            // 269\n  if (obj == null || isWindow(obj)) {                                                                                  // 270\n    return false;                                                                                                      // 271\n  }                                                                                                                    // 272\n                                                                                                                       // 273\n  // Support: iOS 8.2 (not reproducible in simulator)                                                                  // 274\n  // \"length\" in obj used to prevent JIT error (gh-11508)                                                              // 275\n  var length = \"length\" in Object(obj) && obj.length;                                                                  // 276\n                                                                                                                       // 277\n  if (obj.nodeType === NODE_TYPE_ELEMENT && length) {                                                                  // 278\n    return true;                                                                                                       // 279\n  }                                                                                                                    // 280\n                                                                                                                       // 281\n  return isString(obj) || isArray(obj) || length === 0 ||                                                              // 282\n         typeof length === 'number' && length > 0 && (length - 1) in obj;                                              // 283\n}                                                                                                                      // 284\n                                                                                                                       // 285\n/**                                                                                                                    // 286\n * @ngdoc function                                                                                                     // 287\n * @name angular.forEach                                                                                               // 288\n * @module ng                                                                                                          // 289\n * @kind function                                                                                                      // 290\n *                                                                                                                     // 291\n * @description                                                                                                        // 292\n * Invokes the `iterator` function once for each item in `obj` collection, which can be either an                      // 293\n * object or an array. The `iterator` function is invoked with `iterator(value, key, obj)`, where `value`              // 294\n * is the value of an object property or an array element, `key` is the object property key or                         // 295\n * array element index and obj is the `obj` itself. Specifying a `context` for the function is optional.               // 296\n *                                                                                                                     // 297\n * It is worth noting that `.forEach` does not iterate over inherited properties because it filters                    // 298\n * using the `hasOwnProperty` method.                                                                                  // 299\n *                                                                                                                     // 300\n * Unlike ES262's                                                                                                      // 301\n * [Array.prototype.forEach](http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.18),                           // 302\n * Providing 'undefined' or 'null' values for `obj` will not throw a TypeError, but rather just                        // 303\n * return the value provided.                                                                                          // 304\n *                                                                                                                     // 305\n   ```js                                                                                                               // 306\n     var values = {name: 'misko', gender: 'male'};                                                                     // 307\n     var log = [];                                                                                                     // 308\n     angular.forEach(values, function(value, key) {                                                                    // 309\n       this.push(key + ': ' + value);                                                                                  // 310\n     }, log);                                                                                                          // 311\n     expect(log).toEqual(['name: misko', 'gender: male']);                                                             // 312\n   ```                                                                                                                 // 313\n *                                                                                                                     // 314\n * @param {Object|Array} obj Object to iterate over.                                                                   // 315\n * @param {Function} iterator Iterator function.                                                                       // 316\n * @param {Object=} context Object to become context (`this`) for the iterator function.                               // 317\n * @returns {Object|Array} Reference to `obj`.                                                                         // 318\n */                                                                                                                    // 319\n                                                                                                                       // 320\nfunction forEach(obj, iterator, context) {                                                                             // 321\n  var key, length;                                                                                                     // 322\n  if (obj) {                                                                                                           // 323\n    if (isFunction(obj)) {                                                                                             // 324\n      for (key in obj) {                                                                                               // 325\n        // Need to check if hasOwnProperty exists,                                                                     // 326\n        // as on IE8 the result of querySelectorAll is an object without a hasOwnProperty function                     // 327\n        if (key != 'prototype' && key != 'length' && key != 'name' && (!obj.hasOwnProperty || obj.hasOwnProperty(key))) {\n          iterator.call(context, obj[key], key, obj);                                                                  // 329\n        }                                                                                                              // 330\n      }                                                                                                                // 331\n    } else if (isArray(obj) || isArrayLike(obj)) {                                                                     // 332\n      var isPrimitive = typeof obj !== 'object';                                                                       // 333\n      for (key = 0, length = obj.length; key < length; key++) {                                                        // 334\n        if (isPrimitive || key in obj) {                                                                               // 335\n          iterator.call(context, obj[key], key, obj);                                                                  // 336\n        }                                                                                                              // 337\n      }                                                                                                                // 338\n    } else if (obj.forEach && obj.forEach !== forEach) {                                                               // 339\n        obj.forEach(iterator, context, obj);                                                                           // 340\n    } else if (isBlankObject(obj)) {                                                                                   // 341\n      // createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty                 // 342\n      for (key in obj) {                                                                                               // 343\n        iterator.call(context, obj[key], key, obj);                                                                    // 344\n      }                                                                                                                // 345\n    } else if (typeof obj.hasOwnProperty === 'function') {                                                             // 346\n      // Slow path for objects inheriting Object.prototype, hasOwnProperty check needed                                // 347\n      for (key in obj) {                                                                                               // 348\n        if (obj.hasOwnProperty(key)) {                                                                                 // 349\n          iterator.call(context, obj[key], key, obj);                                                                  // 350\n        }                                                                                                              // 351\n      }                                                                                                                // 352\n    } else {                                                                                                           // 353\n      // Slow path for objects which do not have a method `hasOwnProperty`                                             // 354\n      for (key in obj) {                                                                                               // 355\n        if (hasOwnProperty.call(obj, key)) {                                                                           // 356\n          iterator.call(context, obj[key], key, obj);                                                                  // 357\n        }                                                                                                              // 358\n      }                                                                                                                // 359\n    }                                                                                                                  // 360\n  }                                                                                                                    // 361\n  return obj;                                                                                                          // 362\n}                                                                                                                      // 363\n                                                                                                                       // 364\nfunction forEachSorted(obj, iterator, context) {                                                                       // 365\n  var keys = Object.keys(obj).sort();                                                                                  // 366\n  for (var i = 0; i < keys.length; i++) {                                                                              // 367\n    iterator.call(context, obj[keys[i]], keys[i]);                                                                     // 368\n  }                                                                                                                    // 369\n  return keys;                                                                                                         // 370\n}                                                                                                                      // 371\n                                                                                                                       // 372\n                                                                                                                       // 373\n/**                                                                                                                    // 374\n * when using forEach the params are value, key, but it is often useful to have key, value.                            // 375\n * @param {function(string, *)} iteratorFn                                                                             // 376\n * @returns {function(*, string)}                                                                                      // 377\n */                                                                                                                    // 378\nfunction reverseParams(iteratorFn) {                                                                                   // 379\n  return function(value, key) { iteratorFn(key, value); };                                                             // 380\n}                                                                                                                      // 381\n                                                                                                                       // 382\n/**                                                                                                                    // 383\n * A consistent way of creating unique IDs in angular.                                                                 // 384\n *                                                                                                                     // 385\n * Using simple numbers allows us to generate 28.6 million unique ids per second for 10 years before                   // 386\n * we hit number precision issues in JavaScript.                                                                       // 387\n *                                                                                                                     // 388\n * Math.pow(2,53) / 60 / 60 / 24 / 365 / 10 = 28.6M                                                                    // 389\n *                                                                                                                     // 390\n * @returns {number} an unique alpha-numeric string                                                                    // 391\n */                                                                                                                    // 392\nfunction nextUid() {                                                                                                   // 393\n  return ++uid;                                                                                                        // 394\n}                                                                                                                      // 395\n                                                                                                                       // 396\n                                                                                                                       // 397\n/**                                                                                                                    // 398\n * Set or clear the hashkey for an object.                                                                             // 399\n * @param obj object                                                                                                   // 400\n * @param h the hashkey (!truthy to delete the hashkey)                                                                // 401\n */                                                                                                                    // 402\nfunction setHashKey(obj, h) {                                                                                          // 403\n  if (h) {                                                                                                             // 404\n    obj.$$hashKey = h;                                                                                                 // 405\n  } else {                                                                                                             // 406\n    delete obj.$$hashKey;                                                                                              // 407\n  }                                                                                                                    // 408\n}                                                                                                                      // 409\n                                                                                                                       // 410\n                                                                                                                       // 411\nfunction baseExtend(dst, objs, deep) {                                                                                 // 412\n  var h = dst.$$hashKey;                                                                                               // 413\n                                                                                                                       // 414\n  for (var i = 0, ii = objs.length; i < ii; ++i) {                                                                     // 415\n    var obj = objs[i];                                                                                                 // 416\n    if (!isObject(obj) && !isFunction(obj)) continue;                                                                  // 417\n    var keys = Object.keys(obj);                                                                                       // 418\n    for (var j = 0, jj = keys.length; j < jj; j++) {                                                                   // 419\n      var key = keys[j];                                                                                               // 420\n      var src = obj[key];                                                                                              // 421\n                                                                                                                       // 422\n      if (deep && isObject(src)) {                                                                                     // 423\n        if (isDate(src)) {                                                                                             // 424\n          dst[key] = new Date(src.valueOf());                                                                          // 425\n        } else if (isRegExp(src)) {                                                                                    // 426\n          dst[key] = new RegExp(src);                                                                                  // 427\n        } else {                                                                                                       // 428\n          if (!isObject(dst[key])) dst[key] = isArray(src) ? [] : {};                                                  // 429\n          baseExtend(dst[key], [src], true);                                                                           // 430\n        }                                                                                                              // 431\n      } else {                                                                                                         // 432\n        dst[key] = src;                                                                                                // 433\n      }                                                                                                                // 434\n    }                                                                                                                  // 435\n  }                                                                                                                    // 436\n                                                                                                                       // 437\n  setHashKey(dst, h);                                                                                                  // 438\n  return dst;                                                                                                          // 439\n}                                                                                                                      // 440\n                                                                                                                       // 441\n/**                                                                                                                    // 442\n * @ngdoc function                                                                                                     // 443\n * @name angular.extend                                                                                                // 444\n * @module ng                                                                                                          // 445\n * @kind function                                                                                                      // 446\n *                                                                                                                     // 447\n * @description                                                                                                        // 448\n * Extends the destination object `dst` by copying own enumerable properties from the `src` object(s)                  // 449\n * to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so           // 450\n * by passing an empty object as the target: `var object = angular.extend({}, object1, object2)`.                      // 451\n *                                                                                                                     // 452\n * **Note:** Keep in mind that `angular.extend` does not support recursive merge (deep copy). Use                      // 453\n * {@link angular.merge} for this.                                                                                     // 454\n *                                                                                                                     // 455\n * @param {Object} dst Destination object.                                                                             // 456\n * @param {...Object} src Source object(s).                                                                            // 457\n * @returns {Object} Reference to `dst`.                                                                               // 458\n */                                                                                                                    // 459\nfunction extend(dst) {                                                                                                 // 460\n  return baseExtend(dst, slice.call(arguments, 1), false);                                                             // 461\n}                                                                                                                      // 462\n                                                                                                                       // 463\n                                                                                                                       // 464\n/**                                                                                                                    // 465\n* @ngdoc function                                                                                                      // 466\n* @name angular.merge                                                                                                  // 467\n* @module ng                                                                                                           // 468\n* @kind function                                                                                                       // 469\n*                                                                                                                      // 470\n* @description                                                                                                         // 471\n* Deeply extends the destination object `dst` by copying own enumerable properties from the `src` object(s)            // 472\n* to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so            // 473\n* by passing an empty object as the target: `var object = angular.merge({}, object1, object2)`.                        // 474\n*                                                                                                                      // 475\n* Unlike {@link angular.extend extend()}, `merge()` recursively descends into object properties of source              // 476\n* objects, performing a deep copy.                                                                                     // 477\n*                                                                                                                      // 478\n* @param {Object} dst Destination object.                                                                              // 479\n* @param {...Object} src Source object(s).                                                                             // 480\n* @returns {Object} Reference to `dst`.                                                                                // 481\n*/                                                                                                                     // 482\nfunction merge(dst) {                                                                                                  // 483\n  return baseExtend(dst, slice.call(arguments, 1), true);                                                              // 484\n}                                                                                                                      // 485\n                                                                                                                       // 486\n                                                                                                                       // 487\n                                                                                                                       // 488\nfunction toInt(str) {                                                                                                  // 489\n  return parseInt(str, 10);                                                                                            // 490\n}                                                                                                                      // 491\n                                                                                                                       // 492\n                                                                                                                       // 493\nfunction inherit(parent, extra) {                                                                                      // 494\n  return extend(Object.create(parent), extra);                                                                         // 495\n}                                                                                                                      // 496\n                                                                                                                       // 497\n/**                                                                                                                    // 498\n * @ngdoc function                                                                                                     // 499\n * @name angular.noop                                                                                                  // 500\n * @module ng                                                                                                          // 501\n * @kind function                                                                                                      // 502\n *                                                                                                                     // 503\n * @description                                                                                                        // 504\n * A function that performs no operations. This function can be useful when writing code in the                        // 505\n * functional style.                                                                                                   // 506\n   ```js                                                                                                               // 507\n     function foo(callback) {                                                                                          // 508\n       var result = calculateResult();                                                                                 // 509\n       (callback || angular.noop)(result);                                                                             // 510\n     }                                                                                                                 // 511\n   ```                                                                                                                 // 512\n */                                                                                                                    // 513\nfunction noop() {}                                                                                                     // 514\nnoop.$inject = [];                                                                                                     // 515\n                                                                                                                       // 516\n                                                                                                                       // 517\n/**                                                                                                                    // 518\n * @ngdoc function                                                                                                     // 519\n * @name angular.identity                                                                                              // 520\n * @module ng                                                                                                          // 521\n * @kind function                                                                                                      // 522\n *                                                                                                                     // 523\n * @description                                                                                                        // 524\n * A function that returns its first argument. This function is useful when writing code in the                        // 525\n * functional style.                                                                                                   // 526\n *                                                                                                                     // 527\n   ```js                                                                                                               // 528\n     function transformer(transformationFn, value) {                                                                   // 529\n       return (transformationFn || angular.identity)(value);                                                           // 530\n     };                                                                                                                // 531\n   ```                                                                                                                 // 532\n  * @param {*} value to be returned.                                                                                   // 533\n  * @returns {*} the value passed in.                                                                                  // 534\n */                                                                                                                    // 535\nfunction identity($) {return $;}                                                                                       // 536\nidentity.$inject = [];                                                                                                 // 537\n                                                                                                                       // 538\n                                                                                                                       // 539\nfunction valueFn(value) {return function() {return value;};}                                                           // 540\n                                                                                                                       // 541\nfunction hasCustomToString(obj) {                                                                                      // 542\n  return isFunction(obj.toString) && obj.toString !== Object.prototype.toString;                                       // 543\n}                                                                                                                      // 544\n                                                                                                                       // 545\n                                                                                                                       // 546\n/**                                                                                                                    // 547\n * @ngdoc function                                                                                                     // 548\n * @name angular.isUndefined                                                                                           // 549\n * @module ng                                                                                                          // 550\n * @kind function                                                                                                      // 551\n *                                                                                                                     // 552\n * @description                                                                                                        // 553\n * Determines if a reference is undefined.                                                                             // 554\n *                                                                                                                     // 555\n * @param {*} value Reference to check.                                                                                // 556\n * @returns {boolean} True if `value` is undefined.                                                                    // 557\n */                                                                                                                    // 558\nfunction isUndefined(value) {return typeof value === 'undefined';}                                                     // 559\n                                                                                                                       // 560\n                                                                                                                       // 561\n/**                                                                                                                    // 562\n * @ngdoc function                                                                                                     // 563\n * @name angular.isDefined                                                                                             // 564\n * @module ng                                                                                                          // 565\n * @kind function                                                                                                      // 566\n *                                                                                                                     // 567\n * @description                                                                                                        // 568\n * Determines if a reference is defined.                                                                               // 569\n *                                                                                                                     // 570\n * @param {*} value Reference to check.                                                                                // 571\n * @returns {boolean} True if `value` is defined.                                                                      // 572\n */                                                                                                                    // 573\nfunction isDefined(value) {return typeof value !== 'undefined';}                                                       // 574\n                                                                                                                       // 575\n                                                                                                                       // 576\n/**                                                                                                                    // 577\n * @ngdoc function                                                                                                     // 578\n * @name angular.isObject                                                                                              // 579\n * @module ng                                                                                                          // 580\n * @kind function                                                                                                      // 581\n *                                                                                                                     // 582\n * @description                                                                                                        // 583\n * Determines if a reference is an `Object`. Unlike `typeof` in JavaScript, `null`s are not                            // 584\n * considered to be objects. Note that JavaScript arrays are objects.                                                  // 585\n *                                                                                                                     // 586\n * @param {*} value Reference to check.                                                                                // 587\n * @returns {boolean} True if `value` is an `Object` but not `null`.                                                   // 588\n */                                                                                                                    // 589\nfunction isObject(value) {                                                                                             // 590\n  // http://jsperf.com/isobject4                                                                                       // 591\n  return value !== null && typeof value === 'object';                                                                  // 592\n}                                                                                                                      // 593\n                                                                                                                       // 594\n                                                                                                                       // 595\n/**                                                                                                                    // 596\n * Determine if a value is an object with a null prototype                                                             // 597\n *                                                                                                                     // 598\n * @returns {boolean} True if `value` is an `Object` with a null prototype                                             // 599\n */                                                                                                                    // 600\nfunction isBlankObject(value) {                                                                                        // 601\n  return value !== null && typeof value === 'object' && !getPrototypeOf(value);                                        // 602\n}                                                                                                                      // 603\n                                                                                                                       // 604\n                                                                                                                       // 605\n/**                                                                                                                    // 606\n * @ngdoc function                                                                                                     // 607\n * @name angular.isString                                                                                              // 608\n * @module ng                                                                                                          // 609\n * @kind function                                                                                                      // 610\n *                                                                                                                     // 611\n * @description                                                                                                        // 612\n * Determines if a reference is a `String`.                                                                            // 613\n *                                                                                                                     // 614\n * @param {*} value Reference to check.                                                                                // 615\n * @returns {boolean} True if `value` is a `String`.                                                                   // 616\n */                                                                                                                    // 617\nfunction isString(value) {return typeof value === 'string';}                                                           // 618\n                                                                                                                       // 619\n                                                                                                                       // 620\n/**                                                                                                                    // 621\n * @ngdoc function                                                                                                     // 622\n * @name angular.isNumber                                                                                              // 623\n * @module ng                                                                                                          // 624\n * @kind function                                                                                                      // 625\n *                                                                                                                     // 626\n * @description                                                                                                        // 627\n * Determines if a reference is a `Number`.                                                                            // 628\n *                                                                                                                     // 629\n * This includes the \"special\" numbers `NaN`, `+Infinity` and `-Infinity`.                                             // 630\n *                                                                                                                     // 631\n * If you wish to exclude these then you can use the native                                                            // 632\n * [`isFinite'](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite)             // 633\n * method.                                                                                                             // 634\n *                                                                                                                     // 635\n * @param {*} value Reference to check.                                                                                // 636\n * @returns {boolean} True if `value` is a `Number`.                                                                   // 637\n */                                                                                                                    // 638\nfunction isNumber(value) {return typeof value === 'number';}                                                           // 639\n                                                                                                                       // 640\n                                                                                                                       // 641\n/**                                                                                                                    // 642\n * @ngdoc function                                                                                                     // 643\n * @name angular.isDate                                                                                                // 644\n * @module ng                                                                                                          // 645\n * @kind function                                                                                                      // 646\n *                                                                                                                     // 647\n * @description                                                                                                        // 648\n * Determines if a value is a date.                                                                                    // 649\n *                                                                                                                     // 650\n * @param {*} value Reference to check.                                                                                // 651\n * @returns {boolean} True if `value` is a `Date`.                                                                     // 652\n */                                                                                                                    // 653\nfunction isDate(value) {                                                                                               // 654\n  return toString.call(value) === '[object Date]';                                                                     // 655\n}                                                                                                                      // 656\n                                                                                                                       // 657\n                                                                                                                       // 658\n/**                                                                                                                    // 659\n * @ngdoc function                                                                                                     // 660\n * @name angular.isArray                                                                                               // 661\n * @module ng                                                                                                          // 662\n * @kind function                                                                                                      // 663\n *                                                                                                                     // 664\n * @description                                                                                                        // 665\n * Determines if a reference is an `Array`.                                                                            // 666\n *                                                                                                                     // 667\n * @param {*} value Reference to check.                                                                                // 668\n * @returns {boolean} True if `value` is an `Array`.                                                                   // 669\n */                                                                                                                    // 670\nvar isArray = Array.isArray;                                                                                           // 671\n                                                                                                                       // 672\n/**                                                                                                                    // 673\n * @ngdoc function                                                                                                     // 674\n * @name angular.isFunction                                                                                            // 675\n * @module ng                                                                                                          // 676\n * @kind function                                                                                                      // 677\n *                                                                                                                     // 678\n * @description                                                                                                        // 679\n * Determines if a reference is a `Function`.                                                                          // 680\n *                                                                                                                     // 681\n * @param {*} value Reference to check.                                                                                // 682\n * @returns {boolean} True if `value` is a `Function`.                                                                 // 683\n */                                                                                                                    // 684\nfunction isFunction(value) {return typeof value === 'function';}                                                       // 685\n                                                                                                                       // 686\n                                                                                                                       // 687\n/**                                                                                                                    // 688\n * Determines if a value is a regular expression object.                                                               // 689\n *                                                                                                                     // 690\n * @private                                                                                                            // 691\n * @param {*} value Reference to check.                                                                                // 692\n * @returns {boolean} True if `value` is a `RegExp`.                                                                   // 693\n */                                                                                                                    // 694\nfunction isRegExp(value) {                                                                                             // 695\n  return toString.call(value) === '[object RegExp]';                                                                   // 696\n}                                                                                                                      // 697\n                                                                                                                       // 698\n                                                                                                                       // 699\n/**                                                                                                                    // 700\n * Checks if `obj` is a window object.                                                                                 // 701\n *                                                                                                                     // 702\n * @private                                                                                                            // 703\n * @param {*} obj Object to check                                                                                      // 704\n * @returns {boolean} True if `obj` is a window obj.                                                                   // 705\n */                                                                                                                    // 706\nfunction isWindow(obj) {                                                                                               // 707\n  return obj && obj.window === obj;                                                                                    // 708\n}                                                                                                                      // 709\n                                                                                                                       // 710\n                                                                                                                       // 711\nfunction isScope(obj) {                                                                                                // 712\n  return obj && obj.$evalAsync && obj.$watch;                                                                          // 713\n}                                                                                                                      // 714\n                                                                                                                       // 715\n                                                                                                                       // 716\nfunction isFile(obj) {                                                                                                 // 717\n  return toString.call(obj) === '[object File]';                                                                       // 718\n}                                                                                                                      // 719\n                                                                                                                       // 720\n                                                                                                                       // 721\nfunction isFormData(obj) {                                                                                             // 722\n  return toString.call(obj) === '[object FormData]';                                                                   // 723\n}                                                                                                                      // 724\n                                                                                                                       // 725\n                                                                                                                       // 726\nfunction isBlob(obj) {                                                                                                 // 727\n  return toString.call(obj) === '[object Blob]';                                                                       // 728\n}                                                                                                                      // 729\n                                                                                                                       // 730\n                                                                                                                       // 731\nfunction isBoolean(value) {                                                                                            // 732\n  return typeof value === 'boolean';                                                                                   // 733\n}                                                                                                                      // 734\n                                                                                                                       // 735\n                                                                                                                       // 736\nfunction isPromiseLike(obj) {                                                                                          // 737\n  return obj && isFunction(obj.then);                                                                                  // 738\n}                                                                                                                      // 739\n                                                                                                                       // 740\n                                                                                                                       // 741\nvar TYPED_ARRAY_REGEXP = /^\\[object (Uint8(Clamped)?)|(Uint16)|(Uint32)|(Int8)|(Int16)|(Int32)|(Float(32)|(64))Array\\]$/;\nfunction isTypedArray(value) {                                                                                         // 743\n  return TYPED_ARRAY_REGEXP.test(toString.call(value));                                                                // 744\n}                                                                                                                      // 745\n                                                                                                                       // 746\n                                                                                                                       // 747\nvar trim = function(value) {                                                                                           // 748\n  return isString(value) ? value.trim() : value;                                                                       // 749\n};                                                                                                                     // 750\n                                                                                                                       // 751\n// Copied from:                                                                                                        // 752\n// http://docs.closure-library.googlecode.com/git/local_closure_goog_string_string.js.source.html#line1021             // 753\n// Prereq: s is a string.                                                                                              // 754\nvar escapeForRegexp = function(s) {                                                                                    // 755\n  return s.replace(/([-()\\[\\]{}+?*.$\\^|,:#<!\\\\])/g, '\\\\$1').                                                           // 756\n           replace(/\\x08/g, '\\\\x08');                                                                                  // 757\n};                                                                                                                     // 758\n                                                                                                                       // 759\n                                                                                                                       // 760\n/**                                                                                                                    // 761\n * @ngdoc function                                                                                                     // 762\n * @name angular.isElement                                                                                             // 763\n * @module ng                                                                                                          // 764\n * @kind function                                                                                                      // 765\n *                                                                                                                     // 766\n * @description                                                                                                        // 767\n * Determines if a reference is a DOM element (or wrapped jQuery element).                                             // 768\n *                                                                                                                     // 769\n * @param {*} value Reference to check.                                                                                // 770\n * @returns {boolean} True if `value` is a DOM element (or wrapped jQuery element).                                    // 771\n */                                                                                                                    // 772\nfunction isElement(node) {                                                                                             // 773\n  return !!(node &&                                                                                                    // 774\n    (node.nodeName  // we are a direct element                                                                         // 775\n    || (node.prop && node.attr && node.find)));  // we have an on and find method part of jQuery API                   // 776\n}                                                                                                                      // 777\n                                                                                                                       // 778\n/**                                                                                                                    // 779\n * @param str 'key1,key2,...'                                                                                          // 780\n * @returns {object} in the form of {key1:true, key2:true, ...}                                                        // 781\n */                                                                                                                    // 782\nfunction makeMap(str) {                                                                                                // 783\n  var obj = {}, items = str.split(\",\"), i;                                                                             // 784\n  for (i = 0; i < items.length; i++) {                                                                                 // 785\n    obj[items[i]] = true;                                                                                              // 786\n  }                                                                                                                    // 787\n  return obj;                                                                                                          // 788\n}                                                                                                                      // 789\n                                                                                                                       // 790\n                                                                                                                       // 791\nfunction nodeName_(element) {                                                                                          // 792\n  return lowercase(element.nodeName || (element[0] && element[0].nodeName));                                           // 793\n}                                                                                                                      // 794\n                                                                                                                       // 795\nfunction includes(array, obj) {                                                                                        // 796\n  return Array.prototype.indexOf.call(array, obj) != -1;                                                               // 797\n}                                                                                                                      // 798\n                                                                                                                       // 799\nfunction arrayRemove(array, value) {                                                                                   // 800\n  var index = array.indexOf(value);                                                                                    // 801\n  if (index >= 0) {                                                                                                    // 802\n    array.splice(index, 1);                                                                                            // 803\n  }                                                                                                                    // 804\n  return index;                                                                                                        // 805\n}                                                                                                                      // 806\n                                                                                                                       // 807\n/**                                                                                                                    // 808\n * @ngdoc function                                                                                                     // 809\n * @name angular.copy                                                                                                  // 810\n * @module ng                                                                                                          // 811\n * @kind function                                                                                                      // 812\n *                                                                                                                     // 813\n * @description                                                                                                        // 814\n * Creates a deep copy of `source`, which should be an object or an array.                                             // 815\n *                                                                                                                     // 816\n * * If no destination is supplied, a copy of the object or array is created.                                          // 817\n * * If a destination is provided, all of its elements (for arrays) or properties (for objects)                        // 818\n *   are deleted and then all elements/properties from the source are copied to it.                                    // 819\n * * If `source` is not an object or array (inc. `null` and `undefined`), `source` is returned.                        // 820\n * * If `source` is identical to 'destination' an exception will be thrown.                                            // 821\n *                                                                                                                     // 822\n * @param {*} source The source that will be used to make a copy.                                                      // 823\n *                   Can be any type, including primitives, `null`, and `undefined`.                                   // 824\n * @param {(Object|Array)=} destination Destination into which the source is copied. If                                // 825\n *     provided, must be of the same type as `source`.                                                                 // 826\n * @returns {*} The copy or updated `destination`, if `destination` was specified.                                     // 827\n *                                                                                                                     // 828\n * @example                                                                                                            // 829\n <example module=\"copyExample\">                                                                                        // 830\n <file name=\"index.html\">                                                                                              // 831\n <div ng-controller=\"ExampleController\">                                                                               // 832\n <form novalidate class=\"simple-form\">                                                                                 // 833\n Name: <input type=\"text\" ng-model=\"user.name\" /><br />                                                                // 834\n E-mail: <input type=\"email\" ng-model=\"user.email\" /><br />                                                            // 835\n Gender: <input type=\"radio\" ng-model=\"user.gender\" value=\"male\" />male                                                // 836\n <input type=\"radio\" ng-model=\"user.gender\" value=\"female\" />female<br />                                              // 837\n <button ng-click=\"reset()\">RESET</button>                                                                             // 838\n <button ng-click=\"update(user)\">SAVE</button>                                                                         // 839\n </form>                                                                                                               // 840\n <pre>form = {{user | json}}</pre>                                                                                     // 841\n <pre>master = {{master | json}}</pre>                                                                                 // 842\n </div>                                                                                                                // 843\n                                                                                                                       // 844\n <script>                                                                                                              // 845\n  angular.module('copyExample', [])                                                                                    // 846\n    .controller('ExampleController', ['$scope', function($scope) {                                                     // 847\n      $scope.master= {};                                                                                               // 848\n                                                                                                                       // 849\n      $scope.update = function(user) {                                                                                 // 850\n        // Example with 1 argument                                                                                     // 851\n        $scope.master= angular.copy(user);                                                                             // 852\n      };                                                                                                               // 853\n                                                                                                                       // 854\n      $scope.reset = function() {                                                                                      // 855\n        // Example with 2 arguments                                                                                    // 856\n        angular.copy($scope.master, $scope.user);                                                                      // 857\n      };                                                                                                               // 858\n                                                                                                                       // 859\n      $scope.reset();                                                                                                  // 860\n    }]);                                                                                                               // 861\n </script>                                                                                                             // 862\n </file>                                                                                                               // 863\n </example>                                                                                                            // 864\n */                                                                                                                    // 865\nfunction copy(source, destination, stackSource, stackDest) {                                                           // 866\n  if (isWindow(source) || isScope(source)) {                                                                           // 867\n    throw ngMinErr('cpws',                                                                                             // 868\n      \"Can't copy! Making copies of Window or Scope instances is not supported.\");                                     // 869\n  }                                                                                                                    // 870\n  if (isTypedArray(destination)) {                                                                                     // 871\n    throw ngMinErr('cpta',                                                                                             // 872\n      \"Can't copy! TypedArray destination cannot be mutated.\");                                                        // 873\n  }                                                                                                                    // 874\n                                                                                                                       // 875\n  if (!destination) {                                                                                                  // 876\n    destination = source;                                                                                              // 877\n    if (isObject(source)) {                                                                                            // 878\n      var index;                                                                                                       // 879\n      if (stackSource && (index = stackSource.indexOf(source)) !== -1) {                                               // 880\n        return stackDest[index];                                                                                       // 881\n      }                                                                                                                // 882\n                                                                                                                       // 883\n      // TypedArray, Date and RegExp have specific copy functionality and must be                                      // 884\n      // pushed onto the stack before returning.                                                                       // 885\n      // Array and other objects create the base object and recurse to copy child                                      // 886\n      // objects. The array/object will be pushed onto the stack when recursed.                                        // 887\n      if (isArray(source)) {                                                                                           // 888\n        return copy(source, [], stackSource, stackDest);                                                               // 889\n      } else if (isTypedArray(source)) {                                                                               // 890\n        destination = new source.constructor(source);                                                                  // 891\n      } else if (isDate(source)) {                                                                                     // 892\n        destination = new Date(source.getTime());                                                                      // 893\n      } else if (isRegExp(source)) {                                                                                   // 894\n        destination = new RegExp(source.source, source.toString().match(/[^\\/]*$/)[0]);                                // 895\n        destination.lastIndex = source.lastIndex;                                                                      // 896\n      } else if (isFunction(source.cloneNode)) {                                                                       // 897\n          destination = source.cloneNode(true);                                                                        // 898\n      } else {                                                                                                         // 899\n        var emptyObject = Object.create(getPrototypeOf(source));                                                       // 900\n        return copy(source, emptyObject, stackSource, stackDest);                                                      // 901\n      }                                                                                                                // 902\n                                                                                                                       // 903\n      if (stackDest) {                                                                                                 // 904\n        stackSource.push(source);                                                                                      // 905\n        stackDest.push(destination);                                                                                   // 906\n      }                                                                                                                // 907\n    }                                                                                                                  // 908\n  } else {                                                                                                             // 909\n    if (source === destination) throw ngMinErr('cpi',                                                                  // 910\n      \"Can't copy! Source and destination are identical.\");                                                            // 911\n                                                                                                                       // 912\n    stackSource = stackSource || [];                                                                                   // 913\n    stackDest = stackDest || [];                                                                                       // 914\n                                                                                                                       // 915\n    if (isObject(source)) {                                                                                            // 916\n      stackSource.push(source);                                                                                        // 917\n      stackDest.push(destination);                                                                                     // 918\n    }                                                                                                                  // 919\n                                                                                                                       // 920\n    var result, key;                                                                                                   // 921\n    if (isArray(source)) {                                                                                             // 922\n      destination.length = 0;                                                                                          // 923\n      for (var i = 0; i < source.length; i++) {                                                                        // 924\n        destination.push(copy(source[i], null, stackSource, stackDest));                                               // 925\n      }                                                                                                                // 926\n    } else {                                                                                                           // 927\n      var h = destination.$$hashKey;                                                                                   // 928\n      if (isArray(destination)) {                                                                                      // 929\n        destination.length = 0;                                                                                        // 930\n      } else {                                                                                                         // 931\n        forEach(destination, function(value, key) {                                                                    // 932\n          delete destination[key];                                                                                     // 933\n        });                                                                                                            // 934\n      }                                                                                                                // 935\n      if (isBlankObject(source)) {                                                                                     // 936\n        // createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty               // 937\n        for (key in source) {                                                                                          // 938\n          destination[key] = copy(source[key], null, stackSource, stackDest);                                          // 939\n        }                                                                                                              // 940\n      } else if (source && typeof source.hasOwnProperty === 'function') {                                              // 941\n        // Slow path, which must rely on hasOwnProperty                                                                // 942\n        for (key in source) {                                                                                          // 943\n          if (source.hasOwnProperty(key)) {                                                                            // 944\n            destination[key] = copy(source[key], null, stackSource, stackDest);                                        // 945\n          }                                                                                                            // 946\n        }                                                                                                              // 947\n      } else {                                                                                                         // 948\n        // Slowest path --- hasOwnProperty can't be called as a method                                                 // 949\n        for (key in source) {                                                                                          // 950\n          if (hasOwnProperty.call(source, key)) {                                                                      // 951\n            destination[key] = copy(source[key], null, stackSource, stackDest);                                        // 952\n          }                                                                                                            // 953\n        }                                                                                                              // 954\n      }                                                                                                                // 955\n      setHashKey(destination,h);                                                                                       // 956\n    }                                                                                                                  // 957\n  }                                                                                                                    // 958\n  return destination;                                                                                                  // 959\n}                                                                                                                      // 960\n                                                                                                                       // 961\n/**                                                                                                                    // 962\n * Creates a shallow copy of an object, an array or a primitive.                                                       // 963\n *                                                                                                                     // 964\n * Assumes that there are no proto properties for objects.                                                             // 965\n */                                                                                                                    // 966\nfunction shallowCopy(src, dst) {                                                                                       // 967\n  if (isArray(src)) {                                                                                                  // 968\n    dst = dst || [];                                                                                                   // 969\n                                                                                                                       // 970\n    for (var i = 0, ii = src.length; i < ii; i++) {                                                                    // 971\n      dst[i] = src[i];                                                                                                 // 972\n    }                                                                                                                  // 973\n  } else if (isObject(src)) {                                                                                          // 974\n    dst = dst || {};                                                                                                   // 975\n                                                                                                                       // 976\n    for (var key in src) {                                                                                             // 977\n      if (!(key.charAt(0) === '$' && key.charAt(1) === '$')) {                                                         // 978\n        dst[key] = src[key];                                                                                           // 979\n      }                                                                                                                // 980\n    }                                                                                                                  // 981\n  }                                                                                                                    // 982\n                                                                                                                       // 983\n  return dst || src;                                                                                                   // 984\n}                                                                                                                      // 985\n                                                                                                                       // 986\n                                                                                                                       // 987\n/**                                                                                                                    // 988\n * @ngdoc function                                                                                                     // 989\n * @name angular.equals                                                                                                // 990\n * @module ng                                                                                                          // 991\n * @kind function                                                                                                      // 992\n *                                                                                                                     // 993\n * @description                                                                                                        // 994\n * Determines if two objects or two values are equivalent. Supports value types, regular                               // 995\n * expressions, arrays and objects.                                                                                    // 996\n *                                                                                                                     // 997\n * Two objects or values are considered equivalent if at least one of the following is true:                           // 998\n *                                                                                                                     // 999\n * * Both objects or values pass `===` comparison.                                                                     // 1000\n * * Both objects or values are of the same type and all of their properties are equal by                              // 1001\n *   comparing them with `angular.equals`.                                                                             // 1002\n * * Both values are NaN. (In JavaScript, NaN == NaN => false. But we consider two NaN as equal)                       // 1003\n * * Both values represent the same regular expression (In JavaScript,                                                 // 1004\n *   /abc/ == /abc/ => false. But we consider two regular expressions as equal when their textual                      // 1005\n *   representation matches).                                                                                          // 1006\n *                                                                                                                     // 1007\n * During a property comparison, properties of `function` type and properties with names                               // 1008\n * that begin with `$` are ignored.                                                                                    // 1009\n *                                                                                                                     // 1010\n * Scope and DOMWindow objects are being compared only by identify (`===`).                                            // 1011\n *                                                                                                                     // 1012\n * @param {*} o1 Object or value to compare.                                                                           // 1013\n * @param {*} o2 Object or value to compare.                                                                           // 1014\n * @returns {boolean} True if arguments are equal.                                                                     // 1015\n */                                                                                                                    // 1016\nfunction equals(o1, o2) {                                                                                              // 1017\n  if (o1 === o2) return true;                                                                                          // 1018\n  if (o1 === null || o2 === null) return false;                                                                        // 1019\n  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN                                                              // 1020\n  var t1 = typeof o1, t2 = typeof o2, length, key, keySet;                                                             // 1021\n  if (t1 == t2) {                                                                                                      // 1022\n    if (t1 == 'object') {                                                                                              // 1023\n      if (isArray(o1)) {                                                                                               // 1024\n        if (!isArray(o2)) return false;                                                                                // 1025\n        if ((length = o1.length) == o2.length) {                                                                       // 1026\n          for (key = 0; key < length; key++) {                                                                         // 1027\n            if (!equals(o1[key], o2[key])) return false;                                                               // 1028\n          }                                                                                                            // 1029\n          return true;                                                                                                 // 1030\n        }                                                                                                              // 1031\n      } else if (isDate(o1)) {                                                                                         // 1032\n        if (!isDate(o2)) return false;                                                                                 // 1033\n        return equals(o1.getTime(), o2.getTime());                                                                     // 1034\n      } else if (isRegExp(o1)) {                                                                                       // 1035\n        return isRegExp(o2) ? o1.toString() == o2.toString() : false;                                                  // 1036\n      } else {                                                                                                         // 1037\n        if (isScope(o1) || isScope(o2) || isWindow(o1) || isWindow(o2) ||                                              // 1038\n          isArray(o2) || isDate(o2) || isRegExp(o2)) return false;                                                     // 1039\n        keySet = createMap();                                                                                          // 1040\n        for (key in o1) {                                                                                              // 1041\n          if (key.charAt(0) === '$' || isFunction(o1[key])) continue;                                                  // 1042\n          if (!equals(o1[key], o2[key])) return false;                                                                 // 1043\n          keySet[key] = true;                                                                                          // 1044\n        }                                                                                                              // 1045\n        for (key in o2) {                                                                                              // 1046\n          if (!(key in keySet) &&                                                                                      // 1047\n              key.charAt(0) !== '$' &&                                                                                 // 1048\n              isDefined(o2[key]) &&                                                                                    // 1049\n              !isFunction(o2[key])) return false;                                                                      // 1050\n        }                                                                                                              // 1051\n        return true;                                                                                                   // 1052\n      }                                                                                                                // 1053\n    }                                                                                                                  // 1054\n  }                                                                                                                    // 1055\n  return false;                                                                                                        // 1056\n}                                                                                                                      // 1057\n                                                                                                                       // 1058\nvar csp = function() {                                                                                                 // 1059\n  if (!isDefined(csp.rules)) {                                                                                         // 1060\n                                                                                                                       // 1061\n                                                                                                                       // 1062\n    var ngCspElement = (document.querySelector('[ng-csp]') ||                                                          // 1063\n                    document.querySelector('[data-ng-csp]'));                                                          // 1064\n                                                                                                                       // 1065\n    if (ngCspElement) {                                                                                                // 1066\n      var ngCspAttribute = ngCspElement.getAttribute('ng-csp') ||                                                      // 1067\n                    ngCspElement.getAttribute('data-ng-csp');                                                          // 1068\n      csp.rules = {                                                                                                    // 1069\n        noUnsafeEval: !ngCspAttribute || (ngCspAttribute.indexOf('no-unsafe-eval') !== -1),                            // 1070\n        noInlineStyle: !ngCspAttribute || (ngCspAttribute.indexOf('no-inline-style') !== -1)                           // 1071\n      };                                                                                                               // 1072\n    } else {                                                                                                           // 1073\n      csp.rules = {                                                                                                    // 1074\n        noUnsafeEval: noUnsafeEval(),                                                                                  // 1075\n        noInlineStyle: false                                                                                           // 1076\n      };                                                                                                               // 1077\n    }                                                                                                                  // 1078\n  }                                                                                                                    // 1079\n                                                                                                                       // 1080\n  return csp.rules;                                                                                                    // 1081\n                                                                                                                       // 1082\n  function noUnsafeEval() {                                                                                            // 1083\n    try {                                                                                                              // 1084\n      /* jshint -W031, -W054 */                                                                                        // 1085\n      new Function('');                                                                                                // 1086\n      /* jshint +W031, +W054 */                                                                                        // 1087\n      return false;                                                                                                    // 1088\n    } catch (e) {                                                                                                      // 1089\n      return true;                                                                                                     // 1090\n    }                                                                                                                  // 1091\n  }                                                                                                                    // 1092\n};                                                                                                                     // 1093\n                                                                                                                       // 1094\n/**                                                                                                                    // 1095\n * @ngdoc directive                                                                                                    // 1096\n * @module ng                                                                                                          // 1097\n * @name ngJq                                                                                                          // 1098\n *                                                                                                                     // 1099\n * @element ANY                                                                                                        // 1100\n * @param {string=} ngJq the name of the library available under `window`                                              // 1101\n * to be used for angular.element                                                                                      // 1102\n * @description                                                                                                        // 1103\n * Use this directive to force the angular.element library.  This should be                                            // 1104\n * used to force either jqLite by leaving ng-jq blank or setting the name of                                           // 1105\n * the jquery variable under window (eg. jQuery).                                                                      // 1106\n *                                                                                                                     // 1107\n * Since angular looks for this directive when it is loaded (doesn't wait for the                                      // 1108\n * DOMContentLoaded event), it must be placed on an element that comes before the script                               // 1109\n * which loads angular. Also, only the first instance of `ng-jq` will be used and all                                  // 1110\n * others ignored.                                                                                                     // 1111\n *                                                                                                                     // 1112\n * @example                                                                                                            // 1113\n * This example shows how to force jqLite using the `ngJq` directive to the `html` tag.                                // 1114\n ```html                                                                                                               // 1115\n <!doctype html>                                                                                                       // 1116\n <html ng-app ng-jq>                                                                                                   // 1117\n ...                                                                                                                   // 1118\n ...                                                                                                                   // 1119\n </html>                                                                                                               // 1120\n ```                                                                                                                   // 1121\n * @example                                                                                                            // 1122\n * This example shows how to use a jQuery based library of a different name.                                           // 1123\n * The library name must be available at the top most 'window'.                                                        // 1124\n ```html                                                                                                               // 1125\n <!doctype html>                                                                                                       // 1126\n <html ng-app ng-jq=\"jQueryLib\">                                                                                       // 1127\n ...                                                                                                                   // 1128\n ...                                                                                                                   // 1129\n </html>                                                                                                               // 1130\n ```                                                                                                                   // 1131\n */                                                                                                                    // 1132\nvar jq = function() {                                                                                                  // 1133\n  if (isDefined(jq.name_)) return jq.name_;                                                                            // 1134\n  var el;                                                                                                              // 1135\n  var i, ii = ngAttrPrefixes.length, prefix, name;                                                                     // 1136\n  for (i = 0; i < ii; ++i) {                                                                                           // 1137\n    prefix = ngAttrPrefixes[i];                                                                                        // 1138\n    if (el = document.querySelector('[' + prefix.replace(':', '\\\\:') + 'jq]')) {                                       // 1139\n      name = el.getAttribute(prefix + 'jq');                                                                           // 1140\n      break;                                                                                                           // 1141\n    }                                                                                                                  // 1142\n  }                                                                                                                    // 1143\n                                                                                                                       // 1144\n  return (jq.name_ = name);                                                                                            // 1145\n};                                                                                                                     // 1146\n                                                                                                                       // 1147\nfunction concat(array1, array2, index) {                                                                               // 1148\n  return array1.concat(slice.call(array2, index));                                                                     // 1149\n}                                                                                                                      // 1150\n                                                                                                                       // 1151\nfunction sliceArgs(args, startIndex) {                                                                                 // 1152\n  return slice.call(args, startIndex || 0);                                                                            // 1153\n}                                                                                                                      // 1154\n                                                                                                                       // 1155\n                                                                                                                       // 1156\n/* jshint -W101 */                                                                                                     // 1157\n/**                                                                                                                    // 1158\n * @ngdoc function                                                                                                     // 1159\n * @name angular.bind                                                                                                  // 1160\n * @module ng                                                                                                          // 1161\n * @kind function                                                                                                      // 1162\n *                                                                                                                     // 1163\n * @description                                                                                                        // 1164\n * Returns a function which calls function `fn` bound to `self` (`self` becomes the `this` for                         // 1165\n * `fn`). You can supply optional `args` that are prebound to the function. This feature is also                       // 1166\n * known as [partial application](http://en.wikipedia.org/wiki/Partial_application), as                                // 1167\n * distinguished from [function currying](http://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application).\n *                                                                                                                     // 1169\n * @param {Object} self Context which `fn` should be evaluated in.                                                     // 1170\n * @param {function()} fn Function to be bound.                                                                        // 1171\n * @param {...*} args Optional arguments to be prebound to the `fn` function call.                                     // 1172\n * @returns {function()} Function that wraps the `fn` with all the specified bindings.                                 // 1173\n */                                                                                                                    // 1174\n/* jshint +W101 */                                                                                                     // 1175\nfunction bind(self, fn) {                                                                                              // 1176\n  var curryArgs = arguments.length > 2 ? sliceArgs(arguments, 2) : [];                                                 // 1177\n  if (isFunction(fn) && !(fn instanceof RegExp)) {                                                                     // 1178\n    return curryArgs.length                                                                                            // 1179\n      ? function() {                                                                                                   // 1180\n          return arguments.length                                                                                      // 1181\n            ? fn.apply(self, concat(curryArgs, arguments, 0))                                                          // 1182\n            : fn.apply(self, curryArgs);                                                                               // 1183\n        }                                                                                                              // 1184\n      : function() {                                                                                                   // 1185\n          return arguments.length                                                                                      // 1186\n            ? fn.apply(self, arguments)                                                                                // 1187\n            : fn.call(self);                                                                                           // 1188\n        };                                                                                                             // 1189\n  } else {                                                                                                             // 1190\n    // in IE, native methods are not functions so they cannot be bound (note: they don't need to be)                   // 1191\n    return fn;                                                                                                         // 1192\n  }                                                                                                                    // 1193\n}                                                                                                                      // 1194\n                                                                                                                       // 1195\n                                                                                                                       // 1196\nfunction toJsonReplacer(key, value) {                                                                                  // 1197\n  var val = value;                                                                                                     // 1198\n                                                                                                                       // 1199\n  if (typeof key === 'string' && key.charAt(0) === '$' && key.charAt(1) === '$') {                                     // 1200\n    val = undefined;                                                                                                   // 1201\n  } else if (isWindow(value)) {                                                                                        // 1202\n    val = '$WINDOW';                                                                                                   // 1203\n  } else if (value &&  document === value) {                                                                           // 1204\n    val = '$DOCUMENT';                                                                                                 // 1205\n  } else if (isScope(value)) {                                                                                         // 1206\n    val = '$SCOPE';                                                                                                    // 1207\n  }                                                                                                                    // 1208\n                                                                                                                       // 1209\n  return val;                                                                                                          // 1210\n}                                                                                                                      // 1211\n                                                                                                                       // 1212\n                                                                                                                       // 1213\n/**                                                                                                                    // 1214\n * @ngdoc function                                                                                                     // 1215\n * @name angular.toJson                                                                                                // 1216\n * @module ng                                                                                                          // 1217\n * @kind function                                                                                                      // 1218\n *                                                                                                                     // 1219\n * @description                                                                                                        // 1220\n * Serializes input into a JSON-formatted string. Properties with leading $$ characters will be                        // 1221\n * stripped since angular uses this notation internally.                                                               // 1222\n *                                                                                                                     // 1223\n * @param {Object|Array|Date|string|number} obj Input to be serialized into JSON.                                      // 1224\n * @param {boolean|number} [pretty=2] If set to true, the JSON output will contain newlines and whitespace.            // 1225\n *    If set to an integer, the JSON output will contain that many spaces per indentation.                             // 1226\n * @returns {string|undefined} JSON-ified string representing `obj`.                                                   // 1227\n */                                                                                                                    // 1228\nfunction toJson(obj, pretty) {                                                                                         // 1229\n  if (typeof obj === 'undefined') return undefined;                                                                    // 1230\n  if (!isNumber(pretty)) {                                                                                             // 1231\n    pretty = pretty ? 2 : null;                                                                                        // 1232\n  }                                                                                                                    // 1233\n  return JSON.stringify(obj, toJsonReplacer, pretty);                                                                  // 1234\n}                                                                                                                      // 1235\n                                                                                                                       // 1236\n                                                                                                                       // 1237\n/**                                                                                                                    // 1238\n * @ngdoc function                                                                                                     // 1239\n * @name angular.fromJson                                                                                              // 1240\n * @module ng                                                                                                          // 1241\n * @kind function                                                                                                      // 1242\n *                                                                                                                     // 1243\n * @description                                                                                                        // 1244\n * Deserializes a JSON string.                                                                                         // 1245\n *                                                                                                                     // 1246\n * @param {string} json JSON string to deserialize.                                                                    // 1247\n * @returns {Object|Array|string|number} Deserialized JSON string.                                                     // 1248\n */                                                                                                                    // 1249\nfunction fromJson(json) {                                                                                              // 1250\n  return isString(json)                                                                                                // 1251\n      ? JSON.parse(json)                                                                                               // 1252\n      : json;                                                                                                          // 1253\n}                                                                                                                      // 1254\n                                                                                                                       // 1255\n                                                                                                                       // 1256\nfunction timezoneToOffset(timezone, fallback) {                                                                        // 1257\n  var requestedTimezoneOffset = Date.parse('Jan 01, 1970 00:00:00 ' + timezone) / 60000;                               // 1258\n  return isNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;                                          // 1259\n}                                                                                                                      // 1260\n                                                                                                                       // 1261\n                                                                                                                       // 1262\nfunction addDateMinutes(date, minutes) {                                                                               // 1263\n  date = new Date(date.getTime());                                                                                     // 1264\n  date.setMinutes(date.getMinutes() + minutes);                                                                        // 1265\n  return date;                                                                                                         // 1266\n}                                                                                                                      // 1267\n                                                                                                                       // 1268\n                                                                                                                       // 1269\nfunction convertTimezoneToLocal(date, timezone, reverse) {                                                             // 1270\n  reverse = reverse ? -1 : 1;                                                                                          // 1271\n  var timezoneOffset = timezoneToOffset(timezone, date.getTimezoneOffset());                                           // 1272\n  return addDateMinutes(date, reverse * (timezoneOffset - date.getTimezoneOffset()));                                  // 1273\n}                                                                                                                      // 1274\n                                                                                                                       // 1275\n                                                                                                                       // 1276\n/**                                                                                                                    // 1277\n * @returns {string} Returns the string representation of the element.                                                 // 1278\n */                                                                                                                    // 1279\nfunction startingTag(element) {                                                                                        // 1280\n  element = jqLite(element).clone();                                                                                   // 1281\n  try {                                                                                                                // 1282\n    // turns out IE does not let you set .html() on elements which                                                     // 1283\n    // are not allowed to have children. So we just ignore it.                                                         // 1284\n    element.empty();                                                                                                   // 1285\n  } catch (e) {}                                                                                                       // 1286\n  var elemHtml = jqLite('<div>').append(element).html();                                                               // 1287\n  try {                                                                                                                // 1288\n    return element[0].nodeType === NODE_TYPE_TEXT ? lowercase(elemHtml) :                                              // 1289\n        elemHtml.                                                                                                      // 1290\n          match(/^(<[^>]+>)/)[1].                                                                                      // 1291\n          replace(/^<([\\w\\-]+)/, function(match, nodeName) { return '<' + lowercase(nodeName); });                     // 1292\n  } catch (e) {                                                                                                        // 1293\n    return lowercase(elemHtml);                                                                                        // 1294\n  }                                                                                                                    // 1295\n                                                                                                                       // 1296\n}                                                                                                                      // 1297\n                                                                                                                       // 1298\n                                                                                                                       // 1299\n/////////////////////////////////////////////////                                                                      // 1300\n                                                                                                                       // 1301\n/**                                                                                                                    // 1302\n * Tries to decode the URI component without throwing an exception.                                                    // 1303\n *                                                                                                                     // 1304\n * @private                                                                                                            // 1305\n * @param str value potential URI component to check.                                                                  // 1306\n * @returns {boolean} True if `value` can be decoded                                                                   // 1307\n * with the decodeURIComponent function.                                                                               // 1308\n */                                                                                                                    // 1309\nfunction tryDecodeURIComponent(value) {                                                                                // 1310\n  try {                                                                                                                // 1311\n    return decodeURIComponent(value);                                                                                  // 1312\n  } catch (e) {                                                                                                        // 1313\n    // Ignore any invalid uri component                                                                                // 1314\n  }                                                                                                                    // 1315\n}                                                                                                                      // 1316\n                                                                                                                       // 1317\n                                                                                                                       // 1318\n/**                                                                                                                    // 1319\n * Parses an escaped url query string into key-value pairs.                                                            // 1320\n * @returns {Object.<string,boolean|Array>}                                                                            // 1321\n */                                                                                                                    // 1322\nfunction parseKeyValue(/**string*/keyValue) {                                                                          // 1323\n  var obj = {};                                                                                                        // 1324\n  forEach((keyValue || \"\").split('&'), function(keyValue) {                                                            // 1325\n    var splitPoint, key, val;                                                                                          // 1326\n    if (keyValue) {                                                                                                    // 1327\n      key = keyValue = keyValue.replace(/\\+/g,'%20');                                                                  // 1328\n      splitPoint = keyValue.indexOf('=');                                                                              // 1329\n      if (splitPoint !== -1) {                                                                                         // 1330\n        key = keyValue.substring(0, splitPoint);                                                                       // 1331\n        val = keyValue.substring(splitPoint + 1);                                                                      // 1332\n      }                                                                                                                // 1333\n      key = tryDecodeURIComponent(key);                                                                                // 1334\n      if (isDefined(key)) {                                                                                            // 1335\n        val = isDefined(val) ? tryDecodeURIComponent(val) : true;                                                      // 1336\n        if (!hasOwnProperty.call(obj, key)) {                                                                          // 1337\n          obj[key] = val;                                                                                              // 1338\n        } else if (isArray(obj[key])) {                                                                                // 1339\n          obj[key].push(val);                                                                                          // 1340\n        } else {                                                                                                       // 1341\n          obj[key] = [obj[key],val];                                                                                   // 1342\n        }                                                                                                              // 1343\n      }                                                                                                                // 1344\n    }                                                                                                                  // 1345\n  });                                                                                                                  // 1346\n  return obj;                                                                                                          // 1347\n}                                                                                                                      // 1348\n                                                                                                                       // 1349\nfunction toKeyValue(obj) {                                                                                             // 1350\n  var parts = [];                                                                                                      // 1351\n  forEach(obj, function(value, key) {                                                                                  // 1352\n    if (isArray(value)) {                                                                                              // 1353\n      forEach(value, function(arrayValue) {                                                                            // 1354\n        parts.push(encodeUriQuery(key, true) +                                                                         // 1355\n                   (arrayValue === true ? '' : '=' + encodeUriQuery(arrayValue, true)));                               // 1356\n      });                                                                                                              // 1357\n    } else {                                                                                                           // 1358\n    parts.push(encodeUriQuery(key, true) +                                                                             // 1359\n               (value === true ? '' : '=' + encodeUriQuery(value, true)));                                             // 1360\n    }                                                                                                                  // 1361\n  });                                                                                                                  // 1362\n  return parts.length ? parts.join('&') : '';                                                                          // 1363\n}                                                                                                                      // 1364\n                                                                                                                       // 1365\n                                                                                                                       // 1366\n/**                                                                                                                    // 1367\n * We need our custom method because encodeURIComponent is too aggressive and doesn't follow                           // 1368\n * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set (pchar) allowed in path                       // 1369\n * segments:                                                                                                           // 1370\n *    segment       = *pchar                                                                                           // 1371\n *    pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"                                                // 1372\n *    pct-encoded   = \"%\" HEXDIG HEXDIG                                                                                // 1373\n *    unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"                                                            // 1374\n *    sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"                                                                // 1375\n *                     / \"*\" / \"+\" / \",\" / \";\" / \"=\"                                                                   // 1376\n */                                                                                                                    // 1377\nfunction encodeUriSegment(val) {                                                                                       // 1378\n  return encodeUriQuery(val, true).                                                                                    // 1379\n             replace(/%26/gi, '&').                                                                                    // 1380\n             replace(/%3D/gi, '=').                                                                                    // 1381\n             replace(/%2B/gi, '+');                                                                                    // 1382\n}                                                                                                                      // 1383\n                                                                                                                       // 1384\n                                                                                                                       // 1385\n/**                                                                                                                    // 1386\n * This method is intended for encoding *key* or *value* parts of query component. We need a custom                    // 1387\n * method because encodeURIComponent is too aggressive and encodes stuff that doesn't have to be                       // 1388\n * encoded per http://tools.ietf.org/html/rfc3986:                                                                     // 1389\n *    query       = *( pchar / \"/\" / \"?\" )                                                                             // 1390\n *    pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"                                                // 1391\n *    unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"                                                            // 1392\n *    pct-encoded   = \"%\" HEXDIG HEXDIG                                                                                // 1393\n *    sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"                                                                // 1394\n *                     / \"*\" / \"+\" / \",\" / \";\" / \"=\"                                                                   // 1395\n */                                                                                                                    // 1396\nfunction encodeUriQuery(val, pctEncodeSpaces) {                                                                        // 1397\n  return encodeURIComponent(val).                                                                                      // 1398\n             replace(/%40/gi, '@').                                                                                    // 1399\n             replace(/%3A/gi, ':').                                                                                    // 1400\n             replace(/%24/g, '$').                                                                                     // 1401\n             replace(/%2C/gi, ',').                                                                                    // 1402\n             replace(/%3B/gi, ';').                                                                                    // 1403\n             replace(/%20/g, (pctEncodeSpaces ? '%20' : '+'));                                                         // 1404\n}                                                                                                                      // 1405\n                                                                                                                       // 1406\nvar ngAttrPrefixes = ['ng-', 'data-ng-', 'ng:', 'x-ng-'];                                                              // 1407\n                                                                                                                       // 1408\nfunction getNgAttribute(element, ngAttr) {                                                                             // 1409\n  var attr, i, ii = ngAttrPrefixes.length;                                                                             // 1410\n  for (i = 0; i < ii; ++i) {                                                                                           // 1411\n    attr = ngAttrPrefixes[i] + ngAttr;                                                                                 // 1412\n    if (isString(attr = element.getAttribute(attr))) {                                                                 // 1413\n      return attr;                                                                                                     // 1414\n    }                                                                                                                  // 1415\n  }                                                                                                                    // 1416\n  return null;                                                                                                         // 1417\n}                                                                                                                      // 1418\n                                                                                                                       // 1419\n/**                                                                                                                    // 1420\n * @ngdoc directive                                                                                                    // 1421\n * @name ngApp                                                                                                         // 1422\n * @module ng                                                                                                          // 1423\n *                                                                                                                     // 1424\n * @element ANY                                                                                                        // 1425\n * @param {angular.Module} ngApp an optional application                                                               // 1426\n *   {@link angular.module module} name to load.                                                                       // 1427\n * @param {boolean=} ngStrictDi if this attribute is present on the app element, the injector will be                  // 1428\n *   created in \"strict-di\" mode. This means that the application will fail to invoke functions which                  // 1429\n *   do not use explicit function annotation (and are thus unsuitable for minification), as described                  // 1430\n *   in {@link guide/di the Dependency Injection guide}, and useful debugging info will assist in                      // 1431\n *   tracking down the root of these bugs.                                                                             // 1432\n *                                                                                                                     // 1433\n * @description                                                                                                        // 1434\n *                                                                                                                     // 1435\n * Use this directive to **auto-bootstrap** an AngularJS application. The `ngApp` directive                            // 1436\n * designates the **root element** of the application and is typically placed near the root element                    // 1437\n * of the page - e.g. on the `<body>` or `<html>` tags.                                                                // 1438\n *                                                                                                                     // 1439\n * Only one AngularJS application can be auto-bootstrapped per HTML document. The first `ngApp`                        // 1440\n * found in the document will be used to define the root element to auto-bootstrap as an                               // 1441\n * application. To run multiple applications in an HTML document you must manually bootstrap them using                // 1442\n * {@link angular.bootstrap} instead. AngularJS applications cannot be nested within each other.                       // 1443\n *                                                                                                                     // 1444\n * You can specify an **AngularJS module** to be used as the root module for the application.  This                    // 1445\n * module will be loaded into the {@link auto.$injector} when the application is bootstrapped. It                      // 1446\n * should contain the application code needed or have dependencies on other modules that will                          // 1447\n * contain the code. See {@link angular.module} for more information.                                                  // 1448\n *                                                                                                                     // 1449\n * In the example below if the `ngApp` directive were not placed on the `html` element then the                        // 1450\n * document would not be compiled, the `AppController` would not be instantiated and the `{{ a+b }}`                   // 1451\n * would not be resolved to `3`.                                                                                       // 1452\n *                                                                                                                     // 1453\n * `ngApp` is the easiest, and most common way to bootstrap an application.                                            // 1454\n *                                                                                                                     // 1455\n <example module=\"ngAppDemo\">                                                                                          // 1456\n   <file name=\"index.html\">                                                                                            // 1457\n   <div ng-controller=\"ngAppDemoController\">                                                                           // 1458\n     I can add: {{a}} + {{b}} =  {{ a+b }}                                                                             // 1459\n   </div>                                                                                                              // 1460\n   </file>                                                                                                             // 1461\n   <file name=\"script.js\">                                                                                             // 1462\n   angular.module('ngAppDemo', []).controller('ngAppDemoController', function($scope) {                                // 1463\n     $scope.a = 1;                                                                                                     // 1464\n     $scope.b = 2;                                                                                                     // 1465\n   });                                                                                                                 // 1466\n   </file>                                                                                                             // 1467\n </example>                                                                                                            // 1468\n *                                                                                                                     // 1469\n * Using `ngStrictDi`, you would see something like this:                                                              // 1470\n *                                                                                                                     // 1471\n <example ng-app-included=\"true\">                                                                                      // 1472\n   <file name=\"index.html\">                                                                                            // 1473\n   <div ng-app=\"ngAppStrictDemo\" ng-strict-di>                                                                         // 1474\n       <div ng-controller=\"GoodController1\">                                                                           // 1475\n           I can add: {{a}} + {{b}} =  {{ a+b }}                                                                       // 1476\n                                                                                                                       // 1477\n           <p>This renders because the controller does not fail to                                                     // 1478\n              instantiate, by using explicit annotation style (see                                                     // 1479\n              script.js for details)                                                                                   // 1480\n           </p>                                                                                                        // 1481\n       </div>                                                                                                          // 1482\n                                                                                                                       // 1483\n       <div ng-controller=\"GoodController2\">                                                                           // 1484\n           Name: <input ng-model=\"name\"><br />                                                                         // 1485\n           Hello, {{name}}!                                                                                            // 1486\n                                                                                                                       // 1487\n           <p>This renders because the controller does not fail to                                                     // 1488\n              instantiate, by using explicit annotation style                                                          // 1489\n              (see script.js for details)                                                                              // 1490\n           </p>                                                                                                        // 1491\n       </div>                                                                                                          // 1492\n                                                                                                                       // 1493\n       <div ng-controller=\"BadController\">                                                                             // 1494\n           I can add: {{a}} + {{b}} =  {{ a+b }}                                                                       // 1495\n                                                                                                                       // 1496\n           <p>The controller could not be instantiated, due to relying                                                 // 1497\n              on automatic function annotations (which are disabled in                                                 // 1498\n              strict mode). As such, the content of this section is not                                                // 1499\n              interpolated, and there should be an error in your web console.                                          // 1500\n           </p>                                                                                                        // 1501\n       </div>                                                                                                          // 1502\n   </div>                                                                                                              // 1503\n   </file>                                                                                                             // 1504\n   <file name=\"script.js\">                                                                                             // 1505\n   angular.module('ngAppStrictDemo', [])                                                                               // 1506\n     // BadController will fail to instantiate, due to relying on automatic function annotation,                       // 1507\n     // rather than an explicit annotation                                                                             // 1508\n     .controller('BadController', function($scope) {                                                                   // 1509\n       $scope.a = 1;                                                                                                   // 1510\n       $scope.b = 2;                                                                                                   // 1511\n     })                                                                                                                // 1512\n     // Unlike BadController, GoodController1 and GoodController2 will not fail to be instantiated,                    // 1513\n     // due to using explicit annotations using the array style and $inject property, respectively.                    // 1514\n     .controller('GoodController1', ['$scope', function($scope) {                                                      // 1515\n       $scope.a = 1;                                                                                                   // 1516\n       $scope.b = 2;                                                                                                   // 1517\n     }])                                                                                                               // 1518\n     .controller('GoodController2', GoodController2);                                                                  // 1519\n     function GoodController2($scope) {                                                                                // 1520\n       $scope.name = \"World\";                                                                                          // 1521\n     }                                                                                                                 // 1522\n     GoodController2.$inject = ['$scope'];                                                                             // 1523\n   </file>                                                                                                             // 1524\n   <file name=\"style.css\">                                                                                             // 1525\n   div[ng-controller] {                                                                                                // 1526\n       margin-bottom: 1em;                                                                                             // 1527\n       -webkit-border-radius: 4px;                                                                                     // 1528\n       border-radius: 4px;                                                                                             // 1529\n       border: 1px solid;                                                                                              // 1530\n       padding: .5em;                                                                                                  // 1531\n   }                                                                                                                   // 1532\n   div[ng-controller^=Good] {                                                                                          // 1533\n       border-color: #d6e9c6;                                                                                          // 1534\n       background-color: #dff0d8;                                                                                      // 1535\n       color: #3c763d;                                                                                                 // 1536\n   }                                                                                                                   // 1537\n   div[ng-controller^=Bad] {                                                                                           // 1538\n       border-color: #ebccd1;                                                                                          // 1539\n       background-color: #f2dede;                                                                                      // 1540\n       color: #a94442;                                                                                                 // 1541\n       margin-bottom: 0;                                                                                               // 1542\n   }                                                                                                                   // 1543\n   </file>                                                                                                             // 1544\n </example>                                                                                                            // 1545\n */                                                                                                                    // 1546\nfunction angularInit(element, bootstrap) {                                                                             // 1547\n  var appElement,                                                                                                      // 1548\n      module,                                                                                                          // 1549\n      config = {};                                                                                                     // 1550\n                                                                                                                       // 1551\n  // The element `element` has priority over any other element                                                         // 1552\n  forEach(ngAttrPrefixes, function(prefix) {                                                                           // 1553\n    var name = prefix + 'app';                                                                                         // 1554\n                                                                                                                       // 1555\n    if (!appElement && element.hasAttribute && element.hasAttribute(name)) {                                           // 1556\n      appElement = element;                                                                                            // 1557\n      module = element.getAttribute(name);                                                                             // 1558\n    }                                                                                                                  // 1559\n  });                                                                                                                  // 1560\n  forEach(ngAttrPrefixes, function(prefix) {                                                                           // 1561\n    var name = prefix + 'app';                                                                                         // 1562\n    var candidate;                                                                                                     // 1563\n                                                                                                                       // 1564\n    if (!appElement && (candidate = element.querySelector('[' + name.replace(':', '\\\\:') + ']'))) {                    // 1565\n      appElement = candidate;                                                                                          // 1566\n      module = candidate.getAttribute(name);                                                                           // 1567\n    }                                                                                                                  // 1568\n  });                                                                                                                  // 1569\n  if (appElement) {                                                                                                    // 1570\n    config.strictDi = getNgAttribute(appElement, \"strict-di\") !== null;                                                // 1571\n    bootstrap(appElement, module ? [module] : [], config);                                                             // 1572\n  }                                                                                                                    // 1573\n}                                                                                                                      // 1574\n                                                                                                                       // 1575\n/**                                                                                                                    // 1576\n * @ngdoc function                                                                                                     // 1577\n * @name angular.bootstrap                                                                                             // 1578\n * @module ng                                                                                                          // 1579\n * @description                                                                                                        // 1580\n * Use this function to manually start up angular application.                                                         // 1581\n *                                                                                                                     // 1582\n * See: {@link guide/bootstrap Bootstrap}                                                                              // 1583\n *                                                                                                                     // 1584\n * Note that Protractor based end-to-end tests cannot use this function to bootstrap manually.                         // 1585\n * They must use {@link ng.directive:ngApp ngApp}.                                                                     // 1586\n *                                                                                                                     // 1587\n * Angular will detect if it has been loaded into the browser more than once and only allow the                        // 1588\n * first loaded script to be bootstrapped and will report a warning to the browser console for                         // 1589\n * each of the subsequent scripts. This prevents strange results in applications, where otherwise                      // 1590\n * multiple instances of Angular try to work on the DOM.                                                               // 1591\n *                                                                                                                     // 1592\n * ```html                                                                                                             // 1593\n * <!doctype html>                                                                                                     // 1594\n * <html>                                                                                                              // 1595\n * <body>                                                                                                              // 1596\n * <div ng-controller=\"WelcomeController\">                                                                             // 1597\n *   {{greeting}}                                                                                                      // 1598\n * </div>                                                                                                              // 1599\n *                                                                                                                     // 1600\n * <script src=\"angular.js\"></script>                                                                                  // 1601\n * <script>                                                                                                            // 1602\n *   var app = angular.module('demo', [])                                                                              // 1603\n *   .controller('WelcomeController', function($scope) {                                                               // 1604\n *       $scope.greeting = 'Welcome!';                                                                                 // 1605\n *   });                                                                                                               // 1606\n *   angular.bootstrap(document, ['demo']);                                                                            // 1607\n * </script>                                                                                                           // 1608\n * </body>                                                                                                             // 1609\n * </html>                                                                                                             // 1610\n * ```                                                                                                                 // 1611\n *                                                                                                                     // 1612\n * @param {DOMElement} element DOM element which is the root of angular application.                                   // 1613\n * @param {Array<String|Function|Array>=} modules an array of modules to load into the application.                    // 1614\n *     Each item in the array should be the name of a predefined module or a (DI annotated)                            // 1615\n *     function that will be invoked by the injector as a `config` block.                                              // 1616\n *     See: {@link angular.module modules}                                                                             // 1617\n * @param {Object=} config an object for defining configuration options for the application. The                       // 1618\n *     following keys are supported:                                                                                   // 1619\n *                                                                                                                     // 1620\n * * `strictDi` - disable automatic function annotation for the application. This is meant to                          // 1621\n *   assist in finding bugs which break minified code. Defaults to `false`.                                            // 1622\n *                                                                                                                     // 1623\n * @returns {auto.$injector} Returns the newly created injector for this app.                                          // 1624\n */                                                                                                                    // 1625\nfunction bootstrap(element, modules, config) {                                                                         // 1626\n  if (!isObject(config)) config = {};                                                                                  // 1627\n  var defaultConfig = {                                                                                                // 1628\n    strictDi: false                                                                                                    // 1629\n  };                                                                                                                   // 1630\n  config = extend(defaultConfig, config);                                                                              // 1631\n  var doBootstrap = function() {                                                                                       // 1632\n    element = jqLite(element);                                                                                         // 1633\n                                                                                                                       // 1634\n    if (element.injector()) {                                                                                          // 1635\n      var tag = (element[0] === document) ? 'document' : startingTag(element);                                         // 1636\n      //Encode angle brackets to prevent input from being sanitized to empty string #8683                              // 1637\n      throw ngMinErr(                                                                                                  // 1638\n          'btstrpd',                                                                                                   // 1639\n          \"App Already Bootstrapped with this Element '{0}'\",                                                          // 1640\n          tag.replace(/</,'&lt;').replace(/>/,'&gt;'));                                                                // 1641\n    }                                                                                                                  // 1642\n                                                                                                                       // 1643\n    modules = modules || [];                                                                                           // 1644\n    modules.unshift(['$provide', function($provide) {                                                                  // 1645\n      $provide.value('$rootElement', element);                                                                         // 1646\n    }]);                                                                                                               // 1647\n                                                                                                                       // 1648\n    if (config.debugInfoEnabled) {                                                                                     // 1649\n      // Pushing so that this overrides `debugInfoEnabled` setting defined in user's `modules`.                        // 1650\n      modules.push(['$compileProvider', function($compileProvider) {                                                   // 1651\n        $compileProvider.debugInfoEnabled(true);                                                                       // 1652\n      }]);                                                                                                             // 1653\n    }                                                                                                                  // 1654\n                                                                                                                       // 1655\n    modules.unshift('ng');                                                                                             // 1656\n    var injector = createInjector(modules, config.strictDi);                                                           // 1657\n    injector.invoke(['$rootScope', '$rootElement', '$compile', '$injector',                                            // 1658\n       function bootstrapApply(scope, element, compile, injector) {                                                    // 1659\n        scope.$apply(function() {                                                                                      // 1660\n          element.data('$injector', injector);                                                                         // 1661\n          compile(element)(scope);                                                                                     // 1662\n        });                                                                                                            // 1663\n      }]                                                                                                               // 1664\n    );                                                                                                                 // 1665\n    return injector;                                                                                                   // 1666\n  };                                                                                                                   // 1667\n                                                                                                                       // 1668\n  var NG_ENABLE_DEBUG_INFO = /^NG_ENABLE_DEBUG_INFO!/;                                                                 // 1669\n  var NG_DEFER_BOOTSTRAP = /^NG_DEFER_BOOTSTRAP!/;                                                                     // 1670\n                                                                                                                       // 1671\n  if (window && NG_ENABLE_DEBUG_INFO.test(window.name)) {                                                              // 1672\n    config.debugInfoEnabled = true;                                                                                    // 1673\n    window.name = window.name.replace(NG_ENABLE_DEBUG_INFO, '');                                                       // 1674\n  }                                                                                                                    // 1675\n                                                                                                                       // 1676\n  if (window && !NG_DEFER_BOOTSTRAP.test(window.name)) {                                                               // 1677\n    return doBootstrap();                                                                                              // 1678\n  }                                                                                                                    // 1679\n                                                                                                                       // 1680\n  window.name = window.name.replace(NG_DEFER_BOOTSTRAP, '');                                                           // 1681\n  angular.resumeBootstrap = function(extraModules) {                                                                   // 1682\n    forEach(extraModules, function(module) {                                                                           // 1683\n      modules.push(module);                                                                                            // 1684\n    });                                                                                                                // 1685\n    return doBootstrap();                                                                                              // 1686\n  };                                                                                                                   // 1687\n                                                                                                                       // 1688\n  if (isFunction(angular.resumeDeferredBootstrap)) {                                                                   // 1689\n    angular.resumeDeferredBootstrap();                                                                                 // 1690\n  }                                                                                                                    // 1691\n}                                                                                                                      // 1692\n                                                                                                                       // 1693\n/**                                                                                                                    // 1694\n * @ngdoc function                                                                                                     // 1695\n * @name angular.reloadWithDebugInfo                                                                                   // 1696\n * @module ng                                                                                                          // 1697\n * @description                                                                                                        // 1698\n * Use this function to reload the current application with debug information turned on.                               // 1699\n * This takes precedence over a call to `$compileProvider.debugInfoEnabled(false)`.                                    // 1700\n *                                                                                                                     // 1701\n * See {@link ng.$compileProvider#debugInfoEnabled} for more.                                                          // 1702\n */                                                                                                                    // 1703\nfunction reloadWithDebugInfo() {                                                                                       // 1704\n  window.name = 'NG_ENABLE_DEBUG_INFO!' + window.name;                                                                 // 1705\n  window.location.reload();                                                                                            // 1706\n}                                                                                                                      // 1707\n                                                                                                                       // 1708\n/**                                                                                                                    // 1709\n * @name angular.getTestability                                                                                        // 1710\n * @module ng                                                                                                          // 1711\n * @description                                                                                                        // 1712\n * Get the testability service for the instance of Angular on the given                                                // 1713\n * element.                                                                                                            // 1714\n * @param {DOMElement} element DOM element which is the root of angular application.                                   // 1715\n */                                                                                                                    // 1716\nfunction getTestability(rootElement) {                                                                                 // 1717\n  var injector = angular.element(rootElement).injector();                                                              // 1718\n  if (!injector) {                                                                                                     // 1719\n    throw ngMinErr('test',                                                                                             // 1720\n      'no injector found for element argument to getTestability');                                                     // 1721\n  }                                                                                                                    // 1722\n  return injector.get('$$testability');                                                                                // 1723\n}                                                                                                                      // 1724\n                                                                                                                       // 1725\nvar SNAKE_CASE_REGEXP = /[A-Z]/g;                                                                                      // 1726\nfunction snake_case(name, separator) {                                                                                 // 1727\n  separator = separator || '_';                                                                                        // 1728\n  return name.replace(SNAKE_CASE_REGEXP, function(letter, pos) {                                                       // 1729\n    return (pos ? separator : '') + letter.toLowerCase();                                                              // 1730\n  });                                                                                                                  // 1731\n}                                                                                                                      // 1732\n                                                                                                                       // 1733\nvar bindJQueryFired = false;                                                                                           // 1734\nvar skipDestroyOnNextJQueryCleanData;                                                                                  // 1735\nfunction bindJQuery() {                                                                                                // 1736\n  var originalCleanData;                                                                                               // 1737\n                                                                                                                       // 1738\n  if (bindJQueryFired) {                                                                                               // 1739\n    return;                                                                                                            // 1740\n  }                                                                                                                    // 1741\n                                                                                                                       // 1742\n  // bind to jQuery if present;                                                                                        // 1743\n  var jqName = jq();                                                                                                   // 1744\n  jQuery = isUndefined(jqName) ? window.jQuery :   // use jQuery (if present)                                          // 1745\n           !jqName             ? undefined     :   // use jqLite                                                       // 1746\n                                 window[jqName];   // use jQuery specified by `ngJq`                                   // 1747\n                                                                                                                       // 1748\n  // Use jQuery if it exists with proper functionality, otherwise default to us.                                       // 1749\n  // Angular 1.2+ requires jQuery 1.7+ for on()/off() support.                                                         // 1750\n  // Angular 1.3+ technically requires at least jQuery 2.1+ but it may work with older                                 // 1751\n  // versions. It will not work for sure with jQuery <1.7, though.                                                     // 1752\n  if (jQuery && jQuery.fn.on) {                                                                                        // 1753\n    jqLite = jQuery;                                                                                                   // 1754\n    extend(jQuery.fn, {                                                                                                // 1755\n      scope: JQLitePrototype.scope,                                                                                    // 1756\n      isolateScope: JQLitePrototype.isolateScope,                                                                      // 1757\n      controller: JQLitePrototype.controller,                                                                          // 1758\n      injector: JQLitePrototype.injector,                                                                              // 1759\n      inheritedData: JQLitePrototype.inheritedData                                                                     // 1760\n    });                                                                                                                // 1761\n                                                                                                                       // 1762\n    // All nodes removed from the DOM via various jQuery APIs like .remove()                                           // 1763\n    // are passed through jQuery.cleanData. Monkey-patch this method to fire                                           // 1764\n    // the $destroy event on all removed nodes.                                                                        // 1765\n    originalCleanData = jQuery.cleanData;                                                                              // 1766\n    jQuery.cleanData = function(elems) {                                                                               // 1767\n      var events;                                                                                                      // 1768\n      if (!skipDestroyOnNextJQueryCleanData) {                                                                         // 1769\n        for (var i = 0, elem; (elem = elems[i]) != null; i++) {                                                        // 1770\n          events = jQuery._data(elem, \"events\");                                                                       // 1771\n          if (events && events.$destroy) {                                                                             // 1772\n            jQuery(elem).triggerHandler('$destroy');                                                                   // 1773\n          }                                                                                                            // 1774\n        }                                                                                                              // 1775\n      } else {                                                                                                         // 1776\n        skipDestroyOnNextJQueryCleanData = false;                                                                      // 1777\n      }                                                                                                                // 1778\n      originalCleanData(elems);                                                                                        // 1779\n    };                                                                                                                 // 1780\n  } else {                                                                                                             // 1781\n    jqLite = JQLite;                                                                                                   // 1782\n  }                                                                                                                    // 1783\n                                                                                                                       // 1784\n  angular.element = jqLite;                                                                                            // 1785\n                                                                                                                       // 1786\n  // Prevent double-proxying.                                                                                          // 1787\n  bindJQueryFired = true;                                                                                              // 1788\n}                                                                                                                      // 1789\n                                                                                                                       // 1790\n/**                                                                                                                    // 1791\n * throw error if the argument is falsy.                                                                               // 1792\n */                                                                                                                    // 1793\nfunction assertArg(arg, name, reason) {                                                                                // 1794\n  if (!arg) {                                                                                                          // 1795\n    throw ngMinErr('areq', \"Argument '{0}' is {1}\", (name || '?'), (reason || \"required\"));                            // 1796\n  }                                                                                                                    // 1797\n  return arg;                                                                                                          // 1798\n}                                                                                                                      // 1799\n                                                                                                                       // 1800\nfunction assertArgFn(arg, name, acceptArrayAnnotation) {                                                               // 1801\n  if (acceptArrayAnnotation && isArray(arg)) {                                                                         // 1802\n      arg = arg[arg.length - 1];                                                                                       // 1803\n  }                                                                                                                    // 1804\n                                                                                                                       // 1805\n  assertArg(isFunction(arg), name, 'not a function, got ' +                                                            // 1806\n      (arg && typeof arg === 'object' ? arg.constructor.name || 'Object' : typeof arg));                               // 1807\n  return arg;                                                                                                          // 1808\n}                                                                                                                      // 1809\n                                                                                                                       // 1810\n/**                                                                                                                    // 1811\n * throw error if the name given is hasOwnProperty                                                                     // 1812\n * @param  {String} name    the name to test                                                                           // 1813\n * @param  {String} context the context in which the name is used, such as module or directive                         // 1814\n */                                                                                                                    // 1815\nfunction assertNotHasOwnProperty(name, context) {                                                                      // 1816\n  if (name === 'hasOwnProperty') {                                                                                     // 1817\n    throw ngMinErr('badname', \"hasOwnProperty is not a valid {0} name\", context);                                      // 1818\n  }                                                                                                                    // 1819\n}                                                                                                                      // 1820\n                                                                                                                       // 1821\n/**                                                                                                                    // 1822\n * Return the value accessible from the object by path. Any undefined traversals are ignored                           // 1823\n * @param {Object} obj starting object                                                                                 // 1824\n * @param {String} path path to traverse                                                                               // 1825\n * @param {boolean} [bindFnToScope=true]                                                                               // 1826\n * @returns {Object} value as accessible by path                                                                       // 1827\n */                                                                                                                    // 1828\n//TODO(misko): this function needs to be removed                                                                       // 1829\nfunction getter(obj, path, bindFnToScope) {                                                                            // 1830\n  if (!path) return obj;                                                                                               // 1831\n  var keys = path.split('.');                                                                                          // 1832\n  var key;                                                                                                             // 1833\n  var lastInstance = obj;                                                                                              // 1834\n  var len = keys.length;                                                                                               // 1835\n                                                                                                                       // 1836\n  for (var i = 0; i < len; i++) {                                                                                      // 1837\n    key = keys[i];                                                                                                     // 1838\n    if (obj) {                                                                                                         // 1839\n      obj = (lastInstance = obj)[key];                                                                                 // 1840\n    }                                                                                                                  // 1841\n  }                                                                                                                    // 1842\n  if (!bindFnToScope && isFunction(obj)) {                                                                             // 1843\n    return bind(lastInstance, obj);                                                                                    // 1844\n  }                                                                                                                    // 1845\n  return obj;                                                                                                          // 1846\n}                                                                                                                      // 1847\n                                                                                                                       // 1848\n/**                                                                                                                    // 1849\n * Return the DOM siblings between the first and last node in the given array.                                         // 1850\n * @param {Array} array like object                                                                                    // 1851\n * @returns {Array} the inputted object or a jqLite collection containing the nodes                                    // 1852\n */                                                                                                                    // 1853\nfunction getBlockNodes(nodes) {                                                                                        // 1854\n  // TODO(perf): update `nodes` instead of creating a new object?                                                      // 1855\n  var node = nodes[0];                                                                                                 // 1856\n  var endNode = nodes[nodes.length - 1];                                                                               // 1857\n  var blockNodes;                                                                                                      // 1858\n                                                                                                                       // 1859\n  for (var i = 1; node !== endNode && (node = node.nextSibling); i++) {                                                // 1860\n    if (blockNodes || nodes[i] !== node) {                                                                             // 1861\n      if (!blockNodes) {                                                                                               // 1862\n        blockNodes = jqLite(slice.call(nodes, 0, i));                                                                  // 1863\n      }                                                                                                                // 1864\n      blockNodes.push(node);                                                                                           // 1865\n    }                                                                                                                  // 1866\n  }                                                                                                                    // 1867\n                                                                                                                       // 1868\n  return blockNodes || nodes;                                                                                          // 1869\n}                                                                                                                      // 1870\n                                                                                                                       // 1871\n                                                                                                                       // 1872\n/**                                                                                                                    // 1873\n * Creates a new object without a prototype. This object is useful for lookup without having to                        // 1874\n * guard against prototypically inherited properties via hasOwnProperty.                                               // 1875\n *                                                                                                                     // 1876\n * Related micro-benchmarks:                                                                                           // 1877\n * - http://jsperf.com/object-create2                                                                                  // 1878\n * - http://jsperf.com/proto-map-lookup/2                                                                              // 1879\n * - http://jsperf.com/for-in-vs-object-keys2                                                                          // 1880\n *                                                                                                                     // 1881\n * @returns {Object}                                                                                                   // 1882\n */                                                                                                                    // 1883\nfunction createMap() {                                                                                                 // 1884\n  return Object.create(null);                                                                                          // 1885\n}                                                                                                                      // 1886\n                                                                                                                       // 1887\nvar NODE_TYPE_ELEMENT = 1;                                                                                             // 1888\nvar NODE_TYPE_ATTRIBUTE = 2;                                                                                           // 1889\nvar NODE_TYPE_TEXT = 3;                                                                                                // 1890\nvar NODE_TYPE_COMMENT = 8;                                                                                             // 1891\nvar NODE_TYPE_DOCUMENT = 9;                                                                                            // 1892\nvar NODE_TYPE_DOCUMENT_FRAGMENT = 11;                                                                                  // 1893\n                                                                                                                       // 1894\n/**                                                                                                                    // 1895\n * @ngdoc type                                                                                                         // 1896\n * @name angular.Module                                                                                                // 1897\n * @module ng                                                                                                          // 1898\n * @description                                                                                                        // 1899\n *                                                                                                                     // 1900\n * Interface for configuring angular {@link angular.module modules}.                                                   // 1901\n */                                                                                                                    // 1902\n                                                                                                                       // 1903\nfunction setupModuleLoader(window) {                                                                                   // 1904\n                                                                                                                       // 1905\n  var $injectorMinErr = minErr('$injector');                                                                           // 1906\n  var ngMinErr = minErr('ng');                                                                                         // 1907\n                                                                                                                       // 1908\n  function ensure(obj, name, factory) {                                                                                // 1909\n    return obj[name] || (obj[name] = factory());                                                                       // 1910\n  }                                                                                                                    // 1911\n                                                                                                                       // 1912\n  var angular = ensure(window, 'angular', Object);                                                                     // 1913\n                                                                                                                       // 1914\n  // We need to expose `angular.$$minErr` to modules such as `ngResource` that reference it during bootstrap           // 1915\n  angular.$$minErr = angular.$$minErr || minErr;                                                                       // 1916\n                                                                                                                       // 1917\n  return ensure(angular, 'module', function() {                                                                        // 1918\n    /** @type {Object.<string, angular.Module>} */                                                                     // 1919\n    var modules = {};                                                                                                  // 1920\n                                                                                                                       // 1921\n    /**                                                                                                                // 1922\n     * @ngdoc function                                                                                                 // 1923\n     * @name angular.module                                                                                            // 1924\n     * @module ng                                                                                                      // 1925\n     * @description                                                                                                    // 1926\n     *                                                                                                                 // 1927\n     * The `angular.module` is a global place for creating, registering and retrieving Angular                         // 1928\n     * modules.                                                                                                        // 1929\n     * All modules (angular core or 3rd party) that should be available to an application must be                      // 1930\n     * registered using this mechanism.                                                                                // 1931\n     *                                                                                                                 // 1932\n     * Passing one argument retrieves an existing {@link angular.Module},                                              // 1933\n     * whereas passing more than one argument creates a new {@link angular.Module}                                     // 1934\n     *                                                                                                                 // 1935\n     *                                                                                                                 // 1936\n     * # Module                                                                                                        // 1937\n     *                                                                                                                 // 1938\n     * A module is a collection of services, directives, controllers, filters, and configuration information.          // 1939\n     * `angular.module` is used to configure the {@link auto.$injector $injector}.                                     // 1940\n     *                                                                                                                 // 1941\n     * ```js                                                                                                           // 1942\n     * // Create a new module                                                                                          // 1943\n     * var myModule = angular.module('myModule', []);                                                                  // 1944\n     *                                                                                                                 // 1945\n     * // register a new service                                                                                       // 1946\n     * myModule.value('appName', 'MyCoolApp');                                                                         // 1947\n     *                                                                                                                 // 1948\n     * // configure existing services inside initialization blocks.                                                    // 1949\n     * myModule.config(['$locationProvider', function($locationProvider) {                                             // 1950\n     *   // Configure existing providers                                                                               // 1951\n     *   $locationProvider.hashPrefix('!');                                                                            // 1952\n     * }]);                                                                                                            // 1953\n     * ```                                                                                                             // 1954\n     *                                                                                                                 // 1955\n     * Then you can create an injector and load your modules like this:                                                // 1956\n     *                                                                                                                 // 1957\n     * ```js                                                                                                           // 1958\n     * var injector = angular.injector(['ng', 'myModule'])                                                             // 1959\n     * ```                                                                                                             // 1960\n     *                                                                                                                 // 1961\n     * However it's more likely that you'll just use                                                                   // 1962\n     * {@link ng.directive:ngApp ngApp} or                                                                             // 1963\n     * {@link angular.bootstrap} to simplify this process for you.                                                     // 1964\n     *                                                                                                                 // 1965\n     * @param {!string} name The name of the module to create or retrieve.                                             // 1966\n     * @param {!Array.<string>=} requires If specified then new module is being created. If                            // 1967\n     *        unspecified then the module is being retrieved for further configuration.                                // 1968\n     * @param {Function=} configFn Optional configuration function for the module. Same as                             // 1969\n     *        {@link angular.Module#config Module#config()}.                                                           // 1970\n     * @returns {module} new module with the {@link angular.Module} api.                                               // 1971\n     */                                                                                                                // 1972\n    return function module(name, requires, configFn) {                                                                 // 1973\n      var assertNotHasOwnProperty = function(name, context) {                                                          // 1974\n        if (name === 'hasOwnProperty') {                                                                               // 1975\n          throw ngMinErr('badname', 'hasOwnProperty is not a valid {0} name', context);                                // 1976\n        }                                                                                                              // 1977\n      };                                                                                                               // 1978\n                                                                                                                       // 1979\n      assertNotHasOwnProperty(name, 'module');                                                                         // 1980\n      if (requires && modules.hasOwnProperty(name)) {                                                                  // 1981\n        modules[name] = null;                                                                                          // 1982\n      }                                                                                                                // 1983\n      return ensure(modules, name, function() {                                                                        // 1984\n        if (!requires) {                                                                                               // 1985\n          throw $injectorMinErr('nomod', \"Module '{0}' is not available! You either misspelled \" +                     // 1986\n             \"the module name or forgot to load it. If registering a module ensure that you \" +                        // 1987\n             \"specify the dependencies as the second argument.\", name);                                                // 1988\n        }                                                                                                              // 1989\n                                                                                                                       // 1990\n        /** @type {!Array.<Array.<*>>} */                                                                              // 1991\n        var invokeQueue = [];                                                                                          // 1992\n                                                                                                                       // 1993\n        /** @type {!Array.<Function>} */                                                                               // 1994\n        var configBlocks = [];                                                                                         // 1995\n                                                                                                                       // 1996\n        /** @type {!Array.<Function>} */                                                                               // 1997\n        var runBlocks = [];                                                                                            // 1998\n                                                                                                                       // 1999\n        var config = invokeLater('$injector', 'invoke', 'push', configBlocks);                                         // 2000\n                                                                                                                       // 2001\n        /** @type {angular.Module} */                                                                                  // 2002\n        var moduleInstance = {                                                                                         // 2003\n          // Private state                                                                                             // 2004\n          _invokeQueue: invokeQueue,                                                                                   // 2005\n          _configBlocks: configBlocks,                                                                                 // 2006\n          _runBlocks: runBlocks,                                                                                       // 2007\n                                                                                                                       // 2008\n          /**                                                                                                          // 2009\n           * @ngdoc property                                                                                           // 2010\n           * @name angular.Module#requires                                                                             // 2011\n           * @module ng                                                                                                // 2012\n           *                                                                                                           // 2013\n           * @description                                                                                              // 2014\n           * Holds the list of modules which the injector will load before the current module is                       // 2015\n           * loaded.                                                                                                   // 2016\n           */                                                                                                          // 2017\n          requires: requires,                                                                                          // 2018\n                                                                                                                       // 2019\n          /**                                                                                                          // 2020\n           * @ngdoc property                                                                                           // 2021\n           * @name angular.Module#name                                                                                 // 2022\n           * @module ng                                                                                                // 2023\n           *                                                                                                           // 2024\n           * @description                                                                                              // 2025\n           * Name of the module.                                                                                       // 2026\n           */                                                                                                          // 2027\n          name: name,                                                                                                  // 2028\n                                                                                                                       // 2029\n                                                                                                                       // 2030\n          /**                                                                                                          // 2031\n           * @ngdoc method                                                                                             // 2032\n           * @name angular.Module#provider                                                                             // 2033\n           * @module ng                                                                                                // 2034\n           * @param {string} name service name                                                                         // 2035\n           * @param {Function} providerType Construction function for creating new instance of the                     // 2036\n           *                                service.                                                                   // 2037\n           * @description                                                                                              // 2038\n           * See {@link auto.$provide#provider $provide.provider()}.                                                   // 2039\n           */                                                                                                          // 2040\n          provider: invokeLaterAndSetModuleName('$provide', 'provider'),                                               // 2041\n                                                                                                                       // 2042\n          /**                                                                                                          // 2043\n           * @ngdoc method                                                                                             // 2044\n           * @name angular.Module#factory                                                                              // 2045\n           * @module ng                                                                                                // 2046\n           * @param {string} name service name                                                                         // 2047\n           * @param {Function} providerFunction Function for creating new instance of the service.                     // 2048\n           * @description                                                                                              // 2049\n           * See {@link auto.$provide#factory $provide.factory()}.                                                     // 2050\n           */                                                                                                          // 2051\n          factory: invokeLaterAndSetModuleName('$provide', 'factory'),                                                 // 2052\n                                                                                                                       // 2053\n          /**                                                                                                          // 2054\n           * @ngdoc method                                                                                             // 2055\n           * @name angular.Module#service                                                                              // 2056\n           * @module ng                                                                                                // 2057\n           * @param {string} name service name                                                                         // 2058\n           * @param {Function} constructor A constructor function that will be instantiated.                           // 2059\n           * @description                                                                                              // 2060\n           * See {@link auto.$provide#service $provide.service()}.                                                     // 2061\n           */                                                                                                          // 2062\n          service: invokeLaterAndSetModuleName('$provide', 'service'),                                                 // 2063\n                                                                                                                       // 2064\n          /**                                                                                                          // 2065\n           * @ngdoc method                                                                                             // 2066\n           * @name angular.Module#value                                                                                // 2067\n           * @module ng                                                                                                // 2068\n           * @param {string} name service name                                                                         // 2069\n           * @param {*} object Service instance object.                                                                // 2070\n           * @description                                                                                              // 2071\n           * See {@link auto.$provide#value $provide.value()}.                                                         // 2072\n           */                                                                                                          // 2073\n          value: invokeLater('$provide', 'value'),                                                                     // 2074\n                                                                                                                       // 2075\n          /**                                                                                                          // 2076\n           * @ngdoc method                                                                                             // 2077\n           * @name angular.Module#constant                                                                             // 2078\n           * @module ng                                                                                                // 2079\n           * @param {string} name constant name                                                                        // 2080\n           * @param {*} object Constant value.                                                                         // 2081\n           * @description                                                                                              // 2082\n           * Because the constant are fixed, they get applied before other provide methods.                            // 2083\n           * See {@link auto.$provide#constant $provide.constant()}.                                                   // 2084\n           */                                                                                                          // 2085\n          constant: invokeLater('$provide', 'constant', 'unshift'),                                                    // 2086\n                                                                                                                       // 2087\n           /**                                                                                                         // 2088\n           * @ngdoc method                                                                                             // 2089\n           * @name angular.Module#decorator                                                                            // 2090\n           * @module ng                                                                                                // 2091\n           * @param {string} The name of the service to decorate.                                                      // 2092\n           * @param {Function} This function will be invoked when the service needs to be                              // 2093\n           *                                    instantiated and should return the decorated service instance.         // 2094\n           * @description                                                                                              // 2095\n           * See {@link auto.$provide#decorator $provide.decorator()}.                                                 // 2096\n           */                                                                                                          // 2097\n          decorator: invokeLaterAndSetModuleName('$provide', 'decorator'),                                             // 2098\n                                                                                                                       // 2099\n          /**                                                                                                          // 2100\n           * @ngdoc method                                                                                             // 2101\n           * @name angular.Module#animation                                                                            // 2102\n           * @module ng                                                                                                // 2103\n           * @param {string} name animation name                                                                       // 2104\n           * @param {Function} animationFactory Factory function for creating new instance of an                       // 2105\n           *                                    animation.                                                             // 2106\n           * @description                                                                                              // 2107\n           *                                                                                                           // 2108\n           * **NOTE**: animations take effect only if the **ngAnimate** module is loaded.                              // 2109\n           *                                                                                                           // 2110\n           *                                                                                                           // 2111\n           * Defines an animation hook that can be later used with                                                     // 2112\n           * {@link $animate $animate} service and directives that use this service.                                   // 2113\n           *                                                                                                           // 2114\n           * ```js                                                                                                     // 2115\n           * module.animation('.animation-name', function($inject1, $inject2) {                                        // 2116\n           *   return {                                                                                                // 2117\n           *     eventName : function(element, done) {                                                                 // 2118\n           *       //code to run the animation                                                                         // 2119\n           *       //once complete, then run done()                                                                    // 2120\n           *       return function cancellationFunction(element) {                                                     // 2121\n           *         //code to cancel the animation                                                                    // 2122\n           *       }                                                                                                   // 2123\n           *     }                                                                                                     // 2124\n           *   }                                                                                                       // 2125\n           * })                                                                                                        // 2126\n           * ```                                                                                                       // 2127\n           *                                                                                                           // 2128\n           * See {@link ng.$animateProvider#register $animateProvider.register()} and                                  // 2129\n           * {@link ngAnimate ngAnimate module} for more information.                                                  // 2130\n           */                                                                                                          // 2131\n          animation: invokeLaterAndSetModuleName('$animateProvider', 'register'),                                      // 2132\n                                                                                                                       // 2133\n          /**                                                                                                          // 2134\n           * @ngdoc method                                                                                             // 2135\n           * @name angular.Module#filter                                                                               // 2136\n           * @module ng                                                                                                // 2137\n           * @param {string} name Filter name - this must be a valid angular expression identifier                     // 2138\n           * @param {Function} filterFactory Factory function for creating new instance of filter.                     // 2139\n           * @description                                                                                              // 2140\n           * See {@link ng.$filterProvider#register $filterProvider.register()}.                                       // 2141\n           *                                                                                                           // 2142\n           * <div class=\"alert alert-warning\">                                                                         // 2143\n           * **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.\n           * Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace        // 2145\n           * your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores                   // 2146\n           * (`myapp_subsection_filterx`).                                                                             // 2147\n           * </div>                                                                                                    // 2148\n           */                                                                                                          // 2149\n          filter: invokeLaterAndSetModuleName('$filterProvider', 'register'),                                          // 2150\n                                                                                                                       // 2151\n          /**                                                                                                          // 2152\n           * @ngdoc method                                                                                             // 2153\n           * @name angular.Module#controller                                                                           // 2154\n           * @module ng                                                                                                // 2155\n           * @param {string|Object} name Controller name, or an object map of controllers where the                    // 2156\n           *    keys are the names and the values are the constructors.                                                // 2157\n           * @param {Function} constructor Controller constructor function.                                            // 2158\n           * @description                                                                                              // 2159\n           * See {@link ng.$controllerProvider#register $controllerProvider.register()}.                               // 2160\n           */                                                                                                          // 2161\n          controller: invokeLaterAndSetModuleName('$controllerProvider', 'register'),                                  // 2162\n                                                                                                                       // 2163\n          /**                                                                                                          // 2164\n           * @ngdoc method                                                                                             // 2165\n           * @name angular.Module#directive                                                                            // 2166\n           * @module ng                                                                                                // 2167\n           * @param {string|Object} name Directive name, or an object map of directives where the                      // 2168\n           *    keys are the names and the values are the factories.                                                   // 2169\n           * @param {Function} directiveFactory Factory function for creating new instance of                          // 2170\n           * directives.                                                                                               // 2171\n           * @description                                                                                              // 2172\n           * See {@link ng.$compileProvider#directive $compileProvider.directive()}.                                   // 2173\n           */                                                                                                          // 2174\n          directive: invokeLaterAndSetModuleName('$compileProvider', 'directive'),                                     // 2175\n                                                                                                                       // 2176\n          /**                                                                                                          // 2177\n           * @ngdoc method                                                                                             // 2178\n           * @name angular.Module#config                                                                               // 2179\n           * @module ng                                                                                                // 2180\n           * @param {Function} configFn Execute this function on module load. Useful for service                       // 2181\n           *    configuration.                                                                                         // 2182\n           * @description                                                                                              // 2183\n           * Use this method to register work which needs to be performed on module loading.                           // 2184\n           * For more about how to configure services, see                                                             // 2185\n           * {@link providers#provider-recipe Provider Recipe}.                                                        // 2186\n           */                                                                                                          // 2187\n          config: config,                                                                                              // 2188\n                                                                                                                       // 2189\n          /**                                                                                                          // 2190\n           * @ngdoc method                                                                                             // 2191\n           * @name angular.Module#run                                                                                  // 2192\n           * @module ng                                                                                                // 2193\n           * @param {Function} initializationFn Execute this function after injector creation.                         // 2194\n           *    Useful for application initialization.                                                                 // 2195\n           * @description                                                                                              // 2196\n           * Use this method to register work which should be performed when the injector is done                      // 2197\n           * loading all modules.                                                                                      // 2198\n           */                                                                                                          // 2199\n          run: function(block) {                                                                                       // 2200\n            runBlocks.push(block);                                                                                     // 2201\n            return this;                                                                                               // 2202\n          }                                                                                                            // 2203\n        };                                                                                                             // 2204\n                                                                                                                       // 2205\n        if (configFn) {                                                                                                // 2206\n          config(configFn);                                                                                            // 2207\n        }                                                                                                              // 2208\n                                                                                                                       // 2209\n        return moduleInstance;                                                                                         // 2210\n                                                                                                                       // 2211\n        /**                                                                                                            // 2212\n         * @param {string} provider                                                                                    // 2213\n         * @param {string} method                                                                                      // 2214\n         * @param {String=} insertMethod                                                                               // 2215\n         * @returns {angular.Module}                                                                                   // 2216\n         */                                                                                                            // 2217\n        function invokeLater(provider, method, insertMethod, queue) {                                                  // 2218\n          if (!queue) queue = invokeQueue;                                                                             // 2219\n          return function() {                                                                                          // 2220\n            queue[insertMethod || 'push']([provider, method, arguments]);                                              // 2221\n            return moduleInstance;                                                                                     // 2222\n          };                                                                                                           // 2223\n        }                                                                                                              // 2224\n                                                                                                                       // 2225\n        /**                                                                                                            // 2226\n         * @param {string} provider                                                                                    // 2227\n         * @param {string} method                                                                                      // 2228\n         * @returns {angular.Module}                                                                                   // 2229\n         */                                                                                                            // 2230\n        function invokeLaterAndSetModuleName(provider, method) {                                                       // 2231\n          return function(recipeName, factoryFunction) {                                                               // 2232\n            if (factoryFunction && isFunction(factoryFunction)) factoryFunction.$$moduleName = name;                   // 2233\n            invokeQueue.push([provider, method, arguments]);                                                           // 2234\n            return moduleInstance;                                                                                     // 2235\n          };                                                                                                           // 2236\n        }                                                                                                              // 2237\n      });                                                                                                              // 2238\n    };                                                                                                                 // 2239\n  });                                                                                                                  // 2240\n                                                                                                                       // 2241\n}                                                                                                                      // 2242\n                                                                                                                       // 2243\n/* global: toDebugString: true */                                                                                      // 2244\n                                                                                                                       // 2245\nfunction serializeObject(obj) {                                                                                        // 2246\n  var seen = [];                                                                                                       // 2247\n                                                                                                                       // 2248\n  return JSON.stringify(obj, function(key, val) {                                                                      // 2249\n    val = toJsonReplacer(key, val);                                                                                    // 2250\n    if (isObject(val)) {                                                                                               // 2251\n                                                                                                                       // 2252\n      if (seen.indexOf(val) >= 0) return '...';                                                                        // 2253\n                                                                                                                       // 2254\n      seen.push(val);                                                                                                  // 2255\n    }                                                                                                                  // 2256\n    return val;                                                                                                        // 2257\n  });                                                                                                                  // 2258\n}                                                                                                                      // 2259\n                                                                                                                       // 2260\nfunction toDebugString(obj) {                                                                                          // 2261\n  if (typeof obj === 'function') {                                                                                     // 2262\n    return obj.toString().replace(/ \\{[\\s\\S]*$/, '');                                                                  // 2263\n  } else if (isUndefined(obj)) {                                                                                       // 2264\n    return 'undefined';                                                                                                // 2265\n  } else if (typeof obj !== 'string') {                                                                                // 2266\n    return serializeObject(obj);                                                                                       // 2267\n  }                                                                                                                    // 2268\n  return obj;                                                                                                          // 2269\n}                                                                                                                      // 2270\n                                                                                                                       // 2271\n/* global angularModule: true,                                                                                         // 2272\n  version: true,                                                                                                       // 2273\n                                                                                                                       // 2274\n  $CompileProvider,                                                                                                    // 2275\n                                                                                                                       // 2276\n  htmlAnchorDirective,                                                                                                 // 2277\n  inputDirective,                                                                                                      // 2278\n  inputDirective,                                                                                                      // 2279\n  formDirective,                                                                                                       // 2280\n  scriptDirective,                                                                                                     // 2281\n  selectDirective,                                                                                                     // 2282\n  styleDirective,                                                                                                      // 2283\n  optionDirective,                                                                                                     // 2284\n  ngBindDirective,                                                                                                     // 2285\n  ngBindHtmlDirective,                                                                                                 // 2286\n  ngBindTemplateDirective,                                                                                             // 2287\n  ngClassDirective,                                                                                                    // 2288\n  ngClassEvenDirective,                                                                                                // 2289\n  ngClassOddDirective,                                                                                                 // 2290\n  ngCloakDirective,                                                                                                    // 2291\n  ngControllerDirective,                                                                                               // 2292\n  ngFormDirective,                                                                                                     // 2293\n  ngHideDirective,                                                                                                     // 2294\n  ngIfDirective,                                                                                                       // 2295\n  ngIncludeDirective,                                                                                                  // 2296\n  ngIncludeFillContentDirective,                                                                                       // 2297\n  ngInitDirective,                                                                                                     // 2298\n  ngNonBindableDirective,                                                                                              // 2299\n  ngPluralizeDirective,                                                                                                // 2300\n  ngRepeatDirective,                                                                                                   // 2301\n  ngShowDirective,                                                                                                     // 2302\n  ngStyleDirective,                                                                                                    // 2303\n  ngSwitchDirective,                                                                                                   // 2304\n  ngSwitchWhenDirective,                                                                                               // 2305\n  ngSwitchDefaultDirective,                                                                                            // 2306\n  ngOptionsDirective,                                                                                                  // 2307\n  ngTranscludeDirective,                                                                                               // 2308\n  ngModelDirective,                                                                                                    // 2309\n  ngListDirective,                                                                                                     // 2310\n  ngChangeDirective,                                                                                                   // 2311\n  patternDirective,                                                                                                    // 2312\n  patternDirective,                                                                                                    // 2313\n  requiredDirective,                                                                                                   // 2314\n  requiredDirective,                                                                                                   // 2315\n  minlengthDirective,                                                                                                  // 2316\n  minlengthDirective,                                                                                                  // 2317\n  maxlengthDirective,                                                                                                  // 2318\n  maxlengthDirective,                                                                                                  // 2319\n  ngValueDirective,                                                                                                    // 2320\n  ngModelOptionsDirective,                                                                                             // 2321\n  ngAttributeAliasDirectives,                                                                                          // 2322\n  ngEventDirectives,                                                                                                   // 2323\n                                                                                                                       // 2324\n  $AnchorScrollProvider,                                                                                               // 2325\n  $AnimateProvider,                                                                                                    // 2326\n  $CoreAnimateCssProvider,                                                                                             // 2327\n  $$CoreAnimateQueueProvider,                                                                                          // 2328\n  $$CoreAnimateRunnerProvider,                                                                                         // 2329\n  $BrowserProvider,                                                                                                    // 2330\n  $CacheFactoryProvider,                                                                                               // 2331\n  $ControllerProvider,                                                                                                 // 2332\n  $DocumentProvider,                                                                                                   // 2333\n  $ExceptionHandlerProvider,                                                                                           // 2334\n  $FilterProvider,                                                                                                     // 2335\n  $$ForceReflowProvider,                                                                                               // 2336\n  $InterpolateProvider,                                                                                                // 2337\n  $IntervalProvider,                                                                                                   // 2338\n  $$HashMapProvider,                                                                                                   // 2339\n  $HttpProvider,                                                                                                       // 2340\n  $HttpParamSerializerProvider,                                                                                        // 2341\n  $HttpParamSerializerJQLikeProvider,                                                                                  // 2342\n  $HttpBackendProvider,                                                                                                // 2343\n  $xhrFactoryProvider,                                                                                                 // 2344\n  $LocationProvider,                                                                                                   // 2345\n  $LogProvider,                                                                                                        // 2346\n  $ParseProvider,                                                                                                      // 2347\n  $RootScopeProvider,                                                                                                  // 2348\n  $QProvider,                                                                                                          // 2349\n  $$QProvider,                                                                                                         // 2350\n  $$SanitizeUriProvider,                                                                                               // 2351\n  $SceProvider,                                                                                                        // 2352\n  $SceDelegateProvider,                                                                                                // 2353\n  $SnifferProvider,                                                                                                    // 2354\n  $TemplateCacheProvider,                                                                                              // 2355\n  $TemplateRequestProvider,                                                                                            // 2356\n  $$TestabilityProvider,                                                                                               // 2357\n  $TimeoutProvider,                                                                                                    // 2358\n  $$RAFProvider,                                                                                                       // 2359\n  $WindowProvider,                                                                                                     // 2360\n  $$jqLiteProvider,                                                                                                    // 2361\n  $$CookieReaderProvider                                                                                               // 2362\n*/                                                                                                                     // 2363\n                                                                                                                       // 2364\n                                                                                                                       // 2365\n/**                                                                                                                    // 2366\n * @ngdoc object                                                                                                       // 2367\n * @name angular.version                                                                                               // 2368\n * @module ng                                                                                                          // 2369\n * @description                                                                                                        // 2370\n * An object that contains information about the current AngularJS version.                                            // 2371\n *                                                                                                                     // 2372\n * This object has the following properties:                                                                           // 2373\n *                                                                                                                     // 2374\n * - `full` – `{string}` – Full version string, such as \"0.9.18\".                                                      // 2375\n * - `major` – `{number}` – Major version number, such as \"0\".                                                         // 2376\n * - `minor` – `{number}` – Minor version number, such as \"9\".                                                         // 2377\n * - `dot` – `{number}` – Dot version number, such as \"18\".                                                            // 2378\n * - `codeName` – `{string}` – Code name of the release, such as \"jiggling-armfat\".                                    // 2379\n */                                                                                                                    // 2380\nvar version = {                                                                                                        // 2381\n  full: '1.4.7',    // all of these placeholder strings will be replaced by grunt's                                    // 2382\n  major: 1,    // package task                                                                                         // 2383\n  minor: 4,                                                                                                            // 2384\n  dot: 7,                                                                                                              // 2385\n  codeName: 'dark-luminescence'                                                                                        // 2386\n};                                                                                                                     // 2387\n                                                                                                                       // 2388\n                                                                                                                       // 2389\nfunction publishExternalAPI(angular) {                                                                                 // 2390\n  extend(angular, {                                                                                                    // 2391\n    'bootstrap': bootstrap,                                                                                            // 2392\n    'copy': copy,                                                                                                      // 2393\n    'extend': extend,                                                                                                  // 2394\n    'merge': merge,                                                                                                    // 2395\n    'equals': equals,                                                                                                  // 2396\n    'element': jqLite,                                                                                                 // 2397\n    'forEach': forEach,                                                                                                // 2398\n    'injector': createInjector,                                                                                        // 2399\n    'noop': noop,                                                                                                      // 2400\n    'bind': bind,                                                                                                      // 2401\n    'toJson': toJson,                                                                                                  // 2402\n    'fromJson': fromJson,                                                                                              // 2403\n    'identity': identity,                                                                                              // 2404\n    'isUndefined': isUndefined,                                                                                        // 2405\n    'isDefined': isDefined,                                                                                            // 2406\n    'isString': isString,                                                                                              // 2407\n    'isFunction': isFunction,                                                                                          // 2408\n    'isObject': isObject,                                                                                              // 2409\n    'isNumber': isNumber,                                                                                              // 2410\n    'isElement': isElement,                                                                                            // 2411\n    'isArray': isArray,                                                                                                // 2412\n    'version': version,                                                                                                // 2413\n    'isDate': isDate,                                                                                                  // 2414\n    'lowercase': lowercase,                                                                                            // 2415\n    'uppercase': uppercase,                                                                                            // 2416\n    'callbacks': {counter: 0},                                                                                         // 2417\n    'getTestability': getTestability,                                                                                  // 2418\n    '$$minErr': minErr,                                                                                                // 2419\n    '$$csp': csp,                                                                                                      // 2420\n    'reloadWithDebugInfo': reloadWithDebugInfo                                                                         // 2421\n  });                                                                                                                  // 2422\n                                                                                                                       // 2423\n  angularModule = setupModuleLoader(window);                                                                           // 2424\n                                                                                                                       // 2425\n  angularModule('ng', ['ngLocale'], ['$provide',                                                                       // 2426\n    function ngModule($provide) {                                                                                      // 2427\n      // $$sanitizeUriProvider needs to be before $compileProvider as it is used by it.                                // 2428\n      $provide.provider({                                                                                              // 2429\n        $$sanitizeUri: $$SanitizeUriProvider                                                                           // 2430\n      });                                                                                                              // 2431\n      $provide.provider('$compile', $CompileProvider).                                                                 // 2432\n        directive({                                                                                                    // 2433\n            a: htmlAnchorDirective,                                                                                    // 2434\n            input: inputDirective,                                                                                     // 2435\n            textarea: inputDirective,                                                                                  // 2436\n            form: formDirective,                                                                                       // 2437\n            script: scriptDirective,                                                                                   // 2438\n            select: selectDirective,                                                                                   // 2439\n            style: styleDirective,                                                                                     // 2440\n            option: optionDirective,                                                                                   // 2441\n            ngBind: ngBindDirective,                                                                                   // 2442\n            ngBindHtml: ngBindHtmlDirective,                                                                           // 2443\n            ngBindTemplate: ngBindTemplateDirective,                                                                   // 2444\n            ngClass: ngClassDirective,                                                                                 // 2445\n            ngClassEven: ngClassEvenDirective,                                                                         // 2446\n            ngClassOdd: ngClassOddDirective,                                                                           // 2447\n            ngCloak: ngCloakDirective,                                                                                 // 2448\n            ngController: ngControllerDirective,                                                                       // 2449\n            ngForm: ngFormDirective,                                                                                   // 2450\n            ngHide: ngHideDirective,                                                                                   // 2451\n            ngIf: ngIfDirective,                                                                                       // 2452\n            ngInclude: ngIncludeDirective,                                                                             // 2453\n            ngInit: ngInitDirective,                                                                                   // 2454\n            ngNonBindable: ngNonBindableDirective,                                                                     // 2455\n            ngPluralize: ngPluralizeDirective,                                                                         // 2456\n            ngRepeat: ngRepeatDirective,                                                                               // 2457\n            ngShow: ngShowDirective,                                                                                   // 2458\n            ngStyle: ngStyleDirective,                                                                                 // 2459\n            ngSwitch: ngSwitchDirective,                                                                               // 2460\n            ngSwitchWhen: ngSwitchWhenDirective,                                                                       // 2461\n            ngSwitchDefault: ngSwitchDefaultDirective,                                                                 // 2462\n            ngOptions: ngOptionsDirective,                                                                             // 2463\n            ngTransclude: ngTranscludeDirective,                                                                       // 2464\n            ngModel: ngModelDirective,                                                                                 // 2465\n            ngList: ngListDirective,                                                                                   // 2466\n            ngChange: ngChangeDirective,                                                                               // 2467\n            pattern: patternDirective,                                                                                 // 2468\n            ngPattern: patternDirective,                                                                               // 2469\n            required: requiredDirective,                                                                               // 2470\n            ngRequired: requiredDirective,                                                                             // 2471\n            minlength: minlengthDirective,                                                                             // 2472\n            ngMinlength: minlengthDirective,                                                                           // 2473\n            maxlength: maxlengthDirective,                                                                             // 2474\n            ngMaxlength: maxlengthDirective,                                                                           // 2475\n            ngValue: ngValueDirective,                                                                                 // 2476\n            ngModelOptions: ngModelOptionsDirective                                                                    // 2477\n        }).                                                                                                            // 2478\n        directive({                                                                                                    // 2479\n          ngInclude: ngIncludeFillContentDirective                                                                     // 2480\n        }).                                                                                                            // 2481\n        directive(ngAttributeAliasDirectives).                                                                         // 2482\n        directive(ngEventDirectives);                                                                                  // 2483\n      $provide.provider({                                                                                              // 2484\n        $anchorScroll: $AnchorScrollProvider,                                                                          // 2485\n        $animate: $AnimateProvider,                                                                                    // 2486\n        $animateCss: $CoreAnimateCssProvider,                                                                          // 2487\n        $$animateQueue: $$CoreAnimateQueueProvider,                                                                    // 2488\n        $$AnimateRunner: $$CoreAnimateRunnerProvider,                                                                  // 2489\n        $browser: $BrowserProvider,                                                                                    // 2490\n        $cacheFactory: $CacheFactoryProvider,                                                                          // 2491\n        $controller: $ControllerProvider,                                                                              // 2492\n        $document: $DocumentProvider,                                                                                  // 2493\n        $exceptionHandler: $ExceptionHandlerProvider,                                                                  // 2494\n        $filter: $FilterProvider,                                                                                      // 2495\n        $$forceReflow: $$ForceReflowProvider,                                                                          // 2496\n        $interpolate: $InterpolateProvider,                                                                            // 2497\n        $interval: $IntervalProvider,                                                                                  // 2498\n        $http: $HttpProvider,                                                                                          // 2499\n        $httpParamSerializer: $HttpParamSerializerProvider,                                                            // 2500\n        $httpParamSerializerJQLike: $HttpParamSerializerJQLikeProvider,                                                // 2501\n        $httpBackend: $HttpBackendProvider,                                                                            // 2502\n        $xhrFactory: $xhrFactoryProvider,                                                                              // 2503\n        $location: $LocationProvider,                                                                                  // 2504\n        $log: $LogProvider,                                                                                            // 2505\n        $parse: $ParseProvider,                                                                                        // 2506\n        $rootScope: $RootScopeProvider,                                                                                // 2507\n        $q: $QProvider,                                                                                                // 2508\n        $$q: $$QProvider,                                                                                              // 2509\n        $sce: $SceProvider,                                                                                            // 2510\n        $sceDelegate: $SceDelegateProvider,                                                                            // 2511\n        $sniffer: $SnifferProvider,                                                                                    // 2512\n        $templateCache: $TemplateCacheProvider,                                                                        // 2513\n        $templateRequest: $TemplateRequestProvider,                                                                    // 2514\n        $$testability: $$TestabilityProvider,                                                                          // 2515\n        $timeout: $TimeoutProvider,                                                                                    // 2516\n        $window: $WindowProvider,                                                                                      // 2517\n        $$rAF: $$RAFProvider,                                                                                          // 2518\n        $$jqLite: $$jqLiteProvider,                                                                                    // 2519\n        $$HashMap: $$HashMapProvider,                                                                                  // 2520\n        $$cookieReader: $$CookieReaderProvider                                                                         // 2521\n      });                                                                                                              // 2522\n    }                                                                                                                  // 2523\n  ]);                                                                                                                  // 2524\n}                                                                                                                      // 2525\n                                                                                                                       // 2526\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *                                           // 2527\n *     Any commits to this file should be reviewed with security in mind.  *                                           // 2528\n *   Changes to this file can potentially create security vulnerabilities. *                                           // 2529\n *          An approval from 2 Core members with history of modifying      *                                           // 2530\n *                         this file is required.                          *                                           // 2531\n *                                                                         *                                           // 2532\n *  Does the change somehow allow for arbitrary javascript to be executed? *                                           // 2533\n *    Or allows for someone to change the prototype of built-in objects?   *                                           // 2534\n *     Or gives undesired access to variables likes document or window?    *                                           // 2535\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */                                          // 2536\n                                                                                                                       // 2537\n/* global JQLitePrototype: true,                                                                                       // 2538\n  addEventListenerFn: true,                                                                                            // 2539\n  removeEventListenerFn: true,                                                                                         // 2540\n  BOOLEAN_ATTR: true,                                                                                                  // 2541\n  ALIASED_ATTR: true,                                                                                                  // 2542\n*/                                                                                                                     // 2543\n                                                                                                                       // 2544\n//////////////////////////////////                                                                                     // 2545\n//JQLite                                                                                                               // 2546\n//////////////////////////////////                                                                                     // 2547\n                                                                                                                       // 2548\n/**                                                                                                                    // 2549\n * @ngdoc function                                                                                                     // 2550\n * @name angular.element                                                                                               // 2551\n * @module ng                                                                                                          // 2552\n * @kind function                                                                                                      // 2553\n *                                                                                                                     // 2554\n * @description                                                                                                        // 2555\n * Wraps a raw DOM element or HTML string as a [jQuery](http://jquery.com) element.                                    // 2556\n *                                                                                                                     // 2557\n * If jQuery is available, `angular.element` is an alias for the                                                       // 2558\n * [jQuery](http://api.jquery.com/jQuery/) function. If jQuery is not available, `angular.element`                     // 2559\n * delegates to Angular's built-in subset of jQuery, called \"jQuery lite\" or \"jqLite.\"                                 // 2560\n *                                                                                                                     // 2561\n * <div class=\"alert alert-success\">jqLite is a tiny, API-compatible subset of jQuery that allows                      // 2562\n * Angular to manipulate the DOM in a cross-browser compatible way. **jqLite** implements only the most                // 2563\n * commonly needed functionality with the goal of having a very small footprint.</div>                                 // 2564\n *                                                                                                                     // 2565\n * To use `jQuery`, simply ensure it is loaded before the `angular.js` file.                                           // 2566\n *                                                                                                                     // 2567\n * <div class=\"alert\">**Note:** all element references in Angular are always wrapped with jQuery or                    // 2568\n * jqLite; they are never raw DOM references.</div>                                                                    // 2569\n *                                                                                                                     // 2570\n * ## Angular's jqLite                                                                                                 // 2571\n * jqLite provides only the following jQuery methods:                                                                  // 2572\n *                                                                                                                     // 2573\n * - [`addClass()`](http://api.jquery.com/addClass/)                                                                   // 2574\n * - [`after()`](http://api.jquery.com/after/)                                                                         // 2575\n * - [`append()`](http://api.jquery.com/append/)                                                                       // 2576\n * - [`attr()`](http://api.jquery.com/attr/) - Does not support functions as parameters                                // 2577\n * - [`bind()`](http://api.jquery.com/bind/) - Does not support namespaces, selectors or eventData                     // 2578\n * - [`children()`](http://api.jquery.com/children/) - Does not support selectors                                      // 2579\n * - [`clone()`](http://api.jquery.com/clone/)                                                                         // 2580\n * - [`contents()`](http://api.jquery.com/contents/)                                                                   // 2581\n * - [`css()`](http://api.jquery.com/css/) - Only retrieves inline-styles, does not call `getComputedStyle()`. As a setter, does not convert numbers to strings or append 'px'.\n * - [`data()`](http://api.jquery.com/data/)                                                                           // 2583\n * - [`detach()`](http://api.jquery.com/detach/)                                                                       // 2584\n * - [`empty()`](http://api.jquery.com/empty/)                                                                         // 2585\n * - [`eq()`](http://api.jquery.com/eq/)                                                                               // 2586\n * - [`find()`](http://api.jquery.com/find/) - Limited to lookups by tag name                                          // 2587\n * - [`hasClass()`](http://api.jquery.com/hasClass/)                                                                   // 2588\n * - [`html()`](http://api.jquery.com/html/)                                                                           // 2589\n * - [`next()`](http://api.jquery.com/next/) - Does not support selectors                                              // 2590\n * - [`on()`](http://api.jquery.com/on/) - Does not support namespaces, selectors or eventData                         // 2591\n * - [`off()`](http://api.jquery.com/off/) - Does not support namespaces, selectors or event object as parameter       // 2592\n * - [`one()`](http://api.jquery.com/one/) - Does not support namespaces or selectors                                  // 2593\n * - [`parent()`](http://api.jquery.com/parent/) - Does not support selectors                                          // 2594\n * - [`prepend()`](http://api.jquery.com/prepend/)                                                                     // 2595\n * - [`prop()`](http://api.jquery.com/prop/)                                                                           // 2596\n * - [`ready()`](http://api.jquery.com/ready/)                                                                         // 2597\n * - [`remove()`](http://api.jquery.com/remove/)                                                                       // 2598\n * - [`removeAttr()`](http://api.jquery.com/removeAttr/)                                                               // 2599\n * - [`removeClass()`](http://api.jquery.com/removeClass/)                                                             // 2600\n * - [`removeData()`](http://api.jquery.com/removeData/)                                                               // 2601\n * - [`replaceWith()`](http://api.jquery.com/replaceWith/)                                                             // 2602\n * - [`text()`](http://api.jquery.com/text/)                                                                           // 2603\n * - [`toggleClass()`](http://api.jquery.com/toggleClass/)                                                             // 2604\n * - [`triggerHandler()`](http://api.jquery.com/triggerHandler/) - Passes a dummy event object to handlers.            // 2605\n * - [`unbind()`](http://api.jquery.com/unbind/) - Does not support namespaces or event object as parameter            // 2606\n * - [`val()`](http://api.jquery.com/val/)                                                                             // 2607\n * - [`wrap()`](http://api.jquery.com/wrap/)                                                                           // 2608\n *                                                                                                                     // 2609\n * ## jQuery/jqLite Extras                                                                                             // 2610\n * Angular also provides the following additional methods and events to both jQuery and jqLite:                        // 2611\n *                                                                                                                     // 2612\n * ### Events                                                                                                          // 2613\n * - `$destroy` - AngularJS intercepts all jqLite/jQuery's DOM destruction apis and fires this event                   // 2614\n *    on all DOM nodes being removed.  This can be used to clean up any 3rd party bindings to the DOM                  // 2615\n *    element before it is removed.                                                                                    // 2616\n *                                                                                                                     // 2617\n * ### Methods                                                                                                         // 2618\n * - `controller(name)` - retrieves the controller of the current element or its parent. By default                    // 2619\n *   retrieves controller associated with the `ngController` directive. If `name` is provided as                       // 2620\n *   camelCase directive name, then the controller for this directive will be retrieved (e.g.                          // 2621\n *   `'ngModel'`).                                                                                                     // 2622\n * - `injector()` - retrieves the injector of the current element or its parent.                                       // 2623\n * - `scope()` - retrieves the {@link ng.$rootScope.Scope scope} of the current                                        // 2624\n *   element or its parent. Requires {@link guide/production#disabling-debug-data Debug Data} to                       // 2625\n *   be enabled.                                                                                                       // 2626\n * - `isolateScope()` - retrieves an isolate {@link ng.$rootScope.Scope scope} if one is attached directly to the      // 2627\n *   current element. This getter should be used only on elements that contain a directive which starts a new isolate  // 2628\n *   scope. Calling `scope()` on this element always returns the original non-isolate scope.                           // 2629\n *   Requires {@link guide/production#disabling-debug-data Debug Data} to be enabled.                                  // 2630\n * - `inheritedData()` - same as `data()`, but walks up the DOM until a value is found or the top                      // 2631\n *   parent element is reached.                                                                                        // 2632\n *                                                                                                                     // 2633\n * @param {string|DOMElement} element HTML string or DOMElement to be wrapped into jQuery.                             // 2634\n * @returns {Object} jQuery object.                                                                                    // 2635\n */                                                                                                                    // 2636\n                                                                                                                       // 2637\nJQLite.expando = 'ng339';                                                                                              // 2638\n                                                                                                                       // 2639\nvar jqCache = JQLite.cache = {},                                                                                       // 2640\n    jqId = 1,                                                                                                          // 2641\n    addEventListenerFn = function(element, type, fn) {                                                                 // 2642\n      element.addEventListener(type, fn, false);                                                                       // 2643\n    },                                                                                                                 // 2644\n    removeEventListenerFn = function(element, type, fn) {                                                              // 2645\n      element.removeEventListener(type, fn, false);                                                                    // 2646\n    };                                                                                                                 // 2647\n                                                                                                                       // 2648\n/*                                                                                                                     // 2649\n * !!! This is an undocumented \"private\" function !!!                                                                  // 2650\n */                                                                                                                    // 2651\nJQLite._data = function(node) {                                                                                        // 2652\n  //jQuery always returns an object on cache miss                                                                      // 2653\n  return this.cache[node[this.expando]] || {};                                                                         // 2654\n};                                                                                                                     // 2655\n                                                                                                                       // 2656\nfunction jqNextId() { return ++jqId; }                                                                                 // 2657\n                                                                                                                       // 2658\n                                                                                                                       // 2659\nvar SPECIAL_CHARS_REGEXP = /([\\:\\-\\_]+(.))/g;                                                                          // 2660\nvar MOZ_HACK_REGEXP = /^moz([A-Z])/;                                                                                   // 2661\nvar MOUSE_EVENT_MAP= { mouseleave: \"mouseout\", mouseenter: \"mouseover\"};                                               // 2662\nvar jqLiteMinErr = minErr('jqLite');                                                                                   // 2663\n                                                                                                                       // 2664\n/**                                                                                                                    // 2665\n * Converts snake_case to camelCase.                                                                                   // 2666\n * Also there is special case for Moz prefix starting with upper case letter.                                          // 2667\n * @param name Name to normalize                                                                                       // 2668\n */                                                                                                                    // 2669\nfunction camelCase(name) {                                                                                             // 2670\n  return name.                                                                                                         // 2671\n    replace(SPECIAL_CHARS_REGEXP, function(_, separator, letter, offset) {                                             // 2672\n      return offset ? letter.toUpperCase() : letter;                                                                   // 2673\n    }).                                                                                                                // 2674\n    replace(MOZ_HACK_REGEXP, 'Moz$1');                                                                                 // 2675\n}                                                                                                                      // 2676\n                                                                                                                       // 2677\nvar SINGLE_TAG_REGEXP = /^<([\\w-]+)\\s*\\/?>(?:<\\/\\1>|)$/;                                                               // 2678\nvar HTML_REGEXP = /<|&#?\\w+;/;                                                                                         // 2679\nvar TAG_NAME_REGEXP = /<([\\w:-]+)/;                                                                                    // 2680\nvar XHTML_TAG_REGEXP = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:-]+)[^>]*)\\/>/gi;                     // 2681\n                                                                                                                       // 2682\nvar wrapMap = {                                                                                                        // 2683\n  'option': [1, '<select multiple=\"multiple\">', '</select>'],                                                          // 2684\n                                                                                                                       // 2685\n  'thead': [1, '<table>', '</table>'],                                                                                 // 2686\n  'col': [2, '<table><colgroup>', '</colgroup></table>'],                                                              // 2687\n  'tr': [2, '<table><tbody>', '</tbody></table>'],                                                                     // 2688\n  'td': [3, '<table><tbody><tr>', '</tr></tbody></table>'],                                                            // 2689\n  '_default': [0, \"\", \"\"]                                                                                              // 2690\n};                                                                                                                     // 2691\n                                                                                                                       // 2692\nwrapMap.optgroup = wrapMap.option;                                                                                     // 2693\nwrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;                                    // 2694\nwrapMap.th = wrapMap.td;                                                                                               // 2695\n                                                                                                                       // 2696\n                                                                                                                       // 2697\nfunction jqLiteIsTextNode(html) {                                                                                      // 2698\n  return !HTML_REGEXP.test(html);                                                                                      // 2699\n}                                                                                                                      // 2700\n                                                                                                                       // 2701\nfunction jqLiteAcceptsData(node) {                                                                                     // 2702\n  // The window object can accept data but has no nodeType                                                             // 2703\n  // Otherwise we are only interested in elements (1) and documents (9)                                                // 2704\n  var nodeType = node.nodeType;                                                                                        // 2705\n  return nodeType === NODE_TYPE_ELEMENT || !nodeType || nodeType === NODE_TYPE_DOCUMENT;                               // 2706\n}                                                                                                                      // 2707\n                                                                                                                       // 2708\nfunction jqLiteHasData(node) {                                                                                         // 2709\n  for (var key in jqCache[node.ng339]) {                                                                               // 2710\n    return true;                                                                                                       // 2711\n  }                                                                                                                    // 2712\n  return false;                                                                                                        // 2713\n}                                                                                                                      // 2714\n                                                                                                                       // 2715\nfunction jqLiteBuildFragment(html, context) {                                                                          // 2716\n  var tmp, tag, wrap,                                                                                                  // 2717\n      fragment = context.createDocumentFragment(),                                                                     // 2718\n      nodes = [], i;                                                                                                   // 2719\n                                                                                                                       // 2720\n  if (jqLiteIsTextNode(html)) {                                                                                        // 2721\n    // Convert non-html into a text node                                                                               // 2722\n    nodes.push(context.createTextNode(html));                                                                          // 2723\n  } else {                                                                                                             // 2724\n    // Convert html into DOM nodes                                                                                     // 2725\n    tmp = tmp || fragment.appendChild(context.createElement(\"div\"));                                                   // 2726\n    tag = (TAG_NAME_REGEXP.exec(html) || [\"\", \"\"])[1].toLowerCase();                                                   // 2727\n    wrap = wrapMap[tag] || wrapMap._default;                                                                           // 2728\n    tmp.innerHTML = wrap[1] + html.replace(XHTML_TAG_REGEXP, \"<$1></$2>\") + wrap[2];                                   // 2729\n                                                                                                                       // 2730\n    // Descend through wrappers to the right content                                                                   // 2731\n    i = wrap[0];                                                                                                       // 2732\n    while (i--) {                                                                                                      // 2733\n      tmp = tmp.lastChild;                                                                                             // 2734\n    }                                                                                                                  // 2735\n                                                                                                                       // 2736\n    nodes = concat(nodes, tmp.childNodes);                                                                             // 2737\n                                                                                                                       // 2738\n    tmp = fragment.firstChild;                                                                                         // 2739\n    tmp.textContent = \"\";                                                                                              // 2740\n  }                                                                                                                    // 2741\n                                                                                                                       // 2742\n  // Remove wrapper from fragment                                                                                      // 2743\n  fragment.textContent = \"\";                                                                                           // 2744\n  fragment.innerHTML = \"\"; // Clear inner HTML                                                                         // 2745\n  forEach(nodes, function(node) {                                                                                      // 2746\n    fragment.appendChild(node);                                                                                        // 2747\n  });                                                                                                                  // 2748\n                                                                                                                       // 2749\n  return fragment;                                                                                                     // 2750\n}                                                                                                                      // 2751\n                                                                                                                       // 2752\nfunction jqLiteParseHTML(html, context) {                                                                              // 2753\n  context = context || document;                                                                                       // 2754\n  var parsed;                                                                                                          // 2755\n                                                                                                                       // 2756\n  if ((parsed = SINGLE_TAG_REGEXP.exec(html))) {                                                                       // 2757\n    return [context.createElement(parsed[1])];                                                                         // 2758\n  }                                                                                                                    // 2759\n                                                                                                                       // 2760\n  if ((parsed = jqLiteBuildFragment(html, context))) {                                                                 // 2761\n    return parsed.childNodes;                                                                                          // 2762\n  }                                                                                                                    // 2763\n                                                                                                                       // 2764\n  return [];                                                                                                           // 2765\n}                                                                                                                      // 2766\n                                                                                                                       // 2767\n/////////////////////////////////////////////                                                                          // 2768\nfunction JQLite(element) {                                                                                             // 2769\n  if (element instanceof JQLite) {                                                                                     // 2770\n    return element;                                                                                                    // 2771\n  }                                                                                                                    // 2772\n                                                                                                                       // 2773\n  var argIsString;                                                                                                     // 2774\n                                                                                                                       // 2775\n  if (isString(element)) {                                                                                             // 2776\n    element = trim(element);                                                                                           // 2777\n    argIsString = true;                                                                                                // 2778\n  }                                                                                                                    // 2779\n  if (!(this instanceof JQLite)) {                                                                                     // 2780\n    if (argIsString && element.charAt(0) != '<') {                                                                     // 2781\n      throw jqLiteMinErr('nosel', 'Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element');\n    }                                                                                                                  // 2783\n    return new JQLite(element);                                                                                        // 2784\n  }                                                                                                                    // 2785\n                                                                                                                       // 2786\n  if (argIsString) {                                                                                                   // 2787\n    jqLiteAddNodes(this, jqLiteParseHTML(element));                                                                    // 2788\n  } else {                                                                                                             // 2789\n    jqLiteAddNodes(this, element);                                                                                     // 2790\n  }                                                                                                                    // 2791\n}                                                                                                                      // 2792\n                                                                                                                       // 2793\nfunction jqLiteClone(element) {                                                                                        // 2794\n  return element.cloneNode(true);                                                                                      // 2795\n}                                                                                                                      // 2796\n                                                                                                                       // 2797\nfunction jqLiteDealoc(element, onlyDescendants) {                                                                      // 2798\n  if (!onlyDescendants) jqLiteRemoveData(element);                                                                     // 2799\n                                                                                                                       // 2800\n  if (element.querySelectorAll) {                                                                                      // 2801\n    var descendants = element.querySelectorAll('*');                                                                   // 2802\n    for (var i = 0, l = descendants.length; i < l; i++) {                                                              // 2803\n      jqLiteRemoveData(descendants[i]);                                                                                // 2804\n    }                                                                                                                  // 2805\n  }                                                                                                                    // 2806\n}                                                                                                                      // 2807\n                                                                                                                       // 2808\nfunction jqLiteOff(element, type, fn, unsupported) {                                                                   // 2809\n  if (isDefined(unsupported)) throw jqLiteMinErr('offargs', 'jqLite#off() does not support the `selector` argument');  // 2810\n                                                                                                                       // 2811\n  var expandoStore = jqLiteExpandoStore(element);                                                                      // 2812\n  var events = expandoStore && expandoStore.events;                                                                    // 2813\n  var handle = expandoStore && expandoStore.handle;                                                                    // 2814\n                                                                                                                       // 2815\n  if (!handle) return; //no listeners registered                                                                       // 2816\n                                                                                                                       // 2817\n  if (!type) {                                                                                                         // 2818\n    for (type in events) {                                                                                             // 2819\n      if (type !== '$destroy') {                                                                                       // 2820\n        removeEventListenerFn(element, type, handle);                                                                  // 2821\n      }                                                                                                                // 2822\n      delete events[type];                                                                                             // 2823\n    }                                                                                                                  // 2824\n  } else {                                                                                                             // 2825\n    forEach(type.split(' '), function(type) {                                                                          // 2826\n      if (isDefined(fn)) {                                                                                             // 2827\n        var listenerFns = events[type];                                                                                // 2828\n        arrayRemove(listenerFns || [], fn);                                                                            // 2829\n        if (listenerFns && listenerFns.length > 0) {                                                                   // 2830\n          return;                                                                                                      // 2831\n        }                                                                                                              // 2832\n      }                                                                                                                // 2833\n                                                                                                                       // 2834\n      removeEventListenerFn(element, type, handle);                                                                    // 2835\n      delete events[type];                                                                                             // 2836\n    });                                                                                                                // 2837\n  }                                                                                                                    // 2838\n}                                                                                                                      // 2839\n                                                                                                                       // 2840\nfunction jqLiteRemoveData(element, name) {                                                                             // 2841\n  var expandoId = element.ng339;                                                                                       // 2842\n  var expandoStore = expandoId && jqCache[expandoId];                                                                  // 2843\n                                                                                                                       // 2844\n  if (expandoStore) {                                                                                                  // 2845\n    if (name) {                                                                                                        // 2846\n      delete expandoStore.data[name];                                                                                  // 2847\n      return;                                                                                                          // 2848\n    }                                                                                                                  // 2849\n                                                                                                                       // 2850\n    if (expandoStore.handle) {                                                                                         // 2851\n      if (expandoStore.events.$destroy) {                                                                              // 2852\n        expandoStore.handle({}, '$destroy');                                                                           // 2853\n      }                                                                                                                // 2854\n      jqLiteOff(element);                                                                                              // 2855\n    }                                                                                                                  // 2856\n    delete jqCache[expandoId];                                                                                         // 2857\n    element.ng339 = undefined; // don't delete DOM expandos. IE and Chrome don't like it                               // 2858\n  }                                                                                                                    // 2859\n}                                                                                                                      // 2860\n                                                                                                                       // 2861\n                                                                                                                       // 2862\nfunction jqLiteExpandoStore(element, createIfNecessary) {                                                              // 2863\n  var expandoId = element.ng339,                                                                                       // 2864\n      expandoStore = expandoId && jqCache[expandoId];                                                                  // 2865\n                                                                                                                       // 2866\n  if (createIfNecessary && !expandoStore) {                                                                            // 2867\n    element.ng339 = expandoId = jqNextId();                                                                            // 2868\n    expandoStore = jqCache[expandoId] = {events: {}, data: {}, handle: undefined};                                     // 2869\n  }                                                                                                                    // 2870\n                                                                                                                       // 2871\n  return expandoStore;                                                                                                 // 2872\n}                                                                                                                      // 2873\n                                                                                                                       // 2874\n                                                                                                                       // 2875\nfunction jqLiteData(element, key, value) {                                                                             // 2876\n  if (jqLiteAcceptsData(element)) {                                                                                    // 2877\n                                                                                                                       // 2878\n    var isSimpleSetter = isDefined(value);                                                                             // 2879\n    var isSimpleGetter = !isSimpleSetter && key && !isObject(key);                                                     // 2880\n    var massGetter = !key;                                                                                             // 2881\n    var expandoStore = jqLiteExpandoStore(element, !isSimpleGetter);                                                   // 2882\n    var data = expandoStore && expandoStore.data;                                                                      // 2883\n                                                                                                                       // 2884\n    if (isSimpleSetter) { // data('key', value)                                                                        // 2885\n      data[key] = value;                                                                                               // 2886\n    } else {                                                                                                           // 2887\n      if (massGetter) {  // data()                                                                                     // 2888\n        return data;                                                                                                   // 2889\n      } else {                                                                                                         // 2890\n        if (isSimpleGetter) { // data('key')                                                                           // 2891\n          // don't force creation of expandoStore if it doesn't exist yet                                              // 2892\n          return data && data[key];                                                                                    // 2893\n        } else { // mass-setter: data({key1: val1, key2: val2})                                                        // 2894\n          extend(data, key);                                                                                           // 2895\n        }                                                                                                              // 2896\n      }                                                                                                                // 2897\n    }                                                                                                                  // 2898\n  }                                                                                                                    // 2899\n}                                                                                                                      // 2900\n                                                                                                                       // 2901\nfunction jqLiteHasClass(element, selector) {                                                                           // 2902\n  if (!element.getAttribute) return false;                                                                             // 2903\n  return ((\" \" + (element.getAttribute('class') || '') + \" \").replace(/[\\n\\t]/g, \" \").                                 // 2904\n      indexOf(\" \" + selector + \" \") > -1);                                                                             // 2905\n}                                                                                                                      // 2906\n                                                                                                                       // 2907\nfunction jqLiteRemoveClass(element, cssClasses) {                                                                      // 2908\n  if (cssClasses && element.setAttribute) {                                                                            // 2909\n    forEach(cssClasses.split(' '), function(cssClass) {                                                                // 2910\n      element.setAttribute('class', trim(                                                                              // 2911\n          (\" \" + (element.getAttribute('class') || '') + \" \")                                                          // 2912\n          .replace(/[\\n\\t]/g, \" \")                                                                                     // 2913\n          .replace(\" \" + trim(cssClass) + \" \", \" \"))                                                                   // 2914\n      );                                                                                                               // 2915\n    });                                                                                                                // 2916\n  }                                                                                                                    // 2917\n}                                                                                                                      // 2918\n                                                                                                                       // 2919\nfunction jqLiteAddClass(element, cssClasses) {                                                                         // 2920\n  if (cssClasses && element.setAttribute) {                                                                            // 2921\n    var existingClasses = (' ' + (element.getAttribute('class') || '') + ' ')                                          // 2922\n                            .replace(/[\\n\\t]/g, \" \");                                                                  // 2923\n                                                                                                                       // 2924\n    forEach(cssClasses.split(' '), function(cssClass) {                                                                // 2925\n      cssClass = trim(cssClass);                                                                                       // 2926\n      if (existingClasses.indexOf(' ' + cssClass + ' ') === -1) {                                                      // 2927\n        existingClasses += cssClass + ' ';                                                                             // 2928\n      }                                                                                                                // 2929\n    });                                                                                                                // 2930\n                                                                                                                       // 2931\n    element.setAttribute('class', trim(existingClasses));                                                              // 2932\n  }                                                                                                                    // 2933\n}                                                                                                                      // 2934\n                                                                                                                       // 2935\n                                                                                                                       // 2936\nfunction jqLiteAddNodes(root, elements) {                                                                              // 2937\n  // THIS CODE IS VERY HOT. Don't make changes without benchmarking.                                                   // 2938\n                                                                                                                       // 2939\n  if (elements) {                                                                                                      // 2940\n                                                                                                                       // 2941\n    // if a Node (the most common case)                                                                                // 2942\n    if (elements.nodeType) {                                                                                           // 2943\n      root[root.length++] = elements;                                                                                  // 2944\n    } else {                                                                                                           // 2945\n      var length = elements.length;                                                                                    // 2946\n                                                                                                                       // 2947\n      // if an Array or NodeList and not a Window                                                                      // 2948\n      if (typeof length === 'number' && elements.window !== elements) {                                                // 2949\n        if (length) {                                                                                                  // 2950\n          for (var i = 0; i < length; i++) {                                                                           // 2951\n            root[root.length++] = elements[i];                                                                         // 2952\n          }                                                                                                            // 2953\n        }                                                                                                              // 2954\n      } else {                                                                                                         // 2955\n        root[root.length++] = elements;                                                                                // 2956\n      }                                                                                                                // 2957\n    }                                                                                                                  // 2958\n  }                                                                                                                    // 2959\n}                                                                                                                      // 2960\n                                                                                                                       // 2961\n                                                                                                                       // 2962\nfunction jqLiteController(element, name) {                                                                             // 2963\n  return jqLiteInheritedData(element, '$' + (name || 'ngController') + 'Controller');                                  // 2964\n}                                                                                                                      // 2965\n                                                                                                                       // 2966\nfunction jqLiteInheritedData(element, name, value) {                                                                   // 2967\n  // if element is the document object work with the html element instead                                              // 2968\n  // this makes $(document).scope() possible                                                                           // 2969\n  if (element.nodeType == NODE_TYPE_DOCUMENT) {                                                                        // 2970\n    element = element.documentElement;                                                                                 // 2971\n  }                                                                                                                    // 2972\n  var names = isArray(name) ? name : [name];                                                                           // 2973\n                                                                                                                       // 2974\n  while (element) {                                                                                                    // 2975\n    for (var i = 0, ii = names.length; i < ii; i++) {                                                                  // 2976\n      if (isDefined(value = jqLite.data(element, names[i]))) return value;                                             // 2977\n    }                                                                                                                  // 2978\n                                                                                                                       // 2979\n    // If dealing with a document fragment node with a host element, and no parent, use the host                       // 2980\n    // element as the parent. This enables directives within a Shadow DOM or polyfilled Shadow DOM                     // 2981\n    // to lookup parent controllers.                                                                                   // 2982\n    element = element.parentNode || (element.nodeType === NODE_TYPE_DOCUMENT_FRAGMENT && element.host);                // 2983\n  }                                                                                                                    // 2984\n}                                                                                                                      // 2985\n                                                                                                                       // 2986\nfunction jqLiteEmpty(element) {                                                                                        // 2987\n  jqLiteDealoc(element, true);                                                                                         // 2988\n  while (element.firstChild) {                                                                                         // 2989\n    element.removeChild(element.firstChild);                                                                           // 2990\n  }                                                                                                                    // 2991\n}                                                                                                                      // 2992\n                                                                                                                       // 2993\nfunction jqLiteRemove(element, keepData) {                                                                             // 2994\n  if (!keepData) jqLiteDealoc(element);                                                                                // 2995\n  var parent = element.parentNode;                                                                                     // 2996\n  if (parent) parent.removeChild(element);                                                                             // 2997\n}                                                                                                                      // 2998\n                                                                                                                       // 2999\n                                                                                                                       // 3000\nfunction jqLiteDocumentLoaded(action, win) {                                                                           // 3001\n  win = win || window;                                                                                                 // 3002\n  if (win.document.readyState === 'complete') {                                                                        // 3003\n    // Force the action to be run async for consistent behaviour                                                       // 3004\n    // from the action's point of view                                                                                 // 3005\n    // i.e. it will definitely not be in a $apply                                                                      // 3006\n    win.setTimeout(action);                                                                                            // 3007\n  } else {                                                                                                             // 3008\n    // No need to unbind this handler as load is only ever called once                                                 // 3009\n    jqLite(win).on('load', action);                                                                                    // 3010\n  }                                                                                                                    // 3011\n}                                                                                                                      // 3012\n                                                                                                                       // 3013\n//////////////////////////////////////////                                                                             // 3014\n// Functions which are declared directly.                                                                              // 3015\n//////////////////////////////////////////                                                                             // 3016\nvar JQLitePrototype = JQLite.prototype = {                                                                             // 3017\n  ready: function(fn) {                                                                                                // 3018\n    var fired = false;                                                                                                 // 3019\n                                                                                                                       // 3020\n    function trigger() {                                                                                               // 3021\n      if (fired) return;                                                                                               // 3022\n      fired = true;                                                                                                    // 3023\n      fn();                                                                                                            // 3024\n    }                                                                                                                  // 3025\n                                                                                                                       // 3026\n    // check if document is already loaded                                                                             // 3027\n    if (document.readyState === 'complete') {                                                                          // 3028\n      setTimeout(trigger);                                                                                             // 3029\n    } else {                                                                                                           // 3030\n      this.on('DOMContentLoaded', trigger); // works for modern browsers and IE9                                       // 3031\n      // we can not use jqLite since we are not done loading and jQuery could be loaded later.                         // 3032\n      // jshint -W064                                                                                                  // 3033\n      JQLite(window).on('load', trigger); // fallback to window.onload for others                                      // 3034\n      // jshint +W064                                                                                                  // 3035\n    }                                                                                                                  // 3036\n  },                                                                                                                   // 3037\n  toString: function() {                                                                                               // 3038\n    var value = [];                                                                                                    // 3039\n    forEach(this, function(e) { value.push('' + e);});                                                                 // 3040\n    return '[' + value.join(', ') + ']';                                                                               // 3041\n  },                                                                                                                   // 3042\n                                                                                                                       // 3043\n  eq: function(index) {                                                                                                // 3044\n      return (index >= 0) ? jqLite(this[index]) : jqLite(this[this.length + index]);                                   // 3045\n  },                                                                                                                   // 3046\n                                                                                                                       // 3047\n  length: 0,                                                                                                           // 3048\n  push: push,                                                                                                          // 3049\n  sort: [].sort,                                                                                                       // 3050\n  splice: [].splice                                                                                                    // 3051\n};                                                                                                                     // 3052\n                                                                                                                       // 3053\n//////////////////////////////////////////                                                                             // 3054\n// Functions iterating getter/setters.                                                                                 // 3055\n// these functions return self on setter and                                                                           // 3056\n// value on get.                                                                                                       // 3057\n//////////////////////////////////////////                                                                             // 3058\nvar BOOLEAN_ATTR = {};                                                                                                 // 3059\nforEach('multiple,selected,checked,disabled,readOnly,required,open'.split(','), function(value) {                      // 3060\n  BOOLEAN_ATTR[lowercase(value)] = value;                                                                              // 3061\n});                                                                                                                    // 3062\nvar BOOLEAN_ELEMENTS = {};                                                                                             // 3063\nforEach('input,select,option,textarea,button,form,details'.split(','), function(value) {                               // 3064\n  BOOLEAN_ELEMENTS[value] = true;                                                                                      // 3065\n});                                                                                                                    // 3066\nvar ALIASED_ATTR = {                                                                                                   // 3067\n  'ngMinlength': 'minlength',                                                                                          // 3068\n  'ngMaxlength': 'maxlength',                                                                                          // 3069\n  'ngMin': 'min',                                                                                                      // 3070\n  'ngMax': 'max',                                                                                                      // 3071\n  'ngPattern': 'pattern'                                                                                               // 3072\n};                                                                                                                     // 3073\n                                                                                                                       // 3074\nfunction getBooleanAttrName(element, name) {                                                                           // 3075\n  // check dom last since we will most likely fail on name                                                             // 3076\n  var booleanAttr = BOOLEAN_ATTR[name.toLowerCase()];                                                                  // 3077\n                                                                                                                       // 3078\n  // booleanAttr is here twice to minimize DOM access                                                                  // 3079\n  return booleanAttr && BOOLEAN_ELEMENTS[nodeName_(element)] && booleanAttr;                                           // 3080\n}                                                                                                                      // 3081\n                                                                                                                       // 3082\nfunction getAliasedAttrName(name) {                                                                                    // 3083\n  return ALIASED_ATTR[name];                                                                                           // 3084\n}                                                                                                                      // 3085\n                                                                                                                       // 3086\nforEach({                                                                                                              // 3087\n  data: jqLiteData,                                                                                                    // 3088\n  removeData: jqLiteRemoveData,                                                                                        // 3089\n  hasData: jqLiteHasData                                                                                               // 3090\n}, function(fn, name) {                                                                                                // 3091\n  JQLite[name] = fn;                                                                                                   // 3092\n});                                                                                                                    // 3093\n                                                                                                                       // 3094\nforEach({                                                                                                              // 3095\n  data: jqLiteData,                                                                                                    // 3096\n  inheritedData: jqLiteInheritedData,                                                                                  // 3097\n                                                                                                                       // 3098\n  scope: function(element) {                                                                                           // 3099\n    // Can't use jqLiteData here directly so we stay compatible with jQuery!                                           // 3100\n    return jqLite.data(element, '$scope') || jqLiteInheritedData(element.parentNode || element, ['$isolateScope', '$scope']);\n  },                                                                                                                   // 3102\n                                                                                                                       // 3103\n  isolateScope: function(element) {                                                                                    // 3104\n    // Can't use jqLiteData here directly so we stay compatible with jQuery!                                           // 3105\n    return jqLite.data(element, '$isolateScope') || jqLite.data(element, '$isolateScopeNoTemplate');                   // 3106\n  },                                                                                                                   // 3107\n                                                                                                                       // 3108\n  controller: jqLiteController,                                                                                        // 3109\n                                                                                                                       // 3110\n  injector: function(element) {                                                                                        // 3111\n    return jqLiteInheritedData(element, '$injector');                                                                  // 3112\n  },                                                                                                                   // 3113\n                                                                                                                       // 3114\n  removeAttr: function(element, name) {                                                                                // 3115\n    element.removeAttribute(name);                                                                                     // 3116\n  },                                                                                                                   // 3117\n                                                                                                                       // 3118\n  hasClass: jqLiteHasClass,                                                                                            // 3119\n                                                                                                                       // 3120\n  css: function(element, name, value) {                                                                                // 3121\n    name = camelCase(name);                                                                                            // 3122\n                                                                                                                       // 3123\n    if (isDefined(value)) {                                                                                            // 3124\n      element.style[name] = value;                                                                                     // 3125\n    } else {                                                                                                           // 3126\n      return element.style[name];                                                                                      // 3127\n    }                                                                                                                  // 3128\n  },                                                                                                                   // 3129\n                                                                                                                       // 3130\n  attr: function(element, name, value) {                                                                               // 3131\n    var nodeType = element.nodeType;                                                                                   // 3132\n    if (nodeType === NODE_TYPE_TEXT || nodeType === NODE_TYPE_ATTRIBUTE || nodeType === NODE_TYPE_COMMENT) {           // 3133\n      return;                                                                                                          // 3134\n    }                                                                                                                  // 3135\n    var lowercasedName = lowercase(name);                                                                              // 3136\n    if (BOOLEAN_ATTR[lowercasedName]) {                                                                                // 3137\n      if (isDefined(value)) {                                                                                          // 3138\n        if (!!value) {                                                                                                 // 3139\n          element[name] = true;                                                                                        // 3140\n          element.setAttribute(name, lowercasedName);                                                                  // 3141\n        } else {                                                                                                       // 3142\n          element[name] = false;                                                                                       // 3143\n          element.removeAttribute(lowercasedName);                                                                     // 3144\n        }                                                                                                              // 3145\n      } else {                                                                                                         // 3146\n        return (element[name] ||                                                                                       // 3147\n                 (element.attributes.getNamedItem(name) || noop).specified)                                            // 3148\n               ? lowercasedName                                                                                        // 3149\n               : undefined;                                                                                            // 3150\n      }                                                                                                                // 3151\n    } else if (isDefined(value)) {                                                                                     // 3152\n      element.setAttribute(name, value);                                                                               // 3153\n    } else if (element.getAttribute) {                                                                                 // 3154\n      // the extra argument \"2\" is to get the right thing for a.href in IE, see jQuery code                            // 3155\n      // some elements (e.g. Document) don't have get attribute, so return undefined                                   // 3156\n      var ret = element.getAttribute(name, 2);                                                                         // 3157\n      // normalize non-existing attributes to undefined (as jQuery)                                                    // 3158\n      return ret === null ? undefined : ret;                                                                           // 3159\n    }                                                                                                                  // 3160\n  },                                                                                                                   // 3161\n                                                                                                                       // 3162\n  prop: function(element, name, value) {                                                                               // 3163\n    if (isDefined(value)) {                                                                                            // 3164\n      element[name] = value;                                                                                           // 3165\n    } else {                                                                                                           // 3166\n      return element[name];                                                                                            // 3167\n    }                                                                                                                  // 3168\n  },                                                                                                                   // 3169\n                                                                                                                       // 3170\n  text: (function() {                                                                                                  // 3171\n    getText.$dv = '';                                                                                                  // 3172\n    return getText;                                                                                                    // 3173\n                                                                                                                       // 3174\n    function getText(element, value) {                                                                                 // 3175\n      if (isUndefined(value)) {                                                                                        // 3176\n        var nodeType = element.nodeType;                                                                               // 3177\n        return (nodeType === NODE_TYPE_ELEMENT || nodeType === NODE_TYPE_TEXT) ? element.textContent : '';             // 3178\n      }                                                                                                                // 3179\n      element.textContent = value;                                                                                     // 3180\n    }                                                                                                                  // 3181\n  })(),                                                                                                                // 3182\n                                                                                                                       // 3183\n  val: function(element, value) {                                                                                      // 3184\n    if (isUndefined(value)) {                                                                                          // 3185\n      if (element.multiple && nodeName_(element) === 'select') {                                                       // 3186\n        var result = [];                                                                                               // 3187\n        forEach(element.options, function(option) {                                                                    // 3188\n          if (option.selected) {                                                                                       // 3189\n            result.push(option.value || option.text);                                                                  // 3190\n          }                                                                                                            // 3191\n        });                                                                                                            // 3192\n        return result.length === 0 ? null : result;                                                                    // 3193\n      }                                                                                                                // 3194\n      return element.value;                                                                                            // 3195\n    }                                                                                                                  // 3196\n    element.value = value;                                                                                             // 3197\n  },                                                                                                                   // 3198\n                                                                                                                       // 3199\n  html: function(element, value) {                                                                                     // 3200\n    if (isUndefined(value)) {                                                                                          // 3201\n      return element.innerHTML;                                                                                        // 3202\n    }                                                                                                                  // 3203\n    jqLiteDealoc(element, true);                                                                                       // 3204\n    element.innerHTML = value;                                                                                         // 3205\n  },                                                                                                                   // 3206\n                                                                                                                       // 3207\n  empty: jqLiteEmpty                                                                                                   // 3208\n}, function(fn, name) {                                                                                                // 3209\n  /**                                                                                                                  // 3210\n   * Properties: writes return selection, reads return first value                                                     // 3211\n   */                                                                                                                  // 3212\n  JQLite.prototype[name] = function(arg1, arg2) {                                                                      // 3213\n    var i, key;                                                                                                        // 3214\n    var nodeCount = this.length;                                                                                       // 3215\n                                                                                                                       // 3216\n    // jqLiteHasClass has only two arguments, but is a getter-only fn, so we need to special-case it                   // 3217\n    // in a way that survives minification.                                                                            // 3218\n    // jqLiteEmpty takes no arguments but is a setter.                                                                 // 3219\n    if (fn !== jqLiteEmpty &&                                                                                          // 3220\n        (isUndefined((fn.length == 2 && (fn !== jqLiteHasClass && fn !== jqLiteController)) ? arg1 : arg2))) {         // 3221\n      if (isObject(arg1)) {                                                                                            // 3222\n                                                                                                                       // 3223\n        // we are a write, but the object properties are the key/values                                                // 3224\n        for (i = 0; i < nodeCount; i++) {                                                                              // 3225\n          if (fn === jqLiteData) {                                                                                     // 3226\n            // data() takes the whole object in jQuery                                                                 // 3227\n            fn(this[i], arg1);                                                                                         // 3228\n          } else {                                                                                                     // 3229\n            for (key in arg1) {                                                                                        // 3230\n              fn(this[i], key, arg1[key]);                                                                             // 3231\n            }                                                                                                          // 3232\n          }                                                                                                            // 3233\n        }                                                                                                              // 3234\n        // return self for chaining                                                                                    // 3235\n        return this;                                                                                                   // 3236\n      } else {                                                                                                         // 3237\n        // we are a read, so read the first child.                                                                     // 3238\n        // TODO: do we still need this?                                                                                // 3239\n        var value = fn.$dv;                                                                                            // 3240\n        // Only if we have $dv do we iterate over all, otherwise it is just the first element.                         // 3241\n        var jj = (isUndefined(value)) ? Math.min(nodeCount, 1) : nodeCount;                                            // 3242\n        for (var j = 0; j < jj; j++) {                                                                                 // 3243\n          var nodeValue = fn(this[j], arg1, arg2);                                                                     // 3244\n          value = value ? value + nodeValue : nodeValue;                                                               // 3245\n        }                                                                                                              // 3246\n        return value;                                                                                                  // 3247\n      }                                                                                                                // 3248\n    } else {                                                                                                           // 3249\n      // we are a write, so apply to all children                                                                      // 3250\n      for (i = 0; i < nodeCount; i++) {                                                                                // 3251\n        fn(this[i], arg1, arg2);                                                                                       // 3252\n      }                                                                                                                // 3253\n      // return self for chaining                                                                                      // 3254\n      return this;                                                                                                     // 3255\n    }                                                                                                                  // 3256\n  };                                                                                                                   // 3257\n});                                                                                                                    // 3258\n                                                                                                                       // 3259\nfunction createEventHandler(element, events) {                                                                         // 3260\n  var eventHandler = function(event, type) {                                                                           // 3261\n    // jQuery specific api                                                                                             // 3262\n    event.isDefaultPrevented = function() {                                                                            // 3263\n      return event.defaultPrevented;                                                                                   // 3264\n    };                                                                                                                 // 3265\n                                                                                                                       // 3266\n    var eventFns = events[type || event.type];                                                                         // 3267\n    var eventFnsLength = eventFns ? eventFns.length : 0;                                                               // 3268\n                                                                                                                       // 3269\n    if (!eventFnsLength) return;                                                                                       // 3270\n                                                                                                                       // 3271\n    if (isUndefined(event.immediatePropagationStopped)) {                                                              // 3272\n      var originalStopImmediatePropagation = event.stopImmediatePropagation;                                           // 3273\n      event.stopImmediatePropagation = function() {                                                                    // 3274\n        event.immediatePropagationStopped = true;                                                                      // 3275\n                                                                                                                       // 3276\n        if (event.stopPropagation) {                                                                                   // 3277\n          event.stopPropagation();                                                                                     // 3278\n        }                                                                                                              // 3279\n                                                                                                                       // 3280\n        if (originalStopImmediatePropagation) {                                                                        // 3281\n          originalStopImmediatePropagation.call(event);                                                                // 3282\n        }                                                                                                              // 3283\n      };                                                                                                               // 3284\n    }                                                                                                                  // 3285\n                                                                                                                       // 3286\n    event.isImmediatePropagationStopped = function() {                                                                 // 3287\n      return event.immediatePropagationStopped === true;                                                               // 3288\n    };                                                                                                                 // 3289\n                                                                                                                       // 3290\n    // Copy event handlers in case event handlers array is modified during execution.                                  // 3291\n    if ((eventFnsLength > 1)) {                                                                                        // 3292\n      eventFns = shallowCopy(eventFns);                                                                                // 3293\n    }                                                                                                                  // 3294\n                                                                                                                       // 3295\n    for (var i = 0; i < eventFnsLength; i++) {                                                                         // 3296\n      if (!event.isImmediatePropagationStopped()) {                                                                    // 3297\n        eventFns[i].call(element, event);                                                                              // 3298\n      }                                                                                                                // 3299\n    }                                                                                                                  // 3300\n  };                                                                                                                   // 3301\n                                                                                                                       // 3302\n  // TODO: this is a hack for angularMocks/clearDataCache that makes it possible to deregister all                     // 3303\n  //       events on `element`                                                                                         // 3304\n  eventHandler.elem = element;                                                                                         // 3305\n  return eventHandler;                                                                                                 // 3306\n}                                                                                                                      // 3307\n                                                                                                                       // 3308\n//////////////////////////////////////////                                                                             // 3309\n// Functions iterating traversal.                                                                                      // 3310\n// These functions chain results into a single                                                                         // 3311\n// selector.                                                                                                           // 3312\n//////////////////////////////////////////                                                                             // 3313\nforEach({                                                                                                              // 3314\n  removeData: jqLiteRemoveData,                                                                                        // 3315\n                                                                                                                       // 3316\n  on: function jqLiteOn(element, type, fn, unsupported) {                                                              // 3317\n    if (isDefined(unsupported)) throw jqLiteMinErr('onargs', 'jqLite#on() does not support the `selector` or `eventData` parameters');\n                                                                                                                       // 3319\n    // Do not add event handlers to non-elements because they will not be cleaned up.                                  // 3320\n    if (!jqLiteAcceptsData(element)) {                                                                                 // 3321\n      return;                                                                                                          // 3322\n    }                                                                                                                  // 3323\n                                                                                                                       // 3324\n    var expandoStore = jqLiteExpandoStore(element, true);                                                              // 3325\n    var events = expandoStore.events;                                                                                  // 3326\n    var handle = expandoStore.handle;                                                                                  // 3327\n                                                                                                                       // 3328\n    if (!handle) {                                                                                                     // 3329\n      handle = expandoStore.handle = createEventHandler(element, events);                                              // 3330\n    }                                                                                                                  // 3331\n                                                                                                                       // 3332\n    // http://jsperf.com/string-indexof-vs-split                                                                       // 3333\n    var types = type.indexOf(' ') >= 0 ? type.split(' ') : [type];                                                     // 3334\n    var i = types.length;                                                                                              // 3335\n                                                                                                                       // 3336\n    while (i--) {                                                                                                      // 3337\n      type = types[i];                                                                                                 // 3338\n      var eventFns = events[type];                                                                                     // 3339\n                                                                                                                       // 3340\n      if (!eventFns) {                                                                                                 // 3341\n        events[type] = [];                                                                                             // 3342\n                                                                                                                       // 3343\n        if (type === 'mouseenter' || type === 'mouseleave') {                                                          // 3344\n          // Refer to jQuery's implementation of mouseenter & mouseleave                                               // 3345\n          // Read about mouseenter and mouseleave:                                                                     // 3346\n          // http://www.quirksmode.org/js/events_mouse.html#link8                                                      // 3347\n                                                                                                                       // 3348\n          jqLiteOn(element, MOUSE_EVENT_MAP[type], function(event) {                                                   // 3349\n            var target = this, related = event.relatedTarget;                                                          // 3350\n            // For mousenter/leave call the handler if related is outside the target.                                  // 3351\n            // NB: No relatedTarget if the mouse left/entered the browser window                                       // 3352\n            if (!related || (related !== target && !target.contains(related))) {                                       // 3353\n              handle(event, type);                                                                                     // 3354\n            }                                                                                                          // 3355\n          });                                                                                                          // 3356\n                                                                                                                       // 3357\n        } else {                                                                                                       // 3358\n          if (type !== '$destroy') {                                                                                   // 3359\n            addEventListenerFn(element, type, handle);                                                                 // 3360\n          }                                                                                                            // 3361\n        }                                                                                                              // 3362\n        eventFns = events[type];                                                                                       // 3363\n      }                                                                                                                // 3364\n      eventFns.push(fn);                                                                                               // 3365\n    }                                                                                                                  // 3366\n  },                                                                                                                   // 3367\n                                                                                                                       // 3368\n  off: jqLiteOff,                                                                                                      // 3369\n                                                                                                                       // 3370\n  one: function(element, type, fn) {                                                                                   // 3371\n    element = jqLite(element);                                                                                         // 3372\n                                                                                                                       // 3373\n    //add the listener twice so that when it is called                                                                 // 3374\n    //you can remove the original function and still be                                                                // 3375\n    //able to call element.off(ev, fn) normally                                                                        // 3376\n    element.on(type, function onFn() {                                                                                 // 3377\n      element.off(type, fn);                                                                                           // 3378\n      element.off(type, onFn);                                                                                         // 3379\n    });                                                                                                                // 3380\n    element.on(type, fn);                                                                                              // 3381\n  },                                                                                                                   // 3382\n                                                                                                                       // 3383\n  replaceWith: function(element, replaceNode) {                                                                        // 3384\n    var index, parent = element.parentNode;                                                                            // 3385\n    jqLiteDealoc(element);                                                                                             // 3386\n    forEach(new JQLite(replaceNode), function(node) {                                                                  // 3387\n      if (index) {                                                                                                     // 3388\n        parent.insertBefore(node, index.nextSibling);                                                                  // 3389\n      } else {                                                                                                         // 3390\n        parent.replaceChild(node, element);                                                                            // 3391\n      }                                                                                                                // 3392\n      index = node;                                                                                                    // 3393\n    });                                                                                                                // 3394\n  },                                                                                                                   // 3395\n                                                                                                                       // 3396\n  children: function(element) {                                                                                        // 3397\n    var children = [];                                                                                                 // 3398\n    forEach(element.childNodes, function(element) {                                                                    // 3399\n      if (element.nodeType === NODE_TYPE_ELEMENT) {                                                                    // 3400\n        children.push(element);                                                                                        // 3401\n      }                                                                                                                // 3402\n    });                                                                                                                // 3403\n    return children;                                                                                                   // 3404\n  },                                                                                                                   // 3405\n                                                                                                                       // 3406\n  contents: function(element) {                                                                                        // 3407\n    return element.contentDocument || element.childNodes || [];                                                        // 3408\n  },                                                                                                                   // 3409\n                                                                                                                       // 3410\n  append: function(element, node) {                                                                                    // 3411\n    var nodeType = element.nodeType;                                                                                   // 3412\n    if (nodeType !== NODE_TYPE_ELEMENT && nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT) return;                            // 3413\n                                                                                                                       // 3414\n    node = new JQLite(node);                                                                                           // 3415\n                                                                                                                       // 3416\n    for (var i = 0, ii = node.length; i < ii; i++) {                                                                   // 3417\n      var child = node[i];                                                                                             // 3418\n      element.appendChild(child);                                                                                      // 3419\n    }                                                                                                                  // 3420\n  },                                                                                                                   // 3421\n                                                                                                                       // 3422\n  prepend: function(element, node) {                                                                                   // 3423\n    if (element.nodeType === NODE_TYPE_ELEMENT) {                                                                      // 3424\n      var index = element.firstChild;                                                                                  // 3425\n      forEach(new JQLite(node), function(child) {                                                                      // 3426\n        element.insertBefore(child, index);                                                                            // 3427\n      });                                                                                                              // 3428\n    }                                                                                                                  // 3429\n  },                                                                                                                   // 3430\n                                                                                                                       // 3431\n  wrap: function(element, wrapNode) {                                                                                  // 3432\n    wrapNode = jqLite(wrapNode).eq(0).clone()[0];                                                                      // 3433\n    var parent = element.parentNode;                                                                                   // 3434\n    if (parent) {                                                                                                      // 3435\n      parent.replaceChild(wrapNode, element);                                                                          // 3436\n    }                                                                                                                  // 3437\n    wrapNode.appendChild(element);                                                                                     // 3438\n  },                                                                                                                   // 3439\n                                                                                                                       // 3440\n  remove: jqLiteRemove,                                                                                                // 3441\n                                                                                                                       // 3442\n  detach: function(element) {                                                                                          // 3443\n    jqLiteRemove(element, true);                                                                                       // 3444\n  },                                                                                                                   // 3445\n                                                                                                                       // 3446\n  after: function(element, newElement) {                                                                               // 3447\n    var index = element, parent = element.parentNode;                                                                  // 3448\n    newElement = new JQLite(newElement);                                                                               // 3449\n                                                                                                                       // 3450\n    for (var i = 0, ii = newElement.length; i < ii; i++) {                                                             // 3451\n      var node = newElement[i];                                                                                        // 3452\n      parent.insertBefore(node, index.nextSibling);                                                                    // 3453\n      index = node;                                                                                                    // 3454\n    }                                                                                                                  // 3455\n  },                                                                                                                   // 3456\n                                                                                                                       // 3457\n  addClass: jqLiteAddClass,                                                                                            // 3458\n  removeClass: jqLiteRemoveClass,                                                                                      // 3459\n                                                                                                                       // 3460\n  toggleClass: function(element, selector, condition) {                                                                // 3461\n    if (selector) {                                                                                                    // 3462\n      forEach(selector.split(' '), function(className) {                                                               // 3463\n        var classCondition = condition;                                                                                // 3464\n        if (isUndefined(classCondition)) {                                                                             // 3465\n          classCondition = !jqLiteHasClass(element, className);                                                        // 3466\n        }                                                                                                              // 3467\n        (classCondition ? jqLiteAddClass : jqLiteRemoveClass)(element, className);                                     // 3468\n      });                                                                                                              // 3469\n    }                                                                                                                  // 3470\n  },                                                                                                                   // 3471\n                                                                                                                       // 3472\n  parent: function(element) {                                                                                          // 3473\n    var parent = element.parentNode;                                                                                   // 3474\n    return parent && parent.nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT ? parent : null;                                  // 3475\n  },                                                                                                                   // 3476\n                                                                                                                       // 3477\n  next: function(element) {                                                                                            // 3478\n    return element.nextElementSibling;                                                                                 // 3479\n  },                                                                                                                   // 3480\n                                                                                                                       // 3481\n  find: function(element, selector) {                                                                                  // 3482\n    if (element.getElementsByTagName) {                                                                                // 3483\n      return element.getElementsByTagName(selector);                                                                   // 3484\n    } else {                                                                                                           // 3485\n      return [];                                                                                                       // 3486\n    }                                                                                                                  // 3487\n  },                                                                                                                   // 3488\n                                                                                                                       // 3489\n  clone: jqLiteClone,                                                                                                  // 3490\n                                                                                                                       // 3491\n  triggerHandler: function(element, event, extraParameters) {                                                          // 3492\n                                                                                                                       // 3493\n    var dummyEvent, eventFnsCopy, handlerArgs;                                                                         // 3494\n    var eventName = event.type || event;                                                                               // 3495\n    var expandoStore = jqLiteExpandoStore(element);                                                                    // 3496\n    var events = expandoStore && expandoStore.events;                                                                  // 3497\n    var eventFns = events && events[eventName];                                                                        // 3498\n                                                                                                                       // 3499\n    if (eventFns) {                                                                                                    // 3500\n      // Create a dummy event to pass to the handlers                                                                  // 3501\n      dummyEvent = {                                                                                                   // 3502\n        preventDefault: function() { this.defaultPrevented = true; },                                                  // 3503\n        isDefaultPrevented: function() { return this.defaultPrevented === true; },                                     // 3504\n        stopImmediatePropagation: function() { this.immediatePropagationStopped = true; },                             // 3505\n        isImmediatePropagationStopped: function() { return this.immediatePropagationStopped === true; },               // 3506\n        stopPropagation: noop,                                                                                         // 3507\n        type: eventName,                                                                                               // 3508\n        target: element                                                                                                // 3509\n      };                                                                                                               // 3510\n                                                                                                                       // 3511\n      // If a custom event was provided then extend our dummy event with it                                            // 3512\n      if (event.type) {                                                                                                // 3513\n        dummyEvent = extend(dummyEvent, event);                                                                        // 3514\n      }                                                                                                                // 3515\n                                                                                                                       // 3516\n      // Copy event handlers in case event handlers array is modified during execution.                                // 3517\n      eventFnsCopy = shallowCopy(eventFns);                                                                            // 3518\n      handlerArgs = extraParameters ? [dummyEvent].concat(extraParameters) : [dummyEvent];                             // 3519\n                                                                                                                       // 3520\n      forEach(eventFnsCopy, function(fn) {                                                                             // 3521\n        if (!dummyEvent.isImmediatePropagationStopped()) {                                                             // 3522\n          fn.apply(element, handlerArgs);                                                                              // 3523\n        }                                                                                                              // 3524\n      });                                                                                                              // 3525\n    }                                                                                                                  // 3526\n  }                                                                                                                    // 3527\n}, function(fn, name) {                                                                                                // 3528\n  /**                                                                                                                  // 3529\n   * chaining functions                                                                                                // 3530\n   */                                                                                                                  // 3531\n  JQLite.prototype[name] = function(arg1, arg2, arg3) {                                                                // 3532\n    var value;                                                                                                         // 3533\n                                                                                                                       // 3534\n    for (var i = 0, ii = this.length; i < ii; i++) {                                                                   // 3535\n      if (isUndefined(value)) {                                                                                        // 3536\n        value = fn(this[i], arg1, arg2, arg3);                                                                         // 3537\n        if (isDefined(value)) {                                                                                        // 3538\n          // any function which returns a value needs to be wrapped                                                    // 3539\n          value = jqLite(value);                                                                                       // 3540\n        }                                                                                                              // 3541\n      } else {                                                                                                         // 3542\n        jqLiteAddNodes(value, fn(this[i], arg1, arg2, arg3));                                                          // 3543\n      }                                                                                                                // 3544\n    }                                                                                                                  // 3545\n    return isDefined(value) ? value : this;                                                                            // 3546\n  };                                                                                                                   // 3547\n                                                                                                                       // 3548\n  // bind legacy bind/unbind to on/off                                                                                 // 3549\n  JQLite.prototype.bind = JQLite.prototype.on;                                                                         // 3550\n  JQLite.prototype.unbind = JQLite.prototype.off;                                                                      // 3551\n});                                                                                                                    // 3552\n                                                                                                                       // 3553\n                                                                                                                       // 3554\n// Provider for private $$jqLite service                                                                               // 3555\nfunction $$jqLiteProvider() {                                                                                          // 3556\n  this.$get = function $$jqLite() {                                                                                    // 3557\n    return extend(JQLite, {                                                                                            // 3558\n      hasClass: function(node, classes) {                                                                              // 3559\n        if (node.attr) node = node[0];                                                                                 // 3560\n        return jqLiteHasClass(node, classes);                                                                          // 3561\n      },                                                                                                               // 3562\n      addClass: function(node, classes) {                                                                              // 3563\n        if (node.attr) node = node[0];                                                                                 // 3564\n        return jqLiteAddClass(node, classes);                                                                          // 3565\n      },                                                                                                               // 3566\n      removeClass: function(node, classes) {                                                                           // 3567\n        if (node.attr) node = node[0];                                                                                 // 3568\n        return jqLiteRemoveClass(node, classes);                                                                       // 3569\n      }                                                                                                                // 3570\n    });                                                                                                                // 3571\n  };                                                                                                                   // 3572\n}                                                                                                                      // 3573\n                                                                                                                       // 3574\n/**                                                                                                                    // 3575\n * Computes a hash of an 'obj'.                                                                                        // 3576\n * Hash of a:                                                                                                          // 3577\n *  string is string                                                                                                   // 3578\n *  number is number as string                                                                                         // 3579\n *  object is either result of calling $$hashKey function on the object or uniquely generated id,                      // 3580\n *         that is also assigned to the $$hashKey property of the object.                                              // 3581\n *                                                                                                                     // 3582\n * @param obj                                                                                                          // 3583\n * @returns {string} hash string such that the same input will have the same hash string.                              // 3584\n *         The resulting string key is in 'type:hashKey' format.                                                       // 3585\n */                                                                                                                    // 3586\nfunction hashKey(obj, nextUidFn) {                                                                                     // 3587\n  var key = obj && obj.$$hashKey;                                                                                      // 3588\n                                                                                                                       // 3589\n  if (key) {                                                                                                           // 3590\n    if (typeof key === 'function') {                                                                                   // 3591\n      key = obj.$$hashKey();                                                                                           // 3592\n    }                                                                                                                  // 3593\n    return key;                                                                                                        // 3594\n  }                                                                                                                    // 3595\n                                                                                                                       // 3596\n  var objType = typeof obj;                                                                                            // 3597\n  if (objType == 'function' || (objType == 'object' && obj !== null)) {                                                // 3598\n    key = obj.$$hashKey = objType + ':' + (nextUidFn || nextUid)();                                                    // 3599\n  } else {                                                                                                             // 3600\n    key = objType + ':' + obj;                                                                                         // 3601\n  }                                                                                                                    // 3602\n                                                                                                                       // 3603\n  return key;                                                                                                          // 3604\n}                                                                                                                      // 3605\n                                                                                                                       // 3606\n/**                                                                                                                    // 3607\n * HashMap which can use objects as keys                                                                               // 3608\n */                                                                                                                    // 3609\nfunction HashMap(array, isolatedUid) {                                                                                 // 3610\n  if (isolatedUid) {                                                                                                   // 3611\n    var uid = 0;                                                                                                       // 3612\n    this.nextUid = function() {                                                                                        // 3613\n      return ++uid;                                                                                                    // 3614\n    };                                                                                                                 // 3615\n  }                                                                                                                    // 3616\n  forEach(array, this.put, this);                                                                                      // 3617\n}                                                                                                                      // 3618\nHashMap.prototype = {                                                                                                  // 3619\n  /**                                                                                                                  // 3620\n   * Store key value pair                                                                                              // 3621\n   * @param key key to store can be any type                                                                           // 3622\n   * @param value value to store can be any type                                                                       // 3623\n   */                                                                                                                  // 3624\n  put: function(key, value) {                                                                                          // 3625\n    this[hashKey(key, this.nextUid)] = value;                                                                          // 3626\n  },                                                                                                                   // 3627\n                                                                                                                       // 3628\n  /**                                                                                                                  // 3629\n   * @param key                                                                                                        // 3630\n   * @returns {Object} the value for the key                                                                           // 3631\n   */                                                                                                                  // 3632\n  get: function(key) {                                                                                                 // 3633\n    return this[hashKey(key, this.nextUid)];                                                                           // 3634\n  },                                                                                                                   // 3635\n                                                                                                                       // 3636\n  /**                                                                                                                  // 3637\n   * Remove the key/value pair                                                                                         // 3638\n   * @param key                                                                                                        // 3639\n   */                                                                                                                  // 3640\n  remove: function(key) {                                                                                              // 3641\n    var value = this[key = hashKey(key, this.nextUid)];                                                                // 3642\n    delete this[key];                                                                                                  // 3643\n    return value;                                                                                                      // 3644\n  }                                                                                                                    // 3645\n};                                                                                                                     // 3646\n                                                                                                                       // 3647\nvar $$HashMapProvider = [function() {                                                                                  // 3648\n  this.$get = [function() {                                                                                            // 3649\n    return HashMap;                                                                                                    // 3650\n  }];                                                                                                                  // 3651\n}];                                                                                                                    // 3652\n                                                                                                                       // 3653\n/**                                                                                                                    // 3654\n * @ngdoc function                                                                                                     // 3655\n * @module ng                                                                                                          // 3656\n * @name angular.injector                                                                                              // 3657\n * @kind function                                                                                                      // 3658\n *                                                                                                                     // 3659\n * @description                                                                                                        // 3660\n * Creates an injector object that can be used for retrieving services as well as for                                  // 3661\n * dependency injection (see {@link guide/di dependency injection}).                                                   // 3662\n *                                                                                                                     // 3663\n * @param {Array.<string|Function>} modules A list of module functions or their aliases. See                           // 3664\n *     {@link angular.module}. The `ng` module must be explicitly added.                                               // 3665\n * @param {boolean=} [strictDi=false] Whether the injector should be in strict mode, which                             // 3666\n *     disallows argument name annotation inference.                                                                   // 3667\n * @returns {injector} Injector object. See {@link auto.$injector $injector}.                                          // 3668\n *                                                                                                                     // 3669\n * @example                                                                                                            // 3670\n * Typical usage                                                                                                       // 3671\n * ```js                                                                                                               // 3672\n *   // create an injector                                                                                             // 3673\n *   var $injector = angular.injector(['ng']);                                                                         // 3674\n *                                                                                                                     // 3675\n *   // use the injector to kick off your application                                                                  // 3676\n *   // use the type inference to auto inject arguments, or use implicit injection                                     // 3677\n *   $injector.invoke(function($rootScope, $compile, $document) {                                                      // 3678\n *     $compile($document)($rootScope);                                                                                // 3679\n *     $rootScope.$digest();                                                                                           // 3680\n *   });                                                                                                               // 3681\n * ```                                                                                                                 // 3682\n *                                                                                                                     // 3683\n * Sometimes you want to get access to the injector of a currently running Angular app                                 // 3684\n * from outside Angular. Perhaps, you want to inject and compile some markup after the                                 // 3685\n * application has been bootstrapped. You can do this using the extra `injector()` added                               // 3686\n * to JQuery/jqLite elements. See {@link angular.element}.                                                             // 3687\n *                                                                                                                     // 3688\n * *This is fairly rare but could be the case if a third party library is injecting the                                // 3689\n * markup.*                                                                                                            // 3690\n *                                                                                                                     // 3691\n * In the following example a new block of HTML containing a `ng-controller`                                           // 3692\n * directive is added to the end of the document body by JQuery. We then compile and link                              // 3693\n * it into the current AngularJS scope.                                                                                // 3694\n *                                                                                                                     // 3695\n * ```js                                                                                                               // 3696\n * var $div = $('<div ng-controller=\"MyCtrl\">{{content.label}}</div>');                                                // 3697\n * $(document.body).append($div);                                                                                      // 3698\n *                                                                                                                     // 3699\n * angular.element(document).injector().invoke(function($compile) {                                                    // 3700\n *   var scope = angular.element($div).scope();                                                                        // 3701\n *   $compile($div)(scope);                                                                                            // 3702\n * });                                                                                                                 // 3703\n * ```                                                                                                                 // 3704\n */                                                                                                                    // 3705\n                                                                                                                       // 3706\n                                                                                                                       // 3707\n/**                                                                                                                    // 3708\n * @ngdoc module                                                                                                       // 3709\n * @name auto                                                                                                          // 3710\n * @description                                                                                                        // 3711\n *                                                                                                                     // 3712\n * Implicit module which gets automatically added to each {@link auto.$injector $injector}.                            // 3713\n */                                                                                                                    // 3714\n                                                                                                                       // 3715\nvar FN_ARGS = /^[^\\(]*\\(\\s*([^\\)]*)\\)/m;                                                                               // 3716\nvar FN_ARG_SPLIT = /,/;                                                                                                // 3717\nvar FN_ARG = /^\\s*(_?)(\\S+?)\\1\\s*$/;                                                                                   // 3718\nvar STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;                                                               // 3719\nvar $injectorMinErr = minErr('$injector');                                                                             // 3720\n                                                                                                                       // 3721\nfunction anonFn(fn) {                                                                                                  // 3722\n  // For anonymous functions, showing at the very least the function signature can help in                             // 3723\n  // debugging.                                                                                                        // 3724\n  var fnText = fn.toString().replace(STRIP_COMMENTS, ''),                                                              // 3725\n      args = fnText.match(FN_ARGS);                                                                                    // 3726\n  if (args) {                                                                                                          // 3727\n    return 'function(' + (args[1] || '').replace(/[\\s\\r\\n]+/, ' ') + ')';                                              // 3728\n  }                                                                                                                    // 3729\n  return 'fn';                                                                                                         // 3730\n}                                                                                                                      // 3731\n                                                                                                                       // 3732\nfunction annotate(fn, strictDi, name) {                                                                                // 3733\n  var $inject,                                                                                                         // 3734\n      fnText,                                                                                                          // 3735\n      argDecl,                                                                                                         // 3736\n      last;                                                                                                            // 3737\n                                                                                                                       // 3738\n  if (typeof fn === 'function') {                                                                                      // 3739\n    if (!($inject = fn.$inject)) {                                                                                     // 3740\n      $inject = [];                                                                                                    // 3741\n      if (fn.length) {                                                                                                 // 3742\n        if (strictDi) {                                                                                                // 3743\n          if (!isString(name) || !name) {                                                                              // 3744\n            name = fn.name || anonFn(fn);                                                                              // 3745\n          }                                                                                                            // 3746\n          throw $injectorMinErr('strictdi',                                                                            // 3747\n            '{0} is not using explicit annotation and cannot be invoked in strict mode', name);                        // 3748\n        }                                                                                                              // 3749\n        fnText = fn.toString().replace(STRIP_COMMENTS, '');                                                            // 3750\n        argDecl = fnText.match(FN_ARGS);                                                                               // 3751\n        forEach(argDecl[1].split(FN_ARG_SPLIT), function(arg) {                                                        // 3752\n          arg.replace(FN_ARG, function(all, underscore, name) {                                                        // 3753\n            $inject.push(name);                                                                                        // 3754\n          });                                                                                                          // 3755\n        });                                                                                                            // 3756\n      }                                                                                                                // 3757\n      fn.$inject = $inject;                                                                                            // 3758\n    }                                                                                                                  // 3759\n  } else if (isArray(fn)) {                                                                                            // 3760\n    last = fn.length - 1;                                                                                              // 3761\n    assertArgFn(fn[last], 'fn');                                                                                       // 3762\n    $inject = fn.slice(0, last);                                                                                       // 3763\n  } else {                                                                                                             // 3764\n    assertArgFn(fn, 'fn', true);                                                                                       // 3765\n  }                                                                                                                    // 3766\n  return $inject;                                                                                                      // 3767\n}                                                                                                                      // 3768\n                                                                                                                       // 3769\n///////////////////////////////////////                                                                                // 3770\n                                                                                                                       // 3771\n/**                                                                                                                    // 3772\n * @ngdoc service                                                                                                      // 3773\n * @name $injector                                                                                                     // 3774\n *                                                                                                                     // 3775\n * @description                                                                                                        // 3776\n *                                                                                                                     // 3777\n * `$injector` is used to retrieve object instances as defined by                                                      // 3778\n * {@link auto.$provide provider}, instantiate types, invoke methods,                                                  // 3779\n * and load modules.                                                                                                   // 3780\n *                                                                                                                     // 3781\n * The following always holds true:                                                                                    // 3782\n *                                                                                                                     // 3783\n * ```js                                                                                                               // 3784\n *   var $injector = angular.injector();                                                                               // 3785\n *   expect($injector.get('$injector')).toBe($injector);                                                               // 3786\n *   expect($injector.invoke(function($injector) {                                                                     // 3787\n *     return $injector;                                                                                               // 3788\n *   })).toBe($injector);                                                                                              // 3789\n * ```                                                                                                                 // 3790\n *                                                                                                                     // 3791\n * # Injection Function Annotation                                                                                     // 3792\n *                                                                                                                     // 3793\n * JavaScript does not have annotations, and annotations are needed for dependency injection. The                      // 3794\n * following are all valid ways of annotating function with injection arguments and are equivalent.                    // 3795\n *                                                                                                                     // 3796\n * ```js                                                                                                               // 3797\n *   // inferred (only works if code not minified/obfuscated)                                                          // 3798\n *   $injector.invoke(function(serviceA){});                                                                           // 3799\n *                                                                                                                     // 3800\n *   // annotated                                                                                                      // 3801\n *   function explicit(serviceA) {};                                                                                   // 3802\n *   explicit.$inject = ['serviceA'];                                                                                  // 3803\n *   $injector.invoke(explicit);                                                                                       // 3804\n *                                                                                                                     // 3805\n *   // inline                                                                                                         // 3806\n *   $injector.invoke(['serviceA', function(serviceA){}]);                                                             // 3807\n * ```                                                                                                                 // 3808\n *                                                                                                                     // 3809\n * ## Inference                                                                                                        // 3810\n *                                                                                                                     // 3811\n * In JavaScript calling `toString()` on a function returns the function definition. The definition                    // 3812\n * can then be parsed and the function arguments can be extracted. This method of discovering                          // 3813\n * annotations is disallowed when the injector is in strict mode.                                                      // 3814\n * *NOTE:* This does not work with minification, and obfuscation tools since these tools change the                    // 3815\n * argument names.                                                                                                     // 3816\n *                                                                                                                     // 3817\n * ## `$inject` Annotation                                                                                             // 3818\n * By adding an `$inject` property onto a function the injection parameters can be specified.                          // 3819\n *                                                                                                                     // 3820\n * ## Inline                                                                                                           // 3821\n * As an array of injection names, where the last item in the array is the function to call.                           // 3822\n */                                                                                                                    // 3823\n                                                                                                                       // 3824\n/**                                                                                                                    // 3825\n * @ngdoc method                                                                                                       // 3826\n * @name $injector#get                                                                                                 // 3827\n *                                                                                                                     // 3828\n * @description                                                                                                        // 3829\n * Return an instance of the service.                                                                                  // 3830\n *                                                                                                                     // 3831\n * @param {string} name The name of the instance to retrieve.                                                          // 3832\n * @param {string=} caller An optional string to provide the origin of the function call for error messages.           // 3833\n * @return {*} The instance.                                                                                           // 3834\n */                                                                                                                    // 3835\n                                                                                                                       // 3836\n/**                                                                                                                    // 3837\n * @ngdoc method                                                                                                       // 3838\n * @name $injector#invoke                                                                                              // 3839\n *                                                                                                                     // 3840\n * @description                                                                                                        // 3841\n * Invoke the method and supply the method arguments from the `$injector`.                                             // 3842\n *                                                                                                                     // 3843\n * @param {Function|Array.<string|Function>} fn The injectable function to invoke. Function parameters are             // 3844\n *   injected according to the {@link guide/di $inject Annotation} rules.                                              // 3845\n * @param {Object=} self The `this` for the invoked method.                                                            // 3846\n * @param {Object=} locals Optional object. If preset then any argument names are read from this                       // 3847\n *                         object first, before the `$injector` is consulted.                                          // 3848\n * @returns {*} the value returned by the invoked `fn` function.                                                       // 3849\n */                                                                                                                    // 3850\n                                                                                                                       // 3851\n/**                                                                                                                    // 3852\n * @ngdoc method                                                                                                       // 3853\n * @name $injector#has                                                                                                 // 3854\n *                                                                                                                     // 3855\n * @description                                                                                                        // 3856\n * Allows the user to query if the particular service exists.                                                          // 3857\n *                                                                                                                     // 3858\n * @param {string} name Name of the service to query.                                                                  // 3859\n * @returns {boolean} `true` if injector has given service.                                                            // 3860\n */                                                                                                                    // 3861\n                                                                                                                       // 3862\n/**                                                                                                                    // 3863\n * @ngdoc method                                                                                                       // 3864\n * @name $injector#instantiate                                                                                         // 3865\n * @description                                                                                                        // 3866\n * Create a new instance of JS type. The method takes a constructor function, invokes the new                          // 3867\n * operator, and supplies all of the arguments to the constructor function as specified by the                         // 3868\n * constructor annotation.                                                                                             // 3869\n *                                                                                                                     // 3870\n * @param {Function} Type Annotated constructor function.                                                              // 3871\n * @param {Object=} locals Optional object. If preset then any argument names are read from this                       // 3872\n * object first, before the `$injector` is consulted.                                                                  // 3873\n * @returns {Object} new instance of `Type`.                                                                           // 3874\n */                                                                                                                    // 3875\n                                                                                                                       // 3876\n/**                                                                                                                    // 3877\n * @ngdoc method                                                                                                       // 3878\n * @name $injector#annotate                                                                                            // 3879\n *                                                                                                                     // 3880\n * @description                                                                                                        // 3881\n * Returns an array of service names which the function is requesting for injection. This API is                       // 3882\n * used by the injector to determine which services need to be injected into the function when the                     // 3883\n * function is invoked. There are three ways in which the function can be annotated with the needed                    // 3884\n * dependencies.                                                                                                       // 3885\n *                                                                                                                     // 3886\n * # Argument names                                                                                                    // 3887\n *                                                                                                                     // 3888\n * The simplest form is to extract the dependencies from the arguments of the function. This is done                   // 3889\n * by converting the function into a string using `toString()` method and extracting the argument                      // 3890\n * names.                                                                                                              // 3891\n * ```js                                                                                                               // 3892\n *   // Given                                                                                                          // 3893\n *   function MyController($scope, $route) {                                                                           // 3894\n *     // ...                                                                                                          // 3895\n *   }                                                                                                                 // 3896\n *                                                                                                                     // 3897\n *   // Then                                                                                                           // 3898\n *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);                                            // 3899\n * ```                                                                                                                 // 3900\n *                                                                                                                     // 3901\n * You can disallow this method by using strict injection mode.                                                        // 3902\n *                                                                                                                     // 3903\n * This method does not work with code minification / obfuscation. For this reason the following                       // 3904\n * annotation strategies are supported.                                                                                // 3905\n *                                                                                                                     // 3906\n * # The `$inject` property                                                                                            // 3907\n *                                                                                                                     // 3908\n * If a function has an `$inject` property and its value is an array of strings, then the strings                      // 3909\n * represent names of services to be injected into the function.                                                       // 3910\n * ```js                                                                                                               // 3911\n *   // Given                                                                                                          // 3912\n *   var MyController = function(obfuscatedScope, obfuscatedRoute) {                                                   // 3913\n *     // ...                                                                                                          // 3914\n *   }                                                                                                                 // 3915\n *   // Define function dependencies                                                                                   // 3916\n *   MyController['$inject'] = ['$scope', '$route'];                                                                   // 3917\n *                                                                                                                     // 3918\n *   // Then                                                                                                           // 3919\n *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);                                            // 3920\n * ```                                                                                                                 // 3921\n *                                                                                                                     // 3922\n * # The array notation                                                                                                // 3923\n *                                                                                                                     // 3924\n * It is often desirable to inline Injected functions and that's when setting the `$inject` property                   // 3925\n * is very inconvenient. In these situations using the array notation to specify the dependencies in                   // 3926\n * a way that survives minification is a better choice:                                                                // 3927\n *                                                                                                                     // 3928\n * ```js                                                                                                               // 3929\n *   // We wish to write this (not minification / obfuscation safe)                                                    // 3930\n *   injector.invoke(function($compile, $rootScope) {                                                                  // 3931\n *     // ...                                                                                                          // 3932\n *   });                                                                                                               // 3933\n *                                                                                                                     // 3934\n *   // We are forced to write break inlining                                                                          // 3935\n *   var tmpFn = function(obfuscatedCompile, obfuscatedRootScope) {                                                    // 3936\n *     // ...                                                                                                          // 3937\n *   };                                                                                                                // 3938\n *   tmpFn.$inject = ['$compile', '$rootScope'];                                                                       // 3939\n *   injector.invoke(tmpFn);                                                                                           // 3940\n *                                                                                                                     // 3941\n *   // To better support inline function the inline annotation is supported                                           // 3942\n *   injector.invoke(['$compile', '$rootScope', function(obfCompile, obfRootScope) {                                   // 3943\n *     // ...                                                                                                          // 3944\n *   }]);                                                                                                              // 3945\n *                                                                                                                     // 3946\n *   // Therefore                                                                                                      // 3947\n *   expect(injector.annotate(                                                                                         // 3948\n *      ['$compile', '$rootScope', function(obfus_$compile, obfus_$rootScope) {}])                                     // 3949\n *    ).toEqual(['$compile', '$rootScope']);                                                                           // 3950\n * ```                                                                                                                 // 3951\n *                                                                                                                     // 3952\n * @param {Function|Array.<string|Function>} fn Function for which dependent service names need to                     // 3953\n * be retrieved as described above.                                                                                    // 3954\n *                                                                                                                     // 3955\n * @param {boolean=} [strictDi=false] Disallow argument name annotation inference.                                     // 3956\n *                                                                                                                     // 3957\n * @returns {Array.<string>} The names of the services which the function requires.                                    // 3958\n */                                                                                                                    // 3959\n                                                                                                                       // 3960\n                                                                                                                       // 3961\n                                                                                                                       // 3962\n                                                                                                                       // 3963\n/**                                                                                                                    // 3964\n * @ngdoc service                                                                                                      // 3965\n * @name $provide                                                                                                      // 3966\n *                                                                                                                     // 3967\n * @description                                                                                                        // 3968\n *                                                                                                                     // 3969\n * The {@link auto.$provide $provide} service has a number of methods for registering components                       // 3970\n * with the {@link auto.$injector $injector}. Many of these functions are also exposed on                              // 3971\n * {@link angular.Module}.                                                                                             // 3972\n *                                                                                                                     // 3973\n * An Angular **service** is a singleton object created by a **service factory**.  These **service                     // 3974\n * factories** are functions which, in turn, are created by a **service provider**.                                    // 3975\n * The **service providers** are constructor functions. When instantiated they must contain a                          // 3976\n * property called `$get`, which holds the **service factory** function.                                               // 3977\n *                                                                                                                     // 3978\n * When you request a service, the {@link auto.$injector $injector} is responsible for finding the                     // 3979\n * correct **service provider**, instantiating it and then calling its `$get` **service factory**                      // 3980\n * function to get the instance of the **service**.                                                                    // 3981\n *                                                                                                                     // 3982\n * Often services have no configuration options and there is no need to add methods to the service                     // 3983\n * provider.  The provider will be no more than a constructor function with a `$get` property. For                     // 3984\n * these cases the {@link auto.$provide $provide} service has additional helper methods to register                    // 3985\n * services without specifying a provider.                                                                             // 3986\n *                                                                                                                     // 3987\n * * {@link auto.$provide#provider provider(provider)} - registers a **service provider** with the                     // 3988\n *     {@link auto.$injector $injector}                                                                                // 3989\n * * {@link auto.$provide#constant constant(obj)} - registers a value/object that can be accessed by                   // 3990\n *     providers and services.                                                                                         // 3991\n * * {@link auto.$provide#value value(obj)} - registers a value/object that can only be accessed by                    // 3992\n *     services, not providers.                                                                                        // 3993\n * * {@link auto.$provide#factory factory(fn)} - registers a service **factory function**, `fn`,                       // 3994\n *     that will be wrapped in a **service provider** object, whose `$get` property will contain the                   // 3995\n *     given factory function.                                                                                         // 3996\n * * {@link auto.$provide#service service(class)} - registers a **constructor function**, `class`                      // 3997\n *     that will be wrapped in a **service provider** object, whose `$get` property will instantiate                   // 3998\n *      a new object using the given constructor function.                                                             // 3999\n *                                                                                                                     // 4000\n * See the individual methods for more information and examples.                                                       // 4001\n */                                                                                                                    // 4002\n                                                                                                                       // 4003\n/**                                                                                                                    // 4004\n * @ngdoc method                                                                                                       // 4005\n * @name $provide#provider                                                                                             // 4006\n * @description                                                                                                        // 4007\n *                                                                                                                     // 4008\n * Register a **provider function** with the {@link auto.$injector $injector}. Provider functions                      // 4009\n * are constructor functions, whose instances are responsible for \"providing\" a factory for a                          // 4010\n * service.                                                                                                            // 4011\n *                                                                                                                     // 4012\n * Service provider names start with the name of the service they provide followed by `Provider`.                      // 4013\n * For example, the {@link ng.$log $log} service has a provider called                                                 // 4014\n * {@link ng.$logProvider $logProvider}.                                                                               // 4015\n *                                                                                                                     // 4016\n * Service provider objects can have additional methods which allow configuration of the provider                      // 4017\n * and its service. Importantly, you can configure what kind of service is created by the `$get`                       // 4018\n * method, or how that service will act. For example, the {@link ng.$logProvider $logProvider} has a                   // 4019\n * method {@link ng.$logProvider#debugEnabled debugEnabled}                                                            // 4020\n * which lets you specify whether the {@link ng.$log $log} service will log debug messages to the                      // 4021\n * console or not.                                                                                                     // 4022\n *                                                                                                                     // 4023\n * @param {string} name The name of the instance. NOTE: the provider will be available under `name +                   // 4024\n                        'Provider'` key.                                                                               // 4025\n * @param {(Object|function())} provider If the provider is:                                                           // 4026\n *                                                                                                                     // 4027\n *   - `Object`: then it should have a `$get` method. The `$get` method will be invoked using                          // 4028\n *     {@link auto.$injector#invoke $injector.invoke()} when an instance needs to be created.                          // 4029\n *   - `Constructor`: a new instance of the provider will be created using                                             // 4030\n *     {@link auto.$injector#instantiate $injector.instantiate()}, then treated as `object`.                           // 4031\n *                                                                                                                     // 4032\n * @returns {Object} registered provider instance                                                                      // 4033\n                                                                                                                       // 4034\n * @example                                                                                                            // 4035\n *                                                                                                                     // 4036\n * The following example shows how to create a simple event tracking service and register it using                     // 4037\n * {@link auto.$provide#provider $provide.provider()}.                                                                 // 4038\n *                                                                                                                     // 4039\n * ```js                                                                                                               // 4040\n *  // Define the eventTracker provider                                                                                // 4041\n *  function EventTrackerProvider() {                                                                                  // 4042\n *    var trackingUrl = '/track';                                                                                      // 4043\n *                                                                                                                     // 4044\n *    // A provider method for configuring where the tracked events should been saved                                  // 4045\n *    this.setTrackingUrl = function(url) {                                                                            // 4046\n *      trackingUrl = url;                                                                                             // 4047\n *    };                                                                                                               // 4048\n *                                                                                                                     // 4049\n *    // The service factory function                                                                                  // 4050\n *    this.$get = ['$http', function($http) {                                                                          // 4051\n *      var trackedEvents = {};                                                                                        // 4052\n *      return {                                                                                                       // 4053\n *        // Call this to track an event                                                                               // 4054\n *        event: function(event) {                                                                                     // 4055\n *          var count = trackedEvents[event] || 0;                                                                     // 4056\n *          count += 1;                                                                                                // 4057\n *          trackedEvents[event] = count;                                                                              // 4058\n *          return count;                                                                                              // 4059\n *        },                                                                                                           // 4060\n *        // Call this to save the tracked events to the trackingUrl                                                   // 4061\n *        save: function() {                                                                                           // 4062\n *          $http.post(trackingUrl, trackedEvents);                                                                    // 4063\n *        }                                                                                                            // 4064\n *      };                                                                                                             // 4065\n *    }];                                                                                                              // 4066\n *  }                                                                                                                  // 4067\n *                                                                                                                     // 4068\n *  describe('eventTracker', function() {                                                                              // 4069\n *    var postSpy;                                                                                                     // 4070\n *                                                                                                                     // 4071\n *    beforeEach(module(function($provide) {                                                                           // 4072\n *      // Register the eventTracker provider                                                                          // 4073\n *      $provide.provider('eventTracker', EventTrackerProvider);                                                       // 4074\n *    }));                                                                                                             // 4075\n *                                                                                                                     // 4076\n *    beforeEach(module(function(eventTrackerProvider) {                                                               // 4077\n *      // Configure eventTracker provider                                                                             // 4078\n *      eventTrackerProvider.setTrackingUrl('/custom-track');                                                          // 4079\n *    }));                                                                                                             // 4080\n *                                                                                                                     // 4081\n *    it('tracks events', inject(function(eventTracker) {                                                              // 4082\n *      expect(eventTracker.event('login')).toEqual(1);                                                                // 4083\n *      expect(eventTracker.event('login')).toEqual(2);                                                                // 4084\n *    }));                                                                                                             // 4085\n *                                                                                                                     // 4086\n *    it('saves to the tracking url', inject(function(eventTracker, $http) {                                           // 4087\n *      postSpy = spyOn($http, 'post');                                                                                // 4088\n *      eventTracker.event('login');                                                                                   // 4089\n *      eventTracker.save();                                                                                           // 4090\n *      expect(postSpy).toHaveBeenCalled();                                                                            // 4091\n *      expect(postSpy.mostRecentCall.args[0]).not.toEqual('/track');                                                  // 4092\n *      expect(postSpy.mostRecentCall.args[0]).toEqual('/custom-track');                                               // 4093\n *      expect(postSpy.mostRecentCall.args[1]).toEqual({ 'login': 1 });                                                // 4094\n *    }));                                                                                                             // 4095\n *  });                                                                                                                // 4096\n * ```                                                                                                                 // 4097\n */                                                                                                                    // 4098\n                                                                                                                       // 4099\n/**                                                                                                                    // 4100\n * @ngdoc method                                                                                                       // 4101\n * @name $provide#factory                                                                                              // 4102\n * @description                                                                                                        // 4103\n *                                                                                                                     // 4104\n * Register a **service factory**, which will be called to return the service instance.                                // 4105\n * This is short for registering a service where its provider consists of only a `$get` property,                      // 4106\n * which is the given service factory function.                                                                        // 4107\n * You should use {@link auto.$provide#factory $provide.factory(getFn)} if you do not need to                          // 4108\n * configure your service in a provider.                                                                               // 4109\n *                                                                                                                     // 4110\n * @param {string} name The name of the instance.                                                                      // 4111\n * @param {Function|Array.<string|Function>} $getFn The injectable $getFn for the instance creation.                   // 4112\n *                      Internally this is a short hand for `$provide.provider(name, {$get: $getFn})`.                 // 4113\n * @returns {Object} registered provider instance                                                                      // 4114\n *                                                                                                                     // 4115\n * @example                                                                                                            // 4116\n * Here is an example of registering a service                                                                         // 4117\n * ```js                                                                                                               // 4118\n *   $provide.factory('ping', ['$http', function($http) {                                                              // 4119\n *     return function ping() {                                                                                        // 4120\n *       return $http.send('/ping');                                                                                   // 4121\n *     };                                                                                                              // 4122\n *   }]);                                                                                                              // 4123\n * ```                                                                                                                 // 4124\n * You would then inject and use this service like this:                                                               // 4125\n * ```js                                                                                                               // 4126\n *   someModule.controller('Ctrl', ['ping', function(ping) {                                                           // 4127\n *     ping();                                                                                                         // 4128\n *   }]);                                                                                                              // 4129\n * ```                                                                                                                 // 4130\n */                                                                                                                    // 4131\n                                                                                                                       // 4132\n                                                                                                                       // 4133\n/**                                                                                                                    // 4134\n * @ngdoc method                                                                                                       // 4135\n * @name $provide#service                                                                                              // 4136\n * @description                                                                                                        // 4137\n *                                                                                                                     // 4138\n * Register a **service constructor**, which will be invoked with `new` to create the service                          // 4139\n * instance.                                                                                                           // 4140\n * This is short for registering a service where its provider's `$get` property is the service                         // 4141\n * constructor function that will be used to instantiate the service instance.                                         // 4142\n *                                                                                                                     // 4143\n * You should use {@link auto.$provide#service $provide.service(class)} if you define your service                     // 4144\n * as a type/class.                                                                                                    // 4145\n *                                                                                                                     // 4146\n * @param {string} name The name of the instance.                                                                      // 4147\n * @param {Function|Array.<string|Function>} constructor An injectable class (constructor function)                    // 4148\n *     that will be instantiated.                                                                                      // 4149\n * @returns {Object} registered provider instance                                                                      // 4150\n *                                                                                                                     // 4151\n * @example                                                                                                            // 4152\n * Here is an example of registering a service using                                                                   // 4153\n * {@link auto.$provide#service $provide.service(class)}.                                                              // 4154\n * ```js                                                                                                               // 4155\n *   var Ping = function($http) {                                                                                      // 4156\n *     this.$http = $http;                                                                                             // 4157\n *   };                                                                                                                // 4158\n *                                                                                                                     // 4159\n *   Ping.$inject = ['$http'];                                                                                         // 4160\n *                                                                                                                     // 4161\n *   Ping.prototype.send = function() {                                                                                // 4162\n *     return this.$http.get('/ping');                                                                                 // 4163\n *   };                                                                                                                // 4164\n *   $provide.service('ping', Ping);                                                                                   // 4165\n * ```                                                                                                                 // 4166\n * You would then inject and use this service like this:                                                               // 4167\n * ```js                                                                                                               // 4168\n *   someModule.controller('Ctrl', ['ping', function(ping) {                                                           // 4169\n *     ping.send();                                                                                                    // 4170\n *   }]);                                                                                                              // 4171\n * ```                                                                                                                 // 4172\n */                                                                                                                    // 4173\n                                                                                                                       // 4174\n                                                                                                                       // 4175\n/**                                                                                                                    // 4176\n * @ngdoc method                                                                                                       // 4177\n * @name $provide#value                                                                                                // 4178\n * @description                                                                                                        // 4179\n *                                                                                                                     // 4180\n * Register a **value service** with the {@link auto.$injector $injector}, such as a string, a                         // 4181\n * number, an array, an object or a function.  This is short for registering a service where its                       // 4182\n * provider's `$get` property is a factory function that takes no arguments and returns the **value                    // 4183\n * service**.                                                                                                          // 4184\n *                                                                                                                     // 4185\n * Value services are similar to constant services, except that they cannot be injected into a                         // 4186\n * module configuration function (see {@link angular.Module#config}) but they can be overridden by                     // 4187\n * an Angular                                                                                                          // 4188\n * {@link auto.$provide#decorator decorator}.                                                                          // 4189\n *                                                                                                                     // 4190\n * @param {string} name The name of the instance.                                                                      // 4191\n * @param {*} value The value.                                                                                         // 4192\n * @returns {Object} registered provider instance                                                                      // 4193\n *                                                                                                                     // 4194\n * @example                                                                                                            // 4195\n * Here are some examples of creating value services.                                                                  // 4196\n * ```js                                                                                                               // 4197\n *   $provide.value('ADMIN_USER', 'admin');                                                                            // 4198\n *                                                                                                                     // 4199\n *   $provide.value('RoleLookup', { admin: 0, writer: 1, reader: 2 });                                                 // 4200\n *                                                                                                                     // 4201\n *   $provide.value('halfOf', function(value) {                                                                        // 4202\n *     return value / 2;                                                                                               // 4203\n *   });                                                                                                               // 4204\n * ```                                                                                                                 // 4205\n */                                                                                                                    // 4206\n                                                                                                                       // 4207\n                                                                                                                       // 4208\n/**                                                                                                                    // 4209\n * @ngdoc method                                                                                                       // 4210\n * @name $provide#constant                                                                                             // 4211\n * @description                                                                                                        // 4212\n *                                                                                                                     // 4213\n * Register a **constant service**, such as a string, a number, an array, an object or a function,                     // 4214\n * with the {@link auto.$injector $injector}. Unlike {@link auto.$provide#value value} it can be                       // 4215\n * injected into a module configuration function (see {@link angular.Module#config}) and it cannot                     // 4216\n * be overridden by an Angular {@link auto.$provide#decorator decorator}.                                              // 4217\n *                                                                                                                     // 4218\n * @param {string} name The name of the constant.                                                                      // 4219\n * @param {*} value The constant value.                                                                                // 4220\n * @returns {Object} registered instance                                                                               // 4221\n *                                                                                                                     // 4222\n * @example                                                                                                            // 4223\n * Here a some examples of creating constants:                                                                         // 4224\n * ```js                                                                                                               // 4225\n *   $provide.constant('SHARD_HEIGHT', 306);                                                                           // 4226\n *                                                                                                                     // 4227\n *   $provide.constant('MY_COLOURS', ['red', 'blue', 'grey']);                                                         // 4228\n *                                                                                                                     // 4229\n *   $provide.constant('double', function(value) {                                                                     // 4230\n *     return value * 2;                                                                                               // 4231\n *   });                                                                                                               // 4232\n * ```                                                                                                                 // 4233\n */                                                                                                                    // 4234\n                                                                                                                       // 4235\n                                                                                                                       // 4236\n/**                                                                                                                    // 4237\n * @ngdoc method                                                                                                       // 4238\n * @name $provide#decorator                                                                                            // 4239\n * @description                                                                                                        // 4240\n *                                                                                                                     // 4241\n * Register a **service decorator** with the {@link auto.$injector $injector}. A service decorator                     // 4242\n * intercepts the creation of a service, allowing it to override or modify the behaviour of the                        // 4243\n * service. The object returned by the decorator may be the original service, or a new service                         // 4244\n * object which replaces or wraps and delegates to the original service.                                               // 4245\n *                                                                                                                     // 4246\n * @param {string} name The name of the service to decorate.                                                           // 4247\n * @param {Function|Array.<string|Function>} decorator This function will be invoked when the service needs to be      // 4248\n *    instantiated and should return the decorated service instance. The function is called using                      // 4249\n *    the {@link auto.$injector#invoke injector.invoke} method and is therefore fully injectable.                      // 4250\n *    Local injection arguments:                                                                                       // 4251\n *                                                                                                                     // 4252\n *    * `$delegate` - The original service instance, which can be monkey patched, configured,                          // 4253\n *      decorated or delegated to.                                                                                     // 4254\n *                                                                                                                     // 4255\n * @example                                                                                                            // 4256\n * Here we decorate the {@link ng.$log $log} service to convert warnings to errors by intercepting                     // 4257\n * calls to {@link ng.$log#error $log.warn()}.                                                                         // 4258\n * ```js                                                                                                               // 4259\n *   $provide.decorator('$log', ['$delegate', function($delegate) {                                                    // 4260\n *     $delegate.warn = $delegate.error;                                                                               // 4261\n *     return $delegate;                                                                                               // 4262\n *   }]);                                                                                                              // 4263\n * ```                                                                                                                 // 4264\n */                                                                                                                    // 4265\n                                                                                                                       // 4266\n                                                                                                                       // 4267\nfunction createInjector(modulesToLoad, strictDi) {                                                                     // 4268\n  strictDi = (strictDi === true);                                                                                      // 4269\n  var INSTANTIATING = {},                                                                                              // 4270\n      providerSuffix = 'Provider',                                                                                     // 4271\n      path = [],                                                                                                       // 4272\n      loadedModules = new HashMap([], true),                                                                           // 4273\n      providerCache = {                                                                                                // 4274\n        $provide: {                                                                                                    // 4275\n            provider: supportObject(provider),                                                                         // 4276\n            factory: supportObject(factory),                                                                           // 4277\n            service: supportObject(service),                                                                           // 4278\n            value: supportObject(value),                                                                               // 4279\n            constant: supportObject(constant),                                                                         // 4280\n            decorator: decorator                                                                                       // 4281\n          }                                                                                                            // 4282\n      },                                                                                                               // 4283\n      providerInjector = (providerCache.$injector =                                                                    // 4284\n          createInternalInjector(providerCache, function(serviceName, caller) {                                        // 4285\n            if (angular.isString(caller)) {                                                                            // 4286\n              path.push(caller);                                                                                       // 4287\n            }                                                                                                          // 4288\n            throw $injectorMinErr('unpr', \"Unknown provider: {0}\", path.join(' <- '));                                 // 4289\n          })),                                                                                                         // 4290\n      instanceCache = {},                                                                                              // 4291\n      instanceInjector = (instanceCache.$injector =                                                                    // 4292\n          createInternalInjector(instanceCache, function(serviceName, caller) {                                        // 4293\n            var provider = providerInjector.get(serviceName + providerSuffix, caller);                                 // 4294\n            return instanceInjector.invoke(provider.$get, provider, undefined, serviceName);                           // 4295\n          }));                                                                                                         // 4296\n                                                                                                                       // 4297\n                                                                                                                       // 4298\n  forEach(loadModules(modulesToLoad), function(fn) { if (fn) instanceInjector.invoke(fn); });                          // 4299\n                                                                                                                       // 4300\n  return instanceInjector;                                                                                             // 4301\n                                                                                                                       // 4302\n  ////////////////////////////////////                                                                                 // 4303\n  // $provider                                                                                                         // 4304\n  ////////////////////////////////////                                                                                 // 4305\n                                                                                                                       // 4306\n  function supportObject(delegate) {                                                                                   // 4307\n    return function(key, value) {                                                                                      // 4308\n      if (isObject(key)) {                                                                                             // 4309\n        forEach(key, reverseParams(delegate));                                                                         // 4310\n      } else {                                                                                                         // 4311\n        return delegate(key, value);                                                                                   // 4312\n      }                                                                                                                // 4313\n    };                                                                                                                 // 4314\n  }                                                                                                                    // 4315\n                                                                                                                       // 4316\n  function provider(name, provider_) {                                                                                 // 4317\n    assertNotHasOwnProperty(name, 'service');                                                                          // 4318\n    if (isFunction(provider_) || isArray(provider_)) {                                                                 // 4319\n      provider_ = providerInjector.instantiate(provider_);                                                             // 4320\n    }                                                                                                                  // 4321\n    if (!provider_.$get) {                                                                                             // 4322\n      throw $injectorMinErr('pget', \"Provider '{0}' must define $get factory method.\", name);                          // 4323\n    }                                                                                                                  // 4324\n    return providerCache[name + providerSuffix] = provider_;                                                           // 4325\n  }                                                                                                                    // 4326\n                                                                                                                       // 4327\n  function enforceReturnValue(name, factory) {                                                                         // 4328\n    return function enforcedReturnValue() {                                                                            // 4329\n      var result = instanceInjector.invoke(factory, this);                                                             // 4330\n      if (isUndefined(result)) {                                                                                       // 4331\n        throw $injectorMinErr('undef', \"Provider '{0}' must return a value from $get factory method.\", name);          // 4332\n      }                                                                                                                // 4333\n      return result;                                                                                                   // 4334\n    };                                                                                                                 // 4335\n  }                                                                                                                    // 4336\n                                                                                                                       // 4337\n  function factory(name, factoryFn, enforce) {                                                                         // 4338\n    return provider(name, {                                                                                            // 4339\n      $get: enforce !== false ? enforceReturnValue(name, factoryFn) : factoryFn                                        // 4340\n    });                                                                                                                // 4341\n  }                                                                                                                    // 4342\n                                                                                                                       // 4343\n  function service(name, constructor) {                                                                                // 4344\n    return factory(name, ['$injector', function($injector) {                                                           // 4345\n      return $injector.instantiate(constructor);                                                                       // 4346\n    }]);                                                                                                               // 4347\n  }                                                                                                                    // 4348\n                                                                                                                       // 4349\n  function value(name, val) { return factory(name, valueFn(val), false); }                                             // 4350\n                                                                                                                       // 4351\n  function constant(name, value) {                                                                                     // 4352\n    assertNotHasOwnProperty(name, 'constant');                                                                         // 4353\n    providerCache[name] = value;                                                                                       // 4354\n    instanceCache[name] = value;                                                                                       // 4355\n  }                                                                                                                    // 4356\n                                                                                                                       // 4357\n  function decorator(serviceName, decorFn) {                                                                           // 4358\n    var origProvider = providerInjector.get(serviceName + providerSuffix),                                             // 4359\n        orig$get = origProvider.$get;                                                                                  // 4360\n                                                                                                                       // 4361\n    origProvider.$get = function() {                                                                                   // 4362\n      var origInstance = instanceInjector.invoke(orig$get, origProvider);                                              // 4363\n      return instanceInjector.invoke(decorFn, null, {$delegate: origInstance});                                        // 4364\n    };                                                                                                                 // 4365\n  }                                                                                                                    // 4366\n                                                                                                                       // 4367\n  ////////////////////////////////////                                                                                 // 4368\n  // Module Loading                                                                                                    // 4369\n  ////////////////////////////////////                                                                                 // 4370\n  function loadModules(modulesToLoad) {                                                                                // 4371\n    assertArg(isUndefined(modulesToLoad) || isArray(modulesToLoad), 'modulesToLoad', 'not an array');                  // 4372\n    var runBlocks = [], moduleFn;                                                                                      // 4373\n    forEach(modulesToLoad, function(module) {                                                                          // 4374\n      if (loadedModules.get(module)) return;                                                                           // 4375\n      loadedModules.put(module, true);                                                                                 // 4376\n                                                                                                                       // 4377\n      function runInvokeQueue(queue) {                                                                                 // 4378\n        var i, ii;                                                                                                     // 4379\n        for (i = 0, ii = queue.length; i < ii; i++) {                                                                  // 4380\n          var invokeArgs = queue[i],                                                                                   // 4381\n              provider = providerInjector.get(invokeArgs[0]);                                                          // 4382\n                                                                                                                       // 4383\n          provider[invokeArgs[1]].apply(provider, invokeArgs[2]);                                                      // 4384\n        }                                                                                                              // 4385\n      }                                                                                                                // 4386\n                                                                                                                       // 4387\n      try {                                                                                                            // 4388\n        if (isString(module)) {                                                                                        // 4389\n          moduleFn = angularModule(module);                                                                            // 4390\n          runBlocks = runBlocks.concat(loadModules(moduleFn.requires)).concat(moduleFn._runBlocks);                    // 4391\n          runInvokeQueue(moduleFn._invokeQueue);                                                                       // 4392\n          runInvokeQueue(moduleFn._configBlocks);                                                                      // 4393\n        } else if (isFunction(module)) {                                                                               // 4394\n            runBlocks.push(providerInjector.invoke(module));                                                           // 4395\n        } else if (isArray(module)) {                                                                                  // 4396\n            runBlocks.push(providerInjector.invoke(module));                                                           // 4397\n        } else {                                                                                                       // 4398\n          assertArgFn(module, 'module');                                                                               // 4399\n        }                                                                                                              // 4400\n      } catch (e) {                                                                                                    // 4401\n        if (isArray(module)) {                                                                                         // 4402\n          module = module[module.length - 1];                                                                          // 4403\n        }                                                                                                              // 4404\n        if (e.message && e.stack && e.stack.indexOf(e.message) == -1) {                                                // 4405\n          // Safari & FF's stack traces don't contain error.message content                                            // 4406\n          // unlike those of Chrome and IE                                                                             // 4407\n          // So if stack doesn't contain message, we create a new string that contains both.                           // 4408\n          // Since error.stack is read-only in Safari, I'm overriding e and not e.stack here.                          // 4409\n          /* jshint -W022 */                                                                                           // 4410\n          e = e.message + '\\n' + e.stack;                                                                              // 4411\n        }                                                                                                              // 4412\n        throw $injectorMinErr('modulerr', \"Failed to instantiate module {0} due to:\\n{1}\",                             // 4413\n                  module, e.stack || e.message || e);                                                                  // 4414\n      }                                                                                                                // 4415\n    });                                                                                                                // 4416\n    return runBlocks;                                                                                                  // 4417\n  }                                                                                                                    // 4418\n                                                                                                                       // 4419\n  ////////////////////////////////////                                                                                 // 4420\n  // internal Injector                                                                                                 // 4421\n  ////////////////////////////////////                                                                                 // 4422\n                                                                                                                       // 4423\n  function createInternalInjector(cache, factory) {                                                                    // 4424\n                                                                                                                       // 4425\n    function getService(serviceName, caller) {                                                                         // 4426\n      if (cache.hasOwnProperty(serviceName)) {                                                                         // 4427\n        if (cache[serviceName] === INSTANTIATING) {                                                                    // 4428\n          throw $injectorMinErr('cdep', 'Circular dependency found: {0}',                                              // 4429\n                    serviceName + ' <- ' + path.join(' <- '));                                                         // 4430\n        }                                                                                                              // 4431\n        return cache[serviceName];                                                                                     // 4432\n      } else {                                                                                                         // 4433\n        try {                                                                                                          // 4434\n          path.unshift(serviceName);                                                                                   // 4435\n          cache[serviceName] = INSTANTIATING;                                                                          // 4436\n          return cache[serviceName] = factory(serviceName, caller);                                                    // 4437\n        } catch (err) {                                                                                                // 4438\n          if (cache[serviceName] === INSTANTIATING) {                                                                  // 4439\n            delete cache[serviceName];                                                                                 // 4440\n          }                                                                                                            // 4441\n          throw err;                                                                                                   // 4442\n        } finally {                                                                                                    // 4443\n          path.shift();                                                                                                // 4444\n        }                                                                                                              // 4445\n      }                                                                                                                // 4446\n    }                                                                                                                  // 4447\n                                                                                                                       // 4448\n    function invoke(fn, self, locals, serviceName) {                                                                   // 4449\n      if (typeof locals === 'string') {                                                                                // 4450\n        serviceName = locals;                                                                                          // 4451\n        locals = null;                                                                                                 // 4452\n      }                                                                                                                // 4453\n                                                                                                                       // 4454\n      var args = [],                                                                                                   // 4455\n          $inject = createInjector.$$annotate(fn, strictDi, serviceName),                                              // 4456\n          length, i,                                                                                                   // 4457\n          key;                                                                                                         // 4458\n                                                                                                                       // 4459\n      for (i = 0, length = $inject.length; i < length; i++) {                                                          // 4460\n        key = $inject[i];                                                                                              // 4461\n        if (typeof key !== 'string') {                                                                                 // 4462\n          throw $injectorMinErr('itkn',                                                                                // 4463\n                  'Incorrect injection token! Expected service name as string, got {0}', key);                         // 4464\n        }                                                                                                              // 4465\n        args.push(                                                                                                     // 4466\n          locals && locals.hasOwnProperty(key)                                                                         // 4467\n          ? locals[key]                                                                                                // 4468\n          : getService(key, serviceName)                                                                               // 4469\n        );                                                                                                             // 4470\n      }                                                                                                                // 4471\n      if (isArray(fn)) {                                                                                               // 4472\n        fn = fn[length];                                                                                               // 4473\n      }                                                                                                                // 4474\n                                                                                                                       // 4475\n      // http://jsperf.com/angularjs-invoke-apply-vs-switch                                                            // 4476\n      // #5388                                                                                                         // 4477\n      return fn.apply(self, args);                                                                                     // 4478\n    }                                                                                                                  // 4479\n                                                                                                                       // 4480\n    function instantiate(Type, locals, serviceName) {                                                                  // 4481\n      // Check if Type is annotated and use just the given function at n-1 as parameter                                // 4482\n      // e.g. someModule.factory('greeter', ['$window', function(renamed$window) {}]);                                 // 4483\n      // Object creation: http://jsperf.com/create-constructor/2                                                       // 4484\n      var instance = Object.create((isArray(Type) ? Type[Type.length - 1] : Type).prototype || null);                  // 4485\n      var returnedValue = invoke(Type, instance, locals, serviceName);                                                 // 4486\n                                                                                                                       // 4487\n      return isObject(returnedValue) || isFunction(returnedValue) ? returnedValue : instance;                          // 4488\n    }                                                                                                                  // 4489\n                                                                                                                       // 4490\n    return {                                                                                                           // 4491\n      invoke: invoke,                                                                                                  // 4492\n      instantiate: instantiate,                                                                                        // 4493\n      get: getService,                                                                                                 // 4494\n      annotate: createInjector.$$annotate,                                                                             // 4495\n      has: function(name) {                                                                                            // 4496\n        return providerCache.hasOwnProperty(name + providerSuffix) || cache.hasOwnProperty(name);                      // 4497\n      }                                                                                                                // 4498\n    };                                                                                                                 // 4499\n  }                                                                                                                    // 4500\n}                                                                                                                      // 4501\n                                                                                                                       // 4502\ncreateInjector.$$annotate = annotate;                                                                                  // 4503\n                                                                                                                       // 4504\n/**                                                                                                                    // 4505\n * @ngdoc provider                                                                                                     // 4506\n * @name $anchorScrollProvider                                                                                         // 4507\n *                                                                                                                     // 4508\n * @description                                                                                                        // 4509\n * Use `$anchorScrollProvider` to disable automatic scrolling whenever                                                 // 4510\n * {@link ng.$location#hash $location.hash()} changes.                                                                 // 4511\n */                                                                                                                    // 4512\nfunction $AnchorScrollProvider() {                                                                                     // 4513\n                                                                                                                       // 4514\n  var autoScrollingEnabled = true;                                                                                     // 4515\n                                                                                                                       // 4516\n  /**                                                                                                                  // 4517\n   * @ngdoc method                                                                                                     // 4518\n   * @name $anchorScrollProvider#disableAutoScrolling                                                                  // 4519\n   *                                                                                                                   // 4520\n   * @description                                                                                                      // 4521\n   * By default, {@link ng.$anchorScroll $anchorScroll()} will automatically detect changes to                         // 4522\n   * {@link ng.$location#hash $location.hash()} and scroll to the element matching the new hash.<br />                 // 4523\n   * Use this method to disable automatic scrolling.                                                                   // 4524\n   *                                                                                                                   // 4525\n   * If automatic scrolling is disabled, one must explicitly call                                                      // 4526\n   * {@link ng.$anchorScroll $anchorScroll()} in order to scroll to the element related to the                         // 4527\n   * current hash.                                                                                                     // 4528\n   */                                                                                                                  // 4529\n  this.disableAutoScrolling = function() {                                                                             // 4530\n    autoScrollingEnabled = false;                                                                                      // 4531\n  };                                                                                                                   // 4532\n                                                                                                                       // 4533\n  /**                                                                                                                  // 4534\n   * @ngdoc service                                                                                                    // 4535\n   * @name $anchorScroll                                                                                               // 4536\n   * @kind function                                                                                                    // 4537\n   * @requires $window                                                                                                 // 4538\n   * @requires $location                                                                                               // 4539\n   * @requires $rootScope                                                                                              // 4540\n   *                                                                                                                   // 4541\n   * @description                                                                                                      // 4542\n   * When called, it scrolls to the element related to the specified `hash` or (if omitted) to the                     // 4543\n   * current value of {@link ng.$location#hash $location.hash()}, according to the rules specified                     // 4544\n   * in the                                                                                                            // 4545\n   * [HTML5 spec](http://dev.w3.org/html5/spec/Overview.html#the-indicated-part-of-the-document).                      // 4546\n   *                                                                                                                   // 4547\n   * It also watches the {@link ng.$location#hash $location.hash()} and automatically scrolls to                       // 4548\n   * match any anchor whenever it changes. This can be disabled by calling                                             // 4549\n   * {@link ng.$anchorScrollProvider#disableAutoScrolling $anchorScrollProvider.disableAutoScrolling()}.               // 4550\n   *                                                                                                                   // 4551\n   * Additionally, you can use its {@link ng.$anchorScroll#yOffset yOffset} property to specify a                      // 4552\n   * vertical scroll-offset (either fixed or dynamic).                                                                 // 4553\n   *                                                                                                                   // 4554\n   * @param {string=} hash The hash specifying the element to scroll to. If omitted, the value of                      // 4555\n   *                       {@link ng.$location#hash $location.hash()} will be used.                                    // 4556\n   *                                                                                                                   // 4557\n   * @property {(number|function|jqLite)} yOffset                                                                      // 4558\n   * If set, specifies a vertical scroll-offset. This is often useful when there are fixed                             // 4559\n   * positioned elements at the top of the page, such as navbars, headers etc.                                         // 4560\n   *                                                                                                                   // 4561\n   * `yOffset` can be specified in various ways:                                                                       // 4562\n   * - **number**: A fixed number of pixels to be used as offset.<br /><br />                                          // 4563\n   * - **function**: A getter function called everytime `$anchorScroll()` is executed. Must return                     // 4564\n   *   a number representing the offset (in pixels).<br /><br />                                                       // 4565\n   * - **jqLite**: A jqLite/jQuery element to be used for specifying the offset. The distance from                     // 4566\n   *   the top of the page to the element's bottom will be used as offset.<br />                                       // 4567\n   *   **Note**: The element will be taken into account only as long as its `position` is set to                       // 4568\n   *   `fixed`. This option is useful, when dealing with responsive navbars/headers that adjust                        // 4569\n   *   their height and/or positioning according to the viewport's size.                                               // 4570\n   *                                                                                                                   // 4571\n   * <br />                                                                                                            // 4572\n   * <div class=\"alert alert-warning\">                                                                                 // 4573\n   * In order for `yOffset` to work properly, scrolling should take place on the document's root and                   // 4574\n   * not some child element.                                                                                           // 4575\n   * </div>                                                                                                            // 4576\n   *                                                                                                                   // 4577\n   * @example                                                                                                          // 4578\n     <example module=\"anchorScrollExample\">                                                                            // 4579\n       <file name=\"index.html\">                                                                                        // 4580\n         <div id=\"scrollArea\" ng-controller=\"ScrollController\">                                                        // 4581\n           <a ng-click=\"gotoBottom()\">Go to bottom</a>                                                                 // 4582\n           <a id=\"bottom\"></a> You're at the bottom!                                                                   // 4583\n         </div>                                                                                                        // 4584\n       </file>                                                                                                         // 4585\n       <file name=\"script.js\">                                                                                         // 4586\n         angular.module('anchorScrollExample', [])                                                                     // 4587\n           .controller('ScrollController', ['$scope', '$location', '$anchorScroll',                                    // 4588\n             function ($scope, $location, $anchorScroll) {                                                             // 4589\n               $scope.gotoBottom = function() {                                                                        // 4590\n                 // set the location.hash to the id of                                                                 // 4591\n                 // the element you wish to scroll to.                                                                 // 4592\n                 $location.hash('bottom');                                                                             // 4593\n                                                                                                                       // 4594\n                 // call $anchorScroll()                                                                               // 4595\n                 $anchorScroll();                                                                                      // 4596\n               };                                                                                                      // 4597\n             }]);                                                                                                      // 4598\n       </file>                                                                                                         // 4599\n       <file name=\"style.css\">                                                                                         // 4600\n         #scrollArea {                                                                                                 // 4601\n           height: 280px;                                                                                              // 4602\n           overflow: auto;                                                                                             // 4603\n         }                                                                                                             // 4604\n                                                                                                                       // 4605\n         #bottom {                                                                                                     // 4606\n           display: block;                                                                                             // 4607\n           margin-top: 2000px;                                                                                         // 4608\n         }                                                                                                             // 4609\n       </file>                                                                                                         // 4610\n     </example>                                                                                                        // 4611\n   *                                                                                                                   // 4612\n   * <hr />                                                                                                            // 4613\n   * The example below illustrates the use of a vertical scroll-offset (specified as a fixed value).                   // 4614\n   * See {@link ng.$anchorScroll#yOffset $anchorScroll.yOffset} for more details.                                      // 4615\n   *                                                                                                                   // 4616\n   * @example                                                                                                          // 4617\n     <example module=\"anchorScrollOffsetExample\">                                                                      // 4618\n       <file name=\"index.html\">                                                                                        // 4619\n         <div class=\"fixed-header\" ng-controller=\"headerCtrl\">                                                         // 4620\n           <a href=\"\" ng-click=\"gotoAnchor(x)\" ng-repeat=\"x in [1,2,3,4,5]\">                                           // 4621\n             Go to anchor {{x}}                                                                                        // 4622\n           </a>                                                                                                        // 4623\n         </div>                                                                                                        // 4624\n         <div id=\"anchor{{x}}\" class=\"anchor\" ng-repeat=\"x in [1,2,3,4,5]\">                                            // 4625\n           Anchor {{x}} of 5                                                                                           // 4626\n         </div>                                                                                                        // 4627\n       </file>                                                                                                         // 4628\n       <file name=\"script.js\">                                                                                         // 4629\n         angular.module('anchorScrollOffsetExample', [])                                                               // 4630\n           .run(['$anchorScroll', function($anchorScroll) {                                                            // 4631\n             $anchorScroll.yOffset = 50;   // always scroll by 50 extra pixels                                         // 4632\n           }])                                                                                                         // 4633\n           .controller('headerCtrl', ['$anchorScroll', '$location', '$scope',                                          // 4634\n             function ($anchorScroll, $location, $scope) {                                                             // 4635\n               $scope.gotoAnchor = function(x) {                                                                       // 4636\n                 var newHash = 'anchor' + x;                                                                           // 4637\n                 if ($location.hash() !== newHash) {                                                                   // 4638\n                   // set the $location.hash to `newHash` and                                                          // 4639\n                   // $anchorScroll will automatically scroll to it                                                    // 4640\n                   $location.hash('anchor' + x);                                                                       // 4641\n                 } else {                                                                                              // 4642\n                   // call $anchorScroll() explicitly,                                                                 // 4643\n                   // since $location.hash hasn't changed                                                              // 4644\n                   $anchorScroll();                                                                                    // 4645\n                 }                                                                                                     // 4646\n               };                                                                                                      // 4647\n             }                                                                                                         // 4648\n           ]);                                                                                                         // 4649\n       </file>                                                                                                         // 4650\n       <file name=\"style.css\">                                                                                         // 4651\n         body {                                                                                                        // 4652\n           padding-top: 50px;                                                                                          // 4653\n         }                                                                                                             // 4654\n                                                                                                                       // 4655\n         .anchor {                                                                                                     // 4656\n           border: 2px dashed DarkOrchid;                                                                              // 4657\n           padding: 10px 10px 200px 10px;                                                                              // 4658\n         }                                                                                                             // 4659\n                                                                                                                       // 4660\n         .fixed-header {                                                                                               // 4661\n           background-color: rgba(0, 0, 0, 0.2);                                                                       // 4662\n           height: 50px;                                                                                               // 4663\n           position: fixed;                                                                                            // 4664\n           top: 0; left: 0; right: 0;                                                                                  // 4665\n         }                                                                                                             // 4666\n                                                                                                                       // 4667\n         .fixed-header > a {                                                                                           // 4668\n           display: inline-block;                                                                                      // 4669\n           margin: 5px 15px;                                                                                           // 4670\n         }                                                                                                             // 4671\n       </file>                                                                                                         // 4672\n     </example>                                                                                                        // 4673\n   */                                                                                                                  // 4674\n  this.$get = ['$window', '$location', '$rootScope', function($window, $location, $rootScope) {                        // 4675\n    var document = $window.document;                                                                                   // 4676\n                                                                                                                       // 4677\n    // Helper function to get first anchor from a NodeList                                                             // 4678\n    // (using `Array#some()` instead of `angular#forEach()` since it's more performant                                 // 4679\n    //  and working in all supported browsers.)                                                                        // 4680\n    function getFirstAnchor(list) {                                                                                    // 4681\n      var result = null;                                                                                               // 4682\n      Array.prototype.some.call(list, function(element) {                                                              // 4683\n        if (nodeName_(element) === 'a') {                                                                              // 4684\n          result = element;                                                                                            // 4685\n          return true;                                                                                                 // 4686\n        }                                                                                                              // 4687\n      });                                                                                                              // 4688\n      return result;                                                                                                   // 4689\n    }                                                                                                                  // 4690\n                                                                                                                       // 4691\n    function getYOffset() {                                                                                            // 4692\n                                                                                                                       // 4693\n      var offset = scroll.yOffset;                                                                                     // 4694\n                                                                                                                       // 4695\n      if (isFunction(offset)) {                                                                                        // 4696\n        offset = offset();                                                                                             // 4697\n      } else if (isElement(offset)) {                                                                                  // 4698\n        var elem = offset[0];                                                                                          // 4699\n        var style = $window.getComputedStyle(elem);                                                                    // 4700\n        if (style.position !== 'fixed') {                                                                              // 4701\n          offset = 0;                                                                                                  // 4702\n        } else {                                                                                                       // 4703\n          offset = elem.getBoundingClientRect().bottom;                                                                // 4704\n        }                                                                                                              // 4705\n      } else if (!isNumber(offset)) {                                                                                  // 4706\n        offset = 0;                                                                                                    // 4707\n      }                                                                                                                // 4708\n                                                                                                                       // 4709\n      return offset;                                                                                                   // 4710\n    }                                                                                                                  // 4711\n                                                                                                                       // 4712\n    function scrollTo(elem) {                                                                                          // 4713\n      if (elem) {                                                                                                      // 4714\n        elem.scrollIntoView();                                                                                         // 4715\n                                                                                                                       // 4716\n        var offset = getYOffset();                                                                                     // 4717\n                                                                                                                       // 4718\n        if (offset) {                                                                                                  // 4719\n          // `offset` is the number of pixels we should scroll UP in order to align `elem` properly.                   // 4720\n          // This is true ONLY if the call to `elem.scrollIntoView()` initially aligns `elem` at the                   // 4721\n          // top of the viewport.                                                                                      // 4722\n          //                                                                                                           // 4723\n          // IF the number of pixels from the top of `elem` to the end of the page's content is less                   // 4724\n          // than the height of the viewport, then `elem.scrollIntoView()` will align the `elem` some                  // 4725\n          // way down the page.                                                                                        // 4726\n          //                                                                                                           // 4727\n          // This is often the case for elements near the bottom of the page.                                          // 4728\n          //                                                                                                           // 4729\n          // In such cases we do not need to scroll the whole `offset` up, just the difference between                 // 4730\n          // the top of the element and the offset, which is enough to align the top of `elem` at the                  // 4731\n          // desired position.                                                                                         // 4732\n          var elemTop = elem.getBoundingClientRect().top;                                                              // 4733\n          $window.scrollBy(0, elemTop - offset);                                                                       // 4734\n        }                                                                                                              // 4735\n      } else {                                                                                                         // 4736\n        $window.scrollTo(0, 0);                                                                                        // 4737\n      }                                                                                                                // 4738\n    }                                                                                                                  // 4739\n                                                                                                                       // 4740\n    function scroll(hash) {                                                                                            // 4741\n      hash = isString(hash) ? hash : $location.hash();                                                                 // 4742\n      var elm;                                                                                                         // 4743\n                                                                                                                       // 4744\n      // empty hash, scroll to the top of the page                                                                     // 4745\n      if (!hash) scrollTo(null);                                                                                       // 4746\n                                                                                                                       // 4747\n      // element with given id                                                                                         // 4748\n      else if ((elm = document.getElementById(hash))) scrollTo(elm);                                                   // 4749\n                                                                                                                       // 4750\n      // first anchor with given name :-D                                                                              // 4751\n      else if ((elm = getFirstAnchor(document.getElementsByName(hash)))) scrollTo(elm);                                // 4752\n                                                                                                                       // 4753\n      // no element and hash == 'top', scroll to the top of the page                                                   // 4754\n      else if (hash === 'top') scrollTo(null);                                                                         // 4755\n    }                                                                                                                  // 4756\n                                                                                                                       // 4757\n    // does not scroll when user clicks on anchor link that is currently on                                            // 4758\n    // (no url change, no $location.hash() change), browser native does scroll                                         // 4759\n    if (autoScrollingEnabled) {                                                                                        // 4760\n      $rootScope.$watch(function autoScrollWatch() {return $location.hash();},                                         // 4761\n        function autoScrollWatchAction(newVal, oldVal) {                                                               // 4762\n          // skip the initial scroll if $location.hash is empty                                                        // 4763\n          if (newVal === oldVal && newVal === '') return;                                                              // 4764\n                                                                                                                       // 4765\n          jqLiteDocumentLoaded(function() {                                                                            // 4766\n            $rootScope.$evalAsync(scroll);                                                                             // 4767\n          });                                                                                                          // 4768\n        });                                                                                                            // 4769\n    }                                                                                                                  // 4770\n                                                                                                                       // 4771\n    return scroll;                                                                                                     // 4772\n  }];                                                                                                                  // 4773\n}                                                                                                                      // 4774\n                                                                                                                       // 4775\nvar $animateMinErr = minErr('$animate');                                                                               // 4776\nvar ELEMENT_NODE = 1;                                                                                                  // 4777\nvar NG_ANIMATE_CLASSNAME = 'ng-animate';                                                                               // 4778\n                                                                                                                       // 4779\nfunction mergeClasses(a,b) {                                                                                           // 4780\n  if (!a && !b) return '';                                                                                             // 4781\n  if (!a) return b;                                                                                                    // 4782\n  if (!b) return a;                                                                                                    // 4783\n  if (isArray(a)) a = a.join(' ');                                                                                     // 4784\n  if (isArray(b)) b = b.join(' ');                                                                                     // 4785\n  return a + ' ' + b;                                                                                                  // 4786\n}                                                                                                                      // 4787\n                                                                                                                       // 4788\nfunction extractElementNode(element) {                                                                                 // 4789\n  for (var i = 0; i < element.length; i++) {                                                                           // 4790\n    var elm = element[i];                                                                                              // 4791\n    if (elm.nodeType === ELEMENT_NODE) {                                                                               // 4792\n      return elm;                                                                                                      // 4793\n    }                                                                                                                  // 4794\n  }                                                                                                                    // 4795\n}                                                                                                                      // 4796\n                                                                                                                       // 4797\nfunction splitClasses(classes) {                                                                                       // 4798\n  if (isString(classes)) {                                                                                             // 4799\n    classes = classes.split(' ');                                                                                      // 4800\n  }                                                                                                                    // 4801\n                                                                                                                       // 4802\n  // Use createMap() to prevent class assumptions involving property names in                                          // 4803\n  // Object.prototype                                                                                                  // 4804\n  var obj = createMap();                                                                                               // 4805\n  forEach(classes, function(klass) {                                                                                   // 4806\n    // sometimes the split leaves empty string values                                                                  // 4807\n    // incase extra spaces were applied to the options                                                                 // 4808\n    if (klass.length) {                                                                                                // 4809\n      obj[klass] = true;                                                                                               // 4810\n    }                                                                                                                  // 4811\n  });                                                                                                                  // 4812\n  return obj;                                                                                                          // 4813\n}                                                                                                                      // 4814\n                                                                                                                       // 4815\n// if any other type of options value besides an Object value is                                                       // 4816\n// passed into the $animate.method() animation then this helper code                                                   // 4817\n// will be run which will ignore it. While this patch is not the                                                       // 4818\n// greatest solution to this, a lot of existing plugins depend on                                                      // 4819\n// $animate to either call the callback (< 1.2) or return a promise                                                    // 4820\n// that can be changed. This helper function ensures that the options                                                  // 4821\n// are wiped clean incase a callback function is provided.                                                             // 4822\nfunction prepareAnimateOptions(options) {                                                                              // 4823\n  return isObject(options)                                                                                             // 4824\n      ? options                                                                                                        // 4825\n      : {};                                                                                                            // 4826\n}                                                                                                                      // 4827\n                                                                                                                       // 4828\nvar $$CoreAnimateRunnerProvider = function() {                                                                         // 4829\n  this.$get = ['$q', '$$rAF', function($q, $$rAF) {                                                                    // 4830\n    function AnimateRunner() {}                                                                                        // 4831\n    AnimateRunner.all = noop;                                                                                          // 4832\n    AnimateRunner.chain = noop;                                                                                        // 4833\n    AnimateRunner.prototype = {                                                                                        // 4834\n      end: noop,                                                                                                       // 4835\n      cancel: noop,                                                                                                    // 4836\n      resume: noop,                                                                                                    // 4837\n      pause: noop,                                                                                                     // 4838\n      complete: noop,                                                                                                  // 4839\n      then: function(pass, fail) {                                                                                     // 4840\n        return $q(function(resolve) {                                                                                  // 4841\n          $$rAF(function() {                                                                                           // 4842\n            resolve();                                                                                                 // 4843\n          });                                                                                                          // 4844\n        }).then(pass, fail);                                                                                           // 4845\n      }                                                                                                                // 4846\n    };                                                                                                                 // 4847\n    return AnimateRunner;                                                                                              // 4848\n  }];                                                                                                                  // 4849\n};                                                                                                                     // 4850\n                                                                                                                       // 4851\n// this is prefixed with Core since it conflicts with                                                                  // 4852\n// the animateQueueProvider defined in ngAnimate/animateQueue.js                                                       // 4853\nvar $$CoreAnimateQueueProvider = function() {                                                                          // 4854\n  var postDigestQueue = new HashMap();                                                                                 // 4855\n  var postDigestElements = [];                                                                                         // 4856\n                                                                                                                       // 4857\n  this.$get = ['$$AnimateRunner', '$rootScope',                                                                        // 4858\n       function($$AnimateRunner,   $rootScope) {                                                                       // 4859\n    return {                                                                                                           // 4860\n      enabled: noop,                                                                                                   // 4861\n      on: noop,                                                                                                        // 4862\n      off: noop,                                                                                                       // 4863\n      pin: noop,                                                                                                       // 4864\n                                                                                                                       // 4865\n      push: function(element, event, options, domOperation) {                                                          // 4866\n        domOperation        && domOperation();                                                                         // 4867\n                                                                                                                       // 4868\n        options = options || {};                                                                                       // 4869\n        options.from        && element.css(options.from);                                                              // 4870\n        options.to          && element.css(options.to);                                                                // 4871\n                                                                                                                       // 4872\n        if (options.addClass || options.removeClass) {                                                                 // 4873\n          addRemoveClassesPostDigest(element, options.addClass, options.removeClass);                                  // 4874\n        }                                                                                                              // 4875\n                                                                                                                       // 4876\n        return new $$AnimateRunner(); // jshint ignore:line                                                            // 4877\n      }                                                                                                                // 4878\n    };                                                                                                                 // 4879\n                                                                                                                       // 4880\n                                                                                                                       // 4881\n    function updateData(data, classes, value) {                                                                        // 4882\n      var changed = false;                                                                                             // 4883\n      if (classes) {                                                                                                   // 4884\n        classes = isString(classes) ? classes.split(' ') :                                                             // 4885\n                  isArray(classes) ? classes : [];                                                                     // 4886\n        forEach(classes, function(className) {                                                                         // 4887\n          if (className) {                                                                                             // 4888\n            changed = true;                                                                                            // 4889\n            data[className] = value;                                                                                   // 4890\n          }                                                                                                            // 4891\n        });                                                                                                            // 4892\n      }                                                                                                                // 4893\n      return changed;                                                                                                  // 4894\n    }                                                                                                                  // 4895\n                                                                                                                       // 4896\n    function handleCSSClassChanges() {                                                                                 // 4897\n      forEach(postDigestElements, function(element) {                                                                  // 4898\n        var data = postDigestQueue.get(element);                                                                       // 4899\n        if (data) {                                                                                                    // 4900\n          var existing = splitClasses(element.attr('class'));                                                          // 4901\n          var toAdd = '';                                                                                              // 4902\n          var toRemove = '';                                                                                           // 4903\n          forEach(data, function(status, className) {                                                                  // 4904\n            var hasClass = !!existing[className];                                                                      // 4905\n            if (status !== hasClass) {                                                                                 // 4906\n              if (status) {                                                                                            // 4907\n                toAdd += (toAdd.length ? ' ' : '') + className;                                                        // 4908\n              } else {                                                                                                 // 4909\n                toRemove += (toRemove.length ? ' ' : '') + className;                                                  // 4910\n              }                                                                                                        // 4911\n            }                                                                                                          // 4912\n          });                                                                                                          // 4913\n                                                                                                                       // 4914\n          forEach(element, function(elm) {                                                                             // 4915\n            toAdd    && jqLiteAddClass(elm, toAdd);                                                                    // 4916\n            toRemove && jqLiteRemoveClass(elm, toRemove);                                                              // 4917\n          });                                                                                                          // 4918\n          postDigestQueue.remove(element);                                                                             // 4919\n        }                                                                                                              // 4920\n      });                                                                                                              // 4921\n      postDigestElements.length = 0;                                                                                   // 4922\n    }                                                                                                                  // 4923\n                                                                                                                       // 4924\n                                                                                                                       // 4925\n    function addRemoveClassesPostDigest(element, add, remove) {                                                        // 4926\n      var data = postDigestQueue.get(element) || {};                                                                   // 4927\n                                                                                                                       // 4928\n      var classesAdded = updateData(data, add, true);                                                                  // 4929\n      var classesRemoved = updateData(data, remove, false);                                                            // 4930\n                                                                                                                       // 4931\n      if (classesAdded || classesRemoved) {                                                                            // 4932\n                                                                                                                       // 4933\n        postDigestQueue.put(element, data);                                                                            // 4934\n        postDigestElements.push(element);                                                                              // 4935\n                                                                                                                       // 4936\n        if (postDigestElements.length === 1) {                                                                         // 4937\n          $rootScope.$$postDigest(handleCSSClassChanges);                                                              // 4938\n        }                                                                                                              // 4939\n      }                                                                                                                // 4940\n    }                                                                                                                  // 4941\n  }];                                                                                                                  // 4942\n};                                                                                                                     // 4943\n                                                                                                                       // 4944\n/**                                                                                                                    // 4945\n * @ngdoc provider                                                                                                     // 4946\n * @name $animateProvider                                                                                              // 4947\n *                                                                                                                     // 4948\n * @description                                                                                                        // 4949\n * Default implementation of $animate that doesn't perform any animations, instead just                                // 4950\n * synchronously performs DOM updates and resolves the returned runner promise.                                        // 4951\n *                                                                                                                     // 4952\n * In order to enable animations the `ngAnimate` module has to be loaded.                                              // 4953\n *                                                                                                                     // 4954\n * To see the functional implementation check out `src/ngAnimate/animate.js`.                                          // 4955\n */                                                                                                                    // 4956\nvar $AnimateProvider = ['$provide', function($provide) {                                                               // 4957\n  var provider = this;                                                                                                 // 4958\n                                                                                                                       // 4959\n  this.$$registeredAnimations = Object.create(null);                                                                   // 4960\n                                                                                                                       // 4961\n   /**                                                                                                                 // 4962\n   * @ngdoc method                                                                                                     // 4963\n   * @name $animateProvider#register                                                                                   // 4964\n   *                                                                                                                   // 4965\n   * @description                                                                                                      // 4966\n   * Registers a new injectable animation factory function. The factory function produces the                          // 4967\n   * animation object which contains callback functions for each event that is expected to be                          // 4968\n   * animated.                                                                                                         // 4969\n   *                                                                                                                   // 4970\n   *   * `eventFn`: `function(element, ... , doneFunction, options)`                                                   // 4971\n   *   The element to animate, the `doneFunction` and the options fed into the animation. Depending                    // 4972\n   *   on the type of animation additional arguments will be injected into the animation function. The                 // 4973\n   *   list below explains the function signatures for the different animation methods:                                // 4974\n   *                                                                                                                   // 4975\n   *   - setClass: function(element, addedClasses, removedClasses, doneFunction, options)                              // 4976\n   *   - addClass: function(element, addedClasses, doneFunction, options)                                              // 4977\n   *   - removeClass: function(element, removedClasses, doneFunction, options)                                         // 4978\n   *   - enter, leave, move: function(element, doneFunction, options)                                                  // 4979\n   *   - animate: function(element, fromStyles, toStyles, doneFunction, options)                                       // 4980\n   *                                                                                                                   // 4981\n   *   Make sure to trigger the `doneFunction` once the animation is fully complete.                                   // 4982\n   *                                                                                                                   // 4983\n   * ```js                                                                                                             // 4984\n   *   return {                                                                                                        // 4985\n   *     //enter, leave, move signature                                                                                // 4986\n   *     eventFn : function(element, done, options) {                                                                  // 4987\n   *       //code to run the animation                                                                                 // 4988\n   *       //once complete, then run done()                                                                            // 4989\n   *       return function endFunction(wasCancelled) {                                                                 // 4990\n   *         //code to cancel the animation                                                                            // 4991\n   *       }                                                                                                           // 4992\n   *     }                                                                                                             // 4993\n   *   }                                                                                                               // 4994\n   * ```                                                                                                               // 4995\n   *                                                                                                                   // 4996\n   * @param {string} name The name of the animation (this is what the class-based CSS value will be compared to).      // 4997\n   * @param {Function} factory The factory function that will be executed to return the animation                      // 4998\n   *                           object.                                                                                 // 4999\n   */                                                                                                                  // 5000\n  this.register = function(name, factory) {                                                                            // 5001\n    if (name && name.charAt(0) !== '.') {                                                                              // 5002\n      throw $animateMinErr('notcsel', \"Expecting class selector starting with '.' got '{0}'.\", name);                  // 5003\n    }                                                                                                                  // 5004\n                                                                                                                       // 5005\n    var key = name + '-animation';                                                                                     // 5006\n    provider.$$registeredAnimations[name.substr(1)] = key;                                                             // 5007\n    $provide.factory(key, factory);                                                                                    // 5008\n  };                                                                                                                   // 5009\n                                                                                                                       // 5010\n  /**                                                                                                                  // 5011\n   * @ngdoc method                                                                                                     // 5012\n   * @name $animateProvider#classNameFilter                                                                            // 5013\n   *                                                                                                                   // 5014\n   * @description                                                                                                      // 5015\n   * Sets and/or returns the CSS class regular expression that is checked when performing                              // 5016\n   * an animation. Upon bootstrap the classNameFilter value is not set at all and will                                 // 5017\n   * therefore enable $animate to attempt to perform an animation on any element that is triggered.                    // 5018\n   * When setting the `classNameFilter` value, animations will only be performed on elements                           // 5019\n   * that successfully match the filter expression. This in turn can boost performance                                 // 5020\n   * for low-powered devices as well as applications containing a lot of structural operations.                        // 5021\n   * @param {RegExp=} expression The className expression which will be checked against all animations                 // 5022\n   * @return {RegExp} The current CSS className expression value. If null then there is no expression value            // 5023\n   */                                                                                                                  // 5024\n  this.classNameFilter = function(expression) {                                                                        // 5025\n    if (arguments.length === 1) {                                                                                      // 5026\n      this.$$classNameFilter = (expression instanceof RegExp) ? expression : null;                                     // 5027\n      if (this.$$classNameFilter) {                                                                                    // 5028\n        var reservedRegex = new RegExp(\"(\\\\s+|\\\\/)\" + NG_ANIMATE_CLASSNAME + \"(\\\\s+|\\\\/)\");                            // 5029\n        if (reservedRegex.test(this.$$classNameFilter.toString())) {                                                   // 5030\n          throw $animateMinErr('nongcls','$animateProvider.classNameFilter(regex) prohibits accepting a regex value which matches/contains the \"{0}\" CSS class.', NG_ANIMATE_CLASSNAME);\n                                                                                                                       // 5032\n        }                                                                                                              // 5033\n      }                                                                                                                // 5034\n    }                                                                                                                  // 5035\n    return this.$$classNameFilter;                                                                                     // 5036\n  };                                                                                                                   // 5037\n                                                                                                                       // 5038\n  this.$get = ['$$animateQueue', function($$animateQueue) {                                                            // 5039\n    function domInsert(element, parentElement, afterElement) {                                                         // 5040\n      // if for some reason the previous element was removed                                                           // 5041\n      // from the dom sometime before this code runs then let's                                                        // 5042\n      // just stick to using the parent element as the anchor                                                          // 5043\n      if (afterElement) {                                                                                              // 5044\n        var afterNode = extractElementNode(afterElement);                                                              // 5045\n        if (afterNode && !afterNode.parentNode && !afterNode.previousElementSibling) {                                 // 5046\n          afterElement = null;                                                                                         // 5047\n        }                                                                                                              // 5048\n      }                                                                                                                // 5049\n      afterElement ? afterElement.after(element) : parentElement.prepend(element);                                     // 5050\n    }                                                                                                                  // 5051\n                                                                                                                       // 5052\n    /**                                                                                                                // 5053\n     * @ngdoc service                                                                                                  // 5054\n     * @name $animate                                                                                                  // 5055\n     * @description The $animate service exposes a series of DOM utility methods that provide support                  // 5056\n     * for animation hooks. The default behavior is the application of DOM operations, however,                        // 5057\n     * when an animation is detected (and animations are enabled), $animate will do the heavy lifting                  // 5058\n     * to ensure that animation runs with the triggered DOM operation.                                                 // 5059\n     *                                                                                                                 // 5060\n     * By default $animate doesn't trigger an animations. This is because the `ngAnimate` module isn't                 // 5061\n     * included and only when it is active then the animation hooks that `$animate` triggers will be                   // 5062\n     * functional. Once active then all structural `ng-` directives will trigger animations as they perform            // 5063\n     * their DOM-related operations (enter, leave and move). Other directives such as `ngClass`,                       // 5064\n     * `ngShow`, `ngHide` and `ngMessages` also provide support for animations.                                        // 5065\n     *                                                                                                                 // 5066\n     * It is recommended that the`$animate` service is always used when executing DOM-related procedures within directives.\n     *                                                                                                                 // 5068\n     * To learn more about enabling animation support, click here to visit the                                         // 5069\n     * {@link ngAnimate ngAnimate module page}.                                                                        // 5070\n     */                                                                                                                // 5071\n    return {                                                                                                           // 5072\n      // we don't call it directly since non-existant arguments may                                                    // 5073\n      // be interpreted as null within the sub enabled function                                                        // 5074\n                                                                                                                       // 5075\n      /**                                                                                                              // 5076\n       *                                                                                                               // 5077\n       * @ngdoc method                                                                                                 // 5078\n       * @name $animate#on                                                                                             // 5079\n       * @kind function                                                                                                // 5080\n       * @description Sets up an event listener to fire whenever the animation event (enter, leave, move, etc...)      // 5081\n       *    has fired on the given element or among any of its children. Once the listener is fired, the provided callback\n       *    is fired with the following params:                                                                        // 5083\n       *                                                                                                               // 5084\n       * ```js                                                                                                         // 5085\n       * $animate.on('enter', container,                                                                               // 5086\n       *    function callback(element, phase) {                                                                        // 5087\n       *      // cool we detected an enter animation within the container                                              // 5088\n       *    }                                                                                                          // 5089\n       * );                                                                                                            // 5090\n       * ```                                                                                                           // 5091\n       *                                                                                                               // 5092\n       * @param {string} event the animation event that will be captured (e.g. enter, leave, move, addClass, removeClass, etc...)\n       * @param {DOMElement} container the container element that will capture each of the animation events that are fired on itself\n       *     as well as among its children                                                                             // 5095\n       * @param {Function} callback the callback function that will be fired when the listener is triggered            // 5096\n       *                                                                                                               // 5097\n       * The arguments present in the callback function are:                                                           // 5098\n       * * `element` - The captured DOM element that the animation was fired on.                                       // 5099\n       * * `phase` - The phase of the animation. The two possible phases are **start** (when the animation starts) and **close** (when it ends).\n       */                                                                                                              // 5101\n      on: $$animateQueue.on,                                                                                           // 5102\n                                                                                                                       // 5103\n      /**                                                                                                              // 5104\n       *                                                                                                               // 5105\n       * @ngdoc method                                                                                                 // 5106\n       * @name $animate#off                                                                                            // 5107\n       * @kind function                                                                                                // 5108\n       * @description Deregisters an event listener based on the event which has been associated with the provided element. This method\n       * can be used in three different ways depending on the arguments:                                               // 5110\n       *                                                                                                               // 5111\n       * ```js                                                                                                         // 5112\n       * // remove all the animation event listeners listening for `enter`                                             // 5113\n       * $animate.off('enter');                                                                                        // 5114\n       *                                                                                                               // 5115\n       * // remove all the animation event listeners listening for `enter` on the given element and its children       // 5116\n       * $animate.off('enter', container);                                                                             // 5117\n       *                                                                                                               // 5118\n       * // remove the event listener function provided by `listenerFn` that is set                                    // 5119\n       * // to listen for `enter` on the given `element` as well as its children                                       // 5120\n       * $animate.off('enter', container, callback);                                                                   // 5121\n       * ```                                                                                                           // 5122\n       *                                                                                                               // 5123\n       * @param {string} event the animation event (e.g. enter, leave, move, addClass, removeClass, etc...)            // 5124\n       * @param {DOMElement=} container the container element the event listener was placed on                         // 5125\n       * @param {Function=} callback the callback function that was registered as the listener                         // 5126\n       */                                                                                                              // 5127\n      off: $$animateQueue.off,                                                                                         // 5128\n                                                                                                                       // 5129\n      /**                                                                                                              // 5130\n       * @ngdoc method                                                                                                 // 5131\n       * @name $animate#pin                                                                                            // 5132\n       * @kind function                                                                                                // 5133\n       * @description Associates the provided element with a host parent element to allow the element to be animated even if it exists\n       *    outside of the DOM structure of the Angular application. By doing so, any animation triggered via `$animate` can be issued on the\n       *    element despite being outside the realm of the application or within another application. Say for example if the application\n       *    was bootstrapped on an element that is somewhere inside of the `<body>` tag, but we wanted to allow for an element to be situated\n       *    as a direct child of `document.body`, then this can be achieved by pinning the element via `$animate.pin(element)`. Keep in mind\n       *    that calling `$animate.pin(element, parentElement)` will not actually insert into the DOM anywhere; it will just create the association.\n       *                                                                                                               // 5140\n       *    Note that this feature is only active when the `ngAnimate` module is used.                                 // 5141\n       *                                                                                                               // 5142\n       * @param {DOMElement} element the external element that will be pinned                                          // 5143\n       * @param {DOMElement} parentElement the host parent element that will be associated with the external element   // 5144\n       */                                                                                                              // 5145\n      pin: $$animateQueue.pin,                                                                                         // 5146\n                                                                                                                       // 5147\n      /**                                                                                                              // 5148\n       *                                                                                                               // 5149\n       * @ngdoc method                                                                                                 // 5150\n       * @name $animate#enabled                                                                                        // 5151\n       * @kind function                                                                                                // 5152\n       * @description Used to get and set whether animations are enabled or not on the entire application or on an element and its children. This\n       * function can be called in four ways:                                                                          // 5154\n       *                                                                                                               // 5155\n       * ```js                                                                                                         // 5156\n       * // returns true or false                                                                                      // 5157\n       * $animate.enabled();                                                                                           // 5158\n       *                                                                                                               // 5159\n       * // changes the enabled state for all animations                                                               // 5160\n       * $animate.enabled(false);                                                                                      // 5161\n       * $animate.enabled(true);                                                                                       // 5162\n       *                                                                                                               // 5163\n       * // returns true or false if animations are enabled for an element                                             // 5164\n       * $animate.enabled(element);                                                                                    // 5165\n       *                                                                                                               // 5166\n       * // changes the enabled state for an element and its children                                                  // 5167\n       * $animate.enabled(element, true);                                                                              // 5168\n       * $animate.enabled(element, false);                                                                             // 5169\n       * ```                                                                                                           // 5170\n       *                                                                                                               // 5171\n       * @param {DOMElement=} element the element that will be considered for checking/setting the enabled state       // 5172\n       * @param {boolean=} enabled whether or not the animations will be enabled for the element                       // 5173\n       *                                                                                                               // 5174\n       * @return {boolean} whether or not animations are enabled                                                       // 5175\n       */                                                                                                              // 5176\n      enabled: $$animateQueue.enabled,                                                                                 // 5177\n                                                                                                                       // 5178\n      /**                                                                                                              // 5179\n       * @ngdoc method                                                                                                 // 5180\n       * @name $animate#cancel                                                                                         // 5181\n       * @kind function                                                                                                // 5182\n       * @description Cancels the provided animation.                                                                  // 5183\n       *                                                                                                               // 5184\n       * @param {Promise} animationPromise The animation promise that is returned when an animation is started.        // 5185\n       */                                                                                                              // 5186\n      cancel: function(runner) {                                                                                       // 5187\n        runner.end && runner.end();                                                                                    // 5188\n      },                                                                                                               // 5189\n                                                                                                                       // 5190\n      /**                                                                                                              // 5191\n       *                                                                                                               // 5192\n       * @ngdoc method                                                                                                 // 5193\n       * @name $animate#enter                                                                                          // 5194\n       * @kind function                                                                                                // 5195\n       * @description Inserts the element into the DOM either after the `after` element (if provided) or               // 5196\n       *   as the first child within the `parent` element and then triggers an animation.                              // 5197\n       *   A promise is returned that will be resolved during the next digest once the animation                       // 5198\n       *   has completed.                                                                                              // 5199\n       *                                                                                                               // 5200\n       * @param {DOMElement} element the element which will be inserted into the DOM                                   // 5201\n       * @param {DOMElement} parent the parent element which will append the element as                                // 5202\n       *   a child (so long as the after element is not present)                                                       // 5203\n       * @param {DOMElement=} after the sibling element after which the element will be appended                       // 5204\n       * @param {object=} options an optional collection of options/styles that will be applied to the element         // 5205\n       *                                                                                                               // 5206\n       * @return {Promise} the animation callback promise                                                              // 5207\n       */                                                                                                              // 5208\n      enter: function(element, parent, after, options) {                                                               // 5209\n        parent = parent && jqLite(parent);                                                                             // 5210\n        after = after && jqLite(after);                                                                                // 5211\n        parent = parent || after.parent();                                                                             // 5212\n        domInsert(element, parent, after);                                                                             // 5213\n        return $$animateQueue.push(element, 'enter', prepareAnimateOptions(options));                                  // 5214\n      },                                                                                                               // 5215\n                                                                                                                       // 5216\n      /**                                                                                                              // 5217\n       *                                                                                                               // 5218\n       * @ngdoc method                                                                                                 // 5219\n       * @name $animate#move                                                                                           // 5220\n       * @kind function                                                                                                // 5221\n       * @description Inserts (moves) the element into its new position in the DOM either after                        // 5222\n       *   the `after` element (if provided) or as the first child within the `parent` element                         // 5223\n       *   and then triggers an animation. A promise is returned that will be resolved                                 // 5224\n       *   during the next digest once the animation has completed.                                                    // 5225\n       *                                                                                                               // 5226\n       * @param {DOMElement} element the element which will be moved into the new DOM position                         // 5227\n       * @param {DOMElement} parent the parent element which will append the element as                                // 5228\n       *   a child (so long as the after element is not present)                                                       // 5229\n       * @param {DOMElement=} after the sibling element after which the element will be appended                       // 5230\n       * @param {object=} options an optional collection of options/styles that will be applied to the element         // 5231\n       *                                                                                                               // 5232\n       * @return {Promise} the animation callback promise                                                              // 5233\n       */                                                                                                              // 5234\n      move: function(element, parent, after, options) {                                                                // 5235\n        parent = parent && jqLite(parent);                                                                             // 5236\n        after = after && jqLite(after);                                                                                // 5237\n        parent = parent || after.parent();                                                                             // 5238\n        domInsert(element, parent, after);                                                                             // 5239\n        return $$animateQueue.push(element, 'move', prepareAnimateOptions(options));                                   // 5240\n      },                                                                                                               // 5241\n                                                                                                                       // 5242\n      /**                                                                                                              // 5243\n       * @ngdoc method                                                                                                 // 5244\n       * @name $animate#leave                                                                                          // 5245\n       * @kind function                                                                                                // 5246\n       * @description Triggers an animation and then removes the element from the DOM.                                 // 5247\n       * When the function is called a promise is returned that will be resolved during the next                       // 5248\n       * digest once the animation has completed.                                                                      // 5249\n       *                                                                                                               // 5250\n       * @param {DOMElement} element the element which will be removed from the DOM                                    // 5251\n       * @param {object=} options an optional collection of options/styles that will be applied to the element         // 5252\n       *                                                                                                               // 5253\n       * @return {Promise} the animation callback promise                                                              // 5254\n       */                                                                                                              // 5255\n      leave: function(element, options) {                                                                              // 5256\n        return $$animateQueue.push(element, 'leave', prepareAnimateOptions(options), function() {                      // 5257\n          element.remove();                                                                                            // 5258\n        });                                                                                                            // 5259\n      },                                                                                                               // 5260\n                                                                                                                       // 5261\n      /**                                                                                                              // 5262\n       * @ngdoc method                                                                                                 // 5263\n       * @name $animate#addClass                                                                                       // 5264\n       * @kind function                                                                                                // 5265\n       *                                                                                                               // 5266\n       * @description Triggers an addClass animation surrounding the addition of the provided CSS class(es). Upon      // 5267\n       *   execution, the addClass operation will only be handled after the next digest and it will not trigger an     // 5268\n       *   animation if element already contains the CSS class or if the class is removed at a later step.             // 5269\n       *   Note that class-based animations are treated differently compared to structural animations                  // 5270\n       *   (like enter, move and leave) since the CSS classes may be added/removed at different points                 // 5271\n       *   depending if CSS or JavaScript animations are used.                                                         // 5272\n       *                                                                                                               // 5273\n       * @param {DOMElement} element the element which the CSS classes will be applied to                              // 5274\n       * @param {string} className the CSS class(es) that will be added (multiple classes are separated via spaces)    // 5275\n       * @param {object=} options an optional collection of options/styles that will be applied to the element         // 5276\n       *                                                                                                               // 5277\n       * @return {Promise} the animation callback promise                                                              // 5278\n       */                                                                                                              // 5279\n      addClass: function(element, className, options) {                                                                // 5280\n        options = prepareAnimateOptions(options);                                                                      // 5281\n        options.addClass = mergeClasses(options.addclass, className);                                                  // 5282\n        return $$animateQueue.push(element, 'addClass', options);                                                      // 5283\n      },                                                                                                               // 5284\n                                                                                                                       // 5285\n      /**                                                                                                              // 5286\n       * @ngdoc method                                                                                                 // 5287\n       * @name $animate#removeClass                                                                                    // 5288\n       * @kind function                                                                                                // 5289\n       *                                                                                                               // 5290\n       * @description Triggers a removeClass animation surrounding the removal of the provided CSS class(es). Upon     // 5291\n       *   execution, the removeClass operation will only be handled after the next digest and it will not trigger an  // 5292\n       *   animation if element does not contain the CSS class or if the class is added at a later step.               // 5293\n       *   Note that class-based animations are treated differently compared to structural animations                  // 5294\n       *   (like enter, move and leave) since the CSS classes may be added/removed at different points                 // 5295\n       *   depending if CSS or JavaScript animations are used.                                                         // 5296\n       *                                                                                                               // 5297\n       * @param {DOMElement} element the element which the CSS classes will be applied to                              // 5298\n       * @param {string} className the CSS class(es) that will be removed (multiple classes are separated via spaces)  // 5299\n       * @param {object=} options an optional collection of options/styles that will be applied to the element         // 5300\n       *                                                                                                               // 5301\n       * @return {Promise} the animation callback promise                                                              // 5302\n       */                                                                                                              // 5303\n      removeClass: function(element, className, options) {                                                             // 5304\n        options = prepareAnimateOptions(options);                                                                      // 5305\n        options.removeClass = mergeClasses(options.removeClass, className);                                            // 5306\n        return $$animateQueue.push(element, 'removeClass', options);                                                   // 5307\n      },                                                                                                               // 5308\n                                                                                                                       // 5309\n      /**                                                                                                              // 5310\n       * @ngdoc method                                                                                                 // 5311\n       * @name $animate#setClass                                                                                       // 5312\n       * @kind function                                                                                                // 5313\n       *                                                                                                               // 5314\n       * @description Performs both the addition and removal of a CSS classes on an element and (during the process)   // 5315\n       *    triggers an animation surrounding the class addition/removal. Much like `$animate.addClass` and            // 5316\n       *    `$animate.removeClass`, `setClass` will only evaluate the classes being added/removed once a digest has    // 5317\n       *    passed. Note that class-based animations are treated differently compared to structural animations         // 5318\n       *    (like enter, move and leave) since the CSS classes may be added/removed at different points                // 5319\n       *    depending if CSS or JavaScript animations are used.                                                        // 5320\n       *                                                                                                               // 5321\n       * @param {DOMElement} element the element which the CSS classes will be applied to                              // 5322\n       * @param {string} add the CSS class(es) that will be added (multiple classes are separated via spaces)          // 5323\n       * @param {string} remove the CSS class(es) that will be removed (multiple classes are separated via spaces)     // 5324\n       * @param {object=} options an optional collection of options/styles that will be applied to the element         // 5325\n       *                                                                                                               // 5326\n       * @return {Promise} the animation callback promise                                                              // 5327\n       */                                                                                                              // 5328\n      setClass: function(element, add, remove, options) {                                                              // 5329\n        options = prepareAnimateOptions(options);                                                                      // 5330\n        options.addClass = mergeClasses(options.addClass, add);                                                        // 5331\n        options.removeClass = mergeClasses(options.removeClass, remove);                                               // 5332\n        return $$animateQueue.push(element, 'setClass', options);                                                      // 5333\n      },                                                                                                               // 5334\n                                                                                                                       // 5335\n      /**                                                                                                              // 5336\n       * @ngdoc method                                                                                                 // 5337\n       * @name $animate#animate                                                                                        // 5338\n       * @kind function                                                                                                // 5339\n       *                                                                                                               // 5340\n       * @description Performs an inline animation on the element which applies the provided to and from CSS styles to the element.\n       * If any detected CSS transition, keyframe or JavaScript matches the provided className value then the animation will take\n       * on the provided styles. For example, if a transition animation is set for the given className then the provided from and\n       * to styles will be applied alongside the given transition. If a JavaScript animation is detected then the provided styles\n       * will be given in as function paramters into the `animate` method (or as apart of the `options` parameter).    // 5345\n       *                                                                                                               // 5346\n       * @param {DOMElement} element the element which the CSS styles will be applied to                               // 5347\n       * @param {object} from the from (starting) CSS styles that will be applied to the element and across the animation.\n       * @param {object} to the to (destination) CSS styles that will be applied to the element and across the animation.\n       * @param {string=} className an optional CSS class that will be applied to the element for the duration of the animation. If\n       *    this value is left as empty then a CSS class of `ng-inline-animate` will be applied to the element.        // 5351\n       *    (Note that if no animation is detected then this value will not be appplied to the element.)               // 5352\n       * @param {object=} options an optional collection of options/styles that will be applied to the element         // 5353\n       *                                                                                                               // 5354\n       * @return {Promise} the animation callback promise                                                              // 5355\n       */                                                                                                              // 5356\n      animate: function(element, from, to, className, options) {                                                       // 5357\n        options = prepareAnimateOptions(options);                                                                      // 5358\n        options.from = options.from ? extend(options.from, from) : from;                                               // 5359\n        options.to   = options.to   ? extend(options.to, to)     : to;                                                 // 5360\n                                                                                                                       // 5361\n        className = className || 'ng-inline-animate';                                                                  // 5362\n        options.tempClasses = mergeClasses(options.tempClasses, className);                                            // 5363\n        return $$animateQueue.push(element, 'animate', options);                                                       // 5364\n      }                                                                                                                // 5365\n    };                                                                                                                 // 5366\n  }];                                                                                                                  // 5367\n}];                                                                                                                    // 5368\n                                                                                                                       // 5369\n/**                                                                                                                    // 5370\n * @ngdoc service                                                                                                      // 5371\n * @name $animateCss                                                                                                   // 5372\n * @kind object                                                                                                        // 5373\n *                                                                                                                     // 5374\n * @description                                                                                                        // 5375\n * This is the core version of `$animateCss`. By default, only when the `ngAnimate` is included,                       // 5376\n * then the `$animateCss` service will actually perform animations.                                                    // 5377\n *                                                                                                                     // 5378\n * Click here {@link ngAnimate.$animateCss to read the documentation for $animateCss}.                                 // 5379\n */                                                                                                                    // 5380\nvar $CoreAnimateCssProvider = function() {                                                                             // 5381\n  this.$get = ['$$rAF', '$q', function($$rAF, $q) {                                                                    // 5382\n                                                                                                                       // 5383\n    var RAFPromise = function() {};                                                                                    // 5384\n    RAFPromise.prototype = {                                                                                           // 5385\n      done: function(cancel) {                                                                                         // 5386\n        this.defer && this.defer[cancel === true ? 'reject' : 'resolve']();                                            // 5387\n      },                                                                                                               // 5388\n      end: function() {                                                                                                // 5389\n        this.done();                                                                                                   // 5390\n      },                                                                                                               // 5391\n      cancel: function() {                                                                                             // 5392\n        this.done(true);                                                                                               // 5393\n      },                                                                                                               // 5394\n      getPromise: function() {                                                                                         // 5395\n        if (!this.defer) {                                                                                             // 5396\n          this.defer = $q.defer();                                                                                     // 5397\n        }                                                                                                              // 5398\n        return this.defer.promise;                                                                                     // 5399\n      },                                                                                                               // 5400\n      then: function(f1,f2) {                                                                                          // 5401\n        return this.getPromise().then(f1,f2);                                                                          // 5402\n      },                                                                                                               // 5403\n      'catch': function(f1) {                                                                                          // 5404\n        return this.getPromise()['catch'](f1);                                                                         // 5405\n      },                                                                                                               // 5406\n      'finally': function(f1) {                                                                                        // 5407\n        return this.getPromise()['finally'](f1);                                                                       // 5408\n      }                                                                                                                // 5409\n    };                                                                                                                 // 5410\n                                                                                                                       // 5411\n    return function(element, options) {                                                                                // 5412\n      // there is no point in applying the styles since                                                                // 5413\n      // there is no animation that goes on at all in                                                                  // 5414\n      // this version of $animateCss.                                                                                  // 5415\n      if (options.cleanupStyles) {                                                                                     // 5416\n        options.from = options.to = null;                                                                              // 5417\n      }                                                                                                                // 5418\n                                                                                                                       // 5419\n      if (options.from) {                                                                                              // 5420\n        element.css(options.from);                                                                                     // 5421\n        options.from = null;                                                                                           // 5422\n      }                                                                                                                // 5423\n                                                                                                                       // 5424\n      var closed, runner = new RAFPromise();                                                                           // 5425\n      return {                                                                                                         // 5426\n        start: run,                                                                                                    // 5427\n        end: run                                                                                                       // 5428\n      };                                                                                                               // 5429\n                                                                                                                       // 5430\n      function run() {                                                                                                 // 5431\n        $$rAF(function() {                                                                                             // 5432\n          close();                                                                                                     // 5433\n          if (!closed) {                                                                                               // 5434\n            runner.done();                                                                                             // 5435\n          }                                                                                                            // 5436\n          closed = true;                                                                                               // 5437\n        });                                                                                                            // 5438\n        return runner;                                                                                                 // 5439\n      }                                                                                                                // 5440\n                                                                                                                       // 5441\n      function close() {                                                                                               // 5442\n        if (options.addClass) {                                                                                        // 5443\n          element.addClass(options.addClass);                                                                          // 5444\n          options.addClass = null;                                                                                     // 5445\n        }                                                                                                              // 5446\n        if (options.removeClass) {                                                                                     // 5447\n          element.removeClass(options.removeClass);                                                                    // 5448\n          options.removeClass = null;                                                                                  // 5449\n        }                                                                                                              // 5450\n        if (options.to) {                                                                                              // 5451\n          element.css(options.to);                                                                                     // 5452\n          options.to = null;                                                                                           // 5453\n        }                                                                                                              // 5454\n      }                                                                                                                // 5455\n    };                                                                                                                 // 5456\n  }];                                                                                                                  // 5457\n};                                                                                                                     // 5458\n                                                                                                                       // 5459\n/* global stripHash: true */                                                                                           // 5460\n                                                                                                                       // 5461\n/**                                                                                                                    // 5462\n * ! This is a private undocumented service !                                                                          // 5463\n *                                                                                                                     // 5464\n * @name $browser                                                                                                      // 5465\n * @requires $log                                                                                                      // 5466\n * @description                                                                                                        // 5467\n * This object has two goals:                                                                                          // 5468\n *                                                                                                                     // 5469\n * - hide all the global state in the browser caused by the window object                                              // 5470\n * - abstract away all the browser specific features and inconsistencies                                               // 5471\n *                                                                                                                     // 5472\n * For tests we provide {@link ngMock.$browser mock implementation} of the `$browser`                                  // 5473\n * service, which can be used for convenient testing of the application without the interaction with                   // 5474\n * the real browser apis.                                                                                              // 5475\n */                                                                                                                    // 5476\n/**                                                                                                                    // 5477\n * @param {object} window The global window object.                                                                    // 5478\n * @param {object} document jQuery wrapped document.                                                                   // 5479\n * @param {object} $log window.console or an object with the same interface.                                           // 5480\n * @param {object} $sniffer $sniffer service                                                                           // 5481\n */                                                                                                                    // 5482\nfunction Browser(window, document, $log, $sniffer) {                                                                   // 5483\n  var self = this,                                                                                                     // 5484\n      rawDocument = document[0],                                                                                       // 5485\n      location = window.location,                                                                                      // 5486\n      history = window.history,                                                                                        // 5487\n      setTimeout = window.setTimeout,                                                                                  // 5488\n      clearTimeout = window.clearTimeout,                                                                              // 5489\n      pendingDeferIds = {};                                                                                            // 5490\n                                                                                                                       // 5491\n  self.isMock = false;                                                                                                 // 5492\n                                                                                                                       // 5493\n  var outstandingRequestCount = 0;                                                                                     // 5494\n  var outstandingRequestCallbacks = [];                                                                                // 5495\n                                                                                                                       // 5496\n  // TODO(vojta): remove this temporary api                                                                            // 5497\n  self.$$completeOutstandingRequest = completeOutstandingRequest;                                                      // 5498\n  self.$$incOutstandingRequestCount = function() { outstandingRequestCount++; };                                       // 5499\n                                                                                                                       // 5500\n  /**                                                                                                                  // 5501\n   * Executes the `fn` function(supports currying) and decrements the `outstandingRequestCallbacks`                    // 5502\n   * counter. If the counter reaches 0, all the `outstandingRequestCallbacks` are executed.                            // 5503\n   */                                                                                                                  // 5504\n  function completeOutstandingRequest(fn) {                                                                            // 5505\n    try {                                                                                                              // 5506\n      fn.apply(null, sliceArgs(arguments, 1));                                                                         // 5507\n    } finally {                                                                                                        // 5508\n      outstandingRequestCount--;                                                                                       // 5509\n      if (outstandingRequestCount === 0) {                                                                             // 5510\n        while (outstandingRequestCallbacks.length) {                                                                   // 5511\n          try {                                                                                                        // 5512\n            outstandingRequestCallbacks.pop()();                                                                       // 5513\n          } catch (e) {                                                                                                // 5514\n            $log.error(e);                                                                                             // 5515\n          }                                                                                                            // 5516\n        }                                                                                                              // 5517\n      }                                                                                                                // 5518\n    }                                                                                                                  // 5519\n  }                                                                                                                    // 5520\n                                                                                                                       // 5521\n  function getHash(url) {                                                                                              // 5522\n    var index = url.indexOf('#');                                                                                      // 5523\n    return index === -1 ? '' : url.substr(index);                                                                      // 5524\n  }                                                                                                                    // 5525\n                                                                                                                       // 5526\n  /**                                                                                                                  // 5527\n   * @private                                                                                                          // 5528\n   * Note: this method is used only by scenario runner                                                                 // 5529\n   * TODO(vojta): prefix this method with $$ ?                                                                         // 5530\n   * @param {function()} callback Function that will be called when no outstanding request                             // 5531\n   */                                                                                                                  // 5532\n  self.notifyWhenNoOutstandingRequests = function(callback) {                                                          // 5533\n    if (outstandingRequestCount === 0) {                                                                               // 5534\n      callback();                                                                                                      // 5535\n    } else {                                                                                                           // 5536\n      outstandingRequestCallbacks.push(callback);                                                                      // 5537\n    }                                                                                                                  // 5538\n  };                                                                                                                   // 5539\n                                                                                                                       // 5540\n  //////////////////////////////////////////////////////////////                                                       // 5541\n  // URL API                                                                                                           // 5542\n  //////////////////////////////////////////////////////////////                                                       // 5543\n                                                                                                                       // 5544\n  var cachedState, lastHistoryState,                                                                                   // 5545\n      lastBrowserUrl = location.href,                                                                                  // 5546\n      baseElement = document.find('base'),                                                                             // 5547\n      pendingLocation = null;                                                                                          // 5548\n                                                                                                                       // 5549\n  cacheState();                                                                                                        // 5550\n  lastHistoryState = cachedState;                                                                                      // 5551\n                                                                                                                       // 5552\n  /**                                                                                                                  // 5553\n   * @name $browser#url                                                                                                // 5554\n   *                                                                                                                   // 5555\n   * @description                                                                                                      // 5556\n   * GETTER:                                                                                                           // 5557\n   * Without any argument, this method just returns current value of location.href.                                    // 5558\n   *                                                                                                                   // 5559\n   * SETTER:                                                                                                           // 5560\n   * With at least one argument, this method sets url to new value.                                                    // 5561\n   * If html5 history api supported, pushState/replaceState is used, otherwise                                         // 5562\n   * location.href/location.replace is used.                                                                           // 5563\n   * Returns its own instance to allow chaining                                                                        // 5564\n   *                                                                                                                   // 5565\n   * NOTE: this api is intended for use only by the $location service. Please use the                                  // 5566\n   * {@link ng.$location $location service} to change url.                                                             // 5567\n   *                                                                                                                   // 5568\n   * @param {string} url New url (when used as setter)                                                                 // 5569\n   * @param {boolean=} replace Should new url replace current history record?                                          // 5570\n   * @param {object=} state object to use with pushState/replaceState                                                  // 5571\n   */                                                                                                                  // 5572\n  self.url = function(url, replace, state) {                                                                           // 5573\n    // In modern browsers `history.state` is `null` by default; treating it separately                                 // 5574\n    // from `undefined` would cause `$browser.url('/foo')` to change `history.state`                                   // 5575\n    // to undefined via `pushState`. Instead, let's change `undefined` to `null` here.                                 // 5576\n    if (isUndefined(state)) {                                                                                          // 5577\n      state = null;                                                                                                    // 5578\n    }                                                                                                                  // 5579\n                                                                                                                       // 5580\n    // Android Browser BFCache causes location, history reference to become stale.                                     // 5581\n    if (location !== window.location) location = window.location;                                                      // 5582\n    if (history !== window.history) history = window.history;                                                          // 5583\n                                                                                                                       // 5584\n    // setter                                                                                                          // 5585\n    if (url) {                                                                                                         // 5586\n      var sameState = lastHistoryState === state;                                                                      // 5587\n                                                                                                                       // 5588\n      // Don't change anything if previous and current URLs and states match. This also prevents                       // 5589\n      // IE<10 from getting into redirect loop when in LocationHashbangInHtml5Url mode.                                // 5590\n      // See https://github.com/angular/angular.js/commit/ffb2701                                                      // 5591\n      if (lastBrowserUrl === url && (!$sniffer.history || sameState)) {                                                // 5592\n        return self;                                                                                                   // 5593\n      }                                                                                                                // 5594\n      var sameBase = lastBrowserUrl && stripHash(lastBrowserUrl) === stripHash(url);                                   // 5595\n      lastBrowserUrl = url;                                                                                            // 5596\n      lastHistoryState = state;                                                                                        // 5597\n      // Don't use history API if only the hash changed                                                                // 5598\n      // due to a bug in IE10/IE11 which leads                                                                         // 5599\n      // to not firing a `hashchange` nor `popstate` event                                                             // 5600\n      // in some cases (see #9143).                                                                                    // 5601\n      if ($sniffer.history && (!sameBase || !sameState)) {                                                             // 5602\n        history[replace ? 'replaceState' : 'pushState'](state, '', url);                                               // 5603\n        cacheState();                                                                                                  // 5604\n        // Do the assignment again so that those two variables are referentially identical.                            // 5605\n        lastHistoryState = cachedState;                                                                                // 5606\n      } else {                                                                                                         // 5607\n        if (!sameBase || pendingLocation) {                                                                            // 5608\n          pendingLocation = url;                                                                                       // 5609\n        }                                                                                                              // 5610\n        if (replace) {                                                                                                 // 5611\n          location.replace(url);                                                                                       // 5612\n        } else if (!sameBase) {                                                                                        // 5613\n          location.href = url;                                                                                         // 5614\n        } else {                                                                                                       // 5615\n          location.hash = getHash(url);                                                                                // 5616\n        }                                                                                                              // 5617\n        if (location.href !== url) {                                                                                   // 5618\n          pendingLocation = url;                                                                                       // 5619\n        }                                                                                                              // 5620\n      }                                                                                                                // 5621\n      return self;                                                                                                     // 5622\n    // getter                                                                                                          // 5623\n    } else {                                                                                                           // 5624\n      // - pendingLocation is needed as browsers don't allow to read out                                               // 5625\n      //   the new location.href if a reload happened or if there is a bug like in iOS 9 (see                          // 5626\n      //   https://openradar.appspot.com/22186109).                                                                    // 5627\n      // - the replacement is a workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=407172                     // 5628\n      return pendingLocation || location.href.replace(/%27/g,\"'\");                                                     // 5629\n    }                                                                                                                  // 5630\n  };                                                                                                                   // 5631\n                                                                                                                       // 5632\n  /**                                                                                                                  // 5633\n   * @name $browser#state                                                                                              // 5634\n   *                                                                                                                   // 5635\n   * @description                                                                                                      // 5636\n   * This method is a getter.                                                                                          // 5637\n   *                                                                                                                   // 5638\n   * Return history.state or null if history.state is undefined.                                                       // 5639\n   *                                                                                                                   // 5640\n   * @returns {object} state                                                                                           // 5641\n   */                                                                                                                  // 5642\n  self.state = function() {                                                                                            // 5643\n    return cachedState;                                                                                                // 5644\n  };                                                                                                                   // 5645\n                                                                                                                       // 5646\n  var urlChangeListeners = [],                                                                                         // 5647\n      urlChangeInit = false;                                                                                           // 5648\n                                                                                                                       // 5649\n  function cacheStateAndFireUrlChange() {                                                                              // 5650\n    pendingLocation = null;                                                                                            // 5651\n    cacheState();                                                                                                      // 5652\n    fireUrlChange();                                                                                                   // 5653\n  }                                                                                                                    // 5654\n                                                                                                                       // 5655\n  function getCurrentState() {                                                                                         // 5656\n    try {                                                                                                              // 5657\n      return history.state;                                                                                            // 5658\n    } catch (e) {                                                                                                      // 5659\n      // MSIE can reportedly throw when there is no state (UNCONFIRMED).                                               // 5660\n    }                                                                                                                  // 5661\n  }                                                                                                                    // 5662\n                                                                                                                       // 5663\n  // This variable should be used *only* inside the cacheState function.                                               // 5664\n  var lastCachedState = null;                                                                                          // 5665\n  function cacheState() {                                                                                              // 5666\n    // This should be the only place in $browser where `history.state` is read.                                        // 5667\n    cachedState = getCurrentState();                                                                                   // 5668\n    cachedState = isUndefined(cachedState) ? null : cachedState;                                                       // 5669\n                                                                                                                       // 5670\n    // Prevent callbacks fo fire twice if both hashchange & popstate were fired.                                       // 5671\n    if (equals(cachedState, lastCachedState)) {                                                                        // 5672\n      cachedState = lastCachedState;                                                                                   // 5673\n    }                                                                                                                  // 5674\n    lastCachedState = cachedState;                                                                                     // 5675\n  }                                                                                                                    // 5676\n                                                                                                                       // 5677\n  function fireUrlChange() {                                                                                           // 5678\n    if (lastBrowserUrl === self.url() && lastHistoryState === cachedState) {                                           // 5679\n      return;                                                                                                          // 5680\n    }                                                                                                                  // 5681\n                                                                                                                       // 5682\n    lastBrowserUrl = self.url();                                                                                       // 5683\n    lastHistoryState = cachedState;                                                                                    // 5684\n    forEach(urlChangeListeners, function(listener) {                                                                   // 5685\n      listener(self.url(), cachedState);                                                                               // 5686\n    });                                                                                                                // 5687\n  }                                                                                                                    // 5688\n                                                                                                                       // 5689\n  /**                                                                                                                  // 5690\n   * @name $browser#onUrlChange                                                                                        // 5691\n   *                                                                                                                   // 5692\n   * @description                                                                                                      // 5693\n   * Register callback function that will be called, when url changes.                                                 // 5694\n   *                                                                                                                   // 5695\n   * It's only called when the url is changed from outside of angular:                                                 // 5696\n   * - user types different url into address bar                                                                       // 5697\n   * - user clicks on history (forward/back) button                                                                    // 5698\n   * - user clicks on a link                                                                                           // 5699\n   *                                                                                                                   // 5700\n   * It's not called when url is changed by $browser.url() method                                                      // 5701\n   *                                                                                                                   // 5702\n   * The listener gets called with new url as parameter.                                                               // 5703\n   *                                                                                                                   // 5704\n   * NOTE: this api is intended for use only by the $location service. Please use the                                  // 5705\n   * {@link ng.$location $location service} to monitor url changes in angular apps.                                    // 5706\n   *                                                                                                                   // 5707\n   * @param {function(string)} listener Listener function to be called when url changes.                               // 5708\n   * @return {function(string)} Returns the registered listener fn - handy if the fn is anonymous.                     // 5709\n   */                                                                                                                  // 5710\n  self.onUrlChange = function(callback) {                                                                              // 5711\n    // TODO(vojta): refactor to use node's syntax for events                                                           // 5712\n    if (!urlChangeInit) {                                                                                              // 5713\n      // We listen on both (hashchange/popstate) when available, as some browsers (e.g. Opera)                         // 5714\n      // don't fire popstate when user change the address bar and don't fire hashchange when url                       // 5715\n      // changed by push/replaceState                                                                                  // 5716\n                                                                                                                       // 5717\n      // html5 history api - popstate event                                                                            // 5718\n      if ($sniffer.history) jqLite(window).on('popstate', cacheStateAndFireUrlChange);                                 // 5719\n      // hashchange event                                                                                              // 5720\n      jqLite(window).on('hashchange', cacheStateAndFireUrlChange);                                                     // 5721\n                                                                                                                       // 5722\n      urlChangeInit = true;                                                                                            // 5723\n    }                                                                                                                  // 5724\n                                                                                                                       // 5725\n    urlChangeListeners.push(callback);                                                                                 // 5726\n    return callback;                                                                                                   // 5727\n  };                                                                                                                   // 5728\n                                                                                                                       // 5729\n  /**                                                                                                                  // 5730\n   * @private                                                                                                          // 5731\n   * Remove popstate and hashchange handler from window.                                                               // 5732\n   *                                                                                                                   // 5733\n   * NOTE: this api is intended for use only by $rootScope.                                                            // 5734\n   */                                                                                                                  // 5735\n  self.$$applicationDestroyed = function() {                                                                           // 5736\n    jqLite(window).off('hashchange popstate', cacheStateAndFireUrlChange);                                             // 5737\n  };                                                                                                                   // 5738\n                                                                                                                       // 5739\n  /**                                                                                                                  // 5740\n   * Checks whether the url has changed outside of Angular.                                                            // 5741\n   * Needs to be exported to be able to check for changes that have been done in sync,                                 // 5742\n   * as hashchange/popstate events fire in async.                                                                      // 5743\n   */                                                                                                                  // 5744\n  self.$$checkUrlChange = fireUrlChange;                                                                               // 5745\n                                                                                                                       // 5746\n  //////////////////////////////////////////////////////////////                                                       // 5747\n  // Misc API                                                                                                          // 5748\n  //////////////////////////////////////////////////////////////                                                       // 5749\n                                                                                                                       // 5750\n  /**                                                                                                                  // 5751\n   * @name $browser#baseHref                                                                                           // 5752\n   *                                                                                                                   // 5753\n   * @description                                                                                                      // 5754\n   * Returns current <base href>                                                                                       // 5755\n   * (always relative - without domain)                                                                                // 5756\n   *                                                                                                                   // 5757\n   * @returns {string} The current base href                                                                           // 5758\n   */                                                                                                                  // 5759\n  self.baseHref = function() {                                                                                         // 5760\n    var href = baseElement.attr('href');                                                                               // 5761\n    return href ? href.replace(/^(https?\\:)?\\/\\/[^\\/]*/, '') : '';                                                     // 5762\n  };                                                                                                                   // 5763\n                                                                                                                       // 5764\n  /**                                                                                                                  // 5765\n   * @name $browser#defer                                                                                              // 5766\n   * @param {function()} fn A function, who's execution should be deferred.                                            // 5767\n   * @param {number=} [delay=0] of milliseconds to defer the function execution.                                       // 5768\n   * @returns {*} DeferId that can be used to cancel the task via `$browser.defer.cancel()`.                           // 5769\n   *                                                                                                                   // 5770\n   * @description                                                                                                      // 5771\n   * Executes a fn asynchronously via `setTimeout(fn, delay)`.                                                         // 5772\n   *                                                                                                                   // 5773\n   * Unlike when calling `setTimeout` directly, in test this function is mocked and instead of using                   // 5774\n   * `setTimeout` in tests, the fns are queued in an array, which can be programmatically flushed                      // 5775\n   * via `$browser.defer.flush()`.                                                                                     // 5776\n   *                                                                                                                   // 5777\n   */                                                                                                                  // 5778\n  self.defer = function(fn, delay) {                                                                                   // 5779\n    var timeoutId;                                                                                                     // 5780\n    outstandingRequestCount++;                                                                                         // 5781\n    timeoutId = setTimeout(function() {                                                                                // 5782\n      delete pendingDeferIds[timeoutId];                                                                               // 5783\n      completeOutstandingRequest(fn);                                                                                  // 5784\n    }, delay || 0);                                                                                                    // 5785\n    pendingDeferIds[timeoutId] = true;                                                                                 // 5786\n    return timeoutId;                                                                                                  // 5787\n  };                                                                                                                   // 5788\n                                                                                                                       // 5789\n                                                                                                                       // 5790\n  /**                                                                                                                  // 5791\n   * @name $browser#defer.cancel                                                                                       // 5792\n   *                                                                                                                   // 5793\n   * @description                                                                                                      // 5794\n   * Cancels a deferred task identified with `deferId`.                                                                // 5795\n   *                                                                                                                   // 5796\n   * @param {*} deferId Token returned by the `$browser.defer` function.                                               // 5797\n   * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully                            // 5798\n   *                    canceled.                                                                                      // 5799\n   */                                                                                                                  // 5800\n  self.defer.cancel = function(deferId) {                                                                              // 5801\n    if (pendingDeferIds[deferId]) {                                                                                    // 5802\n      delete pendingDeferIds[deferId];                                                                                 // 5803\n      clearTimeout(deferId);                                                                                           // 5804\n      completeOutstandingRequest(noop);                                                                                // 5805\n      return true;                                                                                                     // 5806\n    }                                                                                                                  // 5807\n    return false;                                                                                                      // 5808\n  };                                                                                                                   // 5809\n                                                                                                                       // 5810\n}                                                                                                                      // 5811\n                                                                                                                       // 5812\nfunction $BrowserProvider() {                                                                                          // 5813\n  this.$get = ['$window', '$log', '$sniffer', '$document',                                                             // 5814\n      function($window, $log, $sniffer, $document) {                                                                   // 5815\n        return new Browser($window, $document, $log, $sniffer);                                                        // 5816\n      }];                                                                                                              // 5817\n}                                                                                                                      // 5818\n                                                                                                                       // 5819\n/**                                                                                                                    // 5820\n * @ngdoc service                                                                                                      // 5821\n * @name $cacheFactory                                                                                                 // 5822\n *                                                                                                                     // 5823\n * @description                                                                                                        // 5824\n * Factory that constructs {@link $cacheFactory.Cache Cache} objects and gives access to                               // 5825\n * them.                                                                                                               // 5826\n *                                                                                                                     // 5827\n * ```js                                                                                                               // 5828\n *                                                                                                                     // 5829\n *  var cache = $cacheFactory('cacheId');                                                                              // 5830\n *  expect($cacheFactory.get('cacheId')).toBe(cache);                                                                  // 5831\n *  expect($cacheFactory.get('noSuchCacheId')).not.toBeDefined();                                                      // 5832\n *                                                                                                                     // 5833\n *  cache.put(\"key\", \"value\");                                                                                         // 5834\n *  cache.put(\"another key\", \"another value\");                                                                         // 5835\n *                                                                                                                     // 5836\n *  // We've specified no options on creation                                                                          // 5837\n *  expect(cache.info()).toEqual({id: 'cacheId', size: 2});                                                            // 5838\n *                                                                                                                     // 5839\n * ```                                                                                                                 // 5840\n *                                                                                                                     // 5841\n *                                                                                                                     // 5842\n * @param {string} cacheId Name or id of the newly created cache.                                                      // 5843\n * @param {object=} options Options object that specifies the cache behavior. Properties:                              // 5844\n *                                                                                                                     // 5845\n *   - `{number=}` `capacity` — turns the cache into LRU cache.                                                        // 5846\n *                                                                                                                     // 5847\n * @returns {object} Newly created cache object with the following set of methods:                                     // 5848\n *                                                                                                                     // 5849\n * - `{object}` `info()` — Returns id, size, and options of cache.                                                     // 5850\n * - `{{*}}` `put({string} key, {*} value)` — Puts a new key-value pair into the cache and returns                     // 5851\n *   it.                                                                                                               // 5852\n * - `{{*}}` `get({string} key)` — Returns cached value for `key` or undefined for cache miss.                         // 5853\n * - `{void}` `remove({string} key)` — Removes a key-value pair from the cache.                                        // 5854\n * - `{void}` `removeAll()` — Removes all cached values.                                                               // 5855\n * - `{void}` `destroy()` — Removes references to this cache from $cacheFactory.                                       // 5856\n *                                                                                                                     // 5857\n * @example                                                                                                            // 5858\n   <example module=\"cacheExampleApp\">                                                                                  // 5859\n     <file name=\"index.html\">                                                                                          // 5860\n       <div ng-controller=\"CacheController\">                                                                           // 5861\n         <input ng-model=\"newCacheKey\" placeholder=\"Key\">                                                              // 5862\n         <input ng-model=\"newCacheValue\" placeholder=\"Value\">                                                          // 5863\n         <button ng-click=\"put(newCacheKey, newCacheValue)\">Cache</button>                                             // 5864\n                                                                                                                       // 5865\n         <p ng-if=\"keys.length\">Cached Values</p>                                                                      // 5866\n         <div ng-repeat=\"key in keys\">                                                                                 // 5867\n           <span ng-bind=\"key\"></span>                                                                                 // 5868\n           <span>: </span>                                                                                             // 5869\n           <b ng-bind=\"cache.get(key)\"></b>                                                                            // 5870\n         </div>                                                                                                        // 5871\n                                                                                                                       // 5872\n         <p>Cache Info</p>                                                                                             // 5873\n         <div ng-repeat=\"(key, value) in cache.info()\">                                                                // 5874\n           <span ng-bind=\"key\"></span>                                                                                 // 5875\n           <span>: </span>                                                                                             // 5876\n           <b ng-bind=\"value\"></b>                                                                                     // 5877\n         </div>                                                                                                        // 5878\n       </div>                                                                                                          // 5879\n     </file>                                                                                                           // 5880\n     <file name=\"script.js\">                                                                                           // 5881\n       angular.module('cacheExampleApp', []).                                                                          // 5882\n         controller('CacheController', ['$scope', '$cacheFactory', function($scope, $cacheFactory) {                   // 5883\n           $scope.keys = [];                                                                                           // 5884\n           $scope.cache = $cacheFactory('cacheId');                                                                    // 5885\n           $scope.put = function(key, value) {                                                                         // 5886\n             if (angular.isUndefined($scope.cache.get(key))) {                                                         // 5887\n               $scope.keys.push(key);                                                                                  // 5888\n             }                                                                                                         // 5889\n             $scope.cache.put(key, angular.isUndefined(value) ? null : value);                                         // 5890\n           };                                                                                                          // 5891\n         }]);                                                                                                          // 5892\n     </file>                                                                                                           // 5893\n     <file name=\"style.css\">                                                                                           // 5894\n       p {                                                                                                             // 5895\n         margin: 10px 0 3px;                                                                                           // 5896\n       }                                                                                                               // 5897\n     </file>                                                                                                           // 5898\n   </example>                                                                                                          // 5899\n */                                                                                                                    // 5900\nfunction $CacheFactoryProvider() {                                                                                     // 5901\n                                                                                                                       // 5902\n  this.$get = function() {                                                                                             // 5903\n    var caches = {};                                                                                                   // 5904\n                                                                                                                       // 5905\n    function cacheFactory(cacheId, options) {                                                                          // 5906\n      if (cacheId in caches) {                                                                                         // 5907\n        throw minErr('$cacheFactory')('iid', \"CacheId '{0}' is already taken!\", cacheId);                              // 5908\n      }                                                                                                                // 5909\n                                                                                                                       // 5910\n      var size = 0,                                                                                                    // 5911\n          stats = extend({}, options, {id: cacheId}),                                                                  // 5912\n          data = {},                                                                                                   // 5913\n          capacity = (options && options.capacity) || Number.MAX_VALUE,                                                // 5914\n          lruHash = {},                                                                                                // 5915\n          freshEnd = null,                                                                                             // 5916\n          staleEnd = null;                                                                                             // 5917\n                                                                                                                       // 5918\n      /**                                                                                                              // 5919\n       * @ngdoc type                                                                                                   // 5920\n       * @name $cacheFactory.Cache                                                                                     // 5921\n       *                                                                                                               // 5922\n       * @description                                                                                                  // 5923\n       * A cache object used to store and retrieve data, primarily used by                                             // 5924\n       * {@link $http $http} and the {@link ng.directive:script script} directive to cache                             // 5925\n       * templates and other data.                                                                                     // 5926\n       *                                                                                                               // 5927\n       * ```js                                                                                                         // 5928\n       *  angular.module('superCache')                                                                                 // 5929\n       *    .factory('superCache', ['$cacheFactory', function($cacheFactory) {                                         // 5930\n       *      return $cacheFactory('super-cache');                                                                     // 5931\n       *    }]);                                                                                                       // 5932\n       * ```                                                                                                           // 5933\n       *                                                                                                               // 5934\n       * Example test:                                                                                                 // 5935\n       *                                                                                                               // 5936\n       * ```js                                                                                                         // 5937\n       *  it('should behave like a cache', inject(function(superCache) {                                               // 5938\n       *    superCache.put('key', 'value');                                                                            // 5939\n       *    superCache.put('another key', 'another value');                                                            // 5940\n       *                                                                                                               // 5941\n       *    expect(superCache.info()).toEqual({                                                                        // 5942\n       *      id: 'super-cache',                                                                                       // 5943\n       *      size: 2                                                                                                  // 5944\n       *    });                                                                                                        // 5945\n       *                                                                                                               // 5946\n       *    superCache.remove('another key');                                                                          // 5947\n       *    expect(superCache.get('another key')).toBeUndefined();                                                     // 5948\n       *                                                                                                               // 5949\n       *    superCache.removeAll();                                                                                    // 5950\n       *    expect(superCache.info()).toEqual({                                                                        // 5951\n       *      id: 'super-cache',                                                                                       // 5952\n       *      size: 0                                                                                                  // 5953\n       *    });                                                                                                        // 5954\n       *  }));                                                                                                         // 5955\n       * ```                                                                                                           // 5956\n       */                                                                                                              // 5957\n      return caches[cacheId] = {                                                                                       // 5958\n                                                                                                                       // 5959\n        /**                                                                                                            // 5960\n         * @ngdoc method                                                                                               // 5961\n         * @name $cacheFactory.Cache#put                                                                               // 5962\n         * @kind function                                                                                              // 5963\n         *                                                                                                             // 5964\n         * @description                                                                                                // 5965\n         * Inserts a named entry into the {@link $cacheFactory.Cache Cache} object to be                               // 5966\n         * retrieved later, and incrementing the size of the cache if the key was not already                          // 5967\n         * present in the cache. If behaving like an LRU cache, it will also remove stale                              // 5968\n         * entries from the set.                                                                                       // 5969\n         *                                                                                                             // 5970\n         * It will not insert undefined values into the cache.                                                         // 5971\n         *                                                                                                             // 5972\n         * @param {string} key the key under which the cached data is stored.                                          // 5973\n         * @param {*} value the value to store alongside the key. If it is undefined, the key                          // 5974\n         *    will not be stored.                                                                                      // 5975\n         * @returns {*} the value stored.                                                                              // 5976\n         */                                                                                                            // 5977\n        put: function(key, value) {                                                                                    // 5978\n          if (isUndefined(value)) return;                                                                              // 5979\n          if (capacity < Number.MAX_VALUE) {                                                                           // 5980\n            var lruEntry = lruHash[key] || (lruHash[key] = {key: key});                                                // 5981\n                                                                                                                       // 5982\n            refresh(lruEntry);                                                                                         // 5983\n          }                                                                                                            // 5984\n                                                                                                                       // 5985\n          if (!(key in data)) size++;                                                                                  // 5986\n          data[key] = value;                                                                                           // 5987\n                                                                                                                       // 5988\n          if (size > capacity) {                                                                                       // 5989\n            this.remove(staleEnd.key);                                                                                 // 5990\n          }                                                                                                            // 5991\n                                                                                                                       // 5992\n          return value;                                                                                                // 5993\n        },                                                                                                             // 5994\n                                                                                                                       // 5995\n        /**                                                                                                            // 5996\n         * @ngdoc method                                                                                               // 5997\n         * @name $cacheFactory.Cache#get                                                                               // 5998\n         * @kind function                                                                                              // 5999\n         *                                                                                                             // 6000\n         * @description                                                                                                // 6001\n         * Retrieves named data stored in the {@link $cacheFactory.Cache Cache} object.                                // 6002\n         *                                                                                                             // 6003\n         * @param {string} key the key of the data to be retrieved                                                     // 6004\n         * @returns {*} the value stored.                                                                              // 6005\n         */                                                                                                            // 6006\n        get: function(key) {                                                                                           // 6007\n          if (capacity < Number.MAX_VALUE) {                                                                           // 6008\n            var lruEntry = lruHash[key];                                                                               // 6009\n                                                                                                                       // 6010\n            if (!lruEntry) return;                                                                                     // 6011\n                                                                                                                       // 6012\n            refresh(lruEntry);                                                                                         // 6013\n          }                                                                                                            // 6014\n                                                                                                                       // 6015\n          return data[key];                                                                                            // 6016\n        },                                                                                                             // 6017\n                                                                                                                       // 6018\n                                                                                                                       // 6019\n        /**                                                                                                            // 6020\n         * @ngdoc method                                                                                               // 6021\n         * @name $cacheFactory.Cache#remove                                                                            // 6022\n         * @kind function                                                                                              // 6023\n         *                                                                                                             // 6024\n         * @description                                                                                                // 6025\n         * Removes an entry from the {@link $cacheFactory.Cache Cache} object.                                         // 6026\n         *                                                                                                             // 6027\n         * @param {string} key the key of the entry to be removed                                                      // 6028\n         */                                                                                                            // 6029\n        remove: function(key) {                                                                                        // 6030\n          if (capacity < Number.MAX_VALUE) {                                                                           // 6031\n            var lruEntry = lruHash[key];                                                                               // 6032\n                                                                                                                       // 6033\n            if (!lruEntry) return;                                                                                     // 6034\n                                                                                                                       // 6035\n            if (lruEntry == freshEnd) freshEnd = lruEntry.p;                                                           // 6036\n            if (lruEntry == staleEnd) staleEnd = lruEntry.n;                                                           // 6037\n            link(lruEntry.n,lruEntry.p);                                                                               // 6038\n                                                                                                                       // 6039\n            delete lruHash[key];                                                                                       // 6040\n          }                                                                                                            // 6041\n                                                                                                                       // 6042\n          delete data[key];                                                                                            // 6043\n          size--;                                                                                                      // 6044\n        },                                                                                                             // 6045\n                                                                                                                       // 6046\n                                                                                                                       // 6047\n        /**                                                                                                            // 6048\n         * @ngdoc method                                                                                               // 6049\n         * @name $cacheFactory.Cache#removeAll                                                                         // 6050\n         * @kind function                                                                                              // 6051\n         *                                                                                                             // 6052\n         * @description                                                                                                // 6053\n         * Clears the cache object of any entries.                                                                     // 6054\n         */                                                                                                            // 6055\n        removeAll: function() {                                                                                        // 6056\n          data = {};                                                                                                   // 6057\n          size = 0;                                                                                                    // 6058\n          lruHash = {};                                                                                                // 6059\n          freshEnd = staleEnd = null;                                                                                  // 6060\n        },                                                                                                             // 6061\n                                                                                                                       // 6062\n                                                                                                                       // 6063\n        /**                                                                                                            // 6064\n         * @ngdoc method                                                                                               // 6065\n         * @name $cacheFactory.Cache#destroy                                                                           // 6066\n         * @kind function                                                                                              // 6067\n         *                                                                                                             // 6068\n         * @description                                                                                                // 6069\n         * Destroys the {@link $cacheFactory.Cache Cache} object entirely,                                             // 6070\n         * removing it from the {@link $cacheFactory $cacheFactory} set.                                               // 6071\n         */                                                                                                            // 6072\n        destroy: function() {                                                                                          // 6073\n          data = null;                                                                                                 // 6074\n          stats = null;                                                                                                // 6075\n          lruHash = null;                                                                                              // 6076\n          delete caches[cacheId];                                                                                      // 6077\n        },                                                                                                             // 6078\n                                                                                                                       // 6079\n                                                                                                                       // 6080\n        /**                                                                                                            // 6081\n         * @ngdoc method                                                                                               // 6082\n         * @name $cacheFactory.Cache#info                                                                              // 6083\n         * @kind function                                                                                              // 6084\n         *                                                                                                             // 6085\n         * @description                                                                                                // 6086\n         * Retrieve information regarding a particular {@link $cacheFactory.Cache Cache}.                              // 6087\n         *                                                                                                             // 6088\n         * @returns {object} an object with the following properties:                                                  // 6089\n         *   <ul>                                                                                                      // 6090\n         *     <li>**id**: the id of the cache instance</li>                                                           // 6091\n         *     <li>**size**: the number of entries kept in the cache instance</li>                                     // 6092\n         *     <li>**...**: any additional properties from the options object when creating the                        // 6093\n         *       cache.</li>                                                                                           // 6094\n         *   </ul>                                                                                                     // 6095\n         */                                                                                                            // 6096\n        info: function() {                                                                                             // 6097\n          return extend({}, stats, {size: size});                                                                      // 6098\n        }                                                                                                              // 6099\n      };                                                                                                               // 6100\n                                                                                                                       // 6101\n                                                                                                                       // 6102\n      /**                                                                                                              // 6103\n       * makes the `entry` the freshEnd of the LRU linked list                                                         // 6104\n       */                                                                                                              // 6105\n      function refresh(entry) {                                                                                        // 6106\n        if (entry != freshEnd) {                                                                                       // 6107\n          if (!staleEnd) {                                                                                             // 6108\n            staleEnd = entry;                                                                                          // 6109\n          } else if (staleEnd == entry) {                                                                              // 6110\n            staleEnd = entry.n;                                                                                        // 6111\n          }                                                                                                            // 6112\n                                                                                                                       // 6113\n          link(entry.n, entry.p);                                                                                      // 6114\n          link(entry, freshEnd);                                                                                       // 6115\n          freshEnd = entry;                                                                                            // 6116\n          freshEnd.n = null;                                                                                           // 6117\n        }                                                                                                              // 6118\n      }                                                                                                                // 6119\n                                                                                                                       // 6120\n                                                                                                                       // 6121\n      /**                                                                                                              // 6122\n       * bidirectionally links two entries of the LRU linked list                                                      // 6123\n       */                                                                                                              // 6124\n      function link(nextEntry, prevEntry) {                                                                            // 6125\n        if (nextEntry != prevEntry) {                                                                                  // 6126\n          if (nextEntry) nextEntry.p = prevEntry; //p stands for previous, 'prev' didn't minify                        // 6127\n          if (prevEntry) prevEntry.n = nextEntry; //n stands for next, 'next' didn't minify                            // 6128\n        }                                                                                                              // 6129\n      }                                                                                                                // 6130\n    }                                                                                                                  // 6131\n                                                                                                                       // 6132\n                                                                                                                       // 6133\n  /**                                                                                                                  // 6134\n   * @ngdoc method                                                                                                     // 6135\n   * @name $cacheFactory#info                                                                                          // 6136\n   *                                                                                                                   // 6137\n   * @description                                                                                                      // 6138\n   * Get information about all the caches that have been created                                                       // 6139\n   *                                                                                                                   // 6140\n   * @returns {Object} - key-value map of `cacheId` to the result of calling `cache#info`                              // 6141\n   */                                                                                                                  // 6142\n    cacheFactory.info = function() {                                                                                   // 6143\n      var info = {};                                                                                                   // 6144\n      forEach(caches, function(cache, cacheId) {                                                                       // 6145\n        info[cacheId] = cache.info();                                                                                  // 6146\n      });                                                                                                              // 6147\n      return info;                                                                                                     // 6148\n    };                                                                                                                 // 6149\n                                                                                                                       // 6150\n                                                                                                                       // 6151\n  /**                                                                                                                  // 6152\n   * @ngdoc method                                                                                                     // 6153\n   * @name $cacheFactory#get                                                                                           // 6154\n   *                                                                                                                   // 6155\n   * @description                                                                                                      // 6156\n   * Get access to a cache object by the `cacheId` used when it was created.                                           // 6157\n   *                                                                                                                   // 6158\n   * @param {string} cacheId Name or id of a cache to access.                                                          // 6159\n   * @returns {object} Cache object identified by the cacheId or undefined if no such cache.                           // 6160\n   */                                                                                                                  // 6161\n    cacheFactory.get = function(cacheId) {                                                                             // 6162\n      return caches[cacheId];                                                                                          // 6163\n    };                                                                                                                 // 6164\n                                                                                                                       // 6165\n                                                                                                                       // 6166\n    return cacheFactory;                                                                                               // 6167\n  };                                                                                                                   // 6168\n}                                                                                                                      // 6169\n                                                                                                                       // 6170\n/**                                                                                                                    // 6171\n * @ngdoc service                                                                                                      // 6172\n * @name $templateCache                                                                                                // 6173\n *                                                                                                                     // 6174\n * @description                                                                                                        // 6175\n * The first time a template is used, it is loaded in the template cache for quick retrieval. You                      // 6176\n * can load templates directly into the cache in a `script` tag, or by consuming the                                   // 6177\n * `$templateCache` service directly.                                                                                  // 6178\n *                                                                                                                     // 6179\n * Adding via the `script` tag:                                                                                        // 6180\n *                                                                                                                     // 6181\n * ```html                                                                                                             // 6182\n *   <script type=\"text/ng-template\" id=\"templateId.html\">                                                             // 6183\n *     <p>This is the content of the template</p>                                                                      // 6184\n *   </script>                                                                                                         // 6185\n * ```                                                                                                                 // 6186\n *                                                                                                                     // 6187\n * **Note:** the `script` tag containing the template does not need to be included in the `head` of                    // 6188\n * the document, but it must be a descendent of the {@link ng.$rootElement $rootElement} (IE,                          // 6189\n * element with ng-app attribute), otherwise the template will be ignored.                                             // 6190\n *                                                                                                                     // 6191\n * Adding via the `$templateCache` service:                                                                            // 6192\n *                                                                                                                     // 6193\n * ```js                                                                                                               // 6194\n * var myApp = angular.module('myApp', []);                                                                            // 6195\n * myApp.run(function($templateCache) {                                                                                // 6196\n *   $templateCache.put('templateId.html', 'This is the content of the template');                                     // 6197\n * });                                                                                                                 // 6198\n * ```                                                                                                                 // 6199\n *                                                                                                                     // 6200\n * To retrieve the template later, simply use it in your HTML:                                                         // 6201\n * ```html                                                                                                             // 6202\n * <div ng-include=\" 'templateId.html' \"></div>                                                                        // 6203\n * ```                                                                                                                 // 6204\n *                                                                                                                     // 6205\n * or get it via Javascript:                                                                                           // 6206\n * ```js                                                                                                               // 6207\n * $templateCache.get('templateId.html')                                                                               // 6208\n * ```                                                                                                                 // 6209\n *                                                                                                                     // 6210\n * See {@link ng.$cacheFactory $cacheFactory}.                                                                         // 6211\n *                                                                                                                     // 6212\n */                                                                                                                    // 6213\nfunction $TemplateCacheProvider() {                                                                                    // 6214\n  this.$get = ['$cacheFactory', function($cacheFactory) {                                                              // 6215\n    return $cacheFactory('templates');                                                                                 // 6216\n  }];                                                                                                                  // 6217\n}                                                                                                                      // 6218\n                                                                                                                       // 6219\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *                                           // 6220\n *     Any commits to this file should be reviewed with security in mind.  *                                           // 6221\n *   Changes to this file can potentially create security vulnerabilities. *                                           // 6222\n *          An approval from 2 Core members with history of modifying      *                                           // 6223\n *                         this file is required.                          *                                           // 6224\n *                                                                         *                                           // 6225\n *  Does the change somehow allow for arbitrary javascript to be executed? *                                           // 6226\n *    Or allows for someone to change the prototype of built-in objects?   *                                           // 6227\n *     Or gives undesired access to variables likes document or window?    *                                           // 6228\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */                                          // 6229\n                                                                                                                       // 6230\n/* ! VARIABLE/FUNCTION NAMING CONVENTIONS THAT APPLY TO THIS FILE!                                                     // 6231\n *                                                                                                                     // 6232\n * DOM-related variables:                                                                                              // 6233\n *                                                                                                                     // 6234\n * - \"node\" - DOM Node                                                                                                 // 6235\n * - \"element\" - DOM Element or Node                                                                                   // 6236\n * - \"$node\" or \"$element\" - jqLite-wrapped node or element                                                            // 6237\n *                                                                                                                     // 6238\n *                                                                                                                     // 6239\n * Compiler related stuff:                                                                                             // 6240\n *                                                                                                                     // 6241\n * - \"linkFn\" - linking fn of a single directive                                                                       // 6242\n * - \"nodeLinkFn\" - function that aggregates all linking fns for a particular node                                     // 6243\n * - \"childLinkFn\" -  function that aggregates all linking fns for child nodes of a particular node                    // 6244\n * - \"compositeLinkFn\" - function that aggregates all linking fns for a compilation root (nodeList)                    // 6245\n */                                                                                                                    // 6246\n                                                                                                                       // 6247\n                                                                                                                       // 6248\n/**                                                                                                                    // 6249\n * @ngdoc service                                                                                                      // 6250\n * @name $compile                                                                                                      // 6251\n * @kind function                                                                                                      // 6252\n *                                                                                                                     // 6253\n * @description                                                                                                        // 6254\n * Compiles an HTML string or DOM into a template and produces a template function, which                              // 6255\n * can then be used to link {@link ng.$rootScope.Scope `scope`} and the template together.                             // 6256\n *                                                                                                                     // 6257\n * The compilation is a process of walking the DOM tree and matching DOM elements to                                   // 6258\n * {@link ng.$compileProvider#directive directives}.                                                                   // 6259\n *                                                                                                                     // 6260\n * <div class=\"alert alert-warning\">                                                                                   // 6261\n * **Note:** This document is an in-depth reference of all directive options.                                          // 6262\n * For a gentle introduction to directives with examples of common use cases,                                          // 6263\n * see the {@link guide/directive directive guide}.                                                                    // 6264\n * </div>                                                                                                              // 6265\n *                                                                                                                     // 6266\n * ## Comprehensive Directive API                                                                                      // 6267\n *                                                                                                                     // 6268\n * There are many different options for a directive.                                                                   // 6269\n *                                                                                                                     // 6270\n * The difference resides in the return value of the factory function.                                                 // 6271\n * You can either return a \"Directive Definition Object\" (see below) that defines the directive properties,            // 6272\n * or just the `postLink` function (all other properties will have the default values).                                // 6273\n *                                                                                                                     // 6274\n * <div class=\"alert alert-success\">                                                                                   // 6275\n * **Best Practice:** It's recommended to use the \"directive definition object\" form.                                  // 6276\n * </div>                                                                                                              // 6277\n *                                                                                                                     // 6278\n * Here's an example directive declared with a Directive Definition Object:                                            // 6279\n *                                                                                                                     // 6280\n * ```js                                                                                                               // 6281\n *   var myModule = angular.module(...);                                                                               // 6282\n *                                                                                                                     // 6283\n *   myModule.directive('directiveName', function factory(injectables) {                                               // 6284\n *     var directiveDefinitionObject = {                                                                               // 6285\n *       priority: 0,                                                                                                  // 6286\n *       template: '<div></div>', // or // function(tElement, tAttrs) { ... },                                         // 6287\n *       // or                                                                                                         // 6288\n *       // templateUrl: 'directive.html', // or // function(tElement, tAttrs) { ... },                                // 6289\n *       transclude: false,                                                                                            // 6290\n *       restrict: 'A',                                                                                                // 6291\n *       templateNamespace: 'html',                                                                                    // 6292\n *       scope: false,                                                                                                 // 6293\n *       controller: function($scope, $element, $attrs, $transclude, otherInjectables) { ... },                        // 6294\n *       controllerAs: 'stringIdentifier',                                                                             // 6295\n *       bindToController: false,                                                                                      // 6296\n *       require: 'siblingDirectiveName', // or // ['^parentDirectiveName', '?optionalDirectiveName', '?^optionalParent'],\n *       compile: function compile(tElement, tAttrs, transclude) {                                                     // 6298\n *         return {                                                                                                    // 6299\n *           pre: function preLink(scope, iElement, iAttrs, controller) { ... },                                       // 6300\n *           post: function postLink(scope, iElement, iAttrs, controller) { ... }                                      // 6301\n *         }                                                                                                           // 6302\n *         // or                                                                                                       // 6303\n *         // return function postLink( ... ) { ... }                                                                  // 6304\n *       },                                                                                                            // 6305\n *       // or                                                                                                         // 6306\n *       // link: {                                                                                                    // 6307\n *       //  pre: function preLink(scope, iElement, iAttrs, controller) { ... },                                       // 6308\n *       //  post: function postLink(scope, iElement, iAttrs, controller) { ... }                                      // 6309\n *       // }                                                                                                          // 6310\n *       // or                                                                                                         // 6311\n *       // link: function postLink( ... ) { ... }                                                                     // 6312\n *     };                                                                                                              // 6313\n *     return directiveDefinitionObject;                                                                               // 6314\n *   });                                                                                                               // 6315\n * ```                                                                                                                 // 6316\n *                                                                                                                     // 6317\n * <div class=\"alert alert-warning\">                                                                                   // 6318\n * **Note:** Any unspecified options will use the default value. You can see the default values below.                 // 6319\n * </div>                                                                                                              // 6320\n *                                                                                                                     // 6321\n * Therefore the above can be simplified as:                                                                           // 6322\n *                                                                                                                     // 6323\n * ```js                                                                                                               // 6324\n *   var myModule = angular.module(...);                                                                               // 6325\n *                                                                                                                     // 6326\n *   myModule.directive('directiveName', function factory(injectables) {                                               // 6327\n *     var directiveDefinitionObject = {                                                                               // 6328\n *       link: function postLink(scope, iElement, iAttrs) { ... }                                                      // 6329\n *     };                                                                                                              // 6330\n *     return directiveDefinitionObject;                                                                               // 6331\n *     // or                                                                                                           // 6332\n *     // return function postLink(scope, iElement, iAttrs) { ... }                                                    // 6333\n *   });                                                                                                               // 6334\n * ```                                                                                                                 // 6335\n *                                                                                                                     // 6336\n *                                                                                                                     // 6337\n *                                                                                                                     // 6338\n * ### Directive Definition Object                                                                                     // 6339\n *                                                                                                                     // 6340\n * The directive definition object provides instructions to the {@link ng.$compile                                     // 6341\n * compiler}. The attributes are:                                                                                      // 6342\n *                                                                                                                     // 6343\n * #### `multiElement`                                                                                                 // 6344\n * When this property is set to true, the HTML compiler will collect DOM nodes between                                 // 6345\n * nodes with the attributes `directive-name-start` and `directive-name-end`, and group them                           // 6346\n * together as the directive elements. It is recommended that this feature be used on directives                       // 6347\n * which are not strictly behavioural (such as {@link ngClick}), and which                                             // 6348\n * do not manipulate or replace child nodes (such as {@link ngInclude}).                                               // 6349\n *                                                                                                                     // 6350\n * #### `priority`                                                                                                     // 6351\n * When there are multiple directives defined on a single DOM element, sometimes it                                    // 6352\n * is necessary to specify the order in which the directives are applied. The `priority` is used                       // 6353\n * to sort the directives before their `compile` functions get called. Priority is defined as a                        // 6354\n * number. Directives with greater numerical `priority` are compiled first. Pre-link functions                         // 6355\n * are also run in priority order, but post-link functions are run in reverse order. The order                         // 6356\n * of directives with the same priority is undefined. The default priority is `0`.                                     // 6357\n *                                                                                                                     // 6358\n * #### `terminal`                                                                                                     // 6359\n * If set to true then the current `priority` will be the last set of directives                                       // 6360\n * which will execute (any directives at the current priority will still execute                                       // 6361\n * as the order of execution on same `priority` is undefined). Note that expressions                                   // 6362\n * and other directives used in the directive's template will also be excluded from execution.                         // 6363\n *                                                                                                                     // 6364\n * #### `scope`                                                                                                        // 6365\n * The scope property can be `true`, an object or a falsy value:                                                       // 6366\n *                                                                                                                     // 6367\n * * **falsy:** No scope will be created for the directive. The directive will use its parent's scope.                 // 6368\n *                                                                                                                     // 6369\n * * **`true`:** A new child scope that prototypically inherits from its parent will be created for                    // 6370\n * the directive's element. If multiple directives on the same element request a new scope,                            // 6371\n * only one new scope is created. The new scope rule does not apply for the root of the template                       // 6372\n * since the root of the template always gets a new scope.                                                             // 6373\n *                                                                                                                     // 6374\n * * **`{...}` (an object hash):** A new \"isolate\" scope is created for the directive's element. The                   // 6375\n * 'isolate' scope differs from normal scope in that it does not prototypically inherit from its parent                // 6376\n * scope. This is useful when creating reusable components, which should not accidentally read or modify               // 6377\n * data in the parent scope.                                                                                           // 6378\n *                                                                                                                     // 6379\n * The 'isolate' scope object hash defines a set of local scope properties derived from attributes on the              // 6380\n * directive's element. These local properties are useful for aliasing values for templates. The keys in               // 6381\n * the object hash map to the name of the property on the isolate scope; the values define how the property            // 6382\n * is bound to the parent scope, via matching attributes on the directive's element:                                   // 6383\n *                                                                                                                     // 6384\n * * `@` or `@attr` - bind a local scope property to the value of DOM attribute. The result is                         // 6385\n *   always a string since DOM attributes are strings. If no `attr` name is specified  then the                        // 6386\n *   attribute name is assumed to be the same as the local name.                                                       // 6387\n *   Given `<widget my-attr=\"hello {{name}}\">` and widget definition                                                   // 6388\n *   of `scope: { localName:'@myAttr' }`, then widget scope property `localName` will reflect                          // 6389\n *   the interpolated value of `hello {{name}}`. As the `name` attribute changes so will the                           // 6390\n *   `localName` property on the widget scope. The `name` is read from the parent scope (not                           // 6391\n *   component scope).                                                                                                 // 6392\n *                                                                                                                     // 6393\n * * `=` or `=attr` - set up bi-directional binding between a local scope property and the                             // 6394\n *   parent scope property of name defined via the value of the `attr` attribute. If no `attr`                         // 6395\n *   name is specified then the attribute name is assumed to be the same as the local name.                            // 6396\n *   Given `<widget my-attr=\"parentModel\">` and widget definition of                                                   // 6397\n *   `scope: { localModel:'=myAttr' }`, then widget scope property `localModel` will reflect the                       // 6398\n *   value of `parentModel` on the parent scope. Any changes to `parentModel` will be reflected                        // 6399\n *   in `localModel` and any changes in `localModel` will reflect in `parentModel`. If the parent                      // 6400\n *   scope property doesn't exist, it will throw a NON_ASSIGNABLE_MODEL_EXPRESSION exception. You                      // 6401\n *   can avoid this behavior using `=?` or `=?attr` in order to flag the property as optional. If                      // 6402\n *   you want to shallow watch for changes (i.e. $watchCollection instead of $watch) you can use                       // 6403\n *   `=*` or `=*attr` (`=*?` or `=*?attr` if the property is optional).                                                // 6404\n *                                                                                                                     // 6405\n * * `&` or `&attr` - provides a way to execute an expression in the context of the parent scope.                      // 6406\n *   If no `attr` name is specified then the attribute name is assumed to be the same as the                           // 6407\n *   local name. Given `<widget my-attr=\"count = count + value\">` and widget definition of                             // 6408\n *   `scope: { localFn:'&myAttr' }`, then isolate scope property `localFn` will point to                               // 6409\n *   a function wrapper for the `count = count + value` expression. Often it's desirable to                            // 6410\n *   pass data from the isolated scope via an expression to the parent scope, this can be                              // 6411\n *   done by passing a map of local variable names and values into the expression wrapper fn.                          // 6412\n *   For example, if the expression is `increment(amount)` then we can specify the amount value                        // 6413\n *   by calling the `localFn` as `localFn({amount: 22})`.                                                              // 6414\n *                                                                                                                     // 6415\n * In general it's possible to apply more than one directive to one element, but there might be limitations            // 6416\n * depending on the type of scope required by the directives. The following points will help explain these limitations.\n * For simplicity only two directives are taken into account, but it is also applicable for several directives:        // 6418\n *                                                                                                                     // 6419\n * * **no scope** + **no scope** => Two directives which don't require their own scope will use their parent's scope   // 6420\n * * **child scope** + **no scope** =>  Both directives will share one single child scope                              // 6421\n * * **child scope** + **child scope** =>  Both directives will share one single child scope                           // 6422\n * * **isolated scope** + **no scope** =>  The isolated directive will use it's own created isolated scope. The other directive will use\n * its parent's scope                                                                                                  // 6424\n * * **isolated scope** + **child scope** =>  **Won't work!** Only one scope can be related to one element. Therefore these directives cannot\n * be applied to the same element.                                                                                     // 6426\n * * **isolated scope** + **isolated scope**  =>  **Won't work!** Only one scope can be related to one element. Therefore these directives\n * cannot be applied to the same element.                                                                              // 6428\n *                                                                                                                     // 6429\n *                                                                                                                     // 6430\n * #### `bindToController`                                                                                             // 6431\n * When an isolate scope is used for a component (see above), and `controllerAs` is used, `bindToController: true` will\n * allow a component to have its properties bound to the controller, rather than to scope. When the controller         // 6433\n * is instantiated, the initial values of the isolate scope bindings are already available.                            // 6434\n *                                                                                                                     // 6435\n * #### `controller`                                                                                                   // 6436\n * Controller constructor function. The controller is instantiated before the                                          // 6437\n * pre-linking phase and can be accessed by other directives (see                                                      // 6438\n * `require` attribute). This allows the directives to communicate with each other and augment                         // 6439\n * each other's behavior. The controller is injectable (and supports bracket notation) with the following locals:      // 6440\n *                                                                                                                     // 6441\n * * `$scope` - Current scope associated with the element                                                              // 6442\n * * `$element` - Current element                                                                                      // 6443\n * * `$attrs` - Current attributes object for the element                                                              // 6444\n * * `$transclude` - A transclude linking function pre-bound to the correct transclusion scope:                        // 6445\n *   `function([scope], cloneLinkingFn, futureParentElement)`.                                                         // 6446\n *    * `scope`: optional argument to override the scope.                                                              // 6447\n *    * `cloneLinkingFn`: optional argument to create clones of the original transcluded content.                      // 6448\n *    * `futureParentElement`:                                                                                         // 6449\n *        * defines the parent to which the `cloneLinkingFn` will add the cloned elements.                             // 6450\n *        * default: `$element.parent()` resp. `$element` for `transclude:'element'` resp. `transclude:true`.          // 6451\n *        * only needed for transcludes that are allowed to contain non html elements (e.g. SVG elements)              // 6452\n *          and when the `cloneLinkinFn` is passed,                                                                    // 6453\n *          as those elements need to created and cloned in a special way when they are defined outside their          // 6454\n *          usual containers (e.g. like `<svg>`).                                                                      // 6455\n *        * See also the `directive.templateNamespace` property.                                                       // 6456\n *                                                                                                                     // 6457\n *                                                                                                                     // 6458\n * #### `require`                                                                                                      // 6459\n * Require another directive and inject its controller as the fourth argument to the linking function. The             // 6460\n * `require` takes a string name (or array of strings) of the directive(s) to pass in. If an array is used, the        // 6461\n * injected argument will be an array in corresponding order. If no such directive can be                              // 6462\n * found, or if the directive does not have a controller, then an error is raised (unless no link function             // 6463\n * is specified, in which case error checking is skipped). The name can be prefixed with:                              // 6464\n *                                                                                                                     // 6465\n * * (no prefix) - Locate the required controller on the current element. Throw an error if not found.                 // 6466\n * * `?` - Attempt to locate the required controller or pass `null` to the `link` fn if not found.                     // 6467\n * * `^` - Locate the required controller by searching the element and its parents. Throw an error if not found.       // 6468\n * * `^^` - Locate the required controller by searching the element's parents. Throw an error if not found.            // 6469\n * * `?^` - Attempt to locate the required controller by searching the element and its parents or pass                 // 6470\n *   `null` to the `link` fn if not found.                                                                             // 6471\n * * `?^^` - Attempt to locate the required controller by searching the element's parents, or pass                     // 6472\n *   `null` to the `link` fn if not found.                                                                             // 6473\n *                                                                                                                     // 6474\n *                                                                                                                     // 6475\n * #### `controllerAs`                                                                                                 // 6476\n * Identifier name for a reference to the controller in the directive's scope.                                         // 6477\n * This allows the controller to be referenced from the directive template. This is especially                         // 6478\n * useful when a directive is used as component, i.e. with an `isolate` scope. It's also possible                      // 6479\n * to use it in a directive without an `isolate` / `new` scope, but you need to be aware that the                      // 6480\n * `controllerAs` reference might overwrite a property that already exists on the parent scope.                        // 6481\n *                                                                                                                     // 6482\n *                                                                                                                     // 6483\n * #### `restrict`                                                                                                     // 6484\n * String of subset of `EACM` which restricts the directive to a specific directive                                    // 6485\n * declaration style. If omitted, the defaults (elements and attributes) are used.                                     // 6486\n *                                                                                                                     // 6487\n * * `E` - Element name (default): `<my-directive></my-directive>`                                                     // 6488\n * * `A` - Attribute (default): `<div my-directive=\"exp\"></div>`                                                       // 6489\n * * `C` - Class: `<div class=\"my-directive: exp;\"></div>`                                                             // 6490\n * * `M` - Comment: `<!-- directive: my-directive exp -->`                                                             // 6491\n *                                                                                                                     // 6492\n *                                                                                                                     // 6493\n * #### `templateNamespace`                                                                                            // 6494\n * String representing the document type used by the markup in the template.                                           // 6495\n * AngularJS needs this information as those elements need to be created and cloned                                    // 6496\n * in a special way when they are defined outside their usual containers like `<svg>` and `<math>`.                    // 6497\n *                                                                                                                     // 6498\n * * `html` - All root nodes in the template are HTML. Root nodes may also be                                          // 6499\n *   top-level elements such as `<svg>` or `<math>`.                                                                   // 6500\n * * `svg` - The root nodes in the template are SVG elements (excluding `<math>`).                                     // 6501\n * * `math` - The root nodes in the template are MathML elements (excluding `<svg>`).                                  // 6502\n *                                                                                                                     // 6503\n * If no `templateNamespace` is specified, then the namespace is considered to be `html`.                              // 6504\n *                                                                                                                     // 6505\n * #### `template`                                                                                                     // 6506\n * HTML markup that may:                                                                                               // 6507\n * * Replace the contents of the directive's element (default).                                                        // 6508\n * * Replace the directive's element itself (if `replace` is true - DEPRECATED).                                       // 6509\n * * Wrap the contents of the directive's element (if `transclude` is true).                                           // 6510\n *                                                                                                                     // 6511\n * Value may be:                                                                                                       // 6512\n *                                                                                                                     // 6513\n * * A string. For example `<div red-on-hover>{{delete_str}}</div>`.                                                   // 6514\n * * A function which takes two arguments `tElement` and `tAttrs` (described in the `compile`                          // 6515\n *   function api below) and returns a string value.                                                                   // 6516\n *                                                                                                                     // 6517\n *                                                                                                                     // 6518\n * #### `templateUrl`                                                                                                  // 6519\n * This is similar to `template` but the template is loaded from the specified URL, asynchronously.                    // 6520\n *                                                                                                                     // 6521\n * Because template loading is asynchronous the compiler will suspend compilation of directives on that element        // 6522\n * for later when the template has been resolved.  In the meantime it will continue to compile and link                // 6523\n * sibling and parent elements as though this element had not contained any directives.                                // 6524\n *                                                                                                                     // 6525\n * The compiler does not suspend the entire compilation to wait for templates to be loaded because this                // 6526\n * would result in the whole app \"stalling\" until all templates are loaded asynchronously - even in the                // 6527\n * case when only one deeply nested directive has `templateUrl`.                                                       // 6528\n *                                                                                                                     // 6529\n * Template loading is asynchronous even if the template has been preloaded into the {@link $templateCache}            // 6530\n *                                                                                                                     // 6531\n * You can specify `templateUrl` as a string representing the URL or as a function which takes two                     // 6532\n * arguments `tElement` and `tAttrs` (described in the `compile` function api below) and returns                       // 6533\n * a string value representing the url.  In either case, the template URL is passed through {@link                     // 6534\n * $sce#getTrustedResourceUrl $sce.getTrustedResourceUrl}.                                                             // 6535\n *                                                                                                                     // 6536\n *                                                                                                                     // 6537\n * #### `replace` ([*DEPRECATED*!], will be removed in next major release - i.e. v2.0)                                 // 6538\n * specify what the template should replace. Defaults to `false`.                                                      // 6539\n *                                                                                                                     // 6540\n * * `true` - the template will replace the directive's element.                                                       // 6541\n * * `false` - the template will replace the contents of the directive's element.                                      // 6542\n *                                                                                                                     // 6543\n * The replacement process migrates all of the attributes / classes from the old element to the new                    // 6544\n * one. See the {@link guide/directive#template-expanding-directive                                                    // 6545\n * Directives Guide} for an example.                                                                                   // 6546\n *                                                                                                                     // 6547\n * There are very few scenarios where element replacement is required for the application function,                    // 6548\n * the main one being reusable custom components that are used within SVG contexts                                     // 6549\n * (because SVG doesn't work with custom elements in the DOM tree).                                                    // 6550\n *                                                                                                                     // 6551\n * #### `transclude`                                                                                                   // 6552\n * Extract the contents of the element where the directive appears and make it available to the directive.             // 6553\n * The contents are compiled and provided to the directive as a **transclusion function**. See the                     // 6554\n * {@link $compile#transclusion Transclusion} section below.                                                           // 6555\n *                                                                                                                     // 6556\n * There are two kinds of transclusion depending upon whether you want to transclude just the contents of the          // 6557\n * directive's element or the entire element:                                                                          // 6558\n *                                                                                                                     // 6559\n * * `true` - transclude the content (i.e. the child nodes) of the directive's element.                                // 6560\n * * `'element'` - transclude the whole of the directive's element including any directives on this                    // 6561\n *   element that defined at a lower priority than this directive. When used, the `template`                           // 6562\n *   property is ignored.                                                                                              // 6563\n *                                                                                                                     // 6564\n *                                                                                                                     // 6565\n * #### `compile`                                                                                                      // 6566\n *                                                                                                                     // 6567\n * ```js                                                                                                               // 6568\n *   function compile(tElement, tAttrs, transclude) { ... }                                                            // 6569\n * ```                                                                                                                 // 6570\n *                                                                                                                     // 6571\n * The compile function deals with transforming the template DOM. Since most directives do not do                      // 6572\n * template transformation, it is not used often. The compile function takes the following arguments:                  // 6573\n *                                                                                                                     // 6574\n *   * `tElement` - template element - The element where the directive has been declared. It is                        // 6575\n *     safe to do template transformation on the element and child elements only.                                      // 6576\n *                                                                                                                     // 6577\n *   * `tAttrs` - template attributes - Normalized list of attributes declared on this element shared                  // 6578\n *     between all directive compile functions.                                                                        // 6579\n *                                                                                                                     // 6580\n *   * `transclude` -  [*DEPRECATED*!] A transclude linking function: `function(scope, cloneLinkingFn)`                // 6581\n *                                                                                                                     // 6582\n * <div class=\"alert alert-warning\">                                                                                   // 6583\n * **Note:** The template instance and the link instance may be different objects if the template has                  // 6584\n * been cloned. For this reason it is **not** safe to do anything other than DOM transformations that                  // 6585\n * apply to all cloned DOM nodes within the compile function. Specifically, DOM listener registration                  // 6586\n * should be done in a linking function rather than in a compile function.                                             // 6587\n * </div>                                                                                                              // 6588\n                                                                                                                       // 6589\n * <div class=\"alert alert-warning\">                                                                                   // 6590\n * **Note:** The compile function cannot handle directives that recursively use themselves in their                    // 6591\n * own templates or compile functions. Compiling these directives results in an infinite loop and a                    // 6592\n * stack overflow errors.                                                                                              // 6593\n *                                                                                                                     // 6594\n * This can be avoided by manually using $compile in the postLink function to imperatively compile                     // 6595\n * a directive's template instead of relying on automatic template compilation via `template` or                       // 6596\n * `templateUrl` declaration or manual compilation inside the compile function.                                        // 6597\n * </div>                                                                                                              // 6598\n *                                                                                                                     // 6599\n * <div class=\"alert alert-danger\">                                                                                    // 6600\n * **Note:** The `transclude` function that is passed to the compile function is deprecated, as it                     // 6601\n *   e.g. does not know about the right outer scope. Please use the transclude function that is passed                 // 6602\n *   to the link function instead.                                                                                     // 6603\n * </div>                                                                                                              // 6604\n                                                                                                                       // 6605\n * A compile function can have a return value which can be either a function or an object.                             // 6606\n *                                                                                                                     // 6607\n * * returning a (post-link) function - is equivalent to registering the linking function via the                      // 6608\n *   `link` property of the config object when the compile function is empty.                                          // 6609\n *                                                                                                                     // 6610\n * * returning an object with function(s) registered via `pre` and `post` properties - allows you to                   // 6611\n *   control when a linking function should be called during the linking phase. See info about                         // 6612\n *   pre-linking and post-linking functions below.                                                                     // 6613\n *                                                                                                                     // 6614\n *                                                                                                                     // 6615\n * #### `link`                                                                                                         // 6616\n * This property is used only if the `compile` property is not defined.                                                // 6617\n *                                                                                                                     // 6618\n * ```js                                                                                                               // 6619\n *   function link(scope, iElement, iAttrs, controller, transcludeFn) { ... }                                          // 6620\n * ```                                                                                                                 // 6621\n *                                                                                                                     // 6622\n * The link function is responsible for registering DOM listeners as well as updating the DOM. It is                   // 6623\n * executed after the template has been cloned. This is where most of the directive logic will be                      // 6624\n * put.                                                                                                                // 6625\n *                                                                                                                     // 6626\n *   * `scope` - {@link ng.$rootScope.Scope Scope} - The scope to be used by the                                       // 6627\n *     directive for registering {@link ng.$rootScope.Scope#$watch watches}.                                           // 6628\n *                                                                                                                     // 6629\n *   * `iElement` - instance element - The element where the directive is to be used. It is safe to                    // 6630\n *     manipulate the children of the element only in `postLink` function since the children have                      // 6631\n *     already been linked.                                                                                            // 6632\n *                                                                                                                     // 6633\n *   * `iAttrs` - instance attributes - Normalized list of attributes declared on this element shared                  // 6634\n *     between all directive linking functions.                                                                        // 6635\n *                                                                                                                     // 6636\n *   * `controller` - the directive's required controller instance(s) - Instances are shared                           // 6637\n *     among all directives, which allows the directives to use the controllers as a communication                     // 6638\n *     channel. The exact value depends on the directive's `require` property:                                         // 6639\n *       * no controller(s) required: the directive's own controller, or `undefined` if it doesn't have one            // 6640\n *       * `string`: the controller instance                                                                           // 6641\n *       * `array`: array of controller instances                                                                      // 6642\n *                                                                                                                     // 6643\n *     If a required controller cannot be found, and it is optional, the instance is `null`,                           // 6644\n *     otherwise the {@link error:$compile:ctreq Missing Required Controller} error is thrown.                         // 6645\n *                                                                                                                     // 6646\n *     Note that you can also require the directive's own controller - it will be made available like                  // 6647\n *     any other controller.                                                                                           // 6648\n *                                                                                                                     // 6649\n *   * `transcludeFn` - A transclude linking function pre-bound to the correct transclusion scope.                     // 6650\n *     This is the same as the `$transclude`                                                                           // 6651\n *     parameter of directive controllers, see there for details.                                                      // 6652\n *     `function([scope], cloneLinkingFn, futureParentElement)`.                                                       // 6653\n *                                                                                                                     // 6654\n * #### Pre-linking function                                                                                           // 6655\n *                                                                                                                     // 6656\n * Executed before the child elements are linked. Not safe to do DOM transformation since the                          // 6657\n * compiler linking function will fail to locate the correct elements for linking.                                     // 6658\n *                                                                                                                     // 6659\n * #### Post-linking function                                                                                          // 6660\n *                                                                                                                     // 6661\n * Executed after the child elements are linked.                                                                       // 6662\n *                                                                                                                     // 6663\n * Note that child elements that contain `templateUrl` directives will not have been compiled                          // 6664\n * and linked since they are waiting for their template to load asynchronously and their own                           // 6665\n * compilation and linking has been suspended until that occurs.                                                       // 6666\n *                                                                                                                     // 6667\n * It is safe to do DOM transformation in the post-linking function on elements that are not waiting                   // 6668\n * for their async templates to be resolved.                                                                           // 6669\n *                                                                                                                     // 6670\n *                                                                                                                     // 6671\n * ### Transclusion                                                                                                    // 6672\n *                                                                                                                     // 6673\n * Transclusion is the process of extracting a collection of DOM elements from one part of the DOM and                 // 6674\n * copying them to another part of the DOM, while maintaining their connection to the original AngularJS               // 6675\n * scope from where they were taken.                                                                                   // 6676\n *                                                                                                                     // 6677\n * Transclusion is used (often with {@link ngTransclude}) to insert the                                                // 6678\n * original contents of a directive's element into a specified place in the template of the directive.                 // 6679\n * The benefit of transclusion, over simply moving the DOM elements manually, is that the transcluded                  // 6680\n * content has access to the properties on the scope from which it was taken, even if the directive                    // 6681\n * has isolated scope.                                                                                                 // 6682\n * See the {@link guide/directive#creating-a-directive-that-wraps-other-elements Directives Guide}.                    // 6683\n *                                                                                                                     // 6684\n * This makes it possible for the widget to have private state for its template, while the transcluded                 // 6685\n * content has access to its originating scope.                                                                        // 6686\n *                                                                                                                     // 6687\n * <div class=\"alert alert-warning\">                                                                                   // 6688\n * **Note:** When testing an element transclude directive you must not place the directive at the root of the          // 6689\n * DOM fragment that is being compiled. See {@link guide/unit-testing#testing-transclusion-directives                  // 6690\n * Testing Transclusion Directives}.                                                                                   // 6691\n * </div>                                                                                                              // 6692\n *                                                                                                                     // 6693\n * #### Transclusion Functions                                                                                         // 6694\n *                                                                                                                     // 6695\n * When a directive requests transclusion, the compiler extracts its contents and provides a **transclusion            // 6696\n * function** to the directive's `link` function and `controller`. This transclusion function is a special             // 6697\n * **linking function** that will return the compiled contents linked to a new transclusion scope.                     // 6698\n *                                                                                                                     // 6699\n * <div class=\"alert alert-info\">                                                                                      // 6700\n * If you are just using {@link ngTransclude} then you don't need to worry about this function, since                  // 6701\n * ngTransclude will deal with it for us.                                                                              // 6702\n * </div>                                                                                                              // 6703\n *                                                                                                                     // 6704\n * If you want to manually control the insertion and removal of the transcluded content in your directive              // 6705\n * then you must use this transclude function. When you call a transclude function it returns a a jqLite/JQuery        // 6706\n * object that contains the compiled DOM, which is linked to the correct transclusion scope.                           // 6707\n *                                                                                                                     // 6708\n * When you call a transclusion function you can pass in a **clone attach function**. This function accepts            // 6709\n * two parameters, `function(clone, scope) { ... }`, where the `clone` is a fresh compiled copy of your transcluded    // 6710\n * content and the `scope` is the newly created transclusion scope, to which the clone is bound.                       // 6711\n *                                                                                                                     // 6712\n * <div class=\"alert alert-info\">                                                                                      // 6713\n * **Best Practice**: Always provide a `cloneFn` (clone attach function) when you call a translude function            // 6714\n * since you then get a fresh clone of the original DOM and also have access to the new transclusion scope.            // 6715\n * </div>                                                                                                              // 6716\n *                                                                                                                     // 6717\n * It is normal practice to attach your transcluded content (`clone`) to the DOM inside your **clone                   // 6718\n * attach function**:                                                                                                  // 6719\n *                                                                                                                     // 6720\n * ```js                                                                                                               // 6721\n * var transcludedContent, transclusionScope;                                                                          // 6722\n *                                                                                                                     // 6723\n * $transclude(function(clone, scope) {                                                                                // 6724\n *   element.append(clone);                                                                                            // 6725\n *   transcludedContent = clone;                                                                                       // 6726\n *   transclusionScope = scope;                                                                                        // 6727\n * });                                                                                                                 // 6728\n * ```                                                                                                                 // 6729\n *                                                                                                                     // 6730\n * Later, if you want to remove the transcluded content from your DOM then you should also destroy the                 // 6731\n * associated transclusion scope:                                                                                      // 6732\n *                                                                                                                     // 6733\n * ```js                                                                                                               // 6734\n * transcludedContent.remove();                                                                                        // 6735\n * transclusionScope.$destroy();                                                                                       // 6736\n * ```                                                                                                                 // 6737\n *                                                                                                                     // 6738\n * <div class=\"alert alert-info\">                                                                                      // 6739\n * **Best Practice**: if you intend to add and remove transcluded content manually in your directive                   // 6740\n * (by calling the transclude function to get the DOM and calling `element.remove()` to remove it),                    // 6741\n * then you are also responsible for calling `$destroy` on the transclusion scope.                                     // 6742\n * </div>                                                                                                              // 6743\n *                                                                                                                     // 6744\n * The built-in DOM manipulation directives, such as {@link ngIf}, {@link ngSwitch} and {@link ngRepeat}               // 6745\n * automatically destroy their transluded clones as necessary so you do not need to worry about this if                // 6746\n * you are simply using {@link ngTransclude} to inject the transclusion into your directive.                           // 6747\n *                                                                                                                     // 6748\n *                                                                                                                     // 6749\n * #### Transclusion Scopes                                                                                            // 6750\n *                                                                                                                     // 6751\n * When you call a transclude function it returns a DOM fragment that is pre-bound to a **transclusion                 // 6752\n * scope**. This scope is special, in that it is a child of the directive's scope (and so gets destroyed               // 6753\n * when the directive's scope gets destroyed) but it inherits the properties of the scope from which it                // 6754\n * was taken.                                                                                                          // 6755\n *                                                                                                                     // 6756\n * For example consider a directive that uses transclusion and isolated scope. The DOM hierarchy might look            // 6757\n * like this:                                                                                                          // 6758\n *                                                                                                                     // 6759\n * ```html                                                                                                             // 6760\n * <div ng-app>                                                                                                        // 6761\n *   <div isolate>                                                                                                     // 6762\n *     <div transclusion>                                                                                              // 6763\n *     </div>                                                                                                          // 6764\n *   </div>                                                                                                            // 6765\n * </div>                                                                                                              // 6766\n * ```                                                                                                                 // 6767\n *                                                                                                                     // 6768\n * The `$parent` scope hierarchy will look like this:                                                                  // 6769\n *                                                                                                                     // 6770\n * ```                                                                                                                 // 6771\n * - $rootScope                                                                                                        // 6772\n *   - isolate                                                                                                         // 6773\n *     - transclusion                                                                                                  // 6774\n * ```                                                                                                                 // 6775\n *                                                                                                                     // 6776\n * but the scopes will inherit prototypically from different scopes to their `$parent`.                                // 6777\n *                                                                                                                     // 6778\n * ```                                                                                                                 // 6779\n * - $rootScope                                                                                                        // 6780\n *   - transclusion                                                                                                    // 6781\n * - isolate                                                                                                           // 6782\n * ```                                                                                                                 // 6783\n *                                                                                                                     // 6784\n *                                                                                                                     // 6785\n * ### Attributes                                                                                                      // 6786\n *                                                                                                                     // 6787\n * The {@link ng.$compile.directive.Attributes Attributes} object - passed as a parameter in the                       // 6788\n * `link()` or `compile()` functions. It has a variety of uses.                                                        // 6789\n *                                                                                                                     // 6790\n * accessing *Normalized attribute names:*                                                                             // 6791\n * Directives like 'ngBind' can be expressed in many ways: 'ng:bind', `data-ng-bind`, or 'x-ng-bind'.                  // 6792\n * the attributes object allows for normalized access to                                                               // 6793\n *   the attributes.                                                                                                   // 6794\n *                                                                                                                     // 6795\n * * *Directive inter-communication:* All directives share the same instance of the attributes                         // 6796\n *   object which allows the directives to use the attributes object as inter directive                                // 6797\n *   communication.                                                                                                    // 6798\n *                                                                                                                     // 6799\n * * *Supports interpolation:* Interpolation attributes are assigned to the attribute object                           // 6800\n *   allowing other directives to read the interpolated value.                                                         // 6801\n *                                                                                                                     // 6802\n * * *Observing interpolated attributes:* Use `$observe` to observe the value changes of attributes                    // 6803\n *   that contain interpolation (e.g. `src=\"{{bar}}\"`). Not only is this very efficient but it's also                  // 6804\n *   the only way to easily get the actual value because during the linking phase the interpolation                    // 6805\n *   hasn't been evaluated yet and so the value is at this time set to `undefined`.                                    // 6806\n *                                                                                                                     // 6807\n * ```js                                                                                                               // 6808\n * function linkingFn(scope, elm, attrs, ctrl) {                                                                       // 6809\n *   // get the attribute value                                                                                        // 6810\n *   console.log(attrs.ngModel);                                                                                       // 6811\n *                                                                                                                     // 6812\n *   // change the attribute                                                                                           // 6813\n *   attrs.$set('ngModel', 'new value');                                                                               // 6814\n *                                                                                                                     // 6815\n *   // observe changes to interpolated attribute                                                                      // 6816\n *   attrs.$observe('ngModel', function(value) {                                                                       // 6817\n *     console.log('ngModel has changed value to ' + value);                                                           // 6818\n *   });                                                                                                               // 6819\n * }                                                                                                                   // 6820\n * ```                                                                                                                 // 6821\n *                                                                                                                     // 6822\n * ## Example                                                                                                          // 6823\n *                                                                                                                     // 6824\n * <div class=\"alert alert-warning\">                                                                                   // 6825\n * **Note**: Typically directives are registered with `module.directive`. The example below is                         // 6826\n * to illustrate how `$compile` works.                                                                                 // 6827\n * </div>                                                                                                              // 6828\n *                                                                                                                     // 6829\n <example module=\"compileExample\">                                                                                     // 6830\n   <file name=\"index.html\">                                                                                            // 6831\n    <script>                                                                                                           // 6832\n      angular.module('compileExample', [], function($compileProvider) {                                                // 6833\n        // configure new 'compile' directive by passing a directive                                                    // 6834\n        // factory function. The factory function injects the '$compile'                                               // 6835\n        $compileProvider.directive('compile', function($compile) {                                                     // 6836\n          // directive factory creates a link function                                                                 // 6837\n          return function(scope, element, attrs) {                                                                     // 6838\n            scope.$watch(                                                                                              // 6839\n              function(scope) {                                                                                        // 6840\n                 // watch the 'compile' expression for changes                                                         // 6841\n                return scope.$eval(attrs.compile);                                                                     // 6842\n              },                                                                                                       // 6843\n              function(value) {                                                                                        // 6844\n                // when the 'compile' expression changes                                                               // 6845\n                // assign it into the current DOM                                                                      // 6846\n                element.html(value);                                                                                   // 6847\n                                                                                                                       // 6848\n                // compile the new DOM and link it to the current                                                      // 6849\n                // scope.                                                                                              // 6850\n                // NOTE: we only compile .childNodes so that                                                           // 6851\n                // we don't get into infinite loop compiling ourselves                                                 // 6852\n                $compile(element.contents())(scope);                                                                   // 6853\n              }                                                                                                        // 6854\n            );                                                                                                         // 6855\n          };                                                                                                           // 6856\n        });                                                                                                            // 6857\n      })                                                                                                               // 6858\n      .controller('GreeterController', ['$scope', function($scope) {                                                   // 6859\n        $scope.name = 'Angular';                                                                                       // 6860\n        $scope.html = 'Hello {{name}}';                                                                                // 6861\n      }]);                                                                                                             // 6862\n    </script>                                                                                                          // 6863\n    <div ng-controller=\"GreeterController\">                                                                            // 6864\n      <input ng-model=\"name\"> <br/>                                                                                    // 6865\n      <textarea ng-model=\"html\"></textarea> <br/>                                                                      // 6866\n      <div compile=\"html\"></div>                                                                                       // 6867\n    </div>                                                                                                             // 6868\n   </file>                                                                                                             // 6869\n   <file name=\"protractor.js\" type=\"protractor\">                                                                       // 6870\n     it('should auto compile', function() {                                                                            // 6871\n       var textarea = $('textarea');                                                                                   // 6872\n       var output = $('div[compile]');                                                                                 // 6873\n       // The initial state reads 'Hello Angular'.                                                                     // 6874\n       expect(output.getText()).toBe('Hello Angular');                                                                 // 6875\n       textarea.clear();                                                                                               // 6876\n       textarea.sendKeys('{{name}}!');                                                                                 // 6877\n       expect(output.getText()).toBe('Angular!');                                                                      // 6878\n     });                                                                                                               // 6879\n   </file>                                                                                                             // 6880\n </example>                                                                                                            // 6881\n                                                                                                                       // 6882\n *                                                                                                                     // 6883\n *                                                                                                                     // 6884\n * @param {string|DOMElement} element Element or HTML string to compile into a template function.                      // 6885\n * @param {function(angular.Scope, cloneAttachFn=)} transclude function available to directives - DEPRECATED.          // 6886\n *                                                                                                                     // 6887\n * <div class=\"alert alert-danger\">                                                                                    // 6888\n * **Note:** Passing a `transclude` function to the $compile function is deprecated, as it                             // 6889\n *   e.g. will not use the right outer scope. Please pass the transclude function as a                                 // 6890\n *   `parentBoundTranscludeFn` to the link function instead.                                                           // 6891\n * </div>                                                                                                              // 6892\n *                                                                                                                     // 6893\n * @param {number} maxPriority only apply directives lower than given priority (Only effects the                       // 6894\n *                 root element(s), not their children)                                                                // 6895\n * @returns {function(scope, cloneAttachFn=, options=)} a link function which is used to bind template                 // 6896\n * (a DOM element/tree) to a scope. Where:                                                                             // 6897\n *                                                                                                                     // 6898\n *  * `scope` - A {@link ng.$rootScope.Scope Scope} to bind to.                                                        // 6899\n *  * `cloneAttachFn` - If `cloneAttachFn` is provided, then the link function will clone the                          // 6900\n *  `template` and call the `cloneAttachFn` function allowing the caller to attach the                                 // 6901\n *  cloned elements to the DOM document at the appropriate place. The `cloneAttachFn` is                               // 6902\n *  called as: <br/> `cloneAttachFn(clonedElement, scope)` where:                                                      // 6903\n *                                                                                                                     // 6904\n *      * `clonedElement` - is a clone of the original `element` passed into the compiler.                             // 6905\n *      * `scope` - is the current scope with which the linking function is working with.                              // 6906\n *                                                                                                                     // 6907\n *  * `options` - An optional object hash with linking options. If `options` is provided, then the following           // 6908\n *  keys may be used to control linking behavior:                                                                      // 6909\n *                                                                                                                     // 6910\n *      * `parentBoundTranscludeFn` - the transclude function made available to                                        // 6911\n *        directives; if given, it will be passed through to the link functions of                                     // 6912\n *        directives found in `element` during compilation.                                                            // 6913\n *      * `transcludeControllers` - an object hash with keys that map controller names                                 // 6914\n *        to controller instances; if given, it will make the controllers                                              // 6915\n *        available to directives.                                                                                     // 6916\n *      * `futureParentElement` - defines the parent to which the `cloneAttachFn` will add                             // 6917\n *        the cloned elements; only needed for transcludes that are allowed to contain non html                        // 6918\n *        elements (e.g. SVG elements). See also the directive.controller property.                                    // 6919\n *                                                                                                                     // 6920\n * Calling the linking function returns the element of the template. It is either the original                         // 6921\n * element passed in, or the clone of the element if the `cloneAttachFn` is provided.                                  // 6922\n *                                                                                                                     // 6923\n * After linking the view is not updated until after a call to $digest which typically is done by                      // 6924\n * Angular automatically.                                                                                              // 6925\n *                                                                                                                     // 6926\n * If you need access to the bound view, there are two ways to do it:                                                  // 6927\n *                                                                                                                     // 6928\n * - If you are not asking the linking function to clone the template, create the DOM element(s)                       // 6929\n *   before you send them to the compiler and keep this reference around.                                              // 6930\n *   ```js                                                                                                             // 6931\n *     var element = $compile('<p>{{total}}</p>')(scope);                                                              // 6932\n *   ```                                                                                                               // 6933\n *                                                                                                                     // 6934\n * - if on the other hand, you need the element to be cloned, the view reference from the original                     // 6935\n *   example would not point to the clone, but rather to the original template that was cloned. In                     // 6936\n *   this case, you can access the clone via the cloneAttachFn:                                                        // 6937\n *   ```js                                                                                                             // 6938\n *     var templateElement = angular.element('<p>{{total}}</p>'),                                                      // 6939\n *         scope = ....;                                                                                               // 6940\n *                                                                                                                     // 6941\n *     var clonedElement = $compile(templateElement)(scope, function(clonedElement, scope) {                           // 6942\n *       //attach the clone to DOM document at the right place                                                         // 6943\n *     });                                                                                                             // 6944\n *                                                                                                                     // 6945\n *     //now we have reference to the cloned DOM via `clonedElement`                                                   // 6946\n *   ```                                                                                                               // 6947\n *                                                                                                                     // 6948\n *                                                                                                                     // 6949\n * For information on how the compiler works, see the                                                                  // 6950\n * {@link guide/compiler Angular HTML Compiler} section of the Developer Guide.                                        // 6951\n */                                                                                                                    // 6952\n                                                                                                                       // 6953\nvar $compileMinErr = minErr('$compile');                                                                               // 6954\n                                                                                                                       // 6955\n/**                                                                                                                    // 6956\n * @ngdoc provider                                                                                                     // 6957\n * @name $compileProvider                                                                                              // 6958\n *                                                                                                                     // 6959\n * @description                                                                                                        // 6960\n */                                                                                                                    // 6961\n$CompileProvider.$inject = ['$provide', '$$sanitizeUriProvider'];                                                      // 6962\nfunction $CompileProvider($provide, $$sanitizeUriProvider) {                                                           // 6963\n  var hasDirectives = {},                                                                                              // 6964\n      Suffix = 'Directive',                                                                                            // 6965\n      COMMENT_DIRECTIVE_REGEXP = /^\\s*directive\\:\\s*([\\w\\-]+)\\s+(.*)$/,                                                // 6966\n      CLASS_DIRECTIVE_REGEXP = /(([\\w\\-]+)(?:\\:([^;]+))?;?)/,                                                          // 6967\n      ALL_OR_NOTHING_ATTRS = makeMap('ngSrc,ngSrcset,src,srcset'),                                                     // 6968\n      REQUIRE_PREFIX_REGEXP = /^(?:(\\^\\^?)?(\\?)?(\\^\\^?)?)?/;                                                           // 6969\n                                                                                                                       // 6970\n  // Ref: http://developers.whatwg.org/webappapis.html#event-handler-idl-attributes                                    // 6971\n  // The assumption is that future DOM event attribute names will begin with                                           // 6972\n  // 'on' and be composed of only English letters.                                                                     // 6973\n  var EVENT_HANDLER_ATTR_REGEXP = /^(on[a-z]+|formaction)$/;                                                           // 6974\n                                                                                                                       // 6975\n  function parseIsolateBindings(scope, directiveName, isController) {                                                  // 6976\n    var LOCAL_REGEXP = /^\\s*([@&]|=(\\*?))(\\??)\\s*(\\w*)\\s*$/;                                                           // 6977\n                                                                                                                       // 6978\n    var bindings = {};                                                                                                 // 6979\n                                                                                                                       // 6980\n    forEach(scope, function(definition, scopeName) {                                                                   // 6981\n      var match = definition.match(LOCAL_REGEXP);                                                                      // 6982\n                                                                                                                       // 6983\n      if (!match) {                                                                                                    // 6984\n        throw $compileMinErr('iscp',                                                                                   // 6985\n            \"Invalid {3} for directive '{0}'.\" +                                                                       // 6986\n            \" Definition: {... {1}: '{2}' ...}\",                                                                       // 6987\n            directiveName, scopeName, definition,                                                                      // 6988\n            (isController ? \"controller bindings definition\" :                                                         // 6989\n            \"isolate scope definition\"));                                                                              // 6990\n      }                                                                                                                // 6991\n                                                                                                                       // 6992\n      bindings[scopeName] = {                                                                                          // 6993\n        mode: match[1][0],                                                                                             // 6994\n        collection: match[2] === '*',                                                                                  // 6995\n        optional: match[3] === '?',                                                                                    // 6996\n        attrName: match[4] || scopeName                                                                                // 6997\n      };                                                                                                               // 6998\n    });                                                                                                                // 6999\n                                                                                                                       // 7000\n    return bindings;                                                                                                   // 7001\n  }                                                                                                                    // 7002\n                                                                                                                       // 7003\n  function parseDirectiveBindings(directive, directiveName) {                                                          // 7004\n    var bindings = {                                                                                                   // 7005\n      isolateScope: null,                                                                                              // 7006\n      bindToController: null                                                                                           // 7007\n    };                                                                                                                 // 7008\n    if (isObject(directive.scope)) {                                                                                   // 7009\n      if (directive.bindToController === true) {                                                                       // 7010\n        bindings.bindToController = parseIsolateBindings(directive.scope,                                              // 7011\n                                                         directiveName, true);                                         // 7012\n        bindings.isolateScope = {};                                                                                    // 7013\n      } else {                                                                                                         // 7014\n        bindings.isolateScope = parseIsolateBindings(directive.scope,                                                  // 7015\n                                                     directiveName, false);                                            // 7016\n      }                                                                                                                // 7017\n    }                                                                                                                  // 7018\n    if (isObject(directive.bindToController)) {                                                                        // 7019\n      bindings.bindToController =                                                                                      // 7020\n          parseIsolateBindings(directive.bindToController, directiveName, true);                                       // 7021\n    }                                                                                                                  // 7022\n    if (isObject(bindings.bindToController)) {                                                                         // 7023\n      var controller = directive.controller;                                                                           // 7024\n      var controllerAs = directive.controllerAs;                                                                       // 7025\n      if (!controller) {                                                                                               // 7026\n        // There is no controller, there may or may not be a controllerAs property                                     // 7027\n        throw $compileMinErr('noctrl',                                                                                 // 7028\n              \"Cannot bind to controller without directive '{0}'s controller.\",                                        // 7029\n              directiveName);                                                                                          // 7030\n      } else if (!identifierForController(controller, controllerAs)) {                                                 // 7031\n        // There is a controller, but no identifier or controllerAs property                                           // 7032\n        throw $compileMinErr('noident',                                                                                // 7033\n              \"Cannot bind to controller without identifier for directive '{0}'.\",                                     // 7034\n              directiveName);                                                                                          // 7035\n      }                                                                                                                // 7036\n    }                                                                                                                  // 7037\n    return bindings;                                                                                                   // 7038\n  }                                                                                                                    // 7039\n                                                                                                                       // 7040\n  function assertValidDirectiveName(name) {                                                                            // 7041\n    var letter = name.charAt(0);                                                                                       // 7042\n    if (!letter || letter !== lowercase(letter)) {                                                                     // 7043\n      throw $compileMinErr('baddir', \"Directive name '{0}' is invalid. The first character must be a lowercase letter\", name);\n    }                                                                                                                  // 7045\n    if (name !== name.trim()) {                                                                                        // 7046\n      throw $compileMinErr('baddir',                                                                                   // 7047\n            \"Directive name '{0}' is invalid. The name should not contain leading or trailing whitespaces\",            // 7048\n            name);                                                                                                     // 7049\n    }                                                                                                                  // 7050\n  }                                                                                                                    // 7051\n                                                                                                                       // 7052\n  /**                                                                                                                  // 7053\n   * @ngdoc method                                                                                                     // 7054\n   * @name $compileProvider#directive                                                                                  // 7055\n   * @kind function                                                                                                    // 7056\n   *                                                                                                                   // 7057\n   * @description                                                                                                      // 7058\n   * Register a new directive with the compiler.                                                                       // 7059\n   *                                                                                                                   // 7060\n   * @param {string|Object} name Name of the directive in camel-case (i.e. <code>ngBind</code> which                   // 7061\n   *    will match as <code>ng-bind</code>), or an object map of directives where the keys are the                     // 7062\n   *    names and the values are the factories.                                                                        // 7063\n   * @param {Function|Array} directiveFactory An injectable directive factory function. See                            // 7064\n   *    {@link guide/directive} for more info.                                                                         // 7065\n   * @returns {ng.$compileProvider} Self for chaining.                                                                 // 7066\n   */                                                                                                                  // 7067\n   this.directive = function registerDirective(name, directiveFactory) {                                               // 7068\n    assertNotHasOwnProperty(name, 'directive');                                                                        // 7069\n    if (isString(name)) {                                                                                              // 7070\n      assertValidDirectiveName(name);                                                                                  // 7071\n      assertArg(directiveFactory, 'directiveFactory');                                                                 // 7072\n      if (!hasDirectives.hasOwnProperty(name)) {                                                                       // 7073\n        hasDirectives[name] = [];                                                                                      // 7074\n        $provide.factory(name + Suffix, ['$injector', '$exceptionHandler',                                             // 7075\n          function($injector, $exceptionHandler) {                                                                     // 7076\n            var directives = [];                                                                                       // 7077\n            forEach(hasDirectives[name], function(directiveFactory, index) {                                           // 7078\n              try {                                                                                                    // 7079\n                var directive = $injector.invoke(directiveFactory);                                                    // 7080\n                if (isFunction(directive)) {                                                                           // 7081\n                  directive = { compile: valueFn(directive) };                                                         // 7082\n                } else if (!directive.compile && directive.link) {                                                     // 7083\n                  directive.compile = valueFn(directive.link);                                                         // 7084\n                }                                                                                                      // 7085\n                directive.priority = directive.priority || 0;                                                          // 7086\n                directive.index = index;                                                                               // 7087\n                directive.name = directive.name || name;                                                               // 7088\n                directive.require = directive.require || (directive.controller && directive.name);                     // 7089\n                directive.restrict = directive.restrict || 'EA';                                                       // 7090\n                var bindings = directive.$$bindings =                                                                  // 7091\n                    parseDirectiveBindings(directive, directive.name);                                                 // 7092\n                if (isObject(bindings.isolateScope)) {                                                                 // 7093\n                  directive.$$isolateBindings = bindings.isolateScope;                                                 // 7094\n                }                                                                                                      // 7095\n                directive.$$moduleName = directiveFactory.$$moduleName;                                                // 7096\n                directives.push(directive);                                                                            // 7097\n              } catch (e) {                                                                                            // 7098\n                $exceptionHandler(e);                                                                                  // 7099\n              }                                                                                                        // 7100\n            });                                                                                                        // 7101\n            return directives;                                                                                         // 7102\n          }]);                                                                                                         // 7103\n      }                                                                                                                // 7104\n      hasDirectives[name].push(directiveFactory);                                                                      // 7105\n    } else {                                                                                                           // 7106\n      forEach(name, reverseParams(registerDirective));                                                                 // 7107\n    }                                                                                                                  // 7108\n    return this;                                                                                                       // 7109\n  };                                                                                                                   // 7110\n                                                                                                                       // 7111\n                                                                                                                       // 7112\n  /**                                                                                                                  // 7113\n   * @ngdoc method                                                                                                     // 7114\n   * @name $compileProvider#aHrefSanitizationWhitelist                                                                 // 7115\n   * @kind function                                                                                                    // 7116\n   *                                                                                                                   // 7117\n   * @description                                                                                                      // 7118\n   * Retrieves or overrides the default regular expression that is used for whitelisting of safe                       // 7119\n   * urls during a[href] sanitization.                                                                                 // 7120\n   *                                                                                                                   // 7121\n   * The sanitization is a security measure aimed at preventing XSS attacks via html links.                            // 7122\n   *                                                                                                                   // 7123\n   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into                      // 7124\n   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`                          // 7125\n   * regular expression. If a match is found, the original url is written into the dom. Otherwise,                     // 7126\n   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.                    // 7127\n   *                                                                                                                   // 7128\n   * @param {RegExp=} regexp New regexp to whitelist urls with.                                                        // 7129\n   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for                          // 7130\n   *    chaining otherwise.                                                                                            // 7131\n   */                                                                                                                  // 7132\n  this.aHrefSanitizationWhitelist = function(regexp) {                                                                 // 7133\n    if (isDefined(regexp)) {                                                                                           // 7134\n      $$sanitizeUriProvider.aHrefSanitizationWhitelist(regexp);                                                        // 7135\n      return this;                                                                                                     // 7136\n    } else {                                                                                                           // 7137\n      return $$sanitizeUriProvider.aHrefSanitizationWhitelist();                                                       // 7138\n    }                                                                                                                  // 7139\n  };                                                                                                                   // 7140\n                                                                                                                       // 7141\n                                                                                                                       // 7142\n  /**                                                                                                                  // 7143\n   * @ngdoc method                                                                                                     // 7144\n   * @name $compileProvider#imgSrcSanitizationWhitelist                                                                // 7145\n   * @kind function                                                                                                    // 7146\n   *                                                                                                                   // 7147\n   * @description                                                                                                      // 7148\n   * Retrieves or overrides the default regular expression that is used for whitelisting of safe                       // 7149\n   * urls during img[src] sanitization.                                                                                // 7150\n   *                                                                                                                   // 7151\n   * The sanitization is a security measure aimed at prevent XSS attacks via html links.                               // 7152\n   *                                                                                                                   // 7153\n   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into                     // 7154\n   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`                         // 7155\n   * regular expression. If a match is found, the original url is written into the dom. Otherwise,                     // 7156\n   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.                    // 7157\n   *                                                                                                                   // 7158\n   * @param {RegExp=} regexp New regexp to whitelist urls with.                                                        // 7159\n   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for                          // 7160\n   *    chaining otherwise.                                                                                            // 7161\n   */                                                                                                                  // 7162\n  this.imgSrcSanitizationWhitelist = function(regexp) {                                                                // 7163\n    if (isDefined(regexp)) {                                                                                           // 7164\n      $$sanitizeUriProvider.imgSrcSanitizationWhitelist(regexp);                                                       // 7165\n      return this;                                                                                                     // 7166\n    } else {                                                                                                           // 7167\n      return $$sanitizeUriProvider.imgSrcSanitizationWhitelist();                                                      // 7168\n    }                                                                                                                  // 7169\n  };                                                                                                                   // 7170\n                                                                                                                       // 7171\n  /**                                                                                                                  // 7172\n   * @ngdoc method                                                                                                     // 7173\n   * @name  $compileProvider#debugInfoEnabled                                                                          // 7174\n   *                                                                                                                   // 7175\n   * @param {boolean=} enabled update the debugInfoEnabled state if provided, otherwise just return the                // 7176\n   * current debugInfoEnabled state                                                                                    // 7177\n   * @returns {*} current value if used as getter or itself (chaining) if used as setter                               // 7178\n   *                                                                                                                   // 7179\n   * @kind function                                                                                                    // 7180\n   *                                                                                                                   // 7181\n   * @description                                                                                                      // 7182\n   * Call this method to enable/disable various debug runtime information in the compiler such as adding               // 7183\n   * binding information and a reference to the current scope on to DOM elements.                                      // 7184\n   * If enabled, the compiler will add the following to DOM elements that have been bound to the scope                 // 7185\n   * * `ng-binding` CSS class                                                                                          // 7186\n   * * `$binding` data property containing an array of the binding expressions                                         // 7187\n   *                                                                                                                   // 7188\n   * You may want to disable this in production for a significant performance boost. See                               // 7189\n   * {@link guide/production#disabling-debug-data Disabling Debug Data} for more.                                      // 7190\n   *                                                                                                                   // 7191\n   * The default value is true.                                                                                        // 7192\n   */                                                                                                                  // 7193\n  var debugInfoEnabled = true;                                                                                         // 7194\n  this.debugInfoEnabled = function(enabled) {                                                                          // 7195\n    if (isDefined(enabled)) {                                                                                          // 7196\n      debugInfoEnabled = enabled;                                                                                      // 7197\n      return this;                                                                                                     // 7198\n    }                                                                                                                  // 7199\n    return debugInfoEnabled;                                                                                           // 7200\n  };                                                                                                                   // 7201\n                                                                                                                       // 7202\n  this.$get = [                                                                                                        // 7203\n            '$injector', '$interpolate', '$exceptionHandler', '$templateRequest', '$parse',                            // 7204\n            '$controller', '$rootScope', '$document', '$sce', '$animate', '$$sanitizeUri',                             // 7205\n    function($injector,   $interpolate,   $exceptionHandler,   $templateRequest,   $parse,                             // 7206\n             $controller,   $rootScope,   $document,   $sce,   $animate,   $$sanitizeUri) {                            // 7207\n                                                                                                                       // 7208\n    var Attributes = function(element, attributesToCopy) {                                                             // 7209\n      if (attributesToCopy) {                                                                                          // 7210\n        var keys = Object.keys(attributesToCopy);                                                                      // 7211\n        var i, l, key;                                                                                                 // 7212\n                                                                                                                       // 7213\n        for (i = 0, l = keys.length; i < l; i++) {                                                                     // 7214\n          key = keys[i];                                                                                               // 7215\n          this[key] = attributesToCopy[key];                                                                           // 7216\n        }                                                                                                              // 7217\n      } else {                                                                                                         // 7218\n        this.$attr = {};                                                                                               // 7219\n      }                                                                                                                // 7220\n                                                                                                                       // 7221\n      this.$$element = element;                                                                                        // 7222\n    };                                                                                                                 // 7223\n                                                                                                                       // 7224\n    Attributes.prototype = {                                                                                           // 7225\n      /**                                                                                                              // 7226\n       * @ngdoc method                                                                                                 // 7227\n       * @name $compile.directive.Attributes#$normalize                                                                // 7228\n       * @kind function                                                                                                // 7229\n       *                                                                                                               // 7230\n       * @description                                                                                                  // 7231\n       * Converts an attribute name (e.g. dash/colon/underscore-delimited string, optionally prefixed with `x-` or     // 7232\n       * `data-`) to its normalized, camelCase form.                                                                   // 7233\n       *                                                                                                               // 7234\n       * Also there is special case for Moz prefix starting with upper case letter.                                    // 7235\n       *                                                                                                               // 7236\n       * For further information check out the guide on {@link guide/directive#matching-directives Matching Directives}\n       *                                                                                                               // 7238\n       * @param {string} name Name to normalize                                                                        // 7239\n       */                                                                                                              // 7240\n      $normalize: directiveNormalize,                                                                                  // 7241\n                                                                                                                       // 7242\n                                                                                                                       // 7243\n      /**                                                                                                              // 7244\n       * @ngdoc method                                                                                                 // 7245\n       * @name $compile.directive.Attributes#$addClass                                                                 // 7246\n       * @kind function                                                                                                // 7247\n       *                                                                                                               // 7248\n       * @description                                                                                                  // 7249\n       * Adds the CSS class value specified by the classVal parameter to the element. If animations                    // 7250\n       * are enabled then an animation will be triggered for the class addition.                                       // 7251\n       *                                                                                                               // 7252\n       * @param {string} classVal The className value that will be added to the element                                // 7253\n       */                                                                                                              // 7254\n      $addClass: function(classVal) {                                                                                  // 7255\n        if (classVal && classVal.length > 0) {                                                                         // 7256\n          $animate.addClass(this.$$element, classVal);                                                                 // 7257\n        }                                                                                                              // 7258\n      },                                                                                                               // 7259\n                                                                                                                       // 7260\n      /**                                                                                                              // 7261\n       * @ngdoc method                                                                                                 // 7262\n       * @name $compile.directive.Attributes#$removeClass                                                              // 7263\n       * @kind function                                                                                                // 7264\n       *                                                                                                               // 7265\n       * @description                                                                                                  // 7266\n       * Removes the CSS class value specified by the classVal parameter from the element. If                          // 7267\n       * animations are enabled then an animation will be triggered for the class removal.                             // 7268\n       *                                                                                                               // 7269\n       * @param {string} classVal The className value that will be removed from the element                            // 7270\n       */                                                                                                              // 7271\n      $removeClass: function(classVal) {                                                                               // 7272\n        if (classVal && classVal.length > 0) {                                                                         // 7273\n          $animate.removeClass(this.$$element, classVal);                                                              // 7274\n        }                                                                                                              // 7275\n      },                                                                                                               // 7276\n                                                                                                                       // 7277\n      /**                                                                                                              // 7278\n       * @ngdoc method                                                                                                 // 7279\n       * @name $compile.directive.Attributes#$updateClass                                                              // 7280\n       * @kind function                                                                                                // 7281\n       *                                                                                                               // 7282\n       * @description                                                                                                  // 7283\n       * Adds and removes the appropriate CSS class values to the element based on the difference                      // 7284\n       * between the new and old CSS class values (specified as newClasses and oldClasses).                            // 7285\n       *                                                                                                               // 7286\n       * @param {string} newClasses The current CSS className value                                                    // 7287\n       * @param {string} oldClasses The former CSS className value                                                     // 7288\n       */                                                                                                              // 7289\n      $updateClass: function(newClasses, oldClasses) {                                                                 // 7290\n        var toAdd = tokenDifference(newClasses, oldClasses);                                                           // 7291\n        if (toAdd && toAdd.length) {                                                                                   // 7292\n          $animate.addClass(this.$$element, toAdd);                                                                    // 7293\n        }                                                                                                              // 7294\n                                                                                                                       // 7295\n        var toRemove = tokenDifference(oldClasses, newClasses);                                                        // 7296\n        if (toRemove && toRemove.length) {                                                                             // 7297\n          $animate.removeClass(this.$$element, toRemove);                                                              // 7298\n        }                                                                                                              // 7299\n      },                                                                                                               // 7300\n                                                                                                                       // 7301\n      /**                                                                                                              // 7302\n       * Set a normalized attribute on the element in a way such that all directives                                   // 7303\n       * can share the attribute. This function properly handles boolean attributes.                                   // 7304\n       * @param {string} key Normalized key. (ie ngAttribute)                                                          // 7305\n       * @param {string|boolean} value The value to set. If `null` attribute will be deleted.                          // 7306\n       * @param {boolean=} writeAttr If false, does not write the value to DOM element attribute.                      // 7307\n       *     Defaults to true.                                                                                         // 7308\n       * @param {string=} attrName Optional none normalized name. Defaults to key.                                     // 7309\n       */                                                                                                              // 7310\n      $set: function(key, value, writeAttr, attrName) {                                                                // 7311\n        // TODO: decide whether or not to throw an error if \"class\"                                                    // 7312\n        //is set through this function since it may cause $updateClass to                                              // 7313\n        //become unstable.                                                                                             // 7314\n                                                                                                                       // 7315\n        var node = this.$$element[0],                                                                                  // 7316\n            booleanKey = getBooleanAttrName(node, key),                                                                // 7317\n            aliasedKey = getAliasedAttrName(key),                                                                      // 7318\n            observer = key,                                                                                            // 7319\n            nodeName;                                                                                                  // 7320\n                                                                                                                       // 7321\n        if (booleanKey) {                                                                                              // 7322\n          this.$$element.prop(key, value);                                                                             // 7323\n          attrName = booleanKey;                                                                                       // 7324\n        } else if (aliasedKey) {                                                                                       // 7325\n          this[aliasedKey] = value;                                                                                    // 7326\n          observer = aliasedKey;                                                                                       // 7327\n        }                                                                                                              // 7328\n                                                                                                                       // 7329\n        this[key] = value;                                                                                             // 7330\n                                                                                                                       // 7331\n        // translate normalized key to actual key                                                                      // 7332\n        if (attrName) {                                                                                                // 7333\n          this.$attr[key] = attrName;                                                                                  // 7334\n        } else {                                                                                                       // 7335\n          attrName = this.$attr[key];                                                                                  // 7336\n          if (!attrName) {                                                                                             // 7337\n            this.$attr[key] = attrName = snake_case(key, '-');                                                         // 7338\n          }                                                                                                            // 7339\n        }                                                                                                              // 7340\n                                                                                                                       // 7341\n        nodeName = nodeName_(this.$$element);                                                                          // 7342\n                                                                                                                       // 7343\n        if ((nodeName === 'a' && key === 'href') ||                                                                    // 7344\n            (nodeName === 'img' && key === 'src')) {                                                                   // 7345\n          // sanitize a[href] and img[src] values                                                                      // 7346\n          this[key] = value = $$sanitizeUri(value, key === 'src');                                                     // 7347\n        } else if (nodeName === 'img' && key === 'srcset') {                                                           // 7348\n          // sanitize img[srcset] values                                                                               // 7349\n          var result = \"\";                                                                                             // 7350\n                                                                                                                       // 7351\n          // first check if there are spaces because it's not the same pattern                                         // 7352\n          var trimmedSrcset = trim(value);                                                                             // 7353\n          //                (   999x   ,|   999w   ,|   ,|,   )                                                        // 7354\n          var srcPattern = /(\\s+\\d+x\\s*,|\\s+\\d+w\\s*,|\\s+,|,\\s+)/;                                                      // 7355\n          var pattern = /\\s/.test(trimmedSrcset) ? srcPattern : /(,)/;                                                 // 7356\n                                                                                                                       // 7357\n          // split srcset into tuple of uri and descriptor except for the last item                                    // 7358\n          var rawUris = trimmedSrcset.split(pattern);                                                                  // 7359\n                                                                                                                       // 7360\n          // for each tuples                                                                                           // 7361\n          var nbrUrisWith2parts = Math.floor(rawUris.length / 2);                                                      // 7362\n          for (var i = 0; i < nbrUrisWith2parts; i++) {                                                                // 7363\n            var innerIdx = i * 2;                                                                                      // 7364\n            // sanitize the uri                                                                                        // 7365\n            result += $$sanitizeUri(trim(rawUris[innerIdx]), true);                                                    // 7366\n            // add the descriptor                                                                                      // 7367\n            result += (\" \" + trim(rawUris[innerIdx + 1]));                                                             // 7368\n          }                                                                                                            // 7369\n                                                                                                                       // 7370\n          // split the last item into uri and descriptor                                                               // 7371\n          var lastTuple = trim(rawUris[i * 2]).split(/\\s/);                                                            // 7372\n                                                                                                                       // 7373\n          // sanitize the last uri                                                                                     // 7374\n          result += $$sanitizeUri(trim(lastTuple[0]), true);                                                           // 7375\n                                                                                                                       // 7376\n          // and add the last descriptor if any                                                                        // 7377\n          if (lastTuple.length === 2) {                                                                                // 7378\n            result += (\" \" + trim(lastTuple[1]));                                                                      // 7379\n          }                                                                                                            // 7380\n          this[key] = value = result;                                                                                  // 7381\n        }                                                                                                              // 7382\n                                                                                                                       // 7383\n        if (writeAttr !== false) {                                                                                     // 7384\n          if (value === null || isUndefined(value)) {                                                                  // 7385\n            this.$$element.removeAttr(attrName);                                                                       // 7386\n          } else {                                                                                                     // 7387\n            this.$$element.attr(attrName, value);                                                                      // 7388\n          }                                                                                                            // 7389\n        }                                                                                                              // 7390\n                                                                                                                       // 7391\n        // fire observers                                                                                              // 7392\n        var $$observers = this.$$observers;                                                                            // 7393\n        $$observers && forEach($$observers[observer], function(fn) {                                                   // 7394\n          try {                                                                                                        // 7395\n            fn(value);                                                                                                 // 7396\n          } catch (e) {                                                                                                // 7397\n            $exceptionHandler(e);                                                                                      // 7398\n          }                                                                                                            // 7399\n        });                                                                                                            // 7400\n      },                                                                                                               // 7401\n                                                                                                                       // 7402\n                                                                                                                       // 7403\n      /**                                                                                                              // 7404\n       * @ngdoc method                                                                                                 // 7405\n       * @name $compile.directive.Attributes#$observe                                                                  // 7406\n       * @kind function                                                                                                // 7407\n       *                                                                                                               // 7408\n       * @description                                                                                                  // 7409\n       * Observes an interpolated attribute.                                                                           // 7410\n       *                                                                                                               // 7411\n       * The observer function will be invoked once during the next `$digest` following                                // 7412\n       * compilation. The observer is then invoked whenever the interpolated value                                     // 7413\n       * changes.                                                                                                      // 7414\n       *                                                                                                               // 7415\n       * @param {string} key Normalized key. (ie ngAttribute) .                                                        // 7416\n       * @param {function(interpolatedValue)} fn Function that will be called whenever                                 // 7417\n                the interpolated value of the attribute changes.                                                       // 7418\n       *        See the {@link guide/directive#text-and-attribute-bindings Directives} guide for more info.            // 7419\n       * @returns {function()} Returns a deregistration function for this observer.                                    // 7420\n       */                                                                                                              // 7421\n      $observe: function(key, fn) {                                                                                    // 7422\n        var attrs = this,                                                                                              // 7423\n            $$observers = (attrs.$$observers || (attrs.$$observers = createMap())),                                    // 7424\n            listeners = ($$observers[key] || ($$observers[key] = []));                                                 // 7425\n                                                                                                                       // 7426\n        listeners.push(fn);                                                                                            // 7427\n        $rootScope.$evalAsync(function() {                                                                             // 7428\n          if (!listeners.$$inter && attrs.hasOwnProperty(key) && !isUndefined(attrs[key])) {                           // 7429\n            // no one registered attribute interpolation function, so lets call it manually                            // 7430\n            fn(attrs[key]);                                                                                            // 7431\n          }                                                                                                            // 7432\n        });                                                                                                            // 7433\n                                                                                                                       // 7434\n        return function() {                                                                                            // 7435\n          arrayRemove(listeners, fn);                                                                                  // 7436\n        };                                                                                                             // 7437\n      }                                                                                                                // 7438\n    };                                                                                                                 // 7439\n                                                                                                                       // 7440\n                                                                                                                       // 7441\n    function safeAddClass($element, className) {                                                                       // 7442\n      try {                                                                                                            // 7443\n        $element.addClass(className);                                                                                  // 7444\n      } catch (e) {                                                                                                    // 7445\n        // ignore, since it means that we are trying to set class on                                                   // 7446\n        // SVG element, where class name is read-only.                                                                 // 7447\n      }                                                                                                                // 7448\n    }                                                                                                                  // 7449\n                                                                                                                       // 7450\n                                                                                                                       // 7451\n    var startSymbol = $interpolate.startSymbol(),                                                                      // 7452\n        endSymbol = $interpolate.endSymbol(),                                                                          // 7453\n        denormalizeTemplate = (startSymbol == '{{' || endSymbol  == '}}')                                              // 7454\n            ? identity                                                                                                 // 7455\n            : function denormalizeTemplate(template) {                                                                 // 7456\n              return template.replace(/\\{\\{/g, startSymbol).replace(/}}/g, endSymbol);                                 // 7457\n        },                                                                                                             // 7458\n        NG_ATTR_BINDING = /^ngAttr[A-Z]/;                                                                              // 7459\n                                                                                                                       // 7460\n    compile.$$addBindingInfo = debugInfoEnabled ? function $$addBindingInfo($element, binding) {                       // 7461\n      var bindings = $element.data('$binding') || [];                                                                  // 7462\n                                                                                                                       // 7463\n      if (isArray(binding)) {                                                                                          // 7464\n        bindings = bindings.concat(binding);                                                                           // 7465\n      } else {                                                                                                         // 7466\n        bindings.push(binding);                                                                                        // 7467\n      }                                                                                                                // 7468\n                                                                                                                       // 7469\n      $element.data('$binding', bindings);                                                                             // 7470\n    } : noop;                                                                                                          // 7471\n                                                                                                                       // 7472\n    compile.$$addBindingClass = debugInfoEnabled ? function $$addBindingClass($element) {                              // 7473\n      safeAddClass($element, 'ng-binding');                                                                            // 7474\n    } : noop;                                                                                                          // 7475\n                                                                                                                       // 7476\n    compile.$$addScopeInfo = debugInfoEnabled ? function $$addScopeInfo($element, scope, isolated, noTemplate) {       // 7477\n      var dataName = isolated ? (noTemplate ? '$isolateScopeNoTemplate' : '$isolateScope') : '$scope';                 // 7478\n      $element.data(dataName, scope);                                                                                  // 7479\n    } : noop;                                                                                                          // 7480\n                                                                                                                       // 7481\n    compile.$$addScopeClass = debugInfoEnabled ? function $$addScopeClass($element, isolated) {                        // 7482\n      safeAddClass($element, isolated ? 'ng-isolate-scope' : 'ng-scope');                                              // 7483\n    } : noop;                                                                                                          // 7484\n                                                                                                                       // 7485\n    return compile;                                                                                                    // 7486\n                                                                                                                       // 7487\n    //================================                                                                                 // 7488\n                                                                                                                       // 7489\n    function compile($compileNodes, transcludeFn, maxPriority, ignoreDirective,                                        // 7490\n                        previousCompileContext) {                                                                      // 7491\n      if (!($compileNodes instanceof jqLite)) {                                                                        // 7492\n        // jquery always rewraps, whereas we need to preserve the original selector so that we can                     // 7493\n        // modify it.                                                                                                  // 7494\n        $compileNodes = jqLite($compileNodes);                                                                         // 7495\n      }                                                                                                                // 7496\n      // We can not compile top level text elements since text nodes can be merged and we will                         // 7497\n      // not be able to attach scope data to them, so we will wrap them in <span>                                      // 7498\n      forEach($compileNodes, function(node, index) {                                                                   // 7499\n        if (node.nodeType == NODE_TYPE_TEXT && node.nodeValue.match(/\\S+/) /* non-empty */ ) {                         // 7500\n          $compileNodes[index] = jqLite(node).wrap('<span></span>').parent()[0];                                       // 7501\n        }                                                                                                              // 7502\n      });                                                                                                              // 7503\n      var compositeLinkFn =                                                                                            // 7504\n              compileNodes($compileNodes, transcludeFn, $compileNodes,                                                 // 7505\n                           maxPriority, ignoreDirective, previousCompileContext);                                      // 7506\n      compile.$$addScopeClass($compileNodes);                                                                          // 7507\n      var namespace = null;                                                                                            // 7508\n      return function publicLinkFn(scope, cloneConnectFn, options) {                                                   // 7509\n        assertArg(scope, 'scope');                                                                                     // 7510\n                                                                                                                       // 7511\n        options = options || {};                                                                                       // 7512\n        var parentBoundTranscludeFn = options.parentBoundTranscludeFn,                                                 // 7513\n          transcludeControllers = options.transcludeControllers,                                                       // 7514\n          futureParentElement = options.futureParentElement;                                                           // 7515\n                                                                                                                       // 7516\n        // When `parentBoundTranscludeFn` is passed, it is a                                                           // 7517\n        // `controllersBoundTransclude` function (it was previously passed                                             // 7518\n        // as `transclude` to directive.link) so we must unwrap it to get                                              // 7519\n        // its `boundTranscludeFn`                                                                                     // 7520\n        if (parentBoundTranscludeFn && parentBoundTranscludeFn.$$boundTransclude) {                                    // 7521\n          parentBoundTranscludeFn = parentBoundTranscludeFn.$$boundTransclude;                                         // 7522\n        }                                                                                                              // 7523\n                                                                                                                       // 7524\n        if (!namespace) {                                                                                              // 7525\n          namespace = detectNamespaceForChildElements(futureParentElement);                                            // 7526\n        }                                                                                                              // 7527\n        var $linkNode;                                                                                                 // 7528\n        if (namespace !== 'html') {                                                                                    // 7529\n          // When using a directive with replace:true and templateUrl the $compileNodes                                // 7530\n          // (or a child element inside of them)                                                                       // 7531\n          // might change, so we need to recreate the namespace adapted compileNodes                                   // 7532\n          // for call to the link function.                                                                            // 7533\n          // Note: This will already clone the nodes...                                                                // 7534\n          $linkNode = jqLite(                                                                                          // 7535\n            wrapTemplate(namespace, jqLite('<div>').append($compileNodes).html())                                      // 7536\n          );                                                                                                           // 7537\n        } else if (cloneConnectFn) {                                                                                   // 7538\n          // important!!: we must call our jqLite.clone() since the jQuery one is trying to be smart                   // 7539\n          // and sometimes changes the structure of the DOM.                                                           // 7540\n          $linkNode = JQLitePrototype.clone.call($compileNodes);                                                       // 7541\n        } else {                                                                                                       // 7542\n          $linkNode = $compileNodes;                                                                                   // 7543\n        }                                                                                                              // 7544\n                                                                                                                       // 7545\n        if (transcludeControllers) {                                                                                   // 7546\n          for (var controllerName in transcludeControllers) {                                                          // 7547\n            $linkNode.data('$' + controllerName + 'Controller', transcludeControllers[controllerName].instance);       // 7548\n          }                                                                                                            // 7549\n        }                                                                                                              // 7550\n                                                                                                                       // 7551\n        compile.$$addScopeInfo($linkNode, scope);                                                                      // 7552\n                                                                                                                       // 7553\n        if (cloneConnectFn) cloneConnectFn($linkNode, scope);                                                          // 7554\n        if (compositeLinkFn) compositeLinkFn(scope, $linkNode, $linkNode, parentBoundTranscludeFn);                    // 7555\n        return $linkNode;                                                                                              // 7556\n      };                                                                                                               // 7557\n    }                                                                                                                  // 7558\n                                                                                                                       // 7559\n    function detectNamespaceForChildElements(parentElement) {                                                          // 7560\n      // TODO: Make this detect MathML as well...                                                                      // 7561\n      var node = parentElement && parentElement[0];                                                                    // 7562\n      if (!node) {                                                                                                     // 7563\n        return 'html';                                                                                                 // 7564\n      } else {                                                                                                         // 7565\n        return nodeName_(node) !== 'foreignobject' && node.toString().match(/SVG/) ? 'svg' : 'html';                   // 7566\n      }                                                                                                                // 7567\n    }                                                                                                                  // 7568\n                                                                                                                       // 7569\n    /**                                                                                                                // 7570\n     * Compile function matches each node in nodeList against the directives. Once all directives                      // 7571\n     * for a particular node are collected their compile functions are executed. The compile                           // 7572\n     * functions return values - the linking functions - are combined into a composite linking                         // 7573\n     * function, which is the a linking function for the node.                                                         // 7574\n     *                                                                                                                 // 7575\n     * @param {NodeList} nodeList an array of nodes or NodeList to compile                                             // 7576\n     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the                     // 7577\n     *        scope argument is auto-generated to the new child of the transcluded parent scope.                       // 7578\n     * @param {DOMElement=} $rootElement If the nodeList is the root of the compilation tree then                      // 7579\n     *        the rootElement must be set the jqLite collection of the compile root. This is                           // 7580\n     *        needed so that the jqLite collection items can be replaced with widgets.                                 // 7581\n     * @param {number=} maxPriority Max directive priority.                                                            // 7582\n     * @returns {Function} A composite linking function of all of the matched directives or null.                      // 7583\n     */                                                                                                                // 7584\n    function compileNodes(nodeList, transcludeFn, $rootElement, maxPriority, ignoreDirective,                          // 7585\n                            previousCompileContext) {                                                                  // 7586\n      var linkFns = [],                                                                                                // 7587\n          attrs, directives, nodeLinkFn, childNodes, childLinkFn, linkFnFound, nodeLinkFnFound;                        // 7588\n                                                                                                                       // 7589\n      for (var i = 0; i < nodeList.length; i++) {                                                                      // 7590\n        attrs = new Attributes();                                                                                      // 7591\n                                                                                                                       // 7592\n        // we must always refer to nodeList[i] since the nodes can be replaced underneath us.                          // 7593\n        directives = collectDirectives(nodeList[i], [], attrs, i === 0 ? maxPriority : undefined,                      // 7594\n                                        ignoreDirective);                                                              // 7595\n                                                                                                                       // 7596\n        nodeLinkFn = (directives.length)                                                                               // 7597\n            ? applyDirectivesToNode(directives, nodeList[i], attrs, transcludeFn, $rootElement,                        // 7598\n                                      null, [], [], previousCompileContext)                                            // 7599\n            : null;                                                                                                    // 7600\n                                                                                                                       // 7601\n        if (nodeLinkFn && nodeLinkFn.scope) {                                                                          // 7602\n          compile.$$addScopeClass(attrs.$$element);                                                                    // 7603\n        }                                                                                                              // 7604\n                                                                                                                       // 7605\n        childLinkFn = (nodeLinkFn && nodeLinkFn.terminal ||                                                            // 7606\n                      !(childNodes = nodeList[i].childNodes) ||                                                        // 7607\n                      !childNodes.length)                                                                              // 7608\n            ? null                                                                                                     // 7609\n            : compileNodes(childNodes,                                                                                 // 7610\n                 nodeLinkFn ? (                                                                                        // 7611\n                  (nodeLinkFn.transcludeOnThisElement || !nodeLinkFn.templateOnThisElement)                            // 7612\n                     && nodeLinkFn.transclude) : transcludeFn);                                                        // 7613\n                                                                                                                       // 7614\n        if (nodeLinkFn || childLinkFn) {                                                                               // 7615\n          linkFns.push(i, nodeLinkFn, childLinkFn);                                                                    // 7616\n          linkFnFound = true;                                                                                          // 7617\n          nodeLinkFnFound = nodeLinkFnFound || nodeLinkFn;                                                             // 7618\n        }                                                                                                              // 7619\n                                                                                                                       // 7620\n        //use the previous context only for the first element in the virtual group                                     // 7621\n        previousCompileContext = null;                                                                                 // 7622\n      }                                                                                                                // 7623\n                                                                                                                       // 7624\n      // return a linking function if we have found anything, null otherwise                                           // 7625\n      return linkFnFound ? compositeLinkFn : null;                                                                     // 7626\n                                                                                                                       // 7627\n      function compositeLinkFn(scope, nodeList, $rootElement, parentBoundTranscludeFn) {                               // 7628\n        var nodeLinkFn, childLinkFn, node, childScope, i, ii, idx, childBoundTranscludeFn;                             // 7629\n        var stableNodeList;                                                                                            // 7630\n                                                                                                                       // 7631\n                                                                                                                       // 7632\n        if (nodeLinkFnFound) {                                                                                         // 7633\n          // copy nodeList so that if a nodeLinkFn removes or adds an element at this DOM level our                    // 7634\n          // offsets don't get screwed up                                                                              // 7635\n          var nodeListLength = nodeList.length;                                                                        // 7636\n          stableNodeList = new Array(nodeListLength);                                                                  // 7637\n                                                                                                                       // 7638\n          // create a sparse array by only copying the elements which have a linkFn                                    // 7639\n          for (i = 0; i < linkFns.length; i+=3) {                                                                      // 7640\n            idx = linkFns[i];                                                                                          // 7641\n            stableNodeList[idx] = nodeList[idx];                                                                       // 7642\n          }                                                                                                            // 7643\n        } else {                                                                                                       // 7644\n          stableNodeList = nodeList;                                                                                   // 7645\n        }                                                                                                              // 7646\n                                                                                                                       // 7647\n        for (i = 0, ii = linkFns.length; i < ii;) {                                                                    // 7648\n          node = stableNodeList[linkFns[i++]];                                                                         // 7649\n          nodeLinkFn = linkFns[i++];                                                                                   // 7650\n          childLinkFn = linkFns[i++];                                                                                  // 7651\n                                                                                                                       // 7652\n          if (nodeLinkFn) {                                                                                            // 7653\n            if (nodeLinkFn.scope) {                                                                                    // 7654\n              childScope = scope.$new();                                                                               // 7655\n              compile.$$addScopeInfo(jqLite(node), childScope);                                                        // 7656\n              var destroyBindings = nodeLinkFn.$$destroyBindings;                                                      // 7657\n              if (destroyBindings) {                                                                                   // 7658\n                nodeLinkFn.$$destroyBindings = null;                                                                   // 7659\n                childScope.$on('$destroyed', destroyBindings);                                                         // 7660\n              }                                                                                                        // 7661\n            } else {                                                                                                   // 7662\n              childScope = scope;                                                                                      // 7663\n            }                                                                                                          // 7664\n                                                                                                                       // 7665\n            if (nodeLinkFn.transcludeOnThisElement) {                                                                  // 7666\n              childBoundTranscludeFn = createBoundTranscludeFn(                                                        // 7667\n                  scope, nodeLinkFn.transclude, parentBoundTranscludeFn);                                              // 7668\n                                                                                                                       // 7669\n            } else if (!nodeLinkFn.templateOnThisElement && parentBoundTranscludeFn) {                                 // 7670\n              childBoundTranscludeFn = parentBoundTranscludeFn;                                                        // 7671\n                                                                                                                       // 7672\n            } else if (!parentBoundTranscludeFn && transcludeFn) {                                                     // 7673\n              childBoundTranscludeFn = createBoundTranscludeFn(scope, transcludeFn);                                   // 7674\n                                                                                                                       // 7675\n            } else {                                                                                                   // 7676\n              childBoundTranscludeFn = null;                                                                           // 7677\n            }                                                                                                          // 7678\n                                                                                                                       // 7679\n            nodeLinkFn(childLinkFn, childScope, node, $rootElement, childBoundTranscludeFn,                            // 7680\n                       nodeLinkFn);                                                                                    // 7681\n                                                                                                                       // 7682\n          } else if (childLinkFn) {                                                                                    // 7683\n            childLinkFn(scope, node.childNodes, undefined, parentBoundTranscludeFn);                                   // 7684\n          }                                                                                                            // 7685\n        }                                                                                                              // 7686\n      }                                                                                                                // 7687\n    }                                                                                                                  // 7688\n                                                                                                                       // 7689\n    function createBoundTranscludeFn(scope, transcludeFn, previousBoundTranscludeFn) {                                 // 7690\n                                                                                                                       // 7691\n      var boundTranscludeFn = function(transcludedScope, cloneFn, controllers, futureParentElement, containingScope) {\n                                                                                                                       // 7693\n        if (!transcludedScope) {                                                                                       // 7694\n          transcludedScope = scope.$new(false, containingScope);                                                       // 7695\n          transcludedScope.$$transcluded = true;                                                                       // 7696\n        }                                                                                                              // 7697\n                                                                                                                       // 7698\n        return transcludeFn(transcludedScope, cloneFn, {                                                               // 7699\n          parentBoundTranscludeFn: previousBoundTranscludeFn,                                                          // 7700\n          transcludeControllers: controllers,                                                                          // 7701\n          futureParentElement: futureParentElement                                                                     // 7702\n        });                                                                                                            // 7703\n      };                                                                                                               // 7704\n                                                                                                                       // 7705\n      return boundTranscludeFn;                                                                                        // 7706\n    }                                                                                                                  // 7707\n                                                                                                                       // 7708\n    /**                                                                                                                // 7709\n     * Looks for directives on the given node and adds them to the directive collection which is                       // 7710\n     * sorted.                                                                                                         // 7711\n     *                                                                                                                 // 7712\n     * @param node Node to search.                                                                                     // 7713\n     * @param directives An array to which the directives are added to. This array is sorted before                    // 7714\n     *        the function returns.                                                                                    // 7715\n     * @param attrs The shared attrs object which is used to populate the normalized attributes.                       // 7716\n     * @param {number=} maxPriority Max directive priority.                                                            // 7717\n     */                                                                                                                // 7718\n    function collectDirectives(node, directives, attrs, maxPriority, ignoreDirective) {                                // 7719\n      var nodeType = node.nodeType,                                                                                    // 7720\n          attrsMap = attrs.$attr,                                                                                      // 7721\n          match,                                                                                                       // 7722\n          className;                                                                                                   // 7723\n                                                                                                                       // 7724\n      switch (nodeType) {                                                                                              // 7725\n        case NODE_TYPE_ELEMENT: /* Element */                                                                          // 7726\n          // use the node name: <directive>                                                                            // 7727\n          addDirective(directives,                                                                                     // 7728\n              directiveNormalize(nodeName_(node)), 'E', maxPriority, ignoreDirective);                                 // 7729\n                                                                                                                       // 7730\n          // iterate over the attributes                                                                               // 7731\n          for (var attr, name, nName, ngAttrName, value, isNgAttr, nAttrs = node.attributes,                           // 7732\n                   j = 0, jj = nAttrs && nAttrs.length; j < jj; j++) {                                                 // 7733\n            var attrStartName = false;                                                                                 // 7734\n            var attrEndName = false;                                                                                   // 7735\n                                                                                                                       // 7736\n            attr = nAttrs[j];                                                                                          // 7737\n            name = attr.name;                                                                                          // 7738\n            value = trim(attr.value);                                                                                  // 7739\n                                                                                                                       // 7740\n            // support ngAttr attribute binding                                                                        // 7741\n            ngAttrName = directiveNormalize(name);                                                                     // 7742\n            if (isNgAttr = NG_ATTR_BINDING.test(ngAttrName)) {                                                         // 7743\n              name = name.replace(PREFIX_REGEXP, '')                                                                   // 7744\n                .substr(8).replace(/_(.)/g, function(match, letter) {                                                  // 7745\n                  return letter.toUpperCase();                                                                         // 7746\n                });                                                                                                    // 7747\n            }                                                                                                          // 7748\n                                                                                                                       // 7749\n            var directiveNName = ngAttrName.replace(/(Start|End)$/, '');                                               // 7750\n            if (directiveIsMultiElement(directiveNName)) {                                                             // 7751\n              if (ngAttrName === directiveNName + 'Start') {                                                           // 7752\n                attrStartName = name;                                                                                  // 7753\n                attrEndName = name.substr(0, name.length - 5) + 'end';                                                 // 7754\n                name = name.substr(0, name.length - 6);                                                                // 7755\n              }                                                                                                        // 7756\n            }                                                                                                          // 7757\n                                                                                                                       // 7758\n            nName = directiveNormalize(name.toLowerCase());                                                            // 7759\n            attrsMap[nName] = name;                                                                                    // 7760\n            if (isNgAttr || !attrs.hasOwnProperty(nName)) {                                                            // 7761\n                attrs[nName] = value;                                                                                  // 7762\n                if (getBooleanAttrName(node, nName)) {                                                                 // 7763\n                  attrs[nName] = true; // presence means true                                                          // 7764\n                }                                                                                                      // 7765\n            }                                                                                                          // 7766\n            addAttrInterpolateDirective(node, directives, value, nName, isNgAttr);                                     // 7767\n            addDirective(directives, nName, 'A', maxPriority, ignoreDirective, attrStartName,                          // 7768\n                          attrEndName);                                                                                // 7769\n          }                                                                                                            // 7770\n                                                                                                                       // 7771\n          // use class as directive                                                                                    // 7772\n          className = node.className;                                                                                  // 7773\n          if (isObject(className)) {                                                                                   // 7774\n              // Maybe SVGAnimatedString                                                                               // 7775\n              className = className.animVal;                                                                           // 7776\n          }                                                                                                            // 7777\n          if (isString(className) && className !== '') {                                                               // 7778\n            while (match = CLASS_DIRECTIVE_REGEXP.exec(className)) {                                                   // 7779\n              nName = directiveNormalize(match[2]);                                                                    // 7780\n              if (addDirective(directives, nName, 'C', maxPriority, ignoreDirective)) {                                // 7781\n                attrs[nName] = trim(match[3]);                                                                         // 7782\n              }                                                                                                        // 7783\n              className = className.substr(match.index + match[0].length);                                             // 7784\n            }                                                                                                          // 7785\n          }                                                                                                            // 7786\n          break;                                                                                                       // 7787\n        case NODE_TYPE_TEXT: /* Text Node */                                                                           // 7788\n          if (msie === 11) {                                                                                           // 7789\n            // Workaround for #11781                                                                                   // 7790\n            while (node.parentNode && node.nextSibling && node.nextSibling.nodeType === NODE_TYPE_TEXT) {              // 7791\n              node.nodeValue = node.nodeValue + node.nextSibling.nodeValue;                                            // 7792\n              node.parentNode.removeChild(node.nextSibling);                                                           // 7793\n            }                                                                                                          // 7794\n          }                                                                                                            // 7795\n          addTextInterpolateDirective(directives, node.nodeValue);                                                     // 7796\n          break;                                                                                                       // 7797\n        case NODE_TYPE_COMMENT: /* Comment */                                                                          // 7798\n          try {                                                                                                        // 7799\n            match = COMMENT_DIRECTIVE_REGEXP.exec(node.nodeValue);                                                     // 7800\n            if (match) {                                                                                               // 7801\n              nName = directiveNormalize(match[1]);                                                                    // 7802\n              if (addDirective(directives, nName, 'M', maxPriority, ignoreDirective)) {                                // 7803\n                attrs[nName] = trim(match[2]);                                                                         // 7804\n              }                                                                                                        // 7805\n            }                                                                                                          // 7806\n          } catch (e) {                                                                                                // 7807\n            // turns out that under some circumstances IE9 throws errors when one attempts to read                     // 7808\n            // comment's node value.                                                                                   // 7809\n            // Just ignore it and continue. (Can't seem to reproduce in test case.)                                    // 7810\n          }                                                                                                            // 7811\n          break;                                                                                                       // 7812\n      }                                                                                                                // 7813\n                                                                                                                       // 7814\n      directives.sort(byPriority);                                                                                     // 7815\n      return directives;                                                                                               // 7816\n    }                                                                                                                  // 7817\n                                                                                                                       // 7818\n    /**                                                                                                                // 7819\n     * Given a node with an directive-start it collects all of the siblings until it finds                             // 7820\n     * directive-end.                                                                                                  // 7821\n     * @param node                                                                                                     // 7822\n     * @param attrStart                                                                                                // 7823\n     * @param attrEnd                                                                                                  // 7824\n     * @returns {*}                                                                                                    // 7825\n     */                                                                                                                // 7826\n    function groupScan(node, attrStart, attrEnd) {                                                                     // 7827\n      var nodes = [];                                                                                                  // 7828\n      var depth = 0;                                                                                                   // 7829\n      if (attrStart && node.hasAttribute && node.hasAttribute(attrStart)) {                                            // 7830\n        do {                                                                                                           // 7831\n          if (!node) {                                                                                                 // 7832\n            throw $compileMinErr('uterdir',                                                                            // 7833\n                      \"Unterminated attribute, found '{0}' but no matching '{1}' found.\",                              // 7834\n                      attrStart, attrEnd);                                                                             // 7835\n          }                                                                                                            // 7836\n          if (node.nodeType == NODE_TYPE_ELEMENT) {                                                                    // 7837\n            if (node.hasAttribute(attrStart)) depth++;                                                                 // 7838\n            if (node.hasAttribute(attrEnd)) depth--;                                                                   // 7839\n          }                                                                                                            // 7840\n          nodes.push(node);                                                                                            // 7841\n          node = node.nextSibling;                                                                                     // 7842\n        } while (depth > 0);                                                                                           // 7843\n      } else {                                                                                                         // 7844\n        nodes.push(node);                                                                                              // 7845\n      }                                                                                                                // 7846\n                                                                                                                       // 7847\n      return jqLite(nodes);                                                                                            // 7848\n    }                                                                                                                  // 7849\n                                                                                                                       // 7850\n    /**                                                                                                                // 7851\n     * Wrapper for linking function which converts normal linking function into a grouped                              // 7852\n     * linking function.                                                                                               // 7853\n     * @param linkFn                                                                                                   // 7854\n     * @param attrStart                                                                                                // 7855\n     * @param attrEnd                                                                                                  // 7856\n     * @returns {Function}                                                                                             // 7857\n     */                                                                                                                // 7858\n    function groupElementsLinkFnWrapper(linkFn, attrStart, attrEnd) {                                                  // 7859\n      return function(scope, element, attrs, controllers, transcludeFn) {                                              // 7860\n        element = groupScan(element[0], attrStart, attrEnd);                                                           // 7861\n        return linkFn(scope, element, attrs, controllers, transcludeFn);                                               // 7862\n      };                                                                                                               // 7863\n    }                                                                                                                  // 7864\n                                                                                                                       // 7865\n    /**                                                                                                                // 7866\n     * Once the directives have been collected, their compile functions are executed. This method                      // 7867\n     * is responsible for inlining directive templates as well as terminating the application                          // 7868\n     * of the directives if the terminal directive has been reached.                                                   // 7869\n     *                                                                                                                 // 7870\n     * @param {Array} directives Array of collected directives to execute their compile function.                      // 7871\n     *        this needs to be pre-sorted by priority order.                                                           // 7872\n     * @param {Node} compileNode The raw DOM node to apply the compile functions to                                    // 7873\n     * @param {Object} templateAttrs The shared attribute function                                                     // 7874\n     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the                     // 7875\n     *                                                  scope argument is auto-generated to the new                    // 7876\n     *                                                  child of the transcluded parent scope.                         // 7877\n     * @param {JQLite} jqCollection If we are working on the root of the compile tree then this                        // 7878\n     *                              argument has the root jqLite array so that we can replace nodes                    // 7879\n     *                              on it.                                                                             // 7880\n     * @param {Object=} originalReplaceDirective An optional directive that will be ignored when                       // 7881\n     *                                           compiling the transclusion.                                           // 7882\n     * @param {Array.<Function>} preLinkFns                                                                            // 7883\n     * @param {Array.<Function>} postLinkFns                                                                           // 7884\n     * @param {Object} previousCompileContext Context used for previous compilation of the current                     // 7885\n     *                                        node                                                                     // 7886\n     * @returns {Function} linkFn                                                                                      // 7887\n     */                                                                                                                // 7888\n    function applyDirectivesToNode(directives, compileNode, templateAttrs, transcludeFn,                               // 7889\n                                   jqCollection, originalReplaceDirective, preLinkFns, postLinkFns,                    // 7890\n                                   previousCompileContext) {                                                           // 7891\n      previousCompileContext = previousCompileContext || {};                                                           // 7892\n                                                                                                                       // 7893\n      var terminalPriority = -Number.MAX_VALUE,                                                                        // 7894\n          newScopeDirective = previousCompileContext.newScopeDirective,                                                // 7895\n          controllerDirectives = previousCompileContext.controllerDirectives,                                          // 7896\n          newIsolateScopeDirective = previousCompileContext.newIsolateScopeDirective,                                  // 7897\n          templateDirective = previousCompileContext.templateDirective,                                                // 7898\n          nonTlbTranscludeDirective = previousCompileContext.nonTlbTranscludeDirective,                                // 7899\n          hasTranscludeDirective = false,                                                                              // 7900\n          hasTemplate = false,                                                                                         // 7901\n          hasElementTranscludeDirective = previousCompileContext.hasElementTranscludeDirective,                        // 7902\n          $compileNode = templateAttrs.$$element = jqLite(compileNode),                                                // 7903\n          directive,                                                                                                   // 7904\n          directiveName,                                                                                               // 7905\n          $template,                                                                                                   // 7906\n          replaceDirective = originalReplaceDirective,                                                                 // 7907\n          childTranscludeFn = transcludeFn,                                                                            // 7908\n          linkFn,                                                                                                      // 7909\n          directiveValue;                                                                                              // 7910\n                                                                                                                       // 7911\n      // executes all directives on the current element                                                                // 7912\n      for (var i = 0, ii = directives.length; i < ii; i++) {                                                           // 7913\n        directive = directives[i];                                                                                     // 7914\n        var attrStart = directive.$$start;                                                                             // 7915\n        var attrEnd = directive.$$end;                                                                                 // 7916\n                                                                                                                       // 7917\n        // collect multiblock sections                                                                                 // 7918\n        if (attrStart) {                                                                                               // 7919\n          $compileNode = groupScan(compileNode, attrStart, attrEnd);                                                   // 7920\n        }                                                                                                              // 7921\n        $template = undefined;                                                                                         // 7922\n                                                                                                                       // 7923\n        if (terminalPriority > directive.priority) {                                                                   // 7924\n          break; // prevent further processing of directives                                                           // 7925\n        }                                                                                                              // 7926\n                                                                                                                       // 7927\n        if (directiveValue = directive.scope) {                                                                        // 7928\n                                                                                                                       // 7929\n          // skip the check for directives with async templates, we'll check the derived sync                          // 7930\n          // directive when the template arrives                                                                       // 7931\n          if (!directive.templateUrl) {                                                                                // 7932\n            if (isObject(directiveValue)) {                                                                            // 7933\n              // This directive is trying to add an isolated scope.                                                    // 7934\n              // Check that there is no scope of any kind already                                                      // 7935\n              assertNoDuplicate('new/isolated scope', newIsolateScopeDirective || newScopeDirective,                   // 7936\n                                directive, $compileNode);                                                              // 7937\n              newIsolateScopeDirective = directive;                                                                    // 7938\n            } else {                                                                                                   // 7939\n              // This directive is trying to add a child scope.                                                        // 7940\n              // Check that there is no isolated scope already                                                         // 7941\n              assertNoDuplicate('new/isolated scope', newIsolateScopeDirective, directive,                             // 7942\n                                $compileNode);                                                                         // 7943\n            }                                                                                                          // 7944\n          }                                                                                                            // 7945\n                                                                                                                       // 7946\n          newScopeDirective = newScopeDirective || directive;                                                          // 7947\n        }                                                                                                              // 7948\n                                                                                                                       // 7949\n        directiveName = directive.name;                                                                                // 7950\n                                                                                                                       // 7951\n        if (!directive.templateUrl && directive.controller) {                                                          // 7952\n          directiveValue = directive.controller;                                                                       // 7953\n          controllerDirectives = controllerDirectives || createMap();                                                  // 7954\n          assertNoDuplicate(\"'\" + directiveName + \"' controller\",                                                      // 7955\n              controllerDirectives[directiveName], directive, $compileNode);                                           // 7956\n          controllerDirectives[directiveName] = directive;                                                             // 7957\n        }                                                                                                              // 7958\n                                                                                                                       // 7959\n        if (directiveValue = directive.transclude) {                                                                   // 7960\n          hasTranscludeDirective = true;                                                                               // 7961\n                                                                                                                       // 7962\n          // Special case ngIf and ngRepeat so that we don't complain about duplicate transclusion.                    // 7963\n          // This option should only be used by directives that know how to safely handle element transclusion,        // 7964\n          // where the transcluded nodes are added or replaced after linking.                                          // 7965\n          if (!directive.$$tlb) {                                                                                      // 7966\n            assertNoDuplicate('transclusion', nonTlbTranscludeDirective, directive, $compileNode);                     // 7967\n            nonTlbTranscludeDirective = directive;                                                                     // 7968\n          }                                                                                                            // 7969\n                                                                                                                       // 7970\n          if (directiveValue == 'element') {                                                                           // 7971\n            hasElementTranscludeDirective = true;                                                                      // 7972\n            terminalPriority = directive.priority;                                                                     // 7973\n            $template = $compileNode;                                                                                  // 7974\n            $compileNode = templateAttrs.$$element =                                                                   // 7975\n                jqLite(document.createComment(' ' + directiveName + ': ' +                                             // 7976\n                                              templateAttrs[directiveName] + ' '));                                    // 7977\n            compileNode = $compileNode[0];                                                                             // 7978\n            replaceWith(jqCollection, sliceArgs($template), compileNode);                                              // 7979\n                                                                                                                       // 7980\n            childTranscludeFn = compile($template, transcludeFn, terminalPriority,                                     // 7981\n                                        replaceDirective && replaceDirective.name, {                                   // 7982\n                                          // Don't pass in:                                                            // 7983\n                                          // - controllerDirectives - otherwise we'll create duplicates controllers    // 7984\n                                          // - newIsolateScopeDirective or templateDirective - combining templates with\n                                          //   element transclusion doesn't make sense.                                // 7986\n                                          //                                                                           // 7987\n                                          // We need only nonTlbTranscludeDirective so that we prevent putting transclusion\n                                          // on the same element more than once.                                       // 7989\n                                          nonTlbTranscludeDirective: nonTlbTranscludeDirective                         // 7990\n                                        });                                                                            // 7991\n          } else {                                                                                                     // 7992\n            $template = jqLite(jqLiteClone(compileNode)).contents();                                                   // 7993\n            $compileNode.empty(); // clear contents                                                                    // 7994\n            childTranscludeFn = compile($template, transcludeFn);                                                      // 7995\n          }                                                                                                            // 7996\n        }                                                                                                              // 7997\n                                                                                                                       // 7998\n        if (directive.template) {                                                                                      // 7999\n          hasTemplate = true;                                                                                          // 8000\n          assertNoDuplicate('template', templateDirective, directive, $compileNode);                                   // 8001\n          templateDirective = directive;                                                                               // 8002\n                                                                                                                       // 8003\n          directiveValue = (isFunction(directive.template))                                                            // 8004\n              ? directive.template($compileNode, templateAttrs)                                                        // 8005\n              : directive.template;                                                                                    // 8006\n                                                                                                                       // 8007\n          directiveValue = denormalizeTemplate(directiveValue);                                                        // 8008\n                                                                                                                       // 8009\n          if (directive.replace) {                                                                                     // 8010\n            replaceDirective = directive;                                                                              // 8011\n            if (jqLiteIsTextNode(directiveValue)) {                                                                    // 8012\n              $template = [];                                                                                          // 8013\n            } else {                                                                                                   // 8014\n              $template = removeComments(wrapTemplate(directive.templateNamespace, trim(directiveValue)));             // 8015\n            }                                                                                                          // 8016\n            compileNode = $template[0];                                                                                // 8017\n                                                                                                                       // 8018\n            if ($template.length != 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {                                 // 8019\n              throw $compileMinErr('tplrt',                                                                            // 8020\n                  \"Template for directive '{0}' must have exactly one root element. {1}\",                              // 8021\n                  directiveName, '');                                                                                  // 8022\n            }                                                                                                          // 8023\n                                                                                                                       // 8024\n            replaceWith(jqCollection, $compileNode, compileNode);                                                      // 8025\n                                                                                                                       // 8026\n            var newTemplateAttrs = {$attr: {}};                                                                        // 8027\n                                                                                                                       // 8028\n            // combine directives from the original node and from the template:                                        // 8029\n            // - take the array of directives for this element                                                         // 8030\n            // - split it into two parts, those that already applied (processed) and those that weren't (unprocessed)  // 8031\n            // - collect directives from the template and sort them by priority                                        // 8032\n            // - combine directives as: processed + template + unprocessed                                             // 8033\n            var templateDirectives = collectDirectives(compileNode, [], newTemplateAttrs);                             // 8034\n            var unprocessedDirectives = directives.splice(i + 1, directives.length - (i + 1));                         // 8035\n                                                                                                                       // 8036\n            if (newIsolateScopeDirective) {                                                                            // 8037\n              markDirectivesAsIsolate(templateDirectives);                                                             // 8038\n            }                                                                                                          // 8039\n            directives = directives.concat(templateDirectives).concat(unprocessedDirectives);                          // 8040\n            mergeTemplateAttributes(templateAttrs, newTemplateAttrs);                                                  // 8041\n                                                                                                                       // 8042\n            ii = directives.length;                                                                                    // 8043\n          } else {                                                                                                     // 8044\n            $compileNode.html(directiveValue);                                                                         // 8045\n          }                                                                                                            // 8046\n        }                                                                                                              // 8047\n                                                                                                                       // 8048\n        if (directive.templateUrl) {                                                                                   // 8049\n          hasTemplate = true;                                                                                          // 8050\n          assertNoDuplicate('template', templateDirective, directive, $compileNode);                                   // 8051\n          templateDirective = directive;                                                                               // 8052\n                                                                                                                       // 8053\n          if (directive.replace) {                                                                                     // 8054\n            replaceDirective = directive;                                                                              // 8055\n          }                                                                                                            // 8056\n                                                                                                                       // 8057\n          nodeLinkFn = compileTemplateUrl(directives.splice(i, directives.length - i), $compileNode,                   // 8058\n              templateAttrs, jqCollection, hasTranscludeDirective && childTranscludeFn, preLinkFns, postLinkFns, {     // 8059\n                controllerDirectives: controllerDirectives,                                                            // 8060\n                newScopeDirective: (newScopeDirective !== directive) && newScopeDirective,                             // 8061\n                newIsolateScopeDirective: newIsolateScopeDirective,                                                    // 8062\n                templateDirective: templateDirective,                                                                  // 8063\n                nonTlbTranscludeDirective: nonTlbTranscludeDirective                                                   // 8064\n              });                                                                                                      // 8065\n          ii = directives.length;                                                                                      // 8066\n        } else if (directive.compile) {                                                                                // 8067\n          try {                                                                                                        // 8068\n            linkFn = directive.compile($compileNode, templateAttrs, childTranscludeFn);                                // 8069\n            if (isFunction(linkFn)) {                                                                                  // 8070\n              addLinkFns(null, linkFn, attrStart, attrEnd);                                                            // 8071\n            } else if (linkFn) {                                                                                       // 8072\n              addLinkFns(linkFn.pre, linkFn.post, attrStart, attrEnd);                                                 // 8073\n            }                                                                                                          // 8074\n          } catch (e) {                                                                                                // 8075\n            $exceptionHandler(e, startingTag($compileNode));                                                           // 8076\n          }                                                                                                            // 8077\n        }                                                                                                              // 8078\n                                                                                                                       // 8079\n        if (directive.terminal) {                                                                                      // 8080\n          nodeLinkFn.terminal = true;                                                                                  // 8081\n          terminalPriority = Math.max(terminalPriority, directive.priority);                                           // 8082\n        }                                                                                                              // 8083\n                                                                                                                       // 8084\n      }                                                                                                                // 8085\n                                                                                                                       // 8086\n      nodeLinkFn.scope = newScopeDirective && newScopeDirective.scope === true;                                        // 8087\n      nodeLinkFn.transcludeOnThisElement = hasTranscludeDirective;                                                     // 8088\n      nodeLinkFn.templateOnThisElement = hasTemplate;                                                                  // 8089\n      nodeLinkFn.transclude = childTranscludeFn;                                                                       // 8090\n                                                                                                                       // 8091\n      previousCompileContext.hasElementTranscludeDirective = hasElementTranscludeDirective;                            // 8092\n                                                                                                                       // 8093\n      // might be normal or delayed nodeLinkFn depending on if templateUrl is present                                  // 8094\n      return nodeLinkFn;                                                                                               // 8095\n                                                                                                                       // 8096\n      ////////////////////                                                                                             // 8097\n                                                                                                                       // 8098\n      function addLinkFns(pre, post, attrStart, attrEnd) {                                                             // 8099\n        if (pre) {                                                                                                     // 8100\n          if (attrStart) pre = groupElementsLinkFnWrapper(pre, attrStart, attrEnd);                                    // 8101\n          pre.require = directive.require;                                                                             // 8102\n          pre.directiveName = directiveName;                                                                           // 8103\n          if (newIsolateScopeDirective === directive || directive.$$isolateScope) {                                    // 8104\n            pre = cloneAndAnnotateFn(pre, {isolateScope: true});                                                       // 8105\n          }                                                                                                            // 8106\n          preLinkFns.push(pre);                                                                                        // 8107\n        }                                                                                                              // 8108\n        if (post) {                                                                                                    // 8109\n          if (attrStart) post = groupElementsLinkFnWrapper(post, attrStart, attrEnd);                                  // 8110\n          post.require = directive.require;                                                                            // 8111\n          post.directiveName = directiveName;                                                                          // 8112\n          if (newIsolateScopeDirective === directive || directive.$$isolateScope) {                                    // 8113\n            post = cloneAndAnnotateFn(post, {isolateScope: true});                                                     // 8114\n          }                                                                                                            // 8115\n          postLinkFns.push(post);                                                                                      // 8116\n        }                                                                                                              // 8117\n      }                                                                                                                // 8118\n                                                                                                                       // 8119\n                                                                                                                       // 8120\n      function getControllers(directiveName, require, $element, elementControllers) {                                  // 8121\n        var value;                                                                                                     // 8122\n                                                                                                                       // 8123\n        if (isString(require)) {                                                                                       // 8124\n          var match = require.match(REQUIRE_PREFIX_REGEXP);                                                            // 8125\n          var name = require.substring(match[0].length);                                                               // 8126\n          var inheritType = match[1] || match[3];                                                                      // 8127\n          var optional = match[2] === '?';                                                                             // 8128\n                                                                                                                       // 8129\n          //If only parents then start at the parent element                                                           // 8130\n          if (inheritType === '^^') {                                                                                  // 8131\n            $element = $element.parent();                                                                              // 8132\n          //Otherwise attempt getting the controller from elementControllers in case                                   // 8133\n          //the element is transcluded (and has no data) and to avoid .data if possible                                // 8134\n          } else {                                                                                                     // 8135\n            value = elementControllers && elementControllers[name];                                                    // 8136\n            value = value && value.instance;                                                                           // 8137\n          }                                                                                                            // 8138\n                                                                                                                       // 8139\n          if (!value) {                                                                                                // 8140\n            var dataName = '$' + name + 'Controller';                                                                  // 8141\n            value = inheritType ? $element.inheritedData(dataName) : $element.data(dataName);                          // 8142\n          }                                                                                                            // 8143\n                                                                                                                       // 8144\n          if (!value && !optional) {                                                                                   // 8145\n            throw $compileMinErr('ctreq',                                                                              // 8146\n                \"Controller '{0}', required by directive '{1}', can't be found!\",                                      // 8147\n                name, directiveName);                                                                                  // 8148\n          }                                                                                                            // 8149\n        } else if (isArray(require)) {                                                                                 // 8150\n          value = [];                                                                                                  // 8151\n          for (var i = 0, ii = require.length; i < ii; i++) {                                                          // 8152\n            value[i] = getControllers(directiveName, require[i], $element, elementControllers);                        // 8153\n          }                                                                                                            // 8154\n        }                                                                                                              // 8155\n                                                                                                                       // 8156\n        return value || null;                                                                                          // 8157\n      }                                                                                                                // 8158\n                                                                                                                       // 8159\n      function setupControllers($element, attrs, transcludeFn, controllerDirectives, isolateScope, scope) {            // 8160\n        var elementControllers = createMap();                                                                          // 8161\n        for (var controllerKey in controllerDirectives) {                                                              // 8162\n          var directive = controllerDirectives[controllerKey];                                                         // 8163\n          var locals = {                                                                                               // 8164\n            $scope: directive === newIsolateScopeDirective || directive.$$isolateScope ? isolateScope : scope,         // 8165\n            $element: $element,                                                                                        // 8166\n            $attrs: attrs,                                                                                             // 8167\n            $transclude: transcludeFn                                                                                  // 8168\n          };                                                                                                           // 8169\n                                                                                                                       // 8170\n          var controller = directive.controller;                                                                       // 8171\n          if (controller == '@') {                                                                                     // 8172\n            controller = attrs[directive.name];                                                                        // 8173\n          }                                                                                                            // 8174\n                                                                                                                       // 8175\n          var controllerInstance = $controller(controller, locals, true, directive.controllerAs);                      // 8176\n                                                                                                                       // 8177\n          // For directives with element transclusion the element is a comment,                                        // 8178\n          // but jQuery .data doesn't support attaching data to comment nodes as it's hard to                          // 8179\n          // clean up (http://bugs.jquery.com/ticket/8335).                                                            // 8180\n          // Instead, we save the controllers for the element in a local hash and attach to .data                      // 8181\n          // later, once we have the actual element.                                                                   // 8182\n          elementControllers[directive.name] = controllerInstance;                                                     // 8183\n          if (!hasElementTranscludeDirective) {                                                                        // 8184\n            $element.data('$' + directive.name + 'Controller', controllerInstance.instance);                           // 8185\n          }                                                                                                            // 8186\n        }                                                                                                              // 8187\n        return elementControllers;                                                                                     // 8188\n      }                                                                                                                // 8189\n                                                                                                                       // 8190\n      function nodeLinkFn(childLinkFn, scope, linkNode, $rootElement, boundTranscludeFn,                               // 8191\n                          thisLinkFn) {                                                                                // 8192\n        var i, ii, linkFn, controller, isolateScope, elementControllers, transcludeFn, $element,                       // 8193\n            attrs;                                                                                                     // 8194\n                                                                                                                       // 8195\n        if (compileNode === linkNode) {                                                                                // 8196\n          attrs = templateAttrs;                                                                                       // 8197\n          $element = templateAttrs.$$element;                                                                          // 8198\n        } else {                                                                                                       // 8199\n          $element = jqLite(linkNode);                                                                                 // 8200\n          attrs = new Attributes($element, templateAttrs);                                                             // 8201\n        }                                                                                                              // 8202\n                                                                                                                       // 8203\n        if (newIsolateScopeDirective) {                                                                                // 8204\n          isolateScope = scope.$new(true);                                                                             // 8205\n        }                                                                                                              // 8206\n                                                                                                                       // 8207\n        if (boundTranscludeFn) {                                                                                       // 8208\n          // track `boundTranscludeFn` so it can be unwrapped if `transcludeFn`                                        // 8209\n          // is later passed as `parentBoundTranscludeFn` to `publicLinkFn`                                            // 8210\n          transcludeFn = controllersBoundTransclude;                                                                   // 8211\n          transcludeFn.$$boundTransclude = boundTranscludeFn;                                                          // 8212\n        }                                                                                                              // 8213\n                                                                                                                       // 8214\n        if (controllerDirectives) {                                                                                    // 8215\n          elementControllers = setupControllers($element, attrs, transcludeFn, controllerDirectives, isolateScope, scope);\n        }                                                                                                              // 8217\n                                                                                                                       // 8218\n        if (newIsolateScopeDirective) {                                                                                // 8219\n          // Initialize isolate scope bindings for new isolate scope directive.                                        // 8220\n          compile.$$addScopeInfo($element, isolateScope, true, !(templateDirective && (templateDirective === newIsolateScopeDirective ||\n              templateDirective === newIsolateScopeDirective.$$originalDirective)));                                   // 8222\n          compile.$$addScopeClass($element, true);                                                                     // 8223\n          isolateScope.$$isolateBindings =                                                                             // 8224\n              newIsolateScopeDirective.$$isolateBindings;                                                              // 8225\n          initializeDirectiveBindings(scope, attrs, isolateScope,                                                      // 8226\n                                      isolateScope.$$isolateBindings,                                                  // 8227\n                                      newIsolateScopeDirective, isolateScope);                                         // 8228\n        }                                                                                                              // 8229\n        if (elementControllers) {                                                                                      // 8230\n          // Initialize bindToController bindings for new/isolate scopes                                               // 8231\n          var scopeDirective = newIsolateScopeDirective || newScopeDirective;                                          // 8232\n          var bindings;                                                                                                // 8233\n          var controllerForBindings;                                                                                   // 8234\n          if (scopeDirective && elementControllers[scopeDirective.name]) {                                             // 8235\n            bindings = scopeDirective.$$bindings.bindToController;                                                     // 8236\n            controller = elementControllers[scopeDirective.name];                                                      // 8237\n                                                                                                                       // 8238\n            if (controller && controller.identifier && bindings) {                                                     // 8239\n              controllerForBindings = controller;                                                                      // 8240\n              thisLinkFn.$$destroyBindings =                                                                           // 8241\n                  initializeDirectiveBindings(scope, attrs, controller.instance,                                       // 8242\n                                              bindings, scopeDirective);                                               // 8243\n            }                                                                                                          // 8244\n          }                                                                                                            // 8245\n          for (i in elementControllers) {                                                                              // 8246\n            controller = elementControllers[i];                                                                        // 8247\n            var controllerResult = controller();                                                                       // 8248\n                                                                                                                       // 8249\n            if (controllerResult !== controller.instance) {                                                            // 8250\n              // If the controller constructor has a return value, overwrite the instance                              // 8251\n              // from setupControllers and update the element data                                                     // 8252\n              controller.instance = controllerResult;                                                                  // 8253\n              $element.data('$' + i + 'Controller', controllerResult);                                                 // 8254\n              if (controller === controllerForBindings) {                                                              // 8255\n                // Remove and re-install bindToController bindings                                                     // 8256\n                thisLinkFn.$$destroyBindings();                                                                        // 8257\n                thisLinkFn.$$destroyBindings =                                                                         // 8258\n                  initializeDirectiveBindings(scope, attrs, controllerResult, bindings, scopeDirective);               // 8259\n              }                                                                                                        // 8260\n            }                                                                                                          // 8261\n          }                                                                                                            // 8262\n        }                                                                                                              // 8263\n                                                                                                                       // 8264\n        // PRELINKING                                                                                                  // 8265\n        for (i = 0, ii = preLinkFns.length; i < ii; i++) {                                                             // 8266\n          linkFn = preLinkFns[i];                                                                                      // 8267\n          invokeLinkFn(linkFn,                                                                                         // 8268\n              linkFn.isolateScope ? isolateScope : scope,                                                              // 8269\n              $element,                                                                                                // 8270\n              attrs,                                                                                                   // 8271\n              linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers),    // 8272\n              transcludeFn                                                                                             // 8273\n          );                                                                                                           // 8274\n        }                                                                                                              // 8275\n                                                                                                                       // 8276\n        // RECURSION                                                                                                   // 8277\n        // We only pass the isolate scope, if the isolate directive has a template,                                    // 8278\n        // otherwise the child elements do not belong to the isolate directive.                                        // 8279\n        var scopeToChild = scope;                                                                                      // 8280\n        if (newIsolateScopeDirective && (newIsolateScopeDirective.template || newIsolateScopeDirective.templateUrl === null)) {\n          scopeToChild = isolateScope;                                                                                 // 8282\n        }                                                                                                              // 8283\n        childLinkFn && childLinkFn(scopeToChild, linkNode.childNodes, undefined, boundTranscludeFn);                   // 8284\n                                                                                                                       // 8285\n        // POSTLINKING                                                                                                 // 8286\n        for (i = postLinkFns.length - 1; i >= 0; i--) {                                                                // 8287\n          linkFn = postLinkFns[i];                                                                                     // 8288\n          invokeLinkFn(linkFn,                                                                                         // 8289\n              linkFn.isolateScope ? isolateScope : scope,                                                              // 8290\n              $element,                                                                                                // 8291\n              attrs,                                                                                                   // 8292\n              linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers),    // 8293\n              transcludeFn                                                                                             // 8294\n          );                                                                                                           // 8295\n        }                                                                                                              // 8296\n                                                                                                                       // 8297\n        // This is the function that is injected as `$transclude`.                                                     // 8298\n        // Note: all arguments are optional!                                                                           // 8299\n        function controllersBoundTransclude(scope, cloneAttachFn, futureParentElement) {                               // 8300\n          var transcludeControllers;                                                                                   // 8301\n                                                                                                                       // 8302\n          // No scope passed in:                                                                                       // 8303\n          if (!isScope(scope)) {                                                                                       // 8304\n            futureParentElement = cloneAttachFn;                                                                       // 8305\n            cloneAttachFn = scope;                                                                                     // 8306\n            scope = undefined;                                                                                         // 8307\n          }                                                                                                            // 8308\n                                                                                                                       // 8309\n          if (hasElementTranscludeDirective) {                                                                         // 8310\n            transcludeControllers = elementControllers;                                                                // 8311\n          }                                                                                                            // 8312\n          if (!futureParentElement) {                                                                                  // 8313\n            futureParentElement = hasElementTranscludeDirective ? $element.parent() : $element;                        // 8314\n          }                                                                                                            // 8315\n          return boundTranscludeFn(scope, cloneAttachFn, transcludeControllers, futureParentElement, scopeToChild);    // 8316\n        }                                                                                                              // 8317\n      }                                                                                                                // 8318\n    }                                                                                                                  // 8319\n                                                                                                                       // 8320\n    function markDirectivesAsIsolate(directives) {                                                                     // 8321\n      // mark all directives as needing isolate scope.                                                                 // 8322\n      for (var j = 0, jj = directives.length; j < jj; j++) {                                                           // 8323\n        directives[j] = inherit(directives[j], {$$isolateScope: true});                                                // 8324\n      }                                                                                                                // 8325\n    }                                                                                                                  // 8326\n                                                                                                                       // 8327\n    /**                                                                                                                // 8328\n     * looks up the directive and decorates it with exception handling and proper parameters. We                       // 8329\n     * call this the boundDirective.                                                                                   // 8330\n     *                                                                                                                 // 8331\n     * @param {string} name name of the directive to look up.                                                          // 8332\n     * @param {string} location The directive must be found in specific format.                                        // 8333\n     *   String containing any of theses characters:                                                                   // 8334\n     *                                                                                                                 // 8335\n     *   * `E`: element name                                                                                           // 8336\n     *   * `A': attribute                                                                                              // 8337\n     *   * `C`: class                                                                                                  // 8338\n     *   * `M`: comment                                                                                                // 8339\n     * @returns {boolean} true if directive was added.                                                                 // 8340\n     */                                                                                                                // 8341\n    function addDirective(tDirectives, name, location, maxPriority, ignoreDirective, startAttrName,                    // 8342\n                          endAttrName) {                                                                               // 8343\n      if (name === ignoreDirective) return null;                                                                       // 8344\n      var match = null;                                                                                                // 8345\n      if (hasDirectives.hasOwnProperty(name)) {                                                                        // 8346\n        for (var directive, directives = $injector.get(name + Suffix),                                                 // 8347\n            i = 0, ii = directives.length; i < ii; i++) {                                                              // 8348\n          try {                                                                                                        // 8349\n            directive = directives[i];                                                                                 // 8350\n            if ((isUndefined(maxPriority) || maxPriority > directive.priority) &&                                      // 8351\n                 directive.restrict.indexOf(location) != -1) {                                                         // 8352\n              if (startAttrName) {                                                                                     // 8353\n                directive = inherit(directive, {$$start: startAttrName, $$end: endAttrName});                          // 8354\n              }                                                                                                        // 8355\n              tDirectives.push(directive);                                                                             // 8356\n              match = directive;                                                                                       // 8357\n            }                                                                                                          // 8358\n          } catch (e) { $exceptionHandler(e); }                                                                        // 8359\n        }                                                                                                              // 8360\n      }                                                                                                                // 8361\n      return match;                                                                                                    // 8362\n    }                                                                                                                  // 8363\n                                                                                                                       // 8364\n                                                                                                                       // 8365\n    /**                                                                                                                // 8366\n     * looks up the directive and returns true if it is a multi-element directive,                                     // 8367\n     * and therefore requires DOM nodes between -start and -end markers to be grouped                                  // 8368\n     * together.                                                                                                       // 8369\n     *                                                                                                                 // 8370\n     * @param {string} name name of the directive to look up.                                                          // 8371\n     * @returns true if directive was registered as multi-element.                                                     // 8372\n     */                                                                                                                // 8373\n    function directiveIsMultiElement(name) {                                                                           // 8374\n      if (hasDirectives.hasOwnProperty(name)) {                                                                        // 8375\n        for (var directive, directives = $injector.get(name + Suffix),                                                 // 8376\n            i = 0, ii = directives.length; i < ii; i++) {                                                              // 8377\n          directive = directives[i];                                                                                   // 8378\n          if (directive.multiElement) {                                                                                // 8379\n            return true;                                                                                               // 8380\n          }                                                                                                            // 8381\n        }                                                                                                              // 8382\n      }                                                                                                                // 8383\n      return false;                                                                                                    // 8384\n    }                                                                                                                  // 8385\n                                                                                                                       // 8386\n    /**                                                                                                                // 8387\n     * When the element is replaced with HTML template then the new attributes                                         // 8388\n     * on the template need to be merged with the existing attributes in the DOM.                                      // 8389\n     * The desired effect is to have both of the attributes present.                                                   // 8390\n     *                                                                                                                 // 8391\n     * @param {object} dst destination attributes (original DOM)                                                       // 8392\n     * @param {object} src source attributes (from the directive template)                                             // 8393\n     */                                                                                                                // 8394\n    function mergeTemplateAttributes(dst, src) {                                                                       // 8395\n      var srcAttr = src.$attr,                                                                                         // 8396\n          dstAttr = dst.$attr,                                                                                         // 8397\n          $element = dst.$$element;                                                                                    // 8398\n                                                                                                                       // 8399\n      // reapply the old attributes to the new element                                                                 // 8400\n      forEach(dst, function(value, key) {                                                                              // 8401\n        if (key.charAt(0) != '$') {                                                                                    // 8402\n          if (src[key] && src[key] !== value) {                                                                        // 8403\n            value += (key === 'style' ? ';' : ' ') + src[key];                                                         // 8404\n          }                                                                                                            // 8405\n          dst.$set(key, value, true, srcAttr[key]);                                                                    // 8406\n        }                                                                                                              // 8407\n      });                                                                                                              // 8408\n                                                                                                                       // 8409\n      // copy the new attributes on the old attrs object                                                               // 8410\n      forEach(src, function(value, key) {                                                                              // 8411\n        if (key == 'class') {                                                                                          // 8412\n          safeAddClass($element, value);                                                                               // 8413\n          dst['class'] = (dst['class'] ? dst['class'] + ' ' : '') + value;                                             // 8414\n        } else if (key == 'style') {                                                                                   // 8415\n          $element.attr('style', $element.attr('style') + ';' + value);                                                // 8416\n          dst['style'] = (dst['style'] ? dst['style'] + ';' : '') + value;                                             // 8417\n          // `dst` will never contain hasOwnProperty as DOM parser won't let it.                                       // 8418\n          // You will get an \"InvalidCharacterError: DOM Exception 5\" error if you                                     // 8419\n          // have an attribute like \"has-own-property\" or \"data-has-own-property\", etc.                                // 8420\n        } else if (key.charAt(0) != '$' && !dst.hasOwnProperty(key)) {                                                 // 8421\n          dst[key] = value;                                                                                            // 8422\n          dstAttr[key] = srcAttr[key];                                                                                 // 8423\n        }                                                                                                              // 8424\n      });                                                                                                              // 8425\n    }                                                                                                                  // 8426\n                                                                                                                       // 8427\n                                                                                                                       // 8428\n    function compileTemplateUrl(directives, $compileNode, tAttrs,                                                      // 8429\n        $rootElement, childTranscludeFn, preLinkFns, postLinkFns, previousCompileContext) {                            // 8430\n      var linkQueue = [],                                                                                              // 8431\n          afterTemplateNodeLinkFn,                                                                                     // 8432\n          afterTemplateChildLinkFn,                                                                                    // 8433\n          beforeTemplateCompileNode = $compileNode[0],                                                                 // 8434\n          origAsyncDirective = directives.shift(),                                                                     // 8435\n          derivedSyncDirective = inherit(origAsyncDirective, {                                                         // 8436\n            templateUrl: null, transclude: null, replace: null, $$originalDirective: origAsyncDirective                // 8437\n          }),                                                                                                          // 8438\n          templateUrl = (isFunction(origAsyncDirective.templateUrl))                                                   // 8439\n              ? origAsyncDirective.templateUrl($compileNode, tAttrs)                                                   // 8440\n              : origAsyncDirective.templateUrl,                                                                        // 8441\n          templateNamespace = origAsyncDirective.templateNamespace;                                                    // 8442\n                                                                                                                       // 8443\n      $compileNode.empty();                                                                                            // 8444\n                                                                                                                       // 8445\n      $templateRequest(templateUrl)                                                                                    // 8446\n        .then(function(content) {                                                                                      // 8447\n          var compileNode, tempTemplateAttrs, $template, childBoundTranscludeFn;                                       // 8448\n                                                                                                                       // 8449\n          content = denormalizeTemplate(content);                                                                      // 8450\n                                                                                                                       // 8451\n          if (origAsyncDirective.replace) {                                                                            // 8452\n            if (jqLiteIsTextNode(content)) {                                                                           // 8453\n              $template = [];                                                                                          // 8454\n            } else {                                                                                                   // 8455\n              $template = removeComments(wrapTemplate(templateNamespace, trim(content)));                              // 8456\n            }                                                                                                          // 8457\n            compileNode = $template[0];                                                                                // 8458\n                                                                                                                       // 8459\n            if ($template.length != 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {                                 // 8460\n              throw $compileMinErr('tplrt',                                                                            // 8461\n                  \"Template for directive '{0}' must have exactly one root element. {1}\",                              // 8462\n                  origAsyncDirective.name, templateUrl);                                                               // 8463\n            }                                                                                                          // 8464\n                                                                                                                       // 8465\n            tempTemplateAttrs = {$attr: {}};                                                                           // 8466\n            replaceWith($rootElement, $compileNode, compileNode);                                                      // 8467\n            var templateDirectives = collectDirectives(compileNode, [], tempTemplateAttrs);                            // 8468\n                                                                                                                       // 8469\n            if (isObject(origAsyncDirective.scope)) {                                                                  // 8470\n              markDirectivesAsIsolate(templateDirectives);                                                             // 8471\n            }                                                                                                          // 8472\n            directives = templateDirectives.concat(directives);                                                        // 8473\n            mergeTemplateAttributes(tAttrs, tempTemplateAttrs);                                                        // 8474\n          } else {                                                                                                     // 8475\n            compileNode = beforeTemplateCompileNode;                                                                   // 8476\n            $compileNode.html(content);                                                                                // 8477\n          }                                                                                                            // 8478\n                                                                                                                       // 8479\n          directives.unshift(derivedSyncDirective);                                                                    // 8480\n                                                                                                                       // 8481\n          afterTemplateNodeLinkFn = applyDirectivesToNode(directives, compileNode, tAttrs,                             // 8482\n              childTranscludeFn, $compileNode, origAsyncDirective, preLinkFns, postLinkFns,                            // 8483\n              previousCompileContext);                                                                                 // 8484\n          forEach($rootElement, function(node, i) {                                                                    // 8485\n            if (node == compileNode) {                                                                                 // 8486\n              $rootElement[i] = $compileNode[0];                                                                       // 8487\n            }                                                                                                          // 8488\n          });                                                                                                          // 8489\n          afterTemplateChildLinkFn = compileNodes($compileNode[0].childNodes, childTranscludeFn);                      // 8490\n                                                                                                                       // 8491\n          while (linkQueue.length) {                                                                                   // 8492\n            var scope = linkQueue.shift(),                                                                             // 8493\n                beforeTemplateLinkNode = linkQueue.shift(),                                                            // 8494\n                linkRootElement = linkQueue.shift(),                                                                   // 8495\n                boundTranscludeFn = linkQueue.shift(),                                                                 // 8496\n                linkNode = $compileNode[0];                                                                            // 8497\n                                                                                                                       // 8498\n            if (scope.$$destroyed) continue;                                                                           // 8499\n                                                                                                                       // 8500\n            if (beforeTemplateLinkNode !== beforeTemplateCompileNode) {                                                // 8501\n              var oldClasses = beforeTemplateLinkNode.className;                                                       // 8502\n                                                                                                                       // 8503\n              if (!(previousCompileContext.hasElementTranscludeDirective &&                                            // 8504\n                  origAsyncDirective.replace)) {                                                                       // 8505\n                // it was cloned therefore we have to clone as well.                                                   // 8506\n                linkNode = jqLiteClone(compileNode);                                                                   // 8507\n              }                                                                                                        // 8508\n              replaceWith(linkRootElement, jqLite(beforeTemplateLinkNode), linkNode);                                  // 8509\n                                                                                                                       // 8510\n              // Copy in CSS classes from original node                                                                // 8511\n              safeAddClass(jqLite(linkNode), oldClasses);                                                              // 8512\n            }                                                                                                          // 8513\n            if (afterTemplateNodeLinkFn.transcludeOnThisElement) {                                                     // 8514\n              childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);\n            } else {                                                                                                   // 8516\n              childBoundTranscludeFn = boundTranscludeFn;                                                              // 8517\n            }                                                                                                          // 8518\n            afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, linkNode, $rootElement,                           // 8519\n              childBoundTranscludeFn, afterTemplateNodeLinkFn);                                                        // 8520\n          }                                                                                                            // 8521\n          linkQueue = null;                                                                                            // 8522\n        });                                                                                                            // 8523\n                                                                                                                       // 8524\n      return function delayedNodeLinkFn(ignoreChildLinkFn, scope, node, rootElement, boundTranscludeFn) {              // 8525\n        var childBoundTranscludeFn = boundTranscludeFn;                                                                // 8526\n        if (scope.$$destroyed) return;                                                                                 // 8527\n        if (linkQueue) {                                                                                               // 8528\n          linkQueue.push(scope,                                                                                        // 8529\n                         node,                                                                                         // 8530\n                         rootElement,                                                                                  // 8531\n                         childBoundTranscludeFn);                                                                      // 8532\n        } else {                                                                                                       // 8533\n          if (afterTemplateNodeLinkFn.transcludeOnThisElement) {                                                       // 8534\n            childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);\n          }                                                                                                            // 8536\n          afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, node, rootElement, childBoundTranscludeFn,          // 8537\n                                  afterTemplateNodeLinkFn);                                                            // 8538\n        }                                                                                                              // 8539\n      };                                                                                                               // 8540\n    }                                                                                                                  // 8541\n                                                                                                                       // 8542\n                                                                                                                       // 8543\n    /**                                                                                                                // 8544\n     * Sorting function for bound directives.                                                                          // 8545\n     */                                                                                                                // 8546\n    function byPriority(a, b) {                                                                                        // 8547\n      var diff = b.priority - a.priority;                                                                              // 8548\n      if (diff !== 0) return diff;                                                                                     // 8549\n      if (a.name !== b.name) return (a.name < b.name) ? -1 : 1;                                                        // 8550\n      return a.index - b.index;                                                                                        // 8551\n    }                                                                                                                  // 8552\n                                                                                                                       // 8553\n    function assertNoDuplicate(what, previousDirective, directive, element) {                                          // 8554\n                                                                                                                       // 8555\n      function wrapModuleNameIfDefined(moduleName) {                                                                   // 8556\n        return moduleName ?                                                                                            // 8557\n          (' (module: ' + moduleName + ')') :                                                                          // 8558\n          '';                                                                                                          // 8559\n      }                                                                                                                // 8560\n                                                                                                                       // 8561\n      if (previousDirective) {                                                                                         // 8562\n        throw $compileMinErr('multidir', 'Multiple directives [{0}{1}, {2}{3}] asking for {4} on: {5}',                // 8563\n            previousDirective.name, wrapModuleNameIfDefined(previousDirective.$$moduleName),                           // 8564\n            directive.name, wrapModuleNameIfDefined(directive.$$moduleName), what, startingTag(element));              // 8565\n      }                                                                                                                // 8566\n    }                                                                                                                  // 8567\n                                                                                                                       // 8568\n                                                                                                                       // 8569\n    function addTextInterpolateDirective(directives, text) {                                                           // 8570\n      var interpolateFn = $interpolate(text, true);                                                                    // 8571\n      if (interpolateFn) {                                                                                             // 8572\n        directives.push({                                                                                              // 8573\n          priority: 0,                                                                                                 // 8574\n          compile: function textInterpolateCompileFn(templateNode) {                                                   // 8575\n            var templateNodeParent = templateNode.parent(),                                                            // 8576\n                hasCompileParent = !!templateNodeParent.length;                                                        // 8577\n                                                                                                                       // 8578\n            // When transcluding a template that has bindings in the root                                              // 8579\n            // we don't have a parent and thus need to add the class during linking fn.                                // 8580\n            if (hasCompileParent) compile.$$addBindingClass(templateNodeParent);                                       // 8581\n                                                                                                                       // 8582\n            return function textInterpolateLinkFn(scope, node) {                                                       // 8583\n              var parent = node.parent();                                                                              // 8584\n              if (!hasCompileParent) compile.$$addBindingClass(parent);                                                // 8585\n              compile.$$addBindingInfo(parent, interpolateFn.expressions);                                             // 8586\n              scope.$watch(interpolateFn, function interpolateFnWatchAction(value) {                                   // 8587\n                node[0].nodeValue = value;                                                                             // 8588\n              });                                                                                                      // 8589\n            };                                                                                                         // 8590\n          }                                                                                                            // 8591\n        });                                                                                                            // 8592\n      }                                                                                                                // 8593\n    }                                                                                                                  // 8594\n                                                                                                                       // 8595\n                                                                                                                       // 8596\n    function wrapTemplate(type, template) {                                                                            // 8597\n      type = lowercase(type || 'html');                                                                                // 8598\n      switch (type) {                                                                                                  // 8599\n      case 'svg':                                                                                                      // 8600\n      case 'math':                                                                                                     // 8601\n        var wrapper = document.createElement('div');                                                                   // 8602\n        wrapper.innerHTML = '<' + type + '>' + template + '</' + type + '>';                                           // 8603\n        return wrapper.childNodes[0].childNodes;                                                                       // 8604\n      default:                                                                                                         // 8605\n        return template;                                                                                               // 8606\n      }                                                                                                                // 8607\n    }                                                                                                                  // 8608\n                                                                                                                       // 8609\n                                                                                                                       // 8610\n    function getTrustedContext(node, attrNormalizedName) {                                                             // 8611\n      if (attrNormalizedName == \"srcdoc\") {                                                                            // 8612\n        return $sce.HTML;                                                                                              // 8613\n      }                                                                                                                // 8614\n      var tag = nodeName_(node);                                                                                       // 8615\n      // maction[xlink:href] can source SVG.  It's not limited to <maction>.                                           // 8616\n      if (attrNormalizedName == \"xlinkHref\" ||                                                                         // 8617\n          (tag == \"form\" && attrNormalizedName == \"action\") ||                                                         // 8618\n          (tag != \"img\" && (attrNormalizedName == \"src\" ||                                                             // 8619\n                            attrNormalizedName == \"ngSrc\"))) {                                                         // 8620\n        return $sce.RESOURCE_URL;                                                                                      // 8621\n      }                                                                                                                // 8622\n    }                                                                                                                  // 8623\n                                                                                                                       // 8624\n                                                                                                                       // 8625\n    function addAttrInterpolateDirective(node, directives, value, name, allOrNothing) {                                // 8626\n      var trustedContext = getTrustedContext(node, name);                                                              // 8627\n      allOrNothing = ALL_OR_NOTHING_ATTRS[name] || allOrNothing;                                                       // 8628\n                                                                                                                       // 8629\n      var interpolateFn = $interpolate(value, true, trustedContext, allOrNothing);                                     // 8630\n                                                                                                                       // 8631\n      // no interpolation found -> ignore                                                                              // 8632\n      if (!interpolateFn) return;                                                                                      // 8633\n                                                                                                                       // 8634\n                                                                                                                       // 8635\n      if (name === \"multiple\" && nodeName_(node) === \"select\") {                                                       // 8636\n        throw $compileMinErr(\"selmulti\",                                                                               // 8637\n            \"Binding to the 'multiple' attribute is not supported. Element: {0}\",                                      // 8638\n            startingTag(node));                                                                                        // 8639\n      }                                                                                                                // 8640\n                                                                                                                       // 8641\n      directives.push({                                                                                                // 8642\n        priority: 100,                                                                                                 // 8643\n        compile: function() {                                                                                          // 8644\n            return {                                                                                                   // 8645\n              pre: function attrInterpolatePreLinkFn(scope, element, attr) {                                           // 8646\n                var $$observers = (attr.$$observers || (attr.$$observers = createMap()));                              // 8647\n                                                                                                                       // 8648\n                if (EVENT_HANDLER_ATTR_REGEXP.test(name)) {                                                            // 8649\n                  throw $compileMinErr('nodomevents',                                                                  // 8650\n                      \"Interpolations for HTML DOM event attributes are disallowed.  Please use the \" +                // 8651\n                          \"ng- versions (such as ng-click instead of onclick) instead.\");                              // 8652\n                }                                                                                                      // 8653\n                                                                                                                       // 8654\n                // If the attribute has changed since last $interpolate()ed                                            // 8655\n                var newValue = attr[name];                                                                             // 8656\n                if (newValue !== value) {                                                                              // 8657\n                  // we need to interpolate again since the attribute value has been updated                           // 8658\n                  // (e.g. by another directive's compile function)                                                    // 8659\n                  // ensure unset/empty values make interpolateFn falsy                                                // 8660\n                  interpolateFn = newValue && $interpolate(newValue, true, trustedContext, allOrNothing);              // 8661\n                  value = newValue;                                                                                    // 8662\n                }                                                                                                      // 8663\n                                                                                                                       // 8664\n                // if attribute was updated so that there is no interpolation going on we don't want to                // 8665\n                // register any observers                                                                              // 8666\n                if (!interpolateFn) return;                                                                            // 8667\n                                                                                                                       // 8668\n                // initialize attr object so that it's ready in case we need the value for isolate                     // 8669\n                // scope initialization, otherwise the value would not be available from isolate                       // 8670\n                // directive's linking fn during linking phase                                                         // 8671\n                attr[name] = interpolateFn(scope);                                                                     // 8672\n                                                                                                                       // 8673\n                ($$observers[name] || ($$observers[name] = [])).$$inter = true;                                        // 8674\n                (attr.$$observers && attr.$$observers[name].$$scope || scope).                                         // 8675\n                  $watch(interpolateFn, function interpolateFnWatchAction(newValue, oldValue) {                        // 8676\n                    //special case for class attribute addition + removal                                              // 8677\n                    //so that class changes can tap into the animation                                                 // 8678\n                    //hooks provided by the $animate service. Be sure to                                               // 8679\n                    //skip animations when the first digest occurs (when                                               // 8680\n                    //both the new and the old values are the same) since                                              // 8681\n                    //the CSS classes are the non-interpolated values                                                  // 8682\n                    if (name === 'class' && newValue != oldValue) {                                                    // 8683\n                      attr.$updateClass(newValue, oldValue);                                                           // 8684\n                    } else {                                                                                           // 8685\n                      attr.$set(name, newValue);                                                                       // 8686\n                    }                                                                                                  // 8687\n                  });                                                                                                  // 8688\n              }                                                                                                        // 8689\n            };                                                                                                         // 8690\n          }                                                                                                            // 8691\n      });                                                                                                              // 8692\n    }                                                                                                                  // 8693\n                                                                                                                       // 8694\n                                                                                                                       // 8695\n    /**                                                                                                                // 8696\n     * This is a special jqLite.replaceWith, which can replace items which                                             // 8697\n     * have no parents, provided that the containing jqLite collection is provided.                                    // 8698\n     *                                                                                                                 // 8699\n     * @param {JqLite=} $rootElement The root of the compile tree. Used so that we can replace nodes                   // 8700\n     *                               in the root of the tree.                                                          // 8701\n     * @param {JqLite} elementsToRemove The jqLite element which we are going to replace. We keep                      // 8702\n     *                                  the shell, but replace its DOM node reference.                                 // 8703\n     * @param {Node} newNode The new DOM node.                                                                         // 8704\n     */                                                                                                                // 8705\n    function replaceWith($rootElement, elementsToRemove, newNode) {                                                    // 8706\n      var firstElementToRemove = elementsToRemove[0],                                                                  // 8707\n          removeCount = elementsToRemove.length,                                                                       // 8708\n          parent = firstElementToRemove.parentNode,                                                                    // 8709\n          i, ii;                                                                                                       // 8710\n                                                                                                                       // 8711\n      if ($rootElement) {                                                                                              // 8712\n        for (i = 0, ii = $rootElement.length; i < ii; i++) {                                                           // 8713\n          if ($rootElement[i] == firstElementToRemove) {                                                               // 8714\n            $rootElement[i++] = newNode;                                                                               // 8715\n            for (var j = i, j2 = j + removeCount - 1,                                                                  // 8716\n                     jj = $rootElement.length;                                                                         // 8717\n                 j < jj; j++, j2++) {                                                                                  // 8718\n              if (j2 < jj) {                                                                                           // 8719\n                $rootElement[j] = $rootElement[j2];                                                                    // 8720\n              } else {                                                                                                 // 8721\n                delete $rootElement[j];                                                                                // 8722\n              }                                                                                                        // 8723\n            }                                                                                                          // 8724\n            $rootElement.length -= removeCount - 1;                                                                    // 8725\n                                                                                                                       // 8726\n            // If the replaced element is also the jQuery .context then replace it                                     // 8727\n            // .context is a deprecated jQuery api, so we should set it only when jQuery set it                        // 8728\n            // http://api.jquery.com/context/                                                                          // 8729\n            if ($rootElement.context === firstElementToRemove) {                                                       // 8730\n              $rootElement.context = newNode;                                                                          // 8731\n            }                                                                                                          // 8732\n            break;                                                                                                     // 8733\n          }                                                                                                            // 8734\n        }                                                                                                              // 8735\n      }                                                                                                                // 8736\n                                                                                                                       // 8737\n      if (parent) {                                                                                                    // 8738\n        parent.replaceChild(newNode, firstElementToRemove);                                                            // 8739\n      }                                                                                                                // 8740\n                                                                                                                       // 8741\n      // TODO(perf): what's this document fragment for? is it needed? can we at least reuse it?                        // 8742\n      var fragment = document.createDocumentFragment();                                                                // 8743\n      fragment.appendChild(firstElementToRemove);                                                                      // 8744\n                                                                                                                       // 8745\n      if (jqLite.hasData(firstElementToRemove)) {                                                                      // 8746\n        // Copy over user data (that includes Angular's $scope etc.). Don't copy private                               // 8747\n        // data here because there's no public interface in jQuery to do that and copying over                         // 8748\n        // event listeners (which is the main use of private data) wouldn't work anyway.                               // 8749\n        jqLite(newNode).data(jqLite(firstElementToRemove).data());                                                     // 8750\n                                                                                                                       // 8751\n        // Remove data of the replaced element. We cannot just call .remove()                                          // 8752\n        // on the element it since that would deallocate scope that is needed                                          // 8753\n        // for the new node. Instead, remove the data \"manually\".                                                      // 8754\n        if (!jQuery) {                                                                                                 // 8755\n          delete jqLite.cache[firstElementToRemove[jqLite.expando]];                                                   // 8756\n        } else {                                                                                                       // 8757\n          // jQuery 2.x doesn't expose the data storage. Use jQuery.cleanData to clean up after                        // 8758\n          // the replaced element. The cleanData version monkey-patched by Angular would cause                         // 8759\n          // the scope to be trashed and we do need the very same scope to work with the new                           // 8760\n          // element. However, we cannot just cache the non-patched version and use it here as                         // 8761\n          // that would break if another library patches the method after Angular does (one                            // 8762\n          // example is jQuery UI). Instead, set a flag indicating scope destroying should be                          // 8763\n          // skipped this one time.                                                                                    // 8764\n          skipDestroyOnNextJQueryCleanData = true;                                                                     // 8765\n          jQuery.cleanData([firstElementToRemove]);                                                                    // 8766\n        }                                                                                                              // 8767\n      }                                                                                                                // 8768\n                                                                                                                       // 8769\n      for (var k = 1, kk = elementsToRemove.length; k < kk; k++) {                                                     // 8770\n        var element = elementsToRemove[k];                                                                             // 8771\n        jqLite(element).remove(); // must do this way to clean up expando                                              // 8772\n        fragment.appendChild(element);                                                                                 // 8773\n        delete elementsToRemove[k];                                                                                    // 8774\n      }                                                                                                                // 8775\n                                                                                                                       // 8776\n      elementsToRemove[0] = newNode;                                                                                   // 8777\n      elementsToRemove.length = 1;                                                                                     // 8778\n    }                                                                                                                  // 8779\n                                                                                                                       // 8780\n                                                                                                                       // 8781\n    function cloneAndAnnotateFn(fn, annotation) {                                                                      // 8782\n      return extend(function() { return fn.apply(null, arguments); }, fn, annotation);                                 // 8783\n    }                                                                                                                  // 8784\n                                                                                                                       // 8785\n                                                                                                                       // 8786\n    function invokeLinkFn(linkFn, scope, $element, attrs, controllers, transcludeFn) {                                 // 8787\n      try {                                                                                                            // 8788\n        linkFn(scope, $element, attrs, controllers, transcludeFn);                                                     // 8789\n      } catch (e) {                                                                                                    // 8790\n        $exceptionHandler(e, startingTag($element));                                                                   // 8791\n      }                                                                                                                // 8792\n    }                                                                                                                  // 8793\n                                                                                                                       // 8794\n                                                                                                                       // 8795\n    // Set up $watches for isolate scope and controller bindings. This process                                         // 8796\n    // only occurs for isolate scopes and new scopes with controllerAs.                                                // 8797\n    function initializeDirectiveBindings(scope, attrs, destination, bindings,                                          // 8798\n                                         directive, newScope) {                                                        // 8799\n      var onNewScopeDestroyed;                                                                                         // 8800\n      forEach(bindings, function(definition, scopeName) {                                                              // 8801\n        var attrName = definition.attrName,                                                                            // 8802\n        optional = definition.optional,                                                                                // 8803\n        mode = definition.mode, // @, =, or &                                                                          // 8804\n        lastValue,                                                                                                     // 8805\n        parentGet, parentSet, compare;                                                                                 // 8806\n                                                                                                                       // 8807\n        switch (mode) {                                                                                                // 8808\n                                                                                                                       // 8809\n          case '@':                                                                                                    // 8810\n            if (!optional && !hasOwnProperty.call(attrs, attrName)) {                                                  // 8811\n              destination[scopeName] = attrs[attrName] = void 0;                                                       // 8812\n            }                                                                                                          // 8813\n            attrs.$observe(attrName, function(value) {                                                                 // 8814\n              if (isString(value)) {                                                                                   // 8815\n                destination[scopeName] = value;                                                                        // 8816\n              }                                                                                                        // 8817\n            });                                                                                                        // 8818\n            attrs.$$observers[attrName].$$scope = scope;                                                               // 8819\n            if (isString(attrs[attrName])) {                                                                           // 8820\n              // If the attribute has been provided then we trigger an interpolation to ensure                         // 8821\n              // the value is there for use in the link fn                                                             // 8822\n              destination[scopeName] = $interpolate(attrs[attrName])(scope);                                           // 8823\n            }                                                                                                          // 8824\n            break;                                                                                                     // 8825\n                                                                                                                       // 8826\n          case '=':                                                                                                    // 8827\n            if (!hasOwnProperty.call(attrs, attrName)) {                                                               // 8828\n              if (optional) break;                                                                                     // 8829\n              attrs[attrName] = void 0;                                                                                // 8830\n            }                                                                                                          // 8831\n            if (optional && !attrs[attrName]) break;                                                                   // 8832\n                                                                                                                       // 8833\n            parentGet = $parse(attrs[attrName]);                                                                       // 8834\n            if (parentGet.literal) {                                                                                   // 8835\n              compare = equals;                                                                                        // 8836\n            } else {                                                                                                   // 8837\n              compare = function(a, b) { return a === b || (a !== a && b !== b); };                                    // 8838\n            }                                                                                                          // 8839\n            parentSet = parentGet.assign || function() {                                                               // 8840\n              // reset the change, or we will throw this exception on every $digest                                    // 8841\n              lastValue = destination[scopeName] = parentGet(scope);                                                   // 8842\n              throw $compileMinErr('nonassign',                                                                        // 8843\n                  \"Expression '{0}' used with directive '{1}' is non-assignable!\",                                     // 8844\n                  attrs[attrName], directive.name);                                                                    // 8845\n            };                                                                                                         // 8846\n            lastValue = destination[scopeName] = parentGet(scope);                                                     // 8847\n            var parentValueWatch = function parentValueWatch(parentValue) {                                            // 8848\n              if (!compare(parentValue, destination[scopeName])) {                                                     // 8849\n                // we are out of sync and need to copy                                                                 // 8850\n                if (!compare(parentValue, lastValue)) {                                                                // 8851\n                  // parent changed and it has precedence                                                              // 8852\n                  destination[scopeName] = parentValue;                                                                // 8853\n                } else {                                                                                               // 8854\n                  // if the parent can be assigned then do so                                                          // 8855\n                  parentSet(scope, parentValue = destination[scopeName]);                                              // 8856\n                }                                                                                                      // 8857\n              }                                                                                                        // 8858\n              return lastValue = parentValue;                                                                          // 8859\n            };                                                                                                         // 8860\n            parentValueWatch.$stateful = true;                                                                         // 8861\n            var unwatch;                                                                                               // 8862\n            if (definition.collection) {                                                                               // 8863\n              unwatch = scope.$watchCollection(attrs[attrName], parentValueWatch);                                     // 8864\n            } else {                                                                                                   // 8865\n              unwatch = scope.$watch($parse(attrs[attrName], parentValueWatch), null, parentGet.literal);              // 8866\n            }                                                                                                          // 8867\n            onNewScopeDestroyed = (onNewScopeDestroyed || []);                                                         // 8868\n            onNewScopeDestroyed.push(unwatch);                                                                         // 8869\n            break;                                                                                                     // 8870\n                                                                                                                       // 8871\n          case '&':                                                                                                    // 8872\n            // Don't assign Object.prototype method to scope                                                           // 8873\n            parentGet = attrs.hasOwnProperty(attrName) ? $parse(attrs[attrName]) : noop;                               // 8874\n                                                                                                                       // 8875\n            // Don't assign noop to destination if expression is not valid                                             // 8876\n            if (parentGet === noop && optional) break;                                                                 // 8877\n                                                                                                                       // 8878\n            destination[scopeName] = function(locals) {                                                                // 8879\n              return parentGet(scope, locals);                                                                         // 8880\n            };                                                                                                         // 8881\n            break;                                                                                                     // 8882\n        }                                                                                                              // 8883\n      });                                                                                                              // 8884\n      var destroyBindings = onNewScopeDestroyed ? function destroyBindings() {                                         // 8885\n        for (var i = 0, ii = onNewScopeDestroyed.length; i < ii; ++i) {                                                // 8886\n          onNewScopeDestroyed[i]();                                                                                    // 8887\n        }                                                                                                              // 8888\n      } : noop;                                                                                                        // 8889\n      if (newScope && destroyBindings !== noop) {                                                                      // 8890\n        newScope.$on('$destroy', destroyBindings);                                                                     // 8891\n        return noop;                                                                                                   // 8892\n      }                                                                                                                // 8893\n      return destroyBindings;                                                                                          // 8894\n    }                                                                                                                  // 8895\n  }];                                                                                                                  // 8896\n}                                                                                                                      // 8897\n                                                                                                                       // 8898\nvar PREFIX_REGEXP = /^((?:x|data)[\\:\\-_])/i;                                                                           // 8899\n/**                                                                                                                    // 8900\n * Converts all accepted directives format into proper directive name.                                                 // 8901\n * @param name Name to normalize                                                                                       // 8902\n */                                                                                                                    // 8903\nfunction directiveNormalize(name) {                                                                                    // 8904\n  return camelCase(name.replace(PREFIX_REGEXP, ''));                                                                   // 8905\n}                                                                                                                      // 8906\n                                                                                                                       // 8907\n/**                                                                                                                    // 8908\n * @ngdoc type                                                                                                         // 8909\n * @name $compile.directive.Attributes                                                                                 // 8910\n *                                                                                                                     // 8911\n * @description                                                                                                        // 8912\n * A shared object between directive compile / linking functions which contains normalized DOM                         // 8913\n * element attributes. The values reflect current binding state `{{ }}`. The normalization is                          // 8914\n * needed since all of these are treated as equivalent in Angular:                                                     // 8915\n *                                                                                                                     // 8916\n * ```                                                                                                                 // 8917\n *    <span ng:bind=\"a\" ng-bind=\"a\" data-ng-bind=\"a\" x-ng-bind=\"a\">                                                    // 8918\n * ```                                                                                                                 // 8919\n */                                                                                                                    // 8920\n                                                                                                                       // 8921\n/**                                                                                                                    // 8922\n * @ngdoc property                                                                                                     // 8923\n * @name $compile.directive.Attributes#$attr                                                                           // 8924\n *                                                                                                                     // 8925\n * @description                                                                                                        // 8926\n * A map of DOM element attribute names to the normalized name. This is                                                // 8927\n * needed to do reverse lookup from normalized name back to actual name.                                               // 8928\n */                                                                                                                    // 8929\n                                                                                                                       // 8930\n                                                                                                                       // 8931\n/**                                                                                                                    // 8932\n * @ngdoc method                                                                                                       // 8933\n * @name $compile.directive.Attributes#$set                                                                            // 8934\n * @kind function                                                                                                      // 8935\n *                                                                                                                     // 8936\n * @description                                                                                                        // 8937\n * Set DOM element attribute value.                                                                                    // 8938\n *                                                                                                                     // 8939\n *                                                                                                                     // 8940\n * @param {string} name Normalized element attribute name of the property to modify. The name is                       // 8941\n *          reverse-translated using the {@link ng.$compile.directive.Attributes#$attr $attr}                          // 8942\n *          property to the original name.                                                                             // 8943\n * @param {string} value Value to set the attribute to. The value can be an interpolated string.                       // 8944\n */                                                                                                                    // 8945\n                                                                                                                       // 8946\n                                                                                                                       // 8947\n                                                                                                                       // 8948\n/**                                                                                                                    // 8949\n * Closure compiler type information                                                                                   // 8950\n */                                                                                                                    // 8951\n                                                                                                                       // 8952\nfunction nodesetLinkingFn(                                                                                             // 8953\n  /* angular.Scope */ scope,                                                                                           // 8954\n  /* NodeList */ nodeList,                                                                                             // 8955\n  /* Element */ rootElement,                                                                                           // 8956\n  /* function(Function) */ boundTranscludeFn                                                                           // 8957\n) {}                                                                                                                   // 8958\n                                                                                                                       // 8959\nfunction directiveLinkingFn(                                                                                           // 8960\n  /* nodesetLinkingFn */ nodesetLinkingFn,                                                                             // 8961\n  /* angular.Scope */ scope,                                                                                           // 8962\n  /* Node */ node,                                                                                                     // 8963\n  /* Element */ rootElement,                                                                                           // 8964\n  /* function(Function) */ boundTranscludeFn                                                                           // 8965\n) {}                                                                                                                   // 8966\n                                                                                                                       // 8967\nfunction tokenDifference(str1, str2) {                                                                                 // 8968\n  var values = '',                                                                                                     // 8969\n      tokens1 = str1.split(/\\s+/),                                                                                     // 8970\n      tokens2 = str2.split(/\\s+/);                                                                                     // 8971\n                                                                                                                       // 8972\n  outer:                                                                                                               // 8973\n  for (var i = 0; i < tokens1.length; i++) {                                                                           // 8974\n    var token = tokens1[i];                                                                                            // 8975\n    for (var j = 0; j < tokens2.length; j++) {                                                                         // 8976\n      if (token == tokens2[j]) continue outer;                                                                         // 8977\n    }                                                                                                                  // 8978\n    values += (values.length > 0 ? ' ' : '') + token;                                                                  // 8979\n  }                                                                                                                    // 8980\n  return values;                                                                                                       // 8981\n}                                                                                                                      // 8982\n                                                                                                                       // 8983\nfunction removeComments(jqNodes) {                                                                                     // 8984\n  jqNodes = jqLite(jqNodes);                                                                                           // 8985\n  var i = jqNodes.length;                                                                                              // 8986\n                                                                                                                       // 8987\n  if (i <= 1) {                                                                                                        // 8988\n    return jqNodes;                                                                                                    // 8989\n  }                                                                                                                    // 8990\n                                                                                                                       // 8991\n  while (i--) {                                                                                                        // 8992\n    var node = jqNodes[i];                                                                                             // 8993\n    if (node.nodeType === NODE_TYPE_COMMENT) {                                                                         // 8994\n      splice.call(jqNodes, i, 1);                                                                                      // 8995\n    }                                                                                                                  // 8996\n  }                                                                                                                    // 8997\n  return jqNodes;                                                                                                      // 8998\n}                                                                                                                      // 8999\n                                                                                                                       // 9000\nvar $controllerMinErr = minErr('$controller');                                                                         // 9001\n                                                                                                                       // 9002\n                                                                                                                       // 9003\nvar CNTRL_REG = /^(\\S+)(\\s+as\\s+(\\w+))?$/;                                                                             // 9004\nfunction identifierForController(controller, ident) {                                                                  // 9005\n  if (ident && isString(ident)) return ident;                                                                          // 9006\n  if (isString(controller)) {                                                                                          // 9007\n    var match = CNTRL_REG.exec(controller);                                                                            // 9008\n    if (match) return match[3];                                                                                        // 9009\n  }                                                                                                                    // 9010\n}                                                                                                                      // 9011\n                                                                                                                       // 9012\n                                                                                                                       // 9013\n/**                                                                                                                    // 9014\n * @ngdoc provider                                                                                                     // 9015\n * @name $controllerProvider                                                                                           // 9016\n * @description                                                                                                        // 9017\n * The {@link ng.$controller $controller service} is used by Angular to create new                                     // 9018\n * controllers.                                                                                                        // 9019\n *                                                                                                                     // 9020\n * This provider allows controller registration via the                                                                // 9021\n * {@link ng.$controllerProvider#register register} method.                                                            // 9022\n */                                                                                                                    // 9023\nfunction $ControllerProvider() {                                                                                       // 9024\n  var controllers = {},                                                                                                // 9025\n      globals = false;                                                                                                 // 9026\n                                                                                                                       // 9027\n  /**                                                                                                                  // 9028\n   * @ngdoc method                                                                                                     // 9029\n   * @name $controllerProvider#register                                                                                // 9030\n   * @param {string|Object} name Controller name, or an object map of controllers where the keys are                   // 9031\n   *    the names and the values are the constructors.                                                                 // 9032\n   * @param {Function|Array} constructor Controller constructor fn (optionally decorated with DI                       // 9033\n   *    annotations in the array notation).                                                                            // 9034\n   */                                                                                                                  // 9035\n  this.register = function(name, constructor) {                                                                        // 9036\n    assertNotHasOwnProperty(name, 'controller');                                                                       // 9037\n    if (isObject(name)) {                                                                                              // 9038\n      extend(controllers, name);                                                                                       // 9039\n    } else {                                                                                                           // 9040\n      controllers[name] = constructor;                                                                                 // 9041\n    }                                                                                                                  // 9042\n  };                                                                                                                   // 9043\n                                                                                                                       // 9044\n  /**                                                                                                                  // 9045\n   * @ngdoc method                                                                                                     // 9046\n   * @name $controllerProvider#allowGlobals                                                                            // 9047\n   * @description If called, allows `$controller` to find controller constructors on `window`                          // 9048\n   */                                                                                                                  // 9049\n  this.allowGlobals = function() {                                                                                     // 9050\n    globals = true;                                                                                                    // 9051\n  };                                                                                                                   // 9052\n                                                                                                                       // 9053\n                                                                                                                       // 9054\n  this.$get = ['$injector', '$window', function($injector, $window) {                                                  // 9055\n                                                                                                                       // 9056\n    /**                                                                                                                // 9057\n     * @ngdoc service                                                                                                  // 9058\n     * @name $controller                                                                                               // 9059\n     * @requires $injector                                                                                             // 9060\n     *                                                                                                                 // 9061\n     * @param {Function|string} constructor If called with a function then it's considered to be the                   // 9062\n     *    controller constructor function. Otherwise it's considered to be a string which is used                      // 9063\n     *    to retrieve the controller constructor using the following steps:                                            // 9064\n     *                                                                                                                 // 9065\n     *    * check if a controller with given name is registered via `$controllerProvider`                              // 9066\n     *    * check if evaluating the string on the current scope returns a constructor                                  // 9067\n     *    * if $controllerProvider#allowGlobals, check `window[constructor]` on the global                             // 9068\n     *      `window` object (not recommended)                                                                          // 9069\n     *                                                                                                                 // 9070\n     *    The string can use the `controller as property` syntax, where the controller instance is published           // 9071\n     *    as the specified property on the `scope`; the `scope` must be injected into `locals` param for this          // 9072\n     *    to work correctly.                                                                                           // 9073\n     *                                                                                                                 // 9074\n     * @param {Object} locals Injection locals for Controller.                                                         // 9075\n     * @return {Object} Instance of given controller.                                                                  // 9076\n     *                                                                                                                 // 9077\n     * @description                                                                                                    // 9078\n     * `$controller` service is responsible for instantiating controllers.                                             // 9079\n     *                                                                                                                 // 9080\n     * It's just a simple call to {@link auto.$injector $injector}, but extracted into                                 // 9081\n     * a service, so that one can override this service with [BC version](https://gist.github.com/1649788).            // 9082\n     */                                                                                                                // 9083\n    return function(expression, locals, later, ident) {                                                                // 9084\n      // PRIVATE API:                                                                                                  // 9085\n      //   param `later` --- indicates that the controller's constructor is invoked at a later time.                   // 9086\n      //                     If true, $controller will allocate the object with the correct                            // 9087\n      //                     prototype chain, but will not invoke the controller until a returned                      // 9088\n      //                     callback is invoked.                                                                      // 9089\n      //   param `ident` --- An optional label which overrides the label parsed from the controller                    // 9090\n      //                     expression, if any.                                                                       // 9091\n      var instance, match, constructor, identifier;                                                                    // 9092\n      later = later === true;                                                                                          // 9093\n      if (ident && isString(ident)) {                                                                                  // 9094\n        identifier = ident;                                                                                            // 9095\n      }                                                                                                                // 9096\n                                                                                                                       // 9097\n      if (isString(expression)) {                                                                                      // 9098\n        match = expression.match(CNTRL_REG);                                                                           // 9099\n        if (!match) {                                                                                                  // 9100\n          throw $controllerMinErr('ctrlfmt',                                                                           // 9101\n            \"Badly formed controller string '{0}'. \" +                                                                 // 9102\n            \"Must match `__name__ as __id__` or `__name__`.\", expression);                                             // 9103\n        }                                                                                                              // 9104\n        constructor = match[1],                                                                                        // 9105\n        identifier = identifier || match[3];                                                                           // 9106\n        expression = controllers.hasOwnProperty(constructor)                                                           // 9107\n            ? controllers[constructor]                                                                                 // 9108\n            : getter(locals.$scope, constructor, true) ||                                                              // 9109\n                (globals ? getter($window, constructor, true) : undefined);                                            // 9110\n                                                                                                                       // 9111\n        assertArgFn(expression, constructor, true);                                                                    // 9112\n      }                                                                                                                // 9113\n                                                                                                                       // 9114\n      if (later) {                                                                                                     // 9115\n        // Instantiate controller later:                                                                               // 9116\n        // This machinery is used to create an instance of the object before calling the                               // 9117\n        // controller's constructor itself.                                                                            // 9118\n        //                                                                                                             // 9119\n        // This allows properties to be added to the controller before the constructor is                              // 9120\n        // invoked. Primarily, this is used for isolate scope bindings in $compile.                                    // 9121\n        //                                                                                                             // 9122\n        // This feature is not intended for use by applications, and is thus not documented                            // 9123\n        // publicly.                                                                                                   // 9124\n        // Object creation: http://jsperf.com/create-constructor/2                                                     // 9125\n        var controllerPrototype = (isArray(expression) ?                                                               // 9126\n          expression[expression.length - 1] : expression).prototype;                                                   // 9127\n        instance = Object.create(controllerPrototype || null);                                                         // 9128\n                                                                                                                       // 9129\n        if (identifier) {                                                                                              // 9130\n          addIdentifier(locals, identifier, instance, constructor || expression.name);                                 // 9131\n        }                                                                                                              // 9132\n                                                                                                                       // 9133\n        var instantiate;                                                                                               // 9134\n        return instantiate = extend(function() {                                                                       // 9135\n          var result = $injector.invoke(expression, instance, locals, constructor);                                    // 9136\n          if (result !== instance && (isObject(result) || isFunction(result))) {                                       // 9137\n            instance = result;                                                                                         // 9138\n            if (identifier) {                                                                                          // 9139\n              // If result changed, re-assign controllerAs value to scope.                                             // 9140\n              addIdentifier(locals, identifier, instance, constructor || expression.name);                             // 9141\n            }                                                                                                          // 9142\n          }                                                                                                            // 9143\n          return instance;                                                                                             // 9144\n        }, {                                                                                                           // 9145\n          instance: instance,                                                                                          // 9146\n          identifier: identifier                                                                                       // 9147\n        });                                                                                                            // 9148\n      }                                                                                                                // 9149\n                                                                                                                       // 9150\n      instance = $injector.instantiate(expression, locals, constructor);                                               // 9151\n                                                                                                                       // 9152\n      if (identifier) {                                                                                                // 9153\n        addIdentifier(locals, identifier, instance, constructor || expression.name);                                   // 9154\n      }                                                                                                                // 9155\n                                                                                                                       // 9156\n      return instance;                                                                                                 // 9157\n    };                                                                                                                 // 9158\n                                                                                                                       // 9159\n    function addIdentifier(locals, identifier, instance, name) {                                                       // 9160\n      if (!(locals && isObject(locals.$scope))) {                                                                      // 9161\n        throw minErr('$controller')('noscp',                                                                           // 9162\n          \"Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.\",                          // 9163\n          name, identifier);                                                                                           // 9164\n      }                                                                                                                // 9165\n                                                                                                                       // 9166\n      locals.$scope[identifier] = instance;                                                                            // 9167\n    }                                                                                                                  // 9168\n  }];                                                                                                                  // 9169\n}                                                                                                                      // 9170\n                                                                                                                       // 9171\n/**                                                                                                                    // 9172\n * @ngdoc service                                                                                                      // 9173\n * @name $document                                                                                                     // 9174\n * @requires $window                                                                                                   // 9175\n *                                                                                                                     // 9176\n * @description                                                                                                        // 9177\n * A {@link angular.element jQuery or jqLite} wrapper for the browser's `window.document` object.                      // 9178\n *                                                                                                                     // 9179\n * @example                                                                                                            // 9180\n   <example module=\"documentExample\">                                                                                  // 9181\n     <file name=\"index.html\">                                                                                          // 9182\n       <div ng-controller=\"ExampleController\">                                                                         // 9183\n         <p>$document title: <b ng-bind=\"title\"></b></p>                                                               // 9184\n         <p>window.document title: <b ng-bind=\"windowTitle\"></b></p>                                                   // 9185\n       </div>                                                                                                          // 9186\n     </file>                                                                                                           // 9187\n     <file name=\"script.js\">                                                                                           // 9188\n       angular.module('documentExample', [])                                                                           // 9189\n         .controller('ExampleController', ['$scope', '$document', function($scope, $document) {                        // 9190\n           $scope.title = $document[0].title;                                                                          // 9191\n           $scope.windowTitle = angular.element(window.document)[0].title;                                             // 9192\n         }]);                                                                                                          // 9193\n     </file>                                                                                                           // 9194\n   </example>                                                                                                          // 9195\n */                                                                                                                    // 9196\nfunction $DocumentProvider() {                                                                                         // 9197\n  this.$get = ['$window', function(window) {                                                                           // 9198\n    return jqLite(window.document);                                                                                    // 9199\n  }];                                                                                                                  // 9200\n}                                                                                                                      // 9201\n                                                                                                                       // 9202\n/**                                                                                                                    // 9203\n * @ngdoc service                                                                                                      // 9204\n * @name $exceptionHandler                                                                                             // 9205\n * @requires ng.$log                                                                                                   // 9206\n *                                                                                                                     // 9207\n * @description                                                                                                        // 9208\n * Any uncaught exception in angular expressions is delegated to this service.                                         // 9209\n * The default implementation simply delegates to `$log.error` which logs it into                                      // 9210\n * the browser console.                                                                                                // 9211\n *                                                                                                                     // 9212\n * In unit tests, if `angular-mocks.js` is loaded, this service is overridden by                                       // 9213\n * {@link ngMock.$exceptionHandler mock $exceptionHandler} which aids in testing.                                      // 9214\n *                                                                                                                     // 9215\n * ## Example:                                                                                                         // 9216\n *                                                                                                                     // 9217\n * ```js                                                                                                               // 9218\n *   angular.module('exceptionOverride', []).factory('$exceptionHandler', function() {                                 // 9219\n *     return function(exception, cause) {                                                                             // 9220\n *       exception.message += ' (caused by \"' + cause + '\")';                                                          // 9221\n *       throw exception;                                                                                              // 9222\n *     };                                                                                                              // 9223\n *   });                                                                                                               // 9224\n * ```                                                                                                                 // 9225\n *                                                                                                                     // 9226\n * This example will override the normal action of `$exceptionHandler`, to make angular                                // 9227\n * exceptions fail hard when they happen, instead of just logging to the console.                                      // 9228\n *                                                                                                                     // 9229\n * <hr />                                                                                                              // 9230\n * Note, that code executed in event-listeners (even those registered using jqLite's `on`/`bind`                       // 9231\n * methods) does not delegate exceptions to the {@link ng.$exceptionHandler $exceptionHandler}                         // 9232\n * (unless executed during a digest).                                                                                  // 9233\n *                                                                                                                     // 9234\n * If you wish, you can manually delegate exceptions, e.g.                                                             // 9235\n * `try { ... } catch(e) { $exceptionHandler(e); }`                                                                    // 9236\n *                                                                                                                     // 9237\n * @param {Error} exception Exception associated with the error.                                                       // 9238\n * @param {string=} cause optional information about the context in which                                              // 9239\n *       the error was thrown.                                                                                         // 9240\n *                                                                                                                     // 9241\n */                                                                                                                    // 9242\nfunction $ExceptionHandlerProvider() {                                                                                 // 9243\n  this.$get = ['$log', function($log) {                                                                                // 9244\n    return function(exception, cause) {                                                                                // 9245\n      $log.error.apply($log, arguments);                                                                               // 9246\n    };                                                                                                                 // 9247\n  }];                                                                                                                  // 9248\n}                                                                                                                      // 9249\n                                                                                                                       // 9250\nvar $$ForceReflowProvider = function() {                                                                               // 9251\n  this.$get = ['$document', function($document) {                                                                      // 9252\n    return function(domNode) {                                                                                         // 9253\n      //the line below will force the browser to perform a repaint so                                                  // 9254\n      //that all the animated elements within the animation frame will                                                 // 9255\n      //be properly updated and drawn on screen. This is required to                                                   // 9256\n      //ensure that the preparation animation is properly flushed so that                                              // 9257\n      //the active state picks up from there. DO NOT REMOVE THIS LINE.                                                 // 9258\n      //DO NOT OPTIMIZE THIS LINE. THE MINIFIER WILL REMOVE IT OTHERWISE WHICH                                         // 9259\n      //WILL RESULT IN AN UNPREDICTABLE BUG THAT IS VERY HARD TO TRACK DOWN AND                                        // 9260\n      //WILL TAKE YEARS AWAY FROM YOUR LIFE.                                                                           // 9261\n      if (domNode) {                                                                                                   // 9262\n        if (!domNode.nodeType && domNode instanceof jqLite) {                                                          // 9263\n          domNode = domNode[0];                                                                                        // 9264\n        }                                                                                                              // 9265\n      } else {                                                                                                         // 9266\n        domNode = $document[0].body;                                                                                   // 9267\n      }                                                                                                                // 9268\n      return domNode.offsetWidth + 1;                                                                                  // 9269\n    };                                                                                                                 // 9270\n  }];                                                                                                                  // 9271\n};                                                                                                                     // 9272\n                                                                                                                       // 9273\nvar APPLICATION_JSON = 'application/json';                                                                             // 9274\nvar CONTENT_TYPE_APPLICATION_JSON = {'Content-Type': APPLICATION_JSON + ';charset=utf-8'};                             // 9275\nvar JSON_START = /^\\[|^\\{(?!\\{)/;                                                                                      // 9276\nvar JSON_ENDS = {                                                                                                      // 9277\n  '[': /]$/,                                                                                                           // 9278\n  '{': /}$/                                                                                                            // 9279\n};                                                                                                                     // 9280\nvar JSON_PROTECTION_PREFIX = /^\\)\\]\\}',?\\n/;                                                                           // 9281\nvar $httpMinErr = minErr('$http');                                                                                     // 9282\nvar $httpMinErrLegacyFn = function(method) {                                                                           // 9283\n  return function() {                                                                                                  // 9284\n    throw $httpMinErr('legacy', 'The method `{0}` on the promise returned from `$http` has been disabled.', method);   // 9285\n  };                                                                                                                   // 9286\n};                                                                                                                     // 9287\n                                                                                                                       // 9288\nfunction serializeValue(v) {                                                                                           // 9289\n  if (isObject(v)) {                                                                                                   // 9290\n    return isDate(v) ? v.toISOString() : toJson(v);                                                                    // 9291\n  }                                                                                                                    // 9292\n  return v;                                                                                                            // 9293\n}                                                                                                                      // 9294\n                                                                                                                       // 9295\n                                                                                                                       // 9296\nfunction $HttpParamSerializerProvider() {                                                                              // 9297\n  /**                                                                                                                  // 9298\n   * @ngdoc service                                                                                                    // 9299\n   * @name $httpParamSerializer                                                                                        // 9300\n   * @description                                                                                                      // 9301\n   *                                                                                                                   // 9302\n   * Default {@link $http `$http`} params serializer that converts objects to strings                                  // 9303\n   * according to the following rules:                                                                                 // 9304\n   *                                                                                                                   // 9305\n   * * `{'foo': 'bar'}` results in `foo=bar`                                                                           // 9306\n   * * `{'foo': Date.now()}` results in `foo=2015-04-01T09%3A50%3A49.262Z` (`toISOString()` and encoded representation of a Date object)\n   * * `{'foo': ['bar', 'baz']}` results in `foo=bar&foo=baz` (repeated key for each array element)                    // 9308\n   * * `{'foo': {'bar':'baz'}}` results in `foo=%7B%22bar%22%3A%22baz%22%7D\"` (stringified and encoded representation of an object)\n   *                                                                                                                   // 9310\n   * Note that serializer will sort the request parameters alphabetically.                                             // 9311\n   * */                                                                                                                // 9312\n                                                                                                                       // 9313\n  this.$get = function() {                                                                                             // 9314\n    return function ngParamSerializer(params) {                                                                        // 9315\n      if (!params) return '';                                                                                          // 9316\n      var parts = [];                                                                                                  // 9317\n      forEachSorted(params, function(value, key) {                                                                     // 9318\n        if (value === null || isUndefined(value)) return;                                                              // 9319\n        if (isArray(value)) {                                                                                          // 9320\n          forEach(value, function(v, k) {                                                                              // 9321\n            parts.push(encodeUriQuery(key)  + '=' + encodeUriQuery(serializeValue(v)));                                // 9322\n          });                                                                                                          // 9323\n        } else {                                                                                                       // 9324\n          parts.push(encodeUriQuery(key) + '=' + encodeUriQuery(serializeValue(value)));                               // 9325\n        }                                                                                                              // 9326\n      });                                                                                                              // 9327\n                                                                                                                       // 9328\n      return parts.join('&');                                                                                          // 9329\n    };                                                                                                                 // 9330\n  };                                                                                                                   // 9331\n}                                                                                                                      // 9332\n                                                                                                                       // 9333\nfunction $HttpParamSerializerJQLikeProvider() {                                                                        // 9334\n  /**                                                                                                                  // 9335\n   * @ngdoc service                                                                                                    // 9336\n   * @name $httpParamSerializerJQLike                                                                                  // 9337\n   * @description                                                                                                      // 9338\n   *                                                                                                                   // 9339\n   * Alternative {@link $http `$http`} params serializer that follows                                                  // 9340\n   * jQuery's [`param()`](http://api.jquery.com/jquery.param/) method logic.                                           // 9341\n   * The serializer will also sort the params alphabetically.                                                          // 9342\n   *                                                                                                                   // 9343\n   * To use it for serializing `$http` request parameters, set it as the `paramSerializer` property:                   // 9344\n   *                                                                                                                   // 9345\n   * ```js                                                                                                             // 9346\n   * $http({                                                                                                           // 9347\n   *   url: myUrl,                                                                                                     // 9348\n   *   method: 'GET',                                                                                                  // 9349\n   *   params: myParams,                                                                                               // 9350\n   *   paramSerializer: '$httpParamSerializerJQLike'                                                                   // 9351\n   * });                                                                                                               // 9352\n   * ```                                                                                                               // 9353\n   *                                                                                                                   // 9354\n   * It is also possible to set it as the default `paramSerializer` in the                                             // 9355\n   * {@link $httpProvider#defaults `$httpProvider`}.                                                                   // 9356\n   *                                                                                                                   // 9357\n   * Additionally, you can inject the serializer and use it explicitly, for example to serialize                       // 9358\n   * form data for submission:                                                                                         // 9359\n   *                                                                                                                   // 9360\n   * ```js                                                                                                             // 9361\n   * .controller(function($http, $httpParamSerializerJQLike) {                                                         // 9362\n   *   //...                                                                                                           // 9363\n   *                                                                                                                   // 9364\n   *   $http({                                                                                                         // 9365\n   *     url: myUrl,                                                                                                   // 9366\n   *     method: 'POST',                                                                                               // 9367\n   *     data: $httpParamSerializerJQLike(myData),                                                                     // 9368\n   *     headers: {                                                                                                    // 9369\n   *       'Content-Type': 'application/x-www-form-urlencoded'                                                         // 9370\n   *     }                                                                                                             // 9371\n   *   });                                                                                                             // 9372\n   *                                                                                                                   // 9373\n   * });                                                                                                               // 9374\n   * ```                                                                                                               // 9375\n   *                                                                                                                   // 9376\n   * */                                                                                                                // 9377\n  this.$get = function() {                                                                                             // 9378\n    return function jQueryLikeParamSerializer(params) {                                                                // 9379\n      if (!params) return '';                                                                                          // 9380\n      var parts = [];                                                                                                  // 9381\n      serialize(params, '', true);                                                                                     // 9382\n      return parts.join('&');                                                                                          // 9383\n                                                                                                                       // 9384\n      function serialize(toSerialize, prefix, topLevel) {                                                              // 9385\n        if (toSerialize === null || isUndefined(toSerialize)) return;                                                  // 9386\n        if (isArray(toSerialize)) {                                                                                    // 9387\n          forEach(toSerialize, function(value, index) {                                                                // 9388\n            serialize(value, prefix + '[' + (isObject(value) ? index : '') + ']');                                     // 9389\n          });                                                                                                          // 9390\n        } else if (isObject(toSerialize) && !isDate(toSerialize)) {                                                    // 9391\n          forEachSorted(toSerialize, function(value, key) {                                                            // 9392\n            serialize(value, prefix +                                                                                  // 9393\n                (topLevel ? '' : '[') +                                                                                // 9394\n                key +                                                                                                  // 9395\n                (topLevel ? '' : ']'));                                                                                // 9396\n          });                                                                                                          // 9397\n        } else {                                                                                                       // 9398\n          parts.push(encodeUriQuery(prefix) + '=' + encodeUriQuery(serializeValue(toSerialize)));                      // 9399\n        }                                                                                                              // 9400\n      }                                                                                                                // 9401\n    };                                                                                                                 // 9402\n  };                                                                                                                   // 9403\n}                                                                                                                      // 9404\n                                                                                                                       // 9405\nfunction defaultHttpResponseTransform(data, headers) {                                                                 // 9406\n  if (isString(data)) {                                                                                                // 9407\n    // Strip json vulnerability protection prefix and trim whitespace                                                  // 9408\n    var tempData = data.replace(JSON_PROTECTION_PREFIX, '').trim();                                                    // 9409\n                                                                                                                       // 9410\n    if (tempData) {                                                                                                    // 9411\n      var contentType = headers('Content-Type');                                                                       // 9412\n      if ((contentType && (contentType.indexOf(APPLICATION_JSON) === 0)) || isJsonLike(tempData)) {                    // 9413\n        data = fromJson(tempData);                                                                                     // 9414\n      }                                                                                                                // 9415\n    }                                                                                                                  // 9416\n  }                                                                                                                    // 9417\n                                                                                                                       // 9418\n  return data;                                                                                                         // 9419\n}                                                                                                                      // 9420\n                                                                                                                       // 9421\nfunction isJsonLike(str) {                                                                                             // 9422\n    var jsonStart = str.match(JSON_START);                                                                             // 9423\n    return jsonStart && JSON_ENDS[jsonStart[0]].test(str);                                                             // 9424\n}                                                                                                                      // 9425\n                                                                                                                       // 9426\n/**                                                                                                                    // 9427\n * Parse headers into key value object                                                                                 // 9428\n *                                                                                                                     // 9429\n * @param {string} headers Raw headers as a string                                                                     // 9430\n * @returns {Object} Parsed headers as key value object                                                                // 9431\n */                                                                                                                    // 9432\nfunction parseHeaders(headers) {                                                                                       // 9433\n  var parsed = createMap(), i;                                                                                         // 9434\n                                                                                                                       // 9435\n  function fillInParsed(key, val) {                                                                                    // 9436\n    if (key) {                                                                                                         // 9437\n      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;                                                      // 9438\n    }                                                                                                                  // 9439\n  }                                                                                                                    // 9440\n                                                                                                                       // 9441\n  if (isString(headers)) {                                                                                             // 9442\n    forEach(headers.split('\\n'), function(line) {                                                                      // 9443\n      i = line.indexOf(':');                                                                                           // 9444\n      fillInParsed(lowercase(trim(line.substr(0, i))), trim(line.substr(i + 1)));                                      // 9445\n    });                                                                                                                // 9446\n  } else if (isObject(headers)) {                                                                                      // 9447\n    forEach(headers, function(headerVal, headerKey) {                                                                  // 9448\n      fillInParsed(lowercase(headerKey), trim(headerVal));                                                             // 9449\n    });                                                                                                                // 9450\n  }                                                                                                                    // 9451\n                                                                                                                       // 9452\n  return parsed;                                                                                                       // 9453\n}                                                                                                                      // 9454\n                                                                                                                       // 9455\n                                                                                                                       // 9456\n/**                                                                                                                    // 9457\n * Returns a function that provides access to parsed headers.                                                          // 9458\n *                                                                                                                     // 9459\n * Headers are lazy parsed when first requested.                                                                       // 9460\n * @see parseHeaders                                                                                                   // 9461\n *                                                                                                                     // 9462\n * @param {(string|Object)} headers Headers to provide access to.                                                      // 9463\n * @returns {function(string=)} Returns a getter function which if called with:                                        // 9464\n *                                                                                                                     // 9465\n *   - if called with single an argument returns a single header value or null                                         // 9466\n *   - if called with no arguments returns an object containing all headers.                                           // 9467\n */                                                                                                                    // 9468\nfunction headersGetter(headers) {                                                                                      // 9469\n  var headersObj;                                                                                                      // 9470\n                                                                                                                       // 9471\n  return function(name) {                                                                                              // 9472\n    if (!headersObj) headersObj =  parseHeaders(headers);                                                              // 9473\n                                                                                                                       // 9474\n    if (name) {                                                                                                        // 9475\n      var value = headersObj[lowercase(name)];                                                                         // 9476\n      if (value === void 0) {                                                                                          // 9477\n        value = null;                                                                                                  // 9478\n      }                                                                                                                // 9479\n      return value;                                                                                                    // 9480\n    }                                                                                                                  // 9481\n                                                                                                                       // 9482\n    return headersObj;                                                                                                 // 9483\n  };                                                                                                                   // 9484\n}                                                                                                                      // 9485\n                                                                                                                       // 9486\n                                                                                                                       // 9487\n/**                                                                                                                    // 9488\n * Chain all given functions                                                                                           // 9489\n *                                                                                                                     // 9490\n * This function is used for both request and response transforming                                                    // 9491\n *                                                                                                                     // 9492\n * @param {*} data Data to transform.                                                                                  // 9493\n * @param {function(string=)} headers HTTP headers getter fn.                                                          // 9494\n * @param {number} status HTTP status code of the response.                                                            // 9495\n * @param {(Function|Array.<Function>)} fns Function or an array of functions.                                         // 9496\n * @returns {*} Transformed data.                                                                                      // 9497\n */                                                                                                                    // 9498\nfunction transformData(data, headers, status, fns) {                                                                   // 9499\n  if (isFunction(fns)) {                                                                                               // 9500\n    return fns(data, headers, status);                                                                                 // 9501\n  }                                                                                                                    // 9502\n                                                                                                                       // 9503\n  forEach(fns, function(fn) {                                                                                          // 9504\n    data = fn(data, headers, status);                                                                                  // 9505\n  });                                                                                                                  // 9506\n                                                                                                                       // 9507\n  return data;                                                                                                         // 9508\n}                                                                                                                      // 9509\n                                                                                                                       // 9510\n                                                                                                                       // 9511\nfunction isSuccess(status) {                                                                                           // 9512\n  return 200 <= status && status < 300;                                                                                // 9513\n}                                                                                                                      // 9514\n                                                                                                                       // 9515\n                                                                                                                       // 9516\n/**                                                                                                                    // 9517\n * @ngdoc provider                                                                                                     // 9518\n * @name $httpProvider                                                                                                 // 9519\n * @description                                                                                                        // 9520\n * Use `$httpProvider` to change the default behavior of the {@link ng.$http $http} service.                           // 9521\n * */                                                                                                                  // 9522\nfunction $HttpProvider() {                                                                                             // 9523\n  /**                                                                                                                  // 9524\n   * @ngdoc property                                                                                                   // 9525\n   * @name $httpProvider#defaults                                                                                      // 9526\n   * @description                                                                                                      // 9527\n   *                                                                                                                   // 9528\n   * Object containing default values for all {@link ng.$http $http} requests.                                         // 9529\n   *                                                                                                                   // 9530\n   * - **`defaults.cache`** - {Object} - an object built with {@link ng.$cacheFactory `$cacheFactory`}                 // 9531\n   * that will provide the cache for all requests who set their `cache` property to `true`.                            // 9532\n   * If you set the `defaults.cache = false` then only requests that specify their own custom                          // 9533\n   * cache object will be cached. See {@link $http#caching $http Caching} for more information.                        // 9534\n   *                                                                                                                   // 9535\n   * - **`defaults.xsrfCookieName`** - {string} - Name of cookie containing the XSRF token.                            // 9536\n   * Defaults value is `'XSRF-TOKEN'`.                                                                                 // 9537\n   *                                                                                                                   // 9538\n   * - **`defaults.xsrfHeaderName`** - {string} - Name of HTTP header to populate with the                             // 9539\n   * XSRF token. Defaults value is `'X-XSRF-TOKEN'`.                                                                   // 9540\n   *                                                                                                                   // 9541\n   * - **`defaults.headers`** - {Object} - Default headers for all $http requests.                                     // 9542\n   * Refer to {@link ng.$http#setting-http-headers $http} for documentation on                                         // 9543\n   * setting default headers.                                                                                          // 9544\n   *     - **`defaults.headers.common`**                                                                               // 9545\n   *     - **`defaults.headers.post`**                                                                                 // 9546\n   *     - **`defaults.headers.put`**                                                                                  // 9547\n   *     - **`defaults.headers.patch`**                                                                                // 9548\n   *                                                                                                                   // 9549\n   *                                                                                                                   // 9550\n   * - **`defaults.paramSerializer`** - `{string|function(Object<string,string>):string}` - A function                 // 9551\n   *  used to the prepare string representation of request parameters (specified as an object).                        // 9552\n   *  If specified as string, it is interpreted as a function registered with the {@link auto.$injector $injector}.    // 9553\n   *  Defaults to {@link ng.$httpParamSerializer $httpParamSerializer}.                                                // 9554\n   *                                                                                                                   // 9555\n   **/                                                                                                                 // 9556\n  var defaults = this.defaults = {                                                                                     // 9557\n    // transform incoming response data                                                                                // 9558\n    transformResponse: [defaultHttpResponseTransform],                                                                 // 9559\n                                                                                                                       // 9560\n    // transform outgoing request data                                                                                 // 9561\n    transformRequest: [function(d) {                                                                                   // 9562\n      return isObject(d) && !isFile(d) && !isBlob(d) && !isFormData(d) ? toJson(d) : d;                                // 9563\n    }],                                                                                                                // 9564\n                                                                                                                       // 9565\n    // default headers                                                                                                 // 9566\n    headers: {                                                                                                         // 9567\n      common: {                                                                                                        // 9568\n        'Accept': 'application/json, text/plain, */*'                                                                  // 9569\n      },                                                                                                               // 9570\n      post:   shallowCopy(CONTENT_TYPE_APPLICATION_JSON),                                                              // 9571\n      put:    shallowCopy(CONTENT_TYPE_APPLICATION_JSON),                                                              // 9572\n      patch:  shallowCopy(CONTENT_TYPE_APPLICATION_JSON)                                                               // 9573\n    },                                                                                                                 // 9574\n                                                                                                                       // 9575\n    xsrfCookieName: 'XSRF-TOKEN',                                                                                      // 9576\n    xsrfHeaderName: 'X-XSRF-TOKEN',                                                                                    // 9577\n                                                                                                                       // 9578\n    paramSerializer: '$httpParamSerializer'                                                                            // 9579\n  };                                                                                                                   // 9580\n                                                                                                                       // 9581\n  var useApplyAsync = false;                                                                                           // 9582\n  /**                                                                                                                  // 9583\n   * @ngdoc method                                                                                                     // 9584\n   * @name $httpProvider#useApplyAsync                                                                                 // 9585\n   * @description                                                                                                      // 9586\n   *                                                                                                                   // 9587\n   * Configure $http service to combine processing of multiple http responses received at around                       // 9588\n   * the same time via {@link ng.$rootScope.Scope#$applyAsync $rootScope.$applyAsync}. This can result in              // 9589\n   * significant performance improvement for bigger applications that make many HTTP requests                          // 9590\n   * concurrently (common during application bootstrap).                                                               // 9591\n   *                                                                                                                   // 9592\n   * Defaults to false. If no value is specified, returns the current configured value.                                // 9593\n   *                                                                                                                   // 9594\n   * @param {boolean=} value If true, when requests are loaded, they will schedule a deferred                          // 9595\n   *    \"apply\" on the next tick, giving time for subsequent requests in a roughly ~10ms window                        // 9596\n   *    to load and share the same digest cycle.                                                                       // 9597\n   *                                                                                                                   // 9598\n   * @returns {boolean|Object} If a value is specified, returns the $httpProvider for chaining.                        // 9599\n   *    otherwise, returns the current configured value.                                                               // 9600\n   **/                                                                                                                 // 9601\n  this.useApplyAsync = function(value) {                                                                               // 9602\n    if (isDefined(value)) {                                                                                            // 9603\n      useApplyAsync = !!value;                                                                                         // 9604\n      return this;                                                                                                     // 9605\n    }                                                                                                                  // 9606\n    return useApplyAsync;                                                                                              // 9607\n  };                                                                                                                   // 9608\n                                                                                                                       // 9609\n  var useLegacyPromise = true;                                                                                         // 9610\n  /**                                                                                                                  // 9611\n   * @ngdoc method                                                                                                     // 9612\n   * @name $httpProvider#useLegacyPromiseExtensions                                                                    // 9613\n   * @description                                                                                                      // 9614\n   *                                                                                                                   // 9615\n   * Configure `$http` service to return promises without the shorthand methods `success` and `error`.                 // 9616\n   * This should be used to make sure that applications work without these methods.                                    // 9617\n   *                                                                                                                   // 9618\n   * Defaults to false. If no value is specified, returns the current configured value.                                // 9619\n   *                                                                                                                   // 9620\n   * @param {boolean=} value If true, `$http` will return a normal promise without the `success` and `error` methods.  // 9621\n   *                                                                                                                   // 9622\n   * @returns {boolean|Object} If a value is specified, returns the $httpProvider for chaining.                        // 9623\n   *    otherwise, returns the current configured value.                                                               // 9624\n   **/                                                                                                                 // 9625\n  this.useLegacyPromiseExtensions = function(value) {                                                                  // 9626\n    if (isDefined(value)) {                                                                                            // 9627\n      useLegacyPromise = !!value;                                                                                      // 9628\n      return this;                                                                                                     // 9629\n    }                                                                                                                  // 9630\n    return useLegacyPromise;                                                                                           // 9631\n  };                                                                                                                   // 9632\n                                                                                                                       // 9633\n  /**                                                                                                                  // 9634\n   * @ngdoc property                                                                                                   // 9635\n   * @name $httpProvider#interceptors                                                                                  // 9636\n   * @description                                                                                                      // 9637\n   *                                                                                                                   // 9638\n   * Array containing service factories for all synchronous or asynchronous {@link ng.$http $http}                     // 9639\n   * pre-processing of request or postprocessing of responses.                                                         // 9640\n   *                                                                                                                   // 9641\n   * These service factories are ordered by request, i.e. they are applied in the same order as the                    // 9642\n   * array, on request, but reverse order, on response.                                                                // 9643\n   *                                                                                                                   // 9644\n   * {@link ng.$http#interceptors Interceptors detailed info}                                                          // 9645\n   **/                                                                                                                 // 9646\n  var interceptorFactories = this.interceptors = [];                                                                   // 9647\n                                                                                                                       // 9648\n  this.$get = ['$httpBackend', '$$cookieReader', '$cacheFactory', '$rootScope', '$q', '$injector',                     // 9649\n      function($httpBackend, $$cookieReader, $cacheFactory, $rootScope, $q, $injector) {                               // 9650\n                                                                                                                       // 9651\n    var defaultCache = $cacheFactory('$http');                                                                         // 9652\n                                                                                                                       // 9653\n    /**                                                                                                                // 9654\n     * Make sure that default param serializer is exposed as a function                                                // 9655\n     */                                                                                                                // 9656\n    defaults.paramSerializer = isString(defaults.paramSerializer) ?                                                    // 9657\n      $injector.get(defaults.paramSerializer) : defaults.paramSerializer;                                              // 9658\n                                                                                                                       // 9659\n    /**                                                                                                                // 9660\n     * Interceptors stored in reverse order. Inner interceptors before outer interceptors.                             // 9661\n     * The reversal is needed so that we can build up the interception chain around the                                // 9662\n     * server request.                                                                                                 // 9663\n     */                                                                                                                // 9664\n    var reversedInterceptors = [];                                                                                     // 9665\n                                                                                                                       // 9666\n    forEach(interceptorFactories, function(interceptorFactory) {                                                       // 9667\n      reversedInterceptors.unshift(isString(interceptorFactory)                                                        // 9668\n          ? $injector.get(interceptorFactory) : $injector.invoke(interceptorFactory));                                 // 9669\n    });                                                                                                                // 9670\n                                                                                                                       // 9671\n    /**                                                                                                                // 9672\n     * @ngdoc service                                                                                                  // 9673\n     * @kind function                                                                                                  // 9674\n     * @name $http                                                                                                     // 9675\n     * @requires ng.$httpBackend                                                                                       // 9676\n     * @requires $cacheFactory                                                                                         // 9677\n     * @requires $rootScope                                                                                            // 9678\n     * @requires $q                                                                                                    // 9679\n     * @requires $injector                                                                                             // 9680\n     *                                                                                                                 // 9681\n     * @description                                                                                                    // 9682\n     * The `$http` service is a core Angular service that facilitates communication with the remote                    // 9683\n     * HTTP servers via the browser's [XMLHttpRequest](https://developer.mozilla.org/en/xmlhttprequest)                // 9684\n     * object or via [JSONP](http://en.wikipedia.org/wiki/JSONP).                                                      // 9685\n     *                                                                                                                 // 9686\n     * For unit testing applications that use `$http` service, see                                                     // 9687\n     * {@link ngMock.$httpBackend $httpBackend mock}.                                                                  // 9688\n     *                                                                                                                 // 9689\n     * For a higher level of abstraction, please check out the {@link ngResource.$resource                             // 9690\n     * $resource} service.                                                                                             // 9691\n     *                                                                                                                 // 9692\n     * The $http API is based on the {@link ng.$q deferred/promise APIs} exposed by                                    // 9693\n     * the $q service. While for simple usage patterns this doesn't matter much, for advanced usage                    // 9694\n     * it is important to familiarize yourself with these APIs and the guarantees they provide.                        // 9695\n     *                                                                                                                 // 9696\n     *                                                                                                                 // 9697\n     * ## General usage                                                                                                // 9698\n     * The `$http` service is a function which takes a single argument — a {@link $http#usage configuration object} —  // 9699\n     * that is used to generate an HTTP request and returns  a {@link ng.$q promise}.                                  // 9700\n     *                                                                                                                 // 9701\n     * ```js                                                                                                           // 9702\n     *   // Simple GET request example:                                                                                // 9703\n     *   $http({                                                                                                       // 9704\n     *     method: 'GET',                                                                                              // 9705\n     *     url: '/someUrl'                                                                                             // 9706\n     *   }).then(function successCallback(response) {                                                                  // 9707\n     *       // this callback will be called asynchronously                                                            // 9708\n     *       // when the response is available                                                                         // 9709\n     *     }, function errorCallback(response) {                                                                       // 9710\n     *       // called asynchronously if an error occurs                                                               // 9711\n     *       // or server returns response with an error status.                                                       // 9712\n     *     });                                                                                                         // 9713\n     * ```                                                                                                             // 9714\n     *                                                                                                                 // 9715\n     * The response object has these properties:                                                                       // 9716\n     *                                                                                                                 // 9717\n     *   - **data** – `{string|Object}` – The response body transformed with the transform                             // 9718\n     *     functions.                                                                                                  // 9719\n     *   - **status** – `{number}` – HTTP status code of the response.                                                 // 9720\n     *   - **headers** – `{function([headerName])}` – Header getter function.                                          // 9721\n     *   - **config** – `{Object}` – The configuration object that was used to generate the request.                   // 9722\n     *   - **statusText** – `{string}` – HTTP status text of the response.                                             // 9723\n     *                                                                                                                 // 9724\n     * A response status code between 200 and 299 is considered a success status and                                   // 9725\n     * will result in the success callback being called. Note that if the response is a redirect,                      // 9726\n     * XMLHttpRequest will transparently follow it, meaning that the error callback will not be                        // 9727\n     * called for such responses.                                                                                      // 9728\n     *                                                                                                                 // 9729\n     *                                                                                                                 // 9730\n     * ## Shortcut methods                                                                                             // 9731\n     *                                                                                                                 // 9732\n     * Shortcut methods are also available. All shortcut methods require passing in the URL, and                       // 9733\n     * request data must be passed in for POST/PUT requests. An optional config can be passed as the                   // 9734\n     * last argument.                                                                                                  // 9735\n     *                                                                                                                 // 9736\n     * ```js                                                                                                           // 9737\n     *   $http.get('/someUrl', config).then(successCallback, errorCallback);                                           // 9738\n     *   $http.post('/someUrl', data, config).then(successCallback, errorCallback);                                    // 9739\n     * ```                                                                                                             // 9740\n     *                                                                                                                 // 9741\n     * Complete list of shortcut methods:                                                                              // 9742\n     *                                                                                                                 // 9743\n     * - {@link ng.$http#get $http.get}                                                                                // 9744\n     * - {@link ng.$http#head $http.head}                                                                              // 9745\n     * - {@link ng.$http#post $http.post}                                                                              // 9746\n     * - {@link ng.$http#put $http.put}                                                                                // 9747\n     * - {@link ng.$http#delete $http.delete}                                                                          // 9748\n     * - {@link ng.$http#jsonp $http.jsonp}                                                                            // 9749\n     * - {@link ng.$http#patch $http.patch}                                                                            // 9750\n     *                                                                                                                 // 9751\n     *                                                                                                                 // 9752\n     * ## Writing Unit Tests that use $http                                                                            // 9753\n     * When unit testing (using {@link ngMock ngMock}), it is necessary to call                                        // 9754\n     * {@link ngMock.$httpBackend#flush $httpBackend.flush()} to flush each pending                                    // 9755\n     * request using trained responses.                                                                                // 9756\n     *                                                                                                                 // 9757\n     * ```                                                                                                             // 9758\n     * $httpBackend.expectGET(...);                                                                                    // 9759\n     * $http.get(...);                                                                                                 // 9760\n     * $httpBackend.flush();                                                                                           // 9761\n     * ```                                                                                                             // 9762\n     *                                                                                                                 // 9763\n     * ## Deprecation Notice                                                                                           // 9764\n     * <div class=\"alert alert-danger\">                                                                                // 9765\n     *   The `$http` legacy promise methods `success` and `error` have been deprecated.                                // 9766\n     *   Use the standard `then` method instead.                                                                       // 9767\n     *   If {@link $httpProvider#useLegacyPromiseExtensions `$httpProvider.useLegacyPromiseExtensions`} is set to      // 9768\n     *   `false` then these methods will throw {@link $http:legacy `$http/legacy`} error.                              // 9769\n     * </div>                                                                                                          // 9770\n     *                                                                                                                 // 9771\n     * ## Setting HTTP Headers                                                                                         // 9772\n     *                                                                                                                 // 9773\n     * The $http service will automatically add certain HTTP headers to all requests. These defaults                   // 9774\n     * can be fully configured by accessing the `$httpProvider.defaults.headers` configuration                         // 9775\n     * object, which currently contains this default configuration:                                                    // 9776\n     *                                                                                                                 // 9777\n     * - `$httpProvider.defaults.headers.common` (headers that are common for all requests):                           // 9778\n     *   - `Accept: application/json, text/plain, * / *`                                                               // 9779\n     * - `$httpProvider.defaults.headers.post`: (header defaults for POST requests)                                    // 9780\n     *   - `Content-Type: application/json`                                                                            // 9781\n     * - `$httpProvider.defaults.headers.put` (header defaults for PUT requests)                                       // 9782\n     *   - `Content-Type: application/json`                                                                            // 9783\n     *                                                                                                                 // 9784\n     * To add or overwrite these defaults, simply add or remove a property from these configuration                    // 9785\n     * objects. To add headers for an HTTP method other than POST or PUT, simply add a new object                      // 9786\n     * with the lowercased HTTP method name as the key, e.g.                                                           // 9787\n     * `$httpProvider.defaults.headers.get = { 'My-Header' : 'value' }`.                                               // 9788\n     *                                                                                                                 // 9789\n     * The defaults can also be set at runtime via the `$http.defaults` object in the same                             // 9790\n     * fashion. For example:                                                                                           // 9791\n     *                                                                                                                 // 9792\n     * ```                                                                                                             // 9793\n     * module.run(function($http) {                                                                                    // 9794\n     *   $http.defaults.headers.common.Authorization = 'Basic YmVlcDpib29w'                                            // 9795\n     * });                                                                                                             // 9796\n     * ```                                                                                                             // 9797\n     *                                                                                                                 // 9798\n     * In addition, you can supply a `headers` property in the config object passed when                               // 9799\n     * calling `$http(config)`, which overrides the defaults without changing them globally.                           // 9800\n     *                                                                                                                 // 9801\n     * To explicitly remove a header automatically added via $httpProvider.defaults.headers on a per request basis,    // 9802\n     * Use the `headers` property, setting the desired header to `undefined`. For example:                             // 9803\n     *                                                                                                                 // 9804\n     * ```js                                                                                                           // 9805\n     * var req = {                                                                                                     // 9806\n     *  method: 'POST',                                                                                                // 9807\n     *  url: 'http://example.com',                                                                                     // 9808\n     *  headers: {                                                                                                     // 9809\n     *    'Content-Type': undefined                                                                                    // 9810\n     *  },                                                                                                             // 9811\n     *  data: { test: 'test' }                                                                                         // 9812\n     * }                                                                                                               // 9813\n     *                                                                                                                 // 9814\n     * $http(req).then(function(){...}, function(){...});                                                              // 9815\n     * ```                                                                                                             // 9816\n     *                                                                                                                 // 9817\n     * ## Transforming Requests and Responses                                                                          // 9818\n     *                                                                                                                 // 9819\n     * Both requests and responses can be transformed using transformation functions: `transformRequest`               // 9820\n     * and `transformResponse`. These properties can be a single function that returns                                 // 9821\n     * the transformed value (`function(data, headersGetter, status)`) or an array of such transformation functions,   // 9822\n     * which allows you to `push` or `unshift` a new transformation function into the transformation chain.            // 9823\n     *                                                                                                                 // 9824\n     * ### Default Transformations                                                                                     // 9825\n     *                                                                                                                 // 9826\n     * The `$httpProvider` provider and `$http` service expose `defaults.transformRequest` and                         // 9827\n     * `defaults.transformResponse` properties. If a request does not provide its own transformations                  // 9828\n     * then these will be applied.                                                                                     // 9829\n     *                                                                                                                 // 9830\n     * You can augment or replace the default transformations by modifying these properties by adding to or            // 9831\n     * replacing the array.                                                                                            // 9832\n     *                                                                                                                 // 9833\n     * Angular provides the following default transformations:                                                         // 9834\n     *                                                                                                                 // 9835\n     * Request transformations (`$httpProvider.defaults.transformRequest` and `$http.defaults.transformRequest`):      // 9836\n     *                                                                                                                 // 9837\n     * - If the `data` property of the request configuration object contains an object, serialize it                   // 9838\n     *   into JSON format.                                                                                             // 9839\n     *                                                                                                                 // 9840\n     * Response transformations (`$httpProvider.defaults.transformResponse` and `$http.defaults.transformResponse`):   // 9841\n     *                                                                                                                 // 9842\n     *  - If XSRF prefix is detected, strip it (see Security Considerations section below).                            // 9843\n     *  - If JSON response is detected, deserialize it using a JSON parser.                                            // 9844\n     *                                                                                                                 // 9845\n     *                                                                                                                 // 9846\n     * ### Overriding the Default Transformations Per Request                                                          // 9847\n     *                                                                                                                 // 9848\n     * If you wish override the request/response transformations only for a single request then provide                // 9849\n     * `transformRequest` and/or `transformResponse` properties on the configuration object passed                     // 9850\n     * into `$http`.                                                                                                   // 9851\n     *                                                                                                                 // 9852\n     * Note that if you provide these properties on the config object the default transformations will be              // 9853\n     * overwritten. If you wish to augment the default transformations then you must include them in your              // 9854\n     * local transformation array.                                                                                     // 9855\n     *                                                                                                                 // 9856\n     * The following code demonstrates adding a new response transformation to be run after the default response       // 9857\n     * transformations have been run.                                                                                  // 9858\n     *                                                                                                                 // 9859\n     * ```js                                                                                                           // 9860\n     * function appendTransform(defaults, transform) {                                                                 // 9861\n     *                                                                                                                 // 9862\n     *   // We can't guarantee that the default transformation is an array                                             // 9863\n     *   defaults = angular.isArray(defaults) ? defaults : [defaults];                                                 // 9864\n     *                                                                                                                 // 9865\n     *   // Append the new transformation to the defaults                                                              // 9866\n     *   return defaults.concat(transform);                                                                            // 9867\n     * }                                                                                                               // 9868\n     *                                                                                                                 // 9869\n     * $http({                                                                                                         // 9870\n     *   url: '...',                                                                                                   // 9871\n     *   method: 'GET',                                                                                                // 9872\n     *   transformResponse: appendTransform($http.defaults.transformResponse, function(value) {                        // 9873\n     *     return doTransform(value);                                                                                  // 9874\n     *   })                                                                                                            // 9875\n     * });                                                                                                             // 9876\n     * ```                                                                                                             // 9877\n     *                                                                                                                 // 9878\n     *                                                                                                                 // 9879\n     * ## Caching                                                                                                      // 9880\n     *                                                                                                                 // 9881\n     * To enable caching, set the request configuration `cache` property to `true` (to use default                     // 9882\n     * cache) or to a custom cache object (built with {@link ng.$cacheFactory `$cacheFactory`}).                       // 9883\n     * When the cache is enabled, `$http` stores the response from the server in the specified                         // 9884\n     * cache. The next time the same request is made, the response is served from the cache without                    // 9885\n     * sending a request to the server.                                                                                // 9886\n     *                                                                                                                 // 9887\n     * Note that even if the response is served from cache, delivery of the data is asynchronous in                    // 9888\n     * the same way that real requests are.                                                                            // 9889\n     *                                                                                                                 // 9890\n     * If there are multiple GET requests for the same URL that should be cached using the same                        // 9891\n     * cache, but the cache is not populated yet, only one request to the server will be made and                      // 9892\n     * the remaining requests will be fulfilled using the response from the first request.                             // 9893\n     *                                                                                                                 // 9894\n     * You can change the default cache to a new object (built with                                                    // 9895\n     * {@link ng.$cacheFactory `$cacheFactory`}) by updating the                                                       // 9896\n     * {@link ng.$http#defaults `$http.defaults.cache`} property. All requests who set                                 // 9897\n     * their `cache` property to `true` will now use this cache object.                                                // 9898\n     *                                                                                                                 // 9899\n     * If you set the default cache to `false` then only requests that specify their own custom                        // 9900\n     * cache object will be cached.                                                                                    // 9901\n     *                                                                                                                 // 9902\n     * ## Interceptors                                                                                                 // 9903\n     *                                                                                                                 // 9904\n     * Before you start creating interceptors, be sure to understand the                                               // 9905\n     * {@link ng.$q $q and deferred/promise APIs}.                                                                     // 9906\n     *                                                                                                                 // 9907\n     * For purposes of global error handling, authentication, or any kind of synchronous or                            // 9908\n     * asynchronous pre-processing of request or postprocessing of responses, it is desirable to be                    // 9909\n     * able to intercept requests before they are handed to the server and                                             // 9910\n     * responses before they are handed over to the application code that                                              // 9911\n     * initiated these requests. The interceptors leverage the {@link ng.$q                                            // 9912\n     * promise APIs} to fulfill this need for both synchronous and asynchronous pre-processing.                        // 9913\n     *                                                                                                                 // 9914\n     * The interceptors are service factories that are registered with the `$httpProvider` by                          // 9915\n     * adding them to the `$httpProvider.interceptors` array. The factory is called and                                // 9916\n     * injected with dependencies (if specified) and returns the interceptor.                                          // 9917\n     *                                                                                                                 // 9918\n     * There are two kinds of interceptors (and two kinds of rejection interceptors):                                  // 9919\n     *                                                                                                                 // 9920\n     *   * `request`: interceptors get called with a http {@link $http#usage config} object. The function is free to   // 9921\n     *     modify the `config` object or create a new one. The function needs to return the `config`                   // 9922\n     *     object directly, or a promise containing the `config` or a new `config` object.                             // 9923\n     *   * `requestError`: interceptor gets called when a previous interceptor threw an error or                       // 9924\n     *     resolved with a rejection.                                                                                  // 9925\n     *   * `response`: interceptors get called with http `response` object. The function is free to                    // 9926\n     *     modify the `response` object or create a new one. The function needs to return the `response`               // 9927\n     *     object directly, or as a promise containing the `response` or a new `response` object.                      // 9928\n     *   * `responseError`: interceptor gets called when a previous interceptor threw an error or                      // 9929\n     *     resolved with a rejection.                                                                                  // 9930\n     *                                                                                                                 // 9931\n     *                                                                                                                 // 9932\n     * ```js                                                                                                           // 9933\n     *   // register the interceptor as a service                                                                      // 9934\n     *   $provide.factory('myHttpInterceptor', function($q, dependency1, dependency2) {                                // 9935\n     *     return {                                                                                                    // 9936\n     *       // optional method                                                                                        // 9937\n     *       'request': function(config) {                                                                             // 9938\n     *         // do something on success                                                                              // 9939\n     *         return config;                                                                                          // 9940\n     *       },                                                                                                        // 9941\n     *                                                                                                                 // 9942\n     *       // optional method                                                                                        // 9943\n     *      'requestError': function(rejection) {                                                                      // 9944\n     *         // do something on error                                                                                // 9945\n     *         if (canRecover(rejection)) {                                                                            // 9946\n     *           return responseOrNewPromise                                                                           // 9947\n     *         }                                                                                                       // 9948\n     *         return $q.reject(rejection);                                                                            // 9949\n     *       },                                                                                                        // 9950\n     *                                                                                                                 // 9951\n     *                                                                                                                 // 9952\n     *                                                                                                                 // 9953\n     *       // optional method                                                                                        // 9954\n     *       'response': function(response) {                                                                          // 9955\n     *         // do something on success                                                                              // 9956\n     *         return response;                                                                                        // 9957\n     *       },                                                                                                        // 9958\n     *                                                                                                                 // 9959\n     *       // optional method                                                                                        // 9960\n     *      'responseError': function(rejection) {                                                                     // 9961\n     *         // do something on error                                                                                // 9962\n     *         if (canRecover(rejection)) {                                                                            // 9963\n     *           return responseOrNewPromise                                                                           // 9964\n     *         }                                                                                                       // 9965\n     *         return $q.reject(rejection);                                                                            // 9966\n     *       }                                                                                                         // 9967\n     *     };                                                                                                          // 9968\n     *   });                                                                                                           // 9969\n     *                                                                                                                 // 9970\n     *   $httpProvider.interceptors.push('myHttpInterceptor');                                                         // 9971\n     *                                                                                                                 // 9972\n     *                                                                                                                 // 9973\n     *   // alternatively, register the interceptor via an anonymous factory                                           // 9974\n     *   $httpProvider.interceptors.push(function($q, dependency1, dependency2) {                                      // 9975\n     *     return {                                                                                                    // 9976\n     *      'request': function(config) {                                                                              // 9977\n     *          // same as above                                                                                       // 9978\n     *       },                                                                                                        // 9979\n     *                                                                                                                 // 9980\n     *       'response': function(response) {                                                                          // 9981\n     *          // same as above                                                                                       // 9982\n     *       }                                                                                                         // 9983\n     *     };                                                                                                          // 9984\n     *   });                                                                                                           // 9985\n     * ```                                                                                                             // 9986\n     *                                                                                                                 // 9987\n     * ## Security Considerations                                                                                      // 9988\n     *                                                                                                                 // 9989\n     * When designing web applications, consider security threats from:                                                // 9990\n     *                                                                                                                 // 9991\n     * - [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)       // 9992\n     * - [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery)                                               // 9993\n     *                                                                                                                 // 9994\n     * Both server and the client must cooperate in order to eliminate these threats. Angular comes                    // 9995\n     * pre-configured with strategies that address these issues, but for this to work backend server                   // 9996\n     * cooperation is required.                                                                                        // 9997\n     *                                                                                                                 // 9998\n     * ### JSON Vulnerability Protection                                                                               // 9999\n     *                                                                                                                 // 10000\n     * A [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)       // 10001\n     * allows third party website to turn your JSON resource URL into                                                  // 10002\n     * [JSONP](http://en.wikipedia.org/wiki/JSONP) request under some conditions. To                                   // 10003\n     * counter this your server can prefix all JSON requests with following string `\")]}',\\n\"`.                        // 10004\n     * Angular will automatically strip the prefix before processing it as JSON.                                       // 10005\n     *                                                                                                                 // 10006\n     * For example if your server needs to return:                                                                     // 10007\n     * ```js                                                                                                           // 10008\n     * ['one','two']                                                                                                   // 10009\n     * ```                                                                                                             // 10010\n     *                                                                                                                 // 10011\n     * which is vulnerable to attack, your server can return:                                                          // 10012\n     * ```js                                                                                                           // 10013\n     * )]}',                                                                                                           // 10014\n     * ['one','two']                                                                                                   // 10015\n     * ```                                                                                                             // 10016\n     *                                                                                                                 // 10017\n     * Angular will strip the prefix, before processing the JSON.                                                      // 10018\n     *                                                                                                                 // 10019\n     *                                                                                                                 // 10020\n     * ### Cross Site Request Forgery (XSRF) Protection                                                                // 10021\n     *                                                                                                                 // 10022\n     * [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery) is a technique by which                         // 10023\n     * an unauthorized site can gain your user's private data. Angular provides a mechanism                            // 10024\n     * to counter XSRF. When performing XHR requests, the $http service reads a token from a cookie                    // 10025\n     * (by default, `XSRF-TOKEN`) and sets it as an HTTP header (`X-XSRF-TOKEN`). Since only                           // 10026\n     * JavaScript that runs on your domain could read the cookie, your server can be assured that                      // 10027\n     * the XHR came from JavaScript running on your domain. The header will not be set for                             // 10028\n     * cross-domain requests.                                                                                          // 10029\n     *                                                                                                                 // 10030\n     * To take advantage of this, your server needs to set a token in a JavaScript readable session                    // 10031\n     * cookie called `XSRF-TOKEN` on the first HTTP GET request. On subsequent XHR requests the                        // 10032\n     * server can verify that the cookie matches `X-XSRF-TOKEN` HTTP header, and therefore be sure                     // 10033\n     * that only JavaScript running on your domain could have sent the request. The token must be                      // 10034\n     * unique for each user and must be verifiable by the server (to prevent the JavaScript from                       // 10035\n     * making up its own tokens). We recommend that the token is a digest of your site's                               // 10036\n     * authentication cookie with a [salt](https://en.wikipedia.org/wiki/Salt_(cryptography&#41;)                      // 10037\n     * for added security.                                                                                             // 10038\n     *                                                                                                                 // 10039\n     * The name of the headers can be specified using the xsrfHeaderName and xsrfCookieName                            // 10040\n     * properties of either $httpProvider.defaults at config-time, $http.defaults at run-time,                         // 10041\n     * or the per-request config object.                                                                               // 10042\n     *                                                                                                                 // 10043\n     * In order to prevent collisions in environments where multiple Angular apps share the                            // 10044\n     * same domain or subdomain, we recommend that each application uses unique cookie name.                           // 10045\n     *                                                                                                                 // 10046\n     * @param {object} config Object describing the request to be made and how it should be                            // 10047\n     *    processed. The object has following properties:                                                              // 10048\n     *                                                                                                                 // 10049\n     *    - **method** – `{string}` – HTTP method (e.g. 'GET', 'POST', etc)                                            // 10050\n     *    - **url** – `{string}` – Absolute or relative URL of the resource that is being requested.                   // 10051\n     *    - **params** – `{Object.<string|Object>}` – Map of strings or objects which will be serialized               // 10052\n     *      with the `paramSerializer` and appended as GET parameters.                                                 // 10053\n     *    - **data** – `{string|Object}` – Data to be sent as the request message data.                                // 10054\n     *    - **headers** – `{Object}` – Map of strings or functions which return strings representing                   // 10055\n     *      HTTP headers to send to the server. If the return value of a function is null, the                         // 10056\n     *      header will not be sent. Functions accept a config object as an argument.                                  // 10057\n     *    - **xsrfHeaderName** – `{string}` – Name of HTTP header to populate with the XSRF token.                     // 10058\n     *    - **xsrfCookieName** – `{string}` – Name of cookie containing the XSRF token.                                // 10059\n     *    - **transformRequest** –                                                                                     // 10060\n     *      `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –                                  // 10061\n     *      transform function or an array of such functions. The transform function takes the http                    // 10062\n     *      request body and headers and returns its transformed (typically serialized) version.                       // 10063\n     *      See {@link ng.$http#overriding-the-default-transformations-per-request                                     // 10064\n     *      Overriding the Default Transformations}                                                                    // 10065\n     *    - **transformResponse** –                                                                                    // 10066\n     *      `{function(data, headersGetter, status)|Array.<function(data, headersGetter, status)>}` –                  // 10067\n     *      transform function or an array of such functions. The transform function takes the http                    // 10068\n     *      response body, headers and status and returns its transformed (typically deserialized) version.            // 10069\n     *      See {@link ng.$http#overriding-the-default-transformations-per-request                                     // 10070\n     *      Overriding the Default TransformationjqLiks}                                                               // 10071\n     *    - **paramSerializer** - `{string|function(Object<string,string>):string}` - A function used to               // 10072\n     *      prepare the string representation of request parameters (specified as an object).                          // 10073\n     *      If specified as string, it is interpreted as function registered with the                                  // 10074\n     *      {@link $injector $injector}, which means you can create your own serializer                                // 10075\n     *      by registering it as a {@link auto.$provide#service service}.                                              // 10076\n     *      The default serializer is the {@link $httpParamSerializer $httpParamSerializer};                           // 10077\n     *      alternatively, you can use the {@link $httpParamSerializerJQLike $httpParamSerializerJQLike}               // 10078\n     *    - **cache** – `{boolean|Cache}` – If true, a default $http cache will be used to cache the                   // 10079\n     *      GET request, otherwise if a cache instance built with                                                      // 10080\n     *      {@link ng.$cacheFactory $cacheFactory}, this cache will be used for                                        // 10081\n     *      caching.                                                                                                   // 10082\n     *    - **timeout** – `{number|Promise}` – timeout in milliseconds, or {@link ng.$q promise}                       // 10083\n     *      that should abort the request when resolved.                                                               // 10084\n     *    - **withCredentials** - `{boolean}` - whether to set the `withCredentials` flag on the                       // 10085\n     *      XHR object. See [requests with credentials](https://developer.mozilla.org/docs/Web/HTTP/Access_control_CORS#Requests_with_credentials)\n     *      for more information.                                                                                      // 10087\n     *    - **responseType** - `{string}` - see                                                                        // 10088\n     *      [XMLHttpRequest.responseType](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#xmlhttprequest-responsetype).\n     *                                                                                                                 // 10090\n     * @returns {HttpPromise} Returns a {@link ng.$q `Promise}` that will be resolved to a response object             // 10091\n     *                        when the request succeeds or fails.                                                      // 10092\n     *                                                                                                                 // 10093\n     *                                                                                                                 // 10094\n     * @property {Array.<Object>} pendingRequests Array of config objects for currently pending                        // 10095\n     *   requests. This is primarily meant to be used for debugging purposes.                                          // 10096\n     *                                                                                                                 // 10097\n     *                                                                                                                 // 10098\n     * @example                                                                                                        // 10099\n<example module=\"httpExample\">                                                                                         // 10100\n<file name=\"index.html\">                                                                                               // 10101\n  <div ng-controller=\"FetchController\">                                                                                // 10102\n    <select ng-model=\"method\" aria-label=\"Request method\">                                                             // 10103\n      <option>GET</option>                                                                                             // 10104\n      <option>JSONP</option>                                                                                           // 10105\n    </select>                                                                                                          // 10106\n    <input type=\"text\" ng-model=\"url\" size=\"80\" aria-label=\"URL\" />                                                    // 10107\n    <button id=\"fetchbtn\" ng-click=\"fetch()\">fetch</button><br>                                                        // 10108\n    <button id=\"samplegetbtn\" ng-click=\"updateModel('GET', 'http-hello.html')\">Sample GET</button>                     // 10109\n    <button id=\"samplejsonpbtn\"                                                                                        // 10110\n      ng-click=\"updateModel('JSONP',                                                                                   // 10111\n                    'https://angularjs.org/greet.php?callback=JSON_CALLBACK&name=Super%20Hero')\">                      // 10112\n      Sample JSONP                                                                                                     // 10113\n    </button>                                                                                                          // 10114\n    <button id=\"invalidjsonpbtn\"                                                                                       // 10115\n      ng-click=\"updateModel('JSONP', 'https://angularjs.org/doesntexist&callback=JSON_CALLBACK')\">                     // 10116\n        Invalid JSONP                                                                                                  // 10117\n      </button>                                                                                                        // 10118\n    <pre>http status code: {{status}}</pre>                                                                            // 10119\n    <pre>http response data: {{data}}</pre>                                                                            // 10120\n  </div>                                                                                                               // 10121\n</file>                                                                                                                // 10122\n<file name=\"script.js\">                                                                                                // 10123\n  angular.module('httpExample', [])                                                                                    // 10124\n    .controller('FetchController', ['$scope', '$http', '$templateCache',                                               // 10125\n      function($scope, $http, $templateCache) {                                                                        // 10126\n        $scope.method = 'GET';                                                                                         // 10127\n        $scope.url = 'http-hello.html';                                                                                // 10128\n                                                                                                                       // 10129\n        $scope.fetch = function() {                                                                                    // 10130\n          $scope.code = null;                                                                                          // 10131\n          $scope.response = null;                                                                                      // 10132\n                                                                                                                       // 10133\n          $http({method: $scope.method, url: $scope.url, cache: $templateCache}).                                      // 10134\n            then(function(response) {                                                                                  // 10135\n              $scope.status = response.status;                                                                         // 10136\n              $scope.data = response.data;                                                                             // 10137\n            }, function(response) {                                                                                    // 10138\n              $scope.data = response.data || \"Request failed\";                                                         // 10139\n              $scope.status = response.status;                                                                         // 10140\n          });                                                                                                          // 10141\n        };                                                                                                             // 10142\n                                                                                                                       // 10143\n        $scope.updateModel = function(method, url) {                                                                   // 10144\n          $scope.method = method;                                                                                      // 10145\n          $scope.url = url;                                                                                            // 10146\n        };                                                                                                             // 10147\n      }]);                                                                                                             // 10148\n</file>                                                                                                                // 10149\n<file name=\"http-hello.html\">                                                                                          // 10150\n  Hello, $http!                                                                                                        // 10151\n</file>                                                                                                                // 10152\n<file name=\"protractor.js\" type=\"protractor\">                                                                          // 10153\n  var status = element(by.binding('status'));                                                                          // 10154\n  var data = element(by.binding('data'));                                                                              // 10155\n  var fetchBtn = element(by.id('fetchbtn'));                                                                           // 10156\n  var sampleGetBtn = element(by.id('samplegetbtn'));                                                                   // 10157\n  var sampleJsonpBtn = element(by.id('samplejsonpbtn'));                                                               // 10158\n  var invalidJsonpBtn = element(by.id('invalidjsonpbtn'));                                                             // 10159\n                                                                                                                       // 10160\n  it('should make an xhr GET request', function() {                                                                    // 10161\n    sampleGetBtn.click();                                                                                              // 10162\n    fetchBtn.click();                                                                                                  // 10163\n    expect(status.getText()).toMatch('200');                                                                           // 10164\n    expect(data.getText()).toMatch(/Hello, \\$http!/);                                                                  // 10165\n  });                                                                                                                  // 10166\n                                                                                                                       // 10167\n// Commented out due to flakes. See https://github.com/angular/angular.js/issues/9185                                  // 10168\n// it('should make a JSONP request to angularjs.org', function() {                                                     // 10169\n//   sampleJsonpBtn.click();                                                                                           // 10170\n//   fetchBtn.click();                                                                                                 // 10171\n//   expect(status.getText()).toMatch('200');                                                                          // 10172\n//   expect(data.getText()).toMatch(/Super Hero!/);                                                                    // 10173\n// });                                                                                                                 // 10174\n                                                                                                                       // 10175\n  it('should make JSONP request to invalid URL and invoke the error handler',                                          // 10176\n      function() {                                                                                                     // 10177\n    invalidJsonpBtn.click();                                                                                           // 10178\n    fetchBtn.click();                                                                                                  // 10179\n    expect(status.getText()).toMatch('0');                                                                             // 10180\n    expect(data.getText()).toMatch('Request failed');                                                                  // 10181\n  });                                                                                                                  // 10182\n</file>                                                                                                                // 10183\n</example>                                                                                                             // 10184\n     */                                                                                                                // 10185\n    function $http(requestConfig) {                                                                                    // 10186\n                                                                                                                       // 10187\n      if (!angular.isObject(requestConfig)) {                                                                          // 10188\n        throw minErr('$http')('badreq', 'Http request configuration must be an object.  Received: {0}', requestConfig);\n      }                                                                                                                // 10190\n                                                                                                                       // 10191\n      var config = extend({                                                                                            // 10192\n        method: 'get',                                                                                                 // 10193\n        transformRequest: defaults.transformRequest,                                                                   // 10194\n        transformResponse: defaults.transformResponse,                                                                 // 10195\n        paramSerializer: defaults.paramSerializer                                                                      // 10196\n      }, requestConfig);                                                                                               // 10197\n                                                                                                                       // 10198\n      config.headers = mergeHeaders(requestConfig);                                                                    // 10199\n      config.method = uppercase(config.method);                                                                        // 10200\n      config.paramSerializer = isString(config.paramSerializer) ?                                                      // 10201\n        $injector.get(config.paramSerializer) : config.paramSerializer;                                                // 10202\n                                                                                                                       // 10203\n      var serverRequest = function(config) {                                                                           // 10204\n        var headers = config.headers;                                                                                  // 10205\n        var reqData = transformData(config.data, headersGetter(headers), undefined, config.transformRequest);          // 10206\n                                                                                                                       // 10207\n        // strip content-type if data is undefined                                                                     // 10208\n        if (isUndefined(reqData)) {                                                                                    // 10209\n          forEach(headers, function(value, header) {                                                                   // 10210\n            if (lowercase(header) === 'content-type') {                                                                // 10211\n                delete headers[header];                                                                                // 10212\n            }                                                                                                          // 10213\n          });                                                                                                          // 10214\n        }                                                                                                              // 10215\n                                                                                                                       // 10216\n        if (isUndefined(config.withCredentials) && !isUndefined(defaults.withCredentials)) {                           // 10217\n          config.withCredentials = defaults.withCredentials;                                                           // 10218\n        }                                                                                                              // 10219\n                                                                                                                       // 10220\n        // send request                                                                                                // 10221\n        return sendReq(config, reqData).then(transformResponse, transformResponse);                                    // 10222\n      };                                                                                                               // 10223\n                                                                                                                       // 10224\n      var chain = [serverRequest, undefined];                                                                          // 10225\n      var promise = $q.when(config);                                                                                   // 10226\n                                                                                                                       // 10227\n      // apply interceptors                                                                                            // 10228\n      forEach(reversedInterceptors, function(interceptor) {                                                            // 10229\n        if (interceptor.request || interceptor.requestError) {                                                         // 10230\n          chain.unshift(interceptor.request, interceptor.requestError);                                                // 10231\n        }                                                                                                              // 10232\n        if (interceptor.response || interceptor.responseError) {                                                       // 10233\n          chain.push(interceptor.response, interceptor.responseError);                                                 // 10234\n        }                                                                                                              // 10235\n      });                                                                                                              // 10236\n                                                                                                                       // 10237\n      while (chain.length) {                                                                                           // 10238\n        var thenFn = chain.shift();                                                                                    // 10239\n        var rejectFn = chain.shift();                                                                                  // 10240\n                                                                                                                       // 10241\n        promise = promise.then(thenFn, rejectFn);                                                                      // 10242\n      }                                                                                                                // 10243\n                                                                                                                       // 10244\n      if (useLegacyPromise) {                                                                                          // 10245\n        promise.success = function(fn) {                                                                               // 10246\n          assertArgFn(fn, 'fn');                                                                                       // 10247\n                                                                                                                       // 10248\n          promise.then(function(response) {                                                                            // 10249\n            fn(response.data, response.status, response.headers, config);                                              // 10250\n          });                                                                                                          // 10251\n          return promise;                                                                                              // 10252\n        };                                                                                                             // 10253\n                                                                                                                       // 10254\n        promise.error = function(fn) {                                                                                 // 10255\n          assertArgFn(fn, 'fn');                                                                                       // 10256\n                                                                                                                       // 10257\n          promise.then(null, function(response) {                                                                      // 10258\n            fn(response.data, response.status, response.headers, config);                                              // 10259\n          });                                                                                                          // 10260\n          return promise;                                                                                              // 10261\n        };                                                                                                             // 10262\n      } else {                                                                                                         // 10263\n        promise.success = $httpMinErrLegacyFn('success');                                                              // 10264\n        promise.error = $httpMinErrLegacyFn('error');                                                                  // 10265\n      }                                                                                                                // 10266\n                                                                                                                       // 10267\n      return promise;                                                                                                  // 10268\n                                                                                                                       // 10269\n      function transformResponse(response) {                                                                           // 10270\n        // make a copy since the response must be cacheable                                                            // 10271\n        var resp = extend({}, response);                                                                               // 10272\n        if (!response.data) {                                                                                          // 10273\n          resp.data = response.data;                                                                                   // 10274\n        } else {                                                                                                       // 10275\n          resp.data = transformData(response.data, response.headers, response.status, config.transformResponse);       // 10276\n        }                                                                                                              // 10277\n        return (isSuccess(response.status))                                                                            // 10278\n          ? resp                                                                                                       // 10279\n          : $q.reject(resp);                                                                                           // 10280\n      }                                                                                                                // 10281\n                                                                                                                       // 10282\n      function executeHeaderFns(headers, config) {                                                                     // 10283\n        var headerContent, processedHeaders = {};                                                                      // 10284\n                                                                                                                       // 10285\n        forEach(headers, function(headerFn, header) {                                                                  // 10286\n          if (isFunction(headerFn)) {                                                                                  // 10287\n            headerContent = headerFn(config);                                                                          // 10288\n            if (headerContent != null) {                                                                               // 10289\n              processedHeaders[header] = headerContent;                                                                // 10290\n            }                                                                                                          // 10291\n          } else {                                                                                                     // 10292\n            processedHeaders[header] = headerFn;                                                                       // 10293\n          }                                                                                                            // 10294\n        });                                                                                                            // 10295\n                                                                                                                       // 10296\n        return processedHeaders;                                                                                       // 10297\n      }                                                                                                                // 10298\n                                                                                                                       // 10299\n      function mergeHeaders(config) {                                                                                  // 10300\n        var defHeaders = defaults.headers,                                                                             // 10301\n            reqHeaders = extend({}, config.headers),                                                                   // 10302\n            defHeaderName, lowercaseDefHeaderName, reqHeaderName;                                                      // 10303\n                                                                                                                       // 10304\n        defHeaders = extend({}, defHeaders.common, defHeaders[lowercase(config.method)]);                              // 10305\n                                                                                                                       // 10306\n        // using for-in instead of forEach to avoid unecessary iteration after header has been found                   // 10307\n        defaultHeadersIteration:                                                                                       // 10308\n        for (defHeaderName in defHeaders) {                                                                            // 10309\n          lowercaseDefHeaderName = lowercase(defHeaderName);                                                           // 10310\n                                                                                                                       // 10311\n          for (reqHeaderName in reqHeaders) {                                                                          // 10312\n            if (lowercase(reqHeaderName) === lowercaseDefHeaderName) {                                                 // 10313\n              continue defaultHeadersIteration;                                                                        // 10314\n            }                                                                                                          // 10315\n          }                                                                                                            // 10316\n                                                                                                                       // 10317\n          reqHeaders[defHeaderName] = defHeaders[defHeaderName];                                                       // 10318\n        }                                                                                                              // 10319\n                                                                                                                       // 10320\n        // execute if header value is a function for merged headers                                                    // 10321\n        return executeHeaderFns(reqHeaders, shallowCopy(config));                                                      // 10322\n      }                                                                                                                // 10323\n    }                                                                                                                  // 10324\n                                                                                                                       // 10325\n    $http.pendingRequests = [];                                                                                        // 10326\n                                                                                                                       // 10327\n    /**                                                                                                                // 10328\n     * @ngdoc method                                                                                                   // 10329\n     * @name $http#get                                                                                                 // 10330\n     *                                                                                                                 // 10331\n     * @description                                                                                                    // 10332\n     * Shortcut method to perform `GET` request.                                                                       // 10333\n     *                                                                                                                 // 10334\n     * @param {string} url Relative or absolute URL specifying the destination of the request                          // 10335\n     * @param {Object=} config Optional configuration object                                                           // 10336\n     * @returns {HttpPromise} Future object                                                                            // 10337\n     */                                                                                                                // 10338\n                                                                                                                       // 10339\n    /**                                                                                                                // 10340\n     * @ngdoc method                                                                                                   // 10341\n     * @name $http#delete                                                                                              // 10342\n     *                                                                                                                 // 10343\n     * @description                                                                                                    // 10344\n     * Shortcut method to perform `DELETE` request.                                                                    // 10345\n     *                                                                                                                 // 10346\n     * @param {string} url Relative or absolute URL specifying the destination of the request                          // 10347\n     * @param {Object=} config Optional configuration object                                                           // 10348\n     * @returns {HttpPromise} Future object                                                                            // 10349\n     */                                                                                                                // 10350\n                                                                                                                       // 10351\n    /**                                                                                                                // 10352\n     * @ngdoc method                                                                                                   // 10353\n     * @name $http#head                                                                                                // 10354\n     *                                                                                                                 // 10355\n     * @description                                                                                                    // 10356\n     * Shortcut method to perform `HEAD` request.                                                                      // 10357\n     *                                                                                                                 // 10358\n     * @param {string} url Relative or absolute URL specifying the destination of the request                          // 10359\n     * @param {Object=} config Optional configuration object                                                           // 10360\n     * @returns {HttpPromise} Future object                                                                            // 10361\n     */                                                                                                                // 10362\n                                                                                                                       // 10363\n    /**                                                                                                                // 10364\n     * @ngdoc method                                                                                                   // 10365\n     * @name $http#jsonp                                                                                               // 10366\n     *                                                                                                                 // 10367\n     * @description                                                                                                    // 10368\n     * Shortcut method to perform `JSONP` request.                                                                     // 10369\n     *                                                                                                                 // 10370\n     * @param {string} url Relative or absolute URL specifying the destination of the request.                         // 10371\n     *                     The name of the callback should be the string `JSON_CALLBACK`.                              // 10372\n     * @param {Object=} config Optional configuration object                                                           // 10373\n     * @returns {HttpPromise} Future object                                                                            // 10374\n     */                                                                                                                // 10375\n    createShortMethods('get', 'delete', 'head', 'jsonp');                                                              // 10376\n                                                                                                                       // 10377\n    /**                                                                                                                // 10378\n     * @ngdoc method                                                                                                   // 10379\n     * @name $http#post                                                                                                // 10380\n     *                                                                                                                 // 10381\n     * @description                                                                                                    // 10382\n     * Shortcut method to perform `POST` request.                                                                      // 10383\n     *                                                                                                                 // 10384\n     * @param {string} url Relative or absolute URL specifying the destination of the request                          // 10385\n     * @param {*} data Request content                                                                                 // 10386\n     * @param {Object=} config Optional configuration object                                                           // 10387\n     * @returns {HttpPromise} Future object                                                                            // 10388\n     */                                                                                                                // 10389\n                                                                                                                       // 10390\n    /**                                                                                                                // 10391\n     * @ngdoc method                                                                                                   // 10392\n     * @name $http#put                                                                                                 // 10393\n     *                                                                                                                 // 10394\n     * @description                                                                                                    // 10395\n     * Shortcut method to perform `PUT` request.                                                                       // 10396\n     *                                                                                                                 // 10397\n     * @param {string} url Relative or absolute URL specifying the destination of the request                          // 10398\n     * @param {*} data Request content                                                                                 // 10399\n     * @param {Object=} config Optional configuration object                                                           // 10400\n     * @returns {HttpPromise} Future object                                                                            // 10401\n     */                                                                                                                // 10402\n                                                                                                                       // 10403\n     /**                                                                                                               // 10404\n      * @ngdoc method                                                                                                  // 10405\n      * @name $http#patch                                                                                              // 10406\n      *                                                                                                                // 10407\n      * @description                                                                                                   // 10408\n      * Shortcut method to perform `PATCH` request.                                                                    // 10409\n      *                                                                                                                // 10410\n      * @param {string} url Relative or absolute URL specifying the destination of the request                         // 10411\n      * @param {*} data Request content                                                                                // 10412\n      * @param {Object=} config Optional configuration object                                                          // 10413\n      * @returns {HttpPromise} Future object                                                                           // 10414\n      */                                                                                                               // 10415\n    createShortMethodsWithData('post', 'put', 'patch');                                                                // 10416\n                                                                                                                       // 10417\n        /**                                                                                                            // 10418\n         * @ngdoc property                                                                                             // 10419\n         * @name $http#defaults                                                                                        // 10420\n         *                                                                                                             // 10421\n         * @description                                                                                                // 10422\n         * Runtime equivalent of the `$httpProvider.defaults` property. Allows configuration of                        // 10423\n         * default headers, withCredentials as well as request and response transformations.                           // 10424\n         *                                                                                                             // 10425\n         * See \"Setting HTTP Headers\" and \"Transforming Requests and Responses\" sections above.                        // 10426\n         */                                                                                                            // 10427\n    $http.defaults = defaults;                                                                                         // 10428\n                                                                                                                       // 10429\n                                                                                                                       // 10430\n    return $http;                                                                                                      // 10431\n                                                                                                                       // 10432\n                                                                                                                       // 10433\n    function createShortMethods(names) {                                                                               // 10434\n      forEach(arguments, function(name) {                                                                              // 10435\n        $http[name] = function(url, config) {                                                                          // 10436\n          return $http(extend({}, config || {}, {                                                                      // 10437\n            method: name,                                                                                              // 10438\n            url: url                                                                                                   // 10439\n          }));                                                                                                         // 10440\n        };                                                                                                             // 10441\n      });                                                                                                              // 10442\n    }                                                                                                                  // 10443\n                                                                                                                       // 10444\n                                                                                                                       // 10445\n    function createShortMethodsWithData(name) {                                                                        // 10446\n      forEach(arguments, function(name) {                                                                              // 10447\n        $http[name] = function(url, data, config) {                                                                    // 10448\n          return $http(extend({}, config || {}, {                                                                      // 10449\n            method: name,                                                                                              // 10450\n            url: url,                                                                                                  // 10451\n            data: data                                                                                                 // 10452\n          }));                                                                                                         // 10453\n        };                                                                                                             // 10454\n      });                                                                                                              // 10455\n    }                                                                                                                  // 10456\n                                                                                                                       // 10457\n                                                                                                                       // 10458\n    /**                                                                                                                // 10459\n     * Makes the request.                                                                                              // 10460\n     *                                                                                                                 // 10461\n     * !!! ACCESSES CLOSURE VARS:                                                                                      // 10462\n     * $httpBackend, defaults, $log, $rootScope, defaultCache, $http.pendingRequests                                   // 10463\n     */                                                                                                                // 10464\n    function sendReq(config, reqData) {                                                                                // 10465\n      var deferred = $q.defer(),                                                                                       // 10466\n          promise = deferred.promise,                                                                                  // 10467\n          cache,                                                                                                       // 10468\n          cachedResp,                                                                                                  // 10469\n          reqHeaders = config.headers,                                                                                 // 10470\n          url = buildUrl(config.url, config.paramSerializer(config.params));                                           // 10471\n                                                                                                                       // 10472\n      $http.pendingRequests.push(config);                                                                              // 10473\n      promise.then(removePendingReq, removePendingReq);                                                                // 10474\n                                                                                                                       // 10475\n                                                                                                                       // 10476\n      if ((config.cache || defaults.cache) && config.cache !== false &&                                                // 10477\n          (config.method === 'GET' || config.method === 'JSONP')) {                                                    // 10478\n        cache = isObject(config.cache) ? config.cache                                                                  // 10479\n              : isObject(defaults.cache) ? defaults.cache                                                              // 10480\n              : defaultCache;                                                                                          // 10481\n      }                                                                                                                // 10482\n                                                                                                                       // 10483\n      if (cache) {                                                                                                     // 10484\n        cachedResp = cache.get(url);                                                                                   // 10485\n        if (isDefined(cachedResp)) {                                                                                   // 10486\n          if (isPromiseLike(cachedResp)) {                                                                             // 10487\n            // cached request has already been sent, but there is no response yet                                      // 10488\n            cachedResp.then(resolvePromiseWithResult, resolvePromiseWithResult);                                       // 10489\n          } else {                                                                                                     // 10490\n            // serving from cache                                                                                      // 10491\n            if (isArray(cachedResp)) {                                                                                 // 10492\n              resolvePromise(cachedResp[1], cachedResp[0], shallowCopy(cachedResp[2]), cachedResp[3]);                 // 10493\n            } else {                                                                                                   // 10494\n              resolvePromise(cachedResp, 200, {}, 'OK');                                                               // 10495\n            }                                                                                                          // 10496\n          }                                                                                                            // 10497\n        } else {                                                                                                       // 10498\n          // put the promise for the non-transformed response into cache as a placeholder                              // 10499\n          cache.put(url, promise);                                                                                     // 10500\n        }                                                                                                              // 10501\n      }                                                                                                                // 10502\n                                                                                                                       // 10503\n                                                                                                                       // 10504\n      // if we won't have the response in cache, set the xsrf headers and                                              // 10505\n      // send the request to the backend                                                                               // 10506\n      if (isUndefined(cachedResp)) {                                                                                   // 10507\n        var xsrfValue = urlIsSameOrigin(config.url)                                                                    // 10508\n            ? $$cookieReader()[config.xsrfCookieName || defaults.xsrfCookieName]                                       // 10509\n            : undefined;                                                                                               // 10510\n        if (xsrfValue) {                                                                                               // 10511\n          reqHeaders[(config.xsrfHeaderName || defaults.xsrfHeaderName)] = xsrfValue;                                  // 10512\n        }                                                                                                              // 10513\n                                                                                                                       // 10514\n        $httpBackend(config.method, url, reqData, done, reqHeaders, config.timeout,                                    // 10515\n            config.withCredentials, config.responseType);                                                              // 10516\n      }                                                                                                                // 10517\n                                                                                                                       // 10518\n      return promise;                                                                                                  // 10519\n                                                                                                                       // 10520\n                                                                                                                       // 10521\n      /**                                                                                                              // 10522\n       * Callback registered to $httpBackend():                                                                        // 10523\n       *  - caches the response if desired                                                                             // 10524\n       *  - resolves the raw $http promise                                                                             // 10525\n       *  - calls $apply                                                                                               // 10526\n       */                                                                                                              // 10527\n      function done(status, response, headersString, statusText) {                                                     // 10528\n        if (cache) {                                                                                                   // 10529\n          if (isSuccess(status)) {                                                                                     // 10530\n            cache.put(url, [status, response, parseHeaders(headersString), statusText]);                               // 10531\n          } else {                                                                                                     // 10532\n            // remove promise from the cache                                                                           // 10533\n            cache.remove(url);                                                                                         // 10534\n          }                                                                                                            // 10535\n        }                                                                                                              // 10536\n                                                                                                                       // 10537\n        function resolveHttpPromise() {                                                                                // 10538\n          resolvePromise(response, status, headersString, statusText);                                                 // 10539\n        }                                                                                                              // 10540\n                                                                                                                       // 10541\n        if (useApplyAsync) {                                                                                           // 10542\n          $rootScope.$applyAsync(resolveHttpPromise);                                                                  // 10543\n        } else {                                                                                                       // 10544\n          resolveHttpPromise();                                                                                        // 10545\n          if (!$rootScope.$$phase) $rootScope.$apply();                                                                // 10546\n        }                                                                                                              // 10547\n      }                                                                                                                // 10548\n                                                                                                                       // 10549\n                                                                                                                       // 10550\n      /**                                                                                                              // 10551\n       * Resolves the raw $http promise.                                                                               // 10552\n       */                                                                                                              // 10553\n      function resolvePromise(response, status, headers, statusText) {                                                 // 10554\n        //status: HTTP response status code, 0, -1 (aborted by timeout / promise)                                      // 10555\n        status = status >= -1 ? status : 0;                                                                            // 10556\n                                                                                                                       // 10557\n        (isSuccess(status) ? deferred.resolve : deferred.reject)({                                                     // 10558\n          data: response,                                                                                              // 10559\n          status: status,                                                                                              // 10560\n          headers: headersGetter(headers),                                                                             // 10561\n          config: config,                                                                                              // 10562\n          statusText: statusText                                                                                       // 10563\n        });                                                                                                            // 10564\n      }                                                                                                                // 10565\n                                                                                                                       // 10566\n      function resolvePromiseWithResult(result) {                                                                      // 10567\n        resolvePromise(result.data, result.status, shallowCopy(result.headers()), result.statusText);                  // 10568\n      }                                                                                                                // 10569\n                                                                                                                       // 10570\n      function removePendingReq() {                                                                                    // 10571\n        var idx = $http.pendingRequests.indexOf(config);                                                               // 10572\n        if (idx !== -1) $http.pendingRequests.splice(idx, 1);                                                          // 10573\n      }                                                                                                                // 10574\n    }                                                                                                                  // 10575\n                                                                                                                       // 10576\n                                                                                                                       // 10577\n    function buildUrl(url, serializedParams) {                                                                         // 10578\n      if (serializedParams.length > 0) {                                                                               // 10579\n        url += ((url.indexOf('?') == -1) ? '?' : '&') + serializedParams;                                              // 10580\n      }                                                                                                                // 10581\n      return url;                                                                                                      // 10582\n    }                                                                                                                  // 10583\n  }];                                                                                                                  // 10584\n}                                                                                                                      // 10585\n                                                                                                                       // 10586\n/**                                                                                                                    // 10587\n * @ngdoc service                                                                                                      // 10588\n * @name $xhrFactory                                                                                                   // 10589\n *                                                                                                                     // 10590\n * @description                                                                                                        // 10591\n * Factory function used to create XMLHttpRequest objects.                                                             // 10592\n *                                                                                                                     // 10593\n * Replace or decorate this service to create your own custom XMLHttpRequest objects.                                  // 10594\n *                                                                                                                     // 10595\n * ```                                                                                                                 // 10596\n * angular.module('myApp', [])                                                                                         // 10597\n * .factory('$xhrFactory', function() {                                                                                // 10598\n *   return function createXhr(method, url) {                                                                          // 10599\n *     return new window.XMLHttpRequest({mozSystem: true});                                                            // 10600\n *   };                                                                                                                // 10601\n * });                                                                                                                 // 10602\n * ```                                                                                                                 // 10603\n *                                                                                                                     // 10604\n * @param {string} method HTTP method of the request (GET, POST, PUT, ..)                                              // 10605\n * @param {string} url URL of the request.                                                                             // 10606\n */                                                                                                                    // 10607\nfunction $xhrFactoryProvider() {                                                                                       // 10608\n  this.$get = function() {                                                                                             // 10609\n    return function createXhr() {                                                                                      // 10610\n      return new window.XMLHttpRequest();                                                                              // 10611\n    };                                                                                                                 // 10612\n  };                                                                                                                   // 10613\n}                                                                                                                      // 10614\n                                                                                                                       // 10615\n/**                                                                                                                    // 10616\n * @ngdoc service                                                                                                      // 10617\n * @name $httpBackend                                                                                                  // 10618\n * @requires $window                                                                                                   // 10619\n * @requires $document                                                                                                 // 10620\n * @requires $xhrFactory                                                                                               // 10621\n *                                                                                                                     // 10622\n * @description                                                                                                        // 10623\n * HTTP backend used by the {@link ng.$http service} that delegates to                                                 // 10624\n * XMLHttpRequest object or JSONP and deals with browser incompatibilities.                                            // 10625\n *                                                                                                                     // 10626\n * You should never need to use this service directly, instead use the higher-level abstractions:                      // 10627\n * {@link ng.$http $http} or {@link ngResource.$resource $resource}.                                                   // 10628\n *                                                                                                                     // 10629\n * During testing this implementation is swapped with {@link ngMock.$httpBackend mock                                  // 10630\n * $httpBackend} which can be trained with responses.                                                                  // 10631\n */                                                                                                                    // 10632\nfunction $HttpBackendProvider() {                                                                                      // 10633\n  this.$get = ['$browser', '$window', '$document', '$xhrFactory', function($browser, $window, $document, $xhrFactory) {\n    return createHttpBackend($browser, $xhrFactory, $browser.defer, $window.angular.callbacks, $document[0]);          // 10635\n  }];                                                                                                                  // 10636\n}                                                                                                                      // 10637\n                                                                                                                       // 10638\nfunction createHttpBackend($browser, createXhr, $browserDefer, callbacks, rawDocument) {                               // 10639\n  // TODO(vojta): fix the signature                                                                                    // 10640\n  return function(method, url, post, callback, headers, timeout, withCredentials, responseType) {                      // 10641\n    $browser.$$incOutstandingRequestCount();                                                                           // 10642\n    url = url || $browser.url();                                                                                       // 10643\n                                                                                                                       // 10644\n    if (lowercase(method) == 'jsonp') {                                                                                // 10645\n      var callbackId = '_' + (callbacks.counter++).toString(36);                                                       // 10646\n      callbacks[callbackId] = function(data) {                                                                         // 10647\n        callbacks[callbackId].data = data;                                                                             // 10648\n        callbacks[callbackId].called = true;                                                                           // 10649\n      };                                                                                                               // 10650\n                                                                                                                       // 10651\n      var jsonpDone = jsonpReq(url.replace('JSON_CALLBACK', 'angular.callbacks.' + callbackId),                        // 10652\n          callbackId, function(status, text) {                                                                         // 10653\n        completeRequest(callback, status, callbacks[callbackId].data, \"\", text);                                       // 10654\n        callbacks[callbackId] = noop;                                                                                  // 10655\n      });                                                                                                              // 10656\n    } else {                                                                                                           // 10657\n                                                                                                                       // 10658\n      var xhr = createXhr(method, url);                                                                                // 10659\n                                                                                                                       // 10660\n      xhr.open(method, url, true);                                                                                     // 10661\n      forEach(headers, function(value, key) {                                                                          // 10662\n        if (isDefined(value)) {                                                                                        // 10663\n            xhr.setRequestHeader(key, value);                                                                          // 10664\n        }                                                                                                              // 10665\n      });                                                                                                              // 10666\n                                                                                                                       // 10667\n      xhr.onload = function requestLoaded() {                                                                          // 10668\n        var statusText = xhr.statusText || '';                                                                         // 10669\n                                                                                                                       // 10670\n        // responseText is the old-school way of retrieving response (supported by IE9)                                // 10671\n        // response/responseType properties were introduced in XHR Level2 spec (supported by IE10)                     // 10672\n        var response = ('response' in xhr) ? xhr.response : xhr.responseText;                                          // 10673\n                                                                                                                       // 10674\n        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)                                                      // 10675\n        var status = xhr.status === 1223 ? 204 : xhr.status;                                                           // 10676\n                                                                                                                       // 10677\n        // fix status code when it is 0 (0 status is undocumented).                                                    // 10678\n        // Occurs when accessing file resources or on Android 4.1 stock browser                                        // 10679\n        // while retrieving files from application cache.                                                              // 10680\n        if (status === 0) {                                                                                            // 10681\n          status = response ? 200 : urlResolve(url).protocol == 'file' ? 404 : 0;                                      // 10682\n        }                                                                                                              // 10683\n                                                                                                                       // 10684\n        completeRequest(callback,                                                                                      // 10685\n            status,                                                                                                    // 10686\n            response,                                                                                                  // 10687\n            xhr.getAllResponseHeaders(),                                                                               // 10688\n            statusText);                                                                                               // 10689\n      };                                                                                                               // 10690\n                                                                                                                       // 10691\n      var requestError = function() {                                                                                  // 10692\n        // The response is always empty                                                                                // 10693\n        // See https://xhr.spec.whatwg.org/#request-error-steps and https://fetch.spec.whatwg.org/#concept-network-error\n        completeRequest(callback, -1, null, null, '');                                                                 // 10695\n      };                                                                                                               // 10696\n                                                                                                                       // 10697\n      xhr.onerror = requestError;                                                                                      // 10698\n      xhr.onabort = requestError;                                                                                      // 10699\n                                                                                                                       // 10700\n      if (withCredentials) {                                                                                           // 10701\n        xhr.withCredentials = true;                                                                                    // 10702\n      }                                                                                                                // 10703\n                                                                                                                       // 10704\n      if (responseType) {                                                                                              // 10705\n        try {                                                                                                          // 10706\n          xhr.responseType = responseType;                                                                             // 10707\n        } catch (e) {                                                                                                  // 10708\n          // WebKit added support for the json responseType value on 09/03/2013                                        // 10709\n          // https://bugs.webkit.org/show_bug.cgi?id=73648. Versions of Safari prior to 7 are                          // 10710\n          // known to throw when setting the value \"json\" as the response type. Other older                            // 10711\n          // browsers implementing the responseType                                                                    // 10712\n          //                                                                                                           // 10713\n          // The json response type can be ignored if not supported, because JSON payloads are                         // 10714\n          // parsed on the client-side regardless.                                                                     // 10715\n          if (responseType !== 'json') {                                                                               // 10716\n            throw e;                                                                                                   // 10717\n          }                                                                                                            // 10718\n        }                                                                                                              // 10719\n      }                                                                                                                // 10720\n                                                                                                                       // 10721\n      xhr.send(isUndefined(post) ? null : post);                                                                       // 10722\n    }                                                                                                                  // 10723\n                                                                                                                       // 10724\n    if (timeout > 0) {                                                                                                 // 10725\n      var timeoutId = $browserDefer(timeoutRequest, timeout);                                                          // 10726\n    } else if (isPromiseLike(timeout)) {                                                                               // 10727\n      timeout.then(timeoutRequest);                                                                                    // 10728\n    }                                                                                                                  // 10729\n                                                                                                                       // 10730\n                                                                                                                       // 10731\n    function timeoutRequest() {                                                                                        // 10732\n      jsonpDone && jsonpDone();                                                                                        // 10733\n      xhr && xhr.abort();                                                                                              // 10734\n    }                                                                                                                  // 10735\n                                                                                                                       // 10736\n    function completeRequest(callback, status, response, headersString, statusText) {                                  // 10737\n      // cancel timeout and subsequent timeout promise resolution                                                      // 10738\n      if (isDefined(timeoutId)) {                                                                                      // 10739\n        $browserDefer.cancel(timeoutId);                                                                               // 10740\n      }                                                                                                                // 10741\n      jsonpDone = xhr = null;                                                                                          // 10742\n                                                                                                                       // 10743\n      callback(status, response, headersString, statusText);                                                           // 10744\n      $browser.$$completeOutstandingRequest(noop);                                                                     // 10745\n    }                                                                                                                  // 10746\n  };                                                                                                                   // 10747\n                                                                                                                       // 10748\n  function jsonpReq(url, callbackId, done) {                                                                           // 10749\n    // we can't use jQuery/jqLite here because jQuery does crazy stuff with script elements, e.g.:                     // 10750\n    // - fetches local scripts via XHR and evals them                                                                  // 10751\n    // - adds and immediately removes script elements from the document                                                // 10752\n    var script = rawDocument.createElement('script'), callback = null;                                                 // 10753\n    script.type = \"text/javascript\";                                                                                   // 10754\n    script.src = url;                                                                                                  // 10755\n    script.async = true;                                                                                               // 10756\n                                                                                                                       // 10757\n    callback = function(event) {                                                                                       // 10758\n      removeEventListenerFn(script, \"load\", callback);                                                                 // 10759\n      removeEventListenerFn(script, \"error\", callback);                                                                // 10760\n      rawDocument.body.removeChild(script);                                                                            // 10761\n      script = null;                                                                                                   // 10762\n      var status = -1;                                                                                                 // 10763\n      var text = \"unknown\";                                                                                            // 10764\n                                                                                                                       // 10765\n      if (event) {                                                                                                     // 10766\n        if (event.type === \"load\" && !callbacks[callbackId].called) {                                                  // 10767\n          event = { type: \"error\" };                                                                                   // 10768\n        }                                                                                                              // 10769\n        text = event.type;                                                                                             // 10770\n        status = event.type === \"error\" ? 404 : 200;                                                                   // 10771\n      }                                                                                                                // 10772\n                                                                                                                       // 10773\n      if (done) {                                                                                                      // 10774\n        done(status, text);                                                                                            // 10775\n      }                                                                                                                // 10776\n    };                                                                                                                 // 10777\n                                                                                                                       // 10778\n    addEventListenerFn(script, \"load\", callback);                                                                      // 10779\n    addEventListenerFn(script, \"error\", callback);                                                                     // 10780\n    rawDocument.body.appendChild(script);                                                                              // 10781\n    return callback;                                                                                                   // 10782\n  }                                                                                                                    // 10783\n}                                                                                                                      // 10784\n                                                                                                                       // 10785\nvar $interpolateMinErr = angular.$interpolateMinErr = minErr('$interpolate');                                          // 10786\n$interpolateMinErr.throwNoconcat = function(text) {                                                                    // 10787\n  throw $interpolateMinErr('noconcat',                                                                                 // 10788\n      \"Error while interpolating: {0}\\nStrict Contextual Escaping disallows \" +                                        // 10789\n      \"interpolations that concatenate multiple expressions when a trusted value is \" +                                // 10790\n      \"required.  See http://docs.angularjs.org/api/ng.$sce\", text);                                                   // 10791\n};                                                                                                                     // 10792\n                                                                                                                       // 10793\n$interpolateMinErr.interr = function(text, err) {                                                                      // 10794\n  return $interpolateMinErr('interr', \"Can't interpolate: {0}\\n{1}\", text, err.toString());                            // 10795\n};                                                                                                                     // 10796\n                                                                                                                       // 10797\n/**                                                                                                                    // 10798\n * @ngdoc provider                                                                                                     // 10799\n * @name $interpolateProvider                                                                                          // 10800\n *                                                                                                                     // 10801\n * @description                                                                                                        // 10802\n *                                                                                                                     // 10803\n * Used for configuring the interpolation markup. Defaults to `{{` and `}}`.                                           // 10804\n *                                                                                                                     // 10805\n * @example                                                                                                            // 10806\n<example module=\"customInterpolationApp\">                                                                              // 10807\n<file name=\"index.html\">                                                                                               // 10808\n<script>                                                                                                               // 10809\n  var customInterpolationApp = angular.module('customInterpolationApp', []);                                           // 10810\n                                                                                                                       // 10811\n  customInterpolationApp.config(function($interpolateProvider) {                                                       // 10812\n    $interpolateProvider.startSymbol('//');                                                                            // 10813\n    $interpolateProvider.endSymbol('//');                                                                              // 10814\n  });                                                                                                                  // 10815\n                                                                                                                       // 10816\n                                                                                                                       // 10817\n  customInterpolationApp.controller('DemoController', function() {                                                     // 10818\n      this.label = \"This binding is brought you by // interpolation symbols.\";                                         // 10819\n  });                                                                                                                  // 10820\n</script>                                                                                                              // 10821\n<div ng-app=\"App\" ng-controller=\"DemoController as demo\">                                                              // 10822\n    //demo.label//                                                                                                     // 10823\n</div>                                                                                                                 // 10824\n</file>                                                                                                                // 10825\n<file name=\"protractor.js\" type=\"protractor\">                                                                          // 10826\n  it('should interpolate binding with custom symbols', function() {                                                    // 10827\n    expect(element(by.binding('demo.label')).getText()).toBe('This binding is brought you by // interpolation symbols.');\n  });                                                                                                                  // 10829\n</file>                                                                                                                // 10830\n</example>                                                                                                             // 10831\n */                                                                                                                    // 10832\nfunction $InterpolateProvider() {                                                                                      // 10833\n  var startSymbol = '{{';                                                                                              // 10834\n  var endSymbol = '}}';                                                                                                // 10835\n                                                                                                                       // 10836\n  /**                                                                                                                  // 10837\n   * @ngdoc method                                                                                                     // 10838\n   * @name $interpolateProvider#startSymbol                                                                            // 10839\n   * @description                                                                                                      // 10840\n   * Symbol to denote start of expression in the interpolated string. Defaults to `{{`.                                // 10841\n   *                                                                                                                   // 10842\n   * @param {string=} value new value to set the starting symbol to.                                                   // 10843\n   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.                         // 10844\n   */                                                                                                                  // 10845\n  this.startSymbol = function(value) {                                                                                 // 10846\n    if (value) {                                                                                                       // 10847\n      startSymbol = value;                                                                                             // 10848\n      return this;                                                                                                     // 10849\n    } else {                                                                                                           // 10850\n      return startSymbol;                                                                                              // 10851\n    }                                                                                                                  // 10852\n  };                                                                                                                   // 10853\n                                                                                                                       // 10854\n  /**                                                                                                                  // 10855\n   * @ngdoc method                                                                                                     // 10856\n   * @name $interpolateProvider#endSymbol                                                                              // 10857\n   * @description                                                                                                      // 10858\n   * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.                              // 10859\n   *                                                                                                                   // 10860\n   * @param {string=} value new value to set the ending symbol to.                                                     // 10861\n   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.                         // 10862\n   */                                                                                                                  // 10863\n  this.endSymbol = function(value) {                                                                                   // 10864\n    if (value) {                                                                                                       // 10865\n      endSymbol = value;                                                                                               // 10866\n      return this;                                                                                                     // 10867\n    } else {                                                                                                           // 10868\n      return endSymbol;                                                                                                // 10869\n    }                                                                                                                  // 10870\n  };                                                                                                                   // 10871\n                                                                                                                       // 10872\n                                                                                                                       // 10873\n  this.$get = ['$parse', '$exceptionHandler', '$sce', function($parse, $exceptionHandler, $sce) {                      // 10874\n    var startSymbolLength = startSymbol.length,                                                                        // 10875\n        endSymbolLength = endSymbol.length,                                                                            // 10876\n        escapedStartRegexp = new RegExp(startSymbol.replace(/./g, escape), 'g'),                                       // 10877\n        escapedEndRegexp = new RegExp(endSymbol.replace(/./g, escape), 'g');                                           // 10878\n                                                                                                                       // 10879\n    function escape(ch) {                                                                                              // 10880\n      return '\\\\\\\\\\\\' + ch;                                                                                            // 10881\n    }                                                                                                                  // 10882\n                                                                                                                       // 10883\n    function unescapeText(text) {                                                                                      // 10884\n      return text.replace(escapedStartRegexp, startSymbol).                                                            // 10885\n        replace(escapedEndRegexp, endSymbol);                                                                          // 10886\n    }                                                                                                                  // 10887\n                                                                                                                       // 10888\n    function stringify(value) {                                                                                        // 10889\n      if (value == null) { // null || undefined                                                                        // 10890\n        return '';                                                                                                     // 10891\n      }                                                                                                                // 10892\n      switch (typeof value) {                                                                                          // 10893\n        case 'string':                                                                                                 // 10894\n          break;                                                                                                       // 10895\n        case 'number':                                                                                                 // 10896\n          value = '' + value;                                                                                          // 10897\n          break;                                                                                                       // 10898\n        default:                                                                                                       // 10899\n          value = toJson(value);                                                                                       // 10900\n      }                                                                                                                // 10901\n                                                                                                                       // 10902\n      return value;                                                                                                    // 10903\n    }                                                                                                                  // 10904\n                                                                                                                       // 10905\n    /**                                                                                                                // 10906\n     * @ngdoc service                                                                                                  // 10907\n     * @name $interpolate                                                                                              // 10908\n     * @kind function                                                                                                  // 10909\n     *                                                                                                                 // 10910\n     * @requires $parse                                                                                                // 10911\n     * @requires $sce                                                                                                  // 10912\n     *                                                                                                                 // 10913\n     * @description                                                                                                    // 10914\n     *                                                                                                                 // 10915\n     * Compiles a string with markup into an interpolation function. This service is used by the                       // 10916\n     * HTML {@link ng.$compile $compile} service for data binding. See                                                 // 10917\n     * {@link ng.$interpolateProvider $interpolateProvider} for configuring the                                        // 10918\n     * interpolation markup.                                                                                           // 10919\n     *                                                                                                                 // 10920\n     *                                                                                                                 // 10921\n     * ```js                                                                                                           // 10922\n     *   var $interpolate = ...; // injected                                                                           // 10923\n     *   var exp = $interpolate('Hello {{name | uppercase}}!');                                                        // 10924\n     *   expect(exp({name:'Angular'})).toEqual('Hello ANGULAR!');                                                      // 10925\n     * ```                                                                                                             // 10926\n     *                                                                                                                 // 10927\n     * `$interpolate` takes an optional fourth argument, `allOrNothing`. If `allOrNothing` is                          // 10928\n     * `true`, the interpolation function will return `undefined` unless all embedded expressions                      // 10929\n     * evaluate to a value other than `undefined`.                                                                     // 10930\n     *                                                                                                                 // 10931\n     * ```js                                                                                                           // 10932\n     *   var $interpolate = ...; // injected                                                                           // 10933\n     *   var context = {greeting: 'Hello', name: undefined };                                                          // 10934\n     *                                                                                                                 // 10935\n     *   // default \"forgiving\" mode                                                                                   // 10936\n     *   var exp = $interpolate('{{greeting}} {{name}}!');                                                             // 10937\n     *   expect(exp(context)).toEqual('Hello !');                                                                      // 10938\n     *                                                                                                                 // 10939\n     *   // \"allOrNothing\" mode                                                                                        // 10940\n     *   exp = $interpolate('{{greeting}} {{name}}!', false, null, true);                                              // 10941\n     *   expect(exp(context)).toBeUndefined();                                                                         // 10942\n     *   context.name = 'Angular';                                                                                     // 10943\n     *   expect(exp(context)).toEqual('Hello Angular!');                                                               // 10944\n     * ```                                                                                                             // 10945\n     *                                                                                                                 // 10946\n     * `allOrNothing` is useful for interpolating URLs. `ngSrc` and `ngSrcset` use this behavior.                      // 10947\n     *                                                                                                                 // 10948\n     * ####Escaped Interpolation                                                                                       // 10949\n     * $interpolate provides a mechanism for escaping interpolation markers. Start and end markers                     // 10950\n     * can be escaped by preceding each of their characters with a REVERSE SOLIDUS U+005C (backslash).                 // 10951\n     * It will be rendered as a regular start/end marker, and will not be interpreted as an expression                 // 10952\n     * or binding.                                                                                                     // 10953\n     *                                                                                                                 // 10954\n     * This enables web-servers to prevent script injection attacks and defacing attacks, to some                      // 10955\n     * degree, while also enabling code examples to work without relying on the                                        // 10956\n     * {@link ng.directive:ngNonBindable ngNonBindable} directive.                                                     // 10957\n     *                                                                                                                 // 10958\n     * **For security purposes, it is strongly encouraged that web servers escape user-supplied data,                  // 10959\n     * replacing angle brackets (&lt;, &gt;) with &amp;lt; and &amp;gt; respectively, and replacing all                // 10960\n     * interpolation start/end markers with their escaped counterparts.**                                              // 10961\n     *                                                                                                                 // 10962\n     * Escaped interpolation markers are only replaced with the actual interpolation markers in rendered               // 10963\n     * output when the $interpolate service processes the text. So, for HTML elements interpolated                     // 10964\n     * by {@link ng.$compile $compile}, or otherwise interpolated with the `mustHaveExpression` parameter              // 10965\n     * set to `true`, the interpolated text must contain an unescaped interpolation expression. As such,               // 10966\n     * this is typically useful only when user-data is used in rendering a template from the server, or                // 10967\n     * when otherwise untrusted data is used by a directive.                                                           // 10968\n     *                                                                                                                 // 10969\n     * <example>                                                                                                       // 10970\n     *  <file name=\"index.html\">                                                                                       // 10971\n     *    <div ng-init=\"username='A user'\">                                                                            // 10972\n     *      <p ng-init=\"apptitle='Escaping demo'\">{{apptitle}}: \\{\\{ username = \"defaced value\"; \\}\\}                  // 10973\n     *        </p>                                                                                                     // 10974\n     *      <p><strong>{{username}}</strong> attempts to inject code which will deface the                             // 10975\n     *        application, but fails to accomplish their task, because the server has correctly                        // 10976\n     *        escaped the interpolation start/end markers with REVERSE SOLIDUS U+005C (backslash)                      // 10977\n     *        characters.</p>                                                                                          // 10978\n     *      <p>Instead, the result of the attempted script injection is visible, and can be removed                    // 10979\n     *        from the database by an administrator.</p>                                                               // 10980\n     *    </div>                                                                                                       // 10981\n     *  </file>                                                                                                        // 10982\n     * </example>                                                                                                      // 10983\n     *                                                                                                                 // 10984\n     * @param {string} text The text with markup to interpolate.                                                       // 10985\n     * @param {boolean=} mustHaveExpression if set to true then the interpolation string must have                     // 10986\n     *    embedded expression in order to return an interpolation function. Strings with no                            // 10987\n     *    embedded expression will return null for the interpolation function.                                         // 10988\n     * @param {string=} trustedContext when provided, the returned function passes the interpolated                    // 10989\n     *    result through {@link ng.$sce#getTrusted $sce.getTrusted(interpolatedResult,                                 // 10990\n     *    trustedContext)} before returning it.  Refer to the {@link ng.$sce $sce} service that                        // 10991\n     *    provides Strict Contextual Escaping for details.                                                             // 10992\n     * @param {boolean=} allOrNothing if `true`, then the returned function returns undefined                          // 10993\n     *    unless all embedded expressions evaluate to a value other than `undefined`.                                  // 10994\n     * @returns {function(context)} an interpolation function which is used to compute the                             // 10995\n     *    interpolated string. The function has these parameters:                                                      // 10996\n     *                                                                                                                 // 10997\n     * - `context`: evaluation context for all expressions embedded in the interpolated text                           // 10998\n     */                                                                                                                // 10999\n    function $interpolate(text, mustHaveExpression, trustedContext, allOrNothing) {                                    // 11000\n      allOrNothing = !!allOrNothing;                                                                                   // 11001\n      var startIndex,                                                                                                  // 11002\n          endIndex,                                                                                                    // 11003\n          index = 0,                                                                                                   // 11004\n          expressions = [],                                                                                            // 11005\n          parseFns = [],                                                                                               // 11006\n          textLength = text.length,                                                                                    // 11007\n          exp,                                                                                                         // 11008\n          concat = [],                                                                                                 // 11009\n          expressionPositions = [];                                                                                    // 11010\n                                                                                                                       // 11011\n      while (index < textLength) {                                                                                     // 11012\n        if (((startIndex = text.indexOf(startSymbol, index)) != -1) &&                                                 // 11013\n             ((endIndex = text.indexOf(endSymbol, startIndex + startSymbolLength)) != -1)) {                           // 11014\n          if (index !== startIndex) {                                                                                  // 11015\n            concat.push(unescapeText(text.substring(index, startIndex)));                                              // 11016\n          }                                                                                                            // 11017\n          exp = text.substring(startIndex + startSymbolLength, endIndex);                                              // 11018\n          expressions.push(exp);                                                                                       // 11019\n          parseFns.push($parse(exp, parseStringifyInterceptor));                                                       // 11020\n          index = endIndex + endSymbolLength;                                                                          // 11021\n          expressionPositions.push(concat.length);                                                                     // 11022\n          concat.push('');                                                                                             // 11023\n        } else {                                                                                                       // 11024\n          // we did not find an interpolation, so we have to add the remainder to the separators array                 // 11025\n          if (index !== textLength) {                                                                                  // 11026\n            concat.push(unescapeText(text.substring(index)));                                                          // 11027\n          }                                                                                                            // 11028\n          break;                                                                                                       // 11029\n        }                                                                                                              // 11030\n      }                                                                                                                // 11031\n                                                                                                                       // 11032\n      // Concatenating expressions makes it hard to reason about whether some combination of                           // 11033\n      // concatenated values are unsafe to use and could easily lead to XSS.  By requiring that a                      // 11034\n      // single expression be used for iframe[src], object[src], etc., we ensure that the value                        // 11035\n      // that's used is assigned or constructed by some JS code somewhere that is more testable or                     // 11036\n      // make it obvious that you bound the value to some user controlled value.  This helps reduce                    // 11037\n      // the load when auditing for XSS issues.                                                                        // 11038\n      if (trustedContext && concat.length > 1) {                                                                       // 11039\n          $interpolateMinErr.throwNoconcat(text);                                                                      // 11040\n      }                                                                                                                // 11041\n                                                                                                                       // 11042\n      if (!mustHaveExpression || expressions.length) {                                                                 // 11043\n        var compute = function(values) {                                                                               // 11044\n          for (var i = 0, ii = expressions.length; i < ii; i++) {                                                      // 11045\n            if (allOrNothing && isUndefined(values[i])) return;                                                        // 11046\n            concat[expressionPositions[i]] = values[i];                                                                // 11047\n          }                                                                                                            // 11048\n          return concat.join('');                                                                                      // 11049\n        };                                                                                                             // 11050\n                                                                                                                       // 11051\n        var getValue = function(value) {                                                                               // 11052\n          return trustedContext ?                                                                                      // 11053\n            $sce.getTrusted(trustedContext, value) :                                                                   // 11054\n            $sce.valueOf(value);                                                                                       // 11055\n        };                                                                                                             // 11056\n                                                                                                                       // 11057\n        return extend(function interpolationFn(context) {                                                              // 11058\n            var i = 0;                                                                                                 // 11059\n            var ii = expressions.length;                                                                               // 11060\n            var values = new Array(ii);                                                                                // 11061\n                                                                                                                       // 11062\n            try {                                                                                                      // 11063\n              for (; i < ii; i++) {                                                                                    // 11064\n                values[i] = parseFns[i](context);                                                                      // 11065\n              }                                                                                                        // 11066\n                                                                                                                       // 11067\n              return compute(values);                                                                                  // 11068\n            } catch (err) {                                                                                            // 11069\n              $exceptionHandler($interpolateMinErr.interr(text, err));                                                 // 11070\n            }                                                                                                          // 11071\n                                                                                                                       // 11072\n          }, {                                                                                                         // 11073\n          // all of these properties are undocumented for now                                                          // 11074\n          exp: text, //just for compatibility with regular watchers created via $watch                                 // 11075\n          expressions: expressions,                                                                                    // 11076\n          $$watchDelegate: function(scope, listener) {                                                                 // 11077\n            var lastValue;                                                                                             // 11078\n            return scope.$watchGroup(parseFns, function interpolateFnWatcher(values, oldValues) {                      // 11079\n              var currValue = compute(values);                                                                         // 11080\n              if (isFunction(listener)) {                                                                              // 11081\n                listener.call(this, currValue, values !== oldValues ? lastValue : currValue, scope);                   // 11082\n              }                                                                                                        // 11083\n              lastValue = currValue;                                                                                   // 11084\n            });                                                                                                        // 11085\n          }                                                                                                            // 11086\n        });                                                                                                            // 11087\n      }                                                                                                                // 11088\n                                                                                                                       // 11089\n      function parseStringifyInterceptor(value) {                                                                      // 11090\n        try {                                                                                                          // 11091\n          value = getValue(value);                                                                                     // 11092\n          return allOrNothing && !isDefined(value) ? value : stringify(value);                                         // 11093\n        } catch (err) {                                                                                                // 11094\n          $exceptionHandler($interpolateMinErr.interr(text, err));                                                     // 11095\n        }                                                                                                              // 11096\n      }                                                                                                                // 11097\n    }                                                                                                                  // 11098\n                                                                                                                       // 11099\n                                                                                                                       // 11100\n    /**                                                                                                                // 11101\n     * @ngdoc method                                                                                                   // 11102\n     * @name $interpolate#startSymbol                                                                                  // 11103\n     * @description                                                                                                    // 11104\n     * Symbol to denote the start of expression in the interpolated string. Defaults to `{{`.                          // 11105\n     *                                                                                                                 // 11106\n     * Use {@link ng.$interpolateProvider#startSymbol `$interpolateProvider.startSymbol`} to change                    // 11107\n     * the symbol.                                                                                                     // 11108\n     *                                                                                                                 // 11109\n     * @returns {string} start symbol.                                                                                 // 11110\n     */                                                                                                                // 11111\n    $interpolate.startSymbol = function() {                                                                            // 11112\n      return startSymbol;                                                                                              // 11113\n    };                                                                                                                 // 11114\n                                                                                                                       // 11115\n                                                                                                                       // 11116\n    /**                                                                                                                // 11117\n     * @ngdoc method                                                                                                   // 11118\n     * @name $interpolate#endSymbol                                                                                    // 11119\n     * @description                                                                                                    // 11120\n     * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.                            // 11121\n     *                                                                                                                 // 11122\n     * Use {@link ng.$interpolateProvider#endSymbol `$interpolateProvider.endSymbol`} to change                        // 11123\n     * the symbol.                                                                                                     // 11124\n     *                                                                                                                 // 11125\n     * @returns {string} end symbol.                                                                                   // 11126\n     */                                                                                                                // 11127\n    $interpolate.endSymbol = function() {                                                                              // 11128\n      return endSymbol;                                                                                                // 11129\n    };                                                                                                                 // 11130\n                                                                                                                       // 11131\n    return $interpolate;                                                                                               // 11132\n  }];                                                                                                                  // 11133\n}                                                                                                                      // 11134\n                                                                                                                       // 11135\nfunction $IntervalProvider() {                                                                                         // 11136\n  this.$get = ['$rootScope', '$window', '$q', '$$q',                                                                   // 11137\n       function($rootScope,   $window,   $q,   $$q) {                                                                  // 11138\n    var intervals = {};                                                                                                // 11139\n                                                                                                                       // 11140\n                                                                                                                       // 11141\n     /**                                                                                                               // 11142\n      * @ngdoc service                                                                                                 // 11143\n      * @name $interval                                                                                                // 11144\n      *                                                                                                                // 11145\n      * @description                                                                                                   // 11146\n      * Angular's wrapper for `window.setInterval`. The `fn` function is executed every `delay`                        // 11147\n      * milliseconds.                                                                                                  // 11148\n      *                                                                                                                // 11149\n      * The return value of registering an interval function is a promise. This promise will be                        // 11150\n      * notified upon each tick of the interval, and will be resolved after `count` iterations, or                     // 11151\n      * run indefinitely if `count` is not defined. The value of the notification will be the                          // 11152\n      * number of iterations that have run.                                                                            // 11153\n      * To cancel an interval, call `$interval.cancel(promise)`.                                                       // 11154\n      *                                                                                                                // 11155\n      * In tests you can use {@link ngMock.$interval#flush `$interval.flush(millis)`} to                               // 11156\n      * move forward by `millis` milliseconds and trigger any functions scheduled to run in that                       // 11157\n      * time.                                                                                                          // 11158\n      *                                                                                                                // 11159\n      * <div class=\"alert alert-warning\">                                                                              // 11160\n      * **Note**: Intervals created by this service must be explicitly destroyed when you are finished                 // 11161\n      * with them.  In particular they are not automatically destroyed when a controller's scope or a                  // 11162\n      * directive's element are destroyed.                                                                             // 11163\n      * You should take this into consideration and make sure to always cancel the interval at the                     // 11164\n      * appropriate moment.  See the example below for more details on how and when to do this.                        // 11165\n      * </div>                                                                                                         // 11166\n      *                                                                                                                // 11167\n      * @param {function()} fn A function that should be called repeatedly.                                            // 11168\n      * @param {number} delay Number of milliseconds between each function call.                                       // 11169\n      * @param {number=} [count=0] Number of times to repeat. If not set, or 0, will repeat                            // 11170\n      *   indefinitely.                                                                                                // 11171\n      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise                   // 11172\n      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.                                 // 11173\n      * @param {...*=} Pass additional parameters to the executed function.                                            // 11174\n      * @returns {promise} A promise which will be notified on each iteration.                                         // 11175\n      *                                                                                                                // 11176\n      * @example                                                                                                       // 11177\n      * <example module=\"intervalExample\">                                                                             // 11178\n      * <file name=\"index.html\">                                                                                       // 11179\n      *   <script>                                                                                                     // 11180\n      *     angular.module('intervalExample', [])                                                                      // 11181\n      *       .controller('ExampleController', ['$scope', '$interval',                                                 // 11182\n      *         function($scope, $interval) {                                                                          // 11183\n      *           $scope.format = 'M/d/yy h:mm:ss a';                                                                  // 11184\n      *           $scope.blood_1 = 100;                                                                                // 11185\n      *           $scope.blood_2 = 120;                                                                                // 11186\n      *                                                                                                                // 11187\n      *           var stop;                                                                                            // 11188\n      *           $scope.fight = function() {                                                                          // 11189\n      *             // Don't start a new fight if we are already fighting                                              // 11190\n      *             if ( angular.isDefined(stop) ) return;                                                             // 11191\n      *                                                                                                                // 11192\n      *             stop = $interval(function() {                                                                      // 11193\n      *               if ($scope.blood_1 > 0 && $scope.blood_2 > 0) {                                                  // 11194\n      *                 $scope.blood_1 = $scope.blood_1 - 3;                                                           // 11195\n      *                 $scope.blood_2 = $scope.blood_2 - 4;                                                           // 11196\n      *               } else {                                                                                         // 11197\n      *                 $scope.stopFight();                                                                            // 11198\n      *               }                                                                                                // 11199\n      *             }, 100);                                                                                           // 11200\n      *           };                                                                                                   // 11201\n      *                                                                                                                // 11202\n      *           $scope.stopFight = function() {                                                                      // 11203\n      *             if (angular.isDefined(stop)) {                                                                     // 11204\n      *               $interval.cancel(stop);                                                                          // 11205\n      *               stop = undefined;                                                                                // 11206\n      *             }                                                                                                  // 11207\n      *           };                                                                                                   // 11208\n      *                                                                                                                // 11209\n      *           $scope.resetFight = function() {                                                                     // 11210\n      *             $scope.blood_1 = 100;                                                                              // 11211\n      *             $scope.blood_2 = 120;                                                                              // 11212\n      *           };                                                                                                   // 11213\n      *                                                                                                                // 11214\n      *           $scope.$on('$destroy', function() {                                                                  // 11215\n      *             // Make sure that the interval is destroyed too                                                    // 11216\n      *             $scope.stopFight();                                                                                // 11217\n      *           });                                                                                                  // 11218\n      *         }])                                                                                                    // 11219\n      *       // Register the 'myCurrentTime' directive factory method.                                                // 11220\n      *       // We inject $interval and dateFilter service since the factory method is DI.                            // 11221\n      *       .directive('myCurrentTime', ['$interval', 'dateFilter',                                                  // 11222\n      *         function($interval, dateFilter) {                                                                      // 11223\n      *           // return the directive link function. (compile function not needed)                                 // 11224\n      *           return function(scope, element, attrs) {                                                             // 11225\n      *             var format,  // date format                                                                        // 11226\n      *                 stopTime; // so that we can cancel the time updates                                            // 11227\n      *                                                                                                                // 11228\n      *             // used to update the UI                                                                           // 11229\n      *             function updateTime() {                                                                            // 11230\n      *               element.text(dateFilter(new Date(), format));                                                    // 11231\n      *             }                                                                                                  // 11232\n      *                                                                                                                // 11233\n      *             // watch the expression, and update the UI on change.                                              // 11234\n      *             scope.$watch(attrs.myCurrentTime, function(value) {                                                // 11235\n      *               format = value;                                                                                  // 11236\n      *               updateTime();                                                                                    // 11237\n      *             });                                                                                                // 11238\n      *                                                                                                                // 11239\n      *             stopTime = $interval(updateTime, 1000);                                                            // 11240\n      *                                                                                                                // 11241\n      *             // listen on DOM destroy (removal) event, and cancel the next UI update                            // 11242\n      *             // to prevent updating time after the DOM element was removed.                                     // 11243\n      *             element.on('$destroy', function() {                                                                // 11244\n      *               $interval.cancel(stopTime);                                                                      // 11245\n      *             });                                                                                                // 11246\n      *           }                                                                                                    // 11247\n      *         }]);                                                                                                   // 11248\n      *   </script>                                                                                                    // 11249\n      *                                                                                                                // 11250\n      *   <div>                                                                                                        // 11251\n      *     <div ng-controller=\"ExampleController\">                                                                    // 11252\n      *       <label>Date format: <input ng-model=\"format\"></label> <hr/>                                              // 11253\n      *       Current time is: <span my-current-time=\"format\"></span>                                                  // 11254\n      *       <hr/>                                                                                                    // 11255\n      *       Blood 1 : <font color='red'>{{blood_1}}</font>                                                           // 11256\n      *       Blood 2 : <font color='red'>{{blood_2}}</font>                                                           // 11257\n      *       <button type=\"button\" data-ng-click=\"fight()\">Fight</button>                                             // 11258\n      *       <button type=\"button\" data-ng-click=\"stopFight()\">StopFight</button>                                     // 11259\n      *       <button type=\"button\" data-ng-click=\"resetFight()\">resetFight</button>                                   // 11260\n      *     </div>                                                                                                     // 11261\n      *   </div>                                                                                                       // 11262\n      *                                                                                                                // 11263\n      * </file>                                                                                                        // 11264\n      * </example>                                                                                                     // 11265\n      */                                                                                                               // 11266\n    function interval(fn, delay, count, invokeApply) {                                                                 // 11267\n      var hasParams = arguments.length > 4,                                                                            // 11268\n          args = hasParams ? sliceArgs(arguments, 4) : [],                                                             // 11269\n          setInterval = $window.setInterval,                                                                           // 11270\n          clearInterval = $window.clearInterval,                                                                       // 11271\n          iteration = 0,                                                                                               // 11272\n          skipApply = (isDefined(invokeApply) && !invokeApply),                                                        // 11273\n          deferred = (skipApply ? $$q : $q).defer(),                                                                   // 11274\n          promise = deferred.promise;                                                                                  // 11275\n                                                                                                                       // 11276\n      count = isDefined(count) ? count : 0;                                                                            // 11277\n                                                                                                                       // 11278\n      promise.then(null, null, (!hasParams) ? fn : function() {                                                        // 11279\n        fn.apply(null, args);                                                                                          // 11280\n      });                                                                                                              // 11281\n                                                                                                                       // 11282\n      promise.$$intervalId = setInterval(function tick() {                                                             // 11283\n        deferred.notify(iteration++);                                                                                  // 11284\n                                                                                                                       // 11285\n        if (count > 0 && iteration >= count) {                                                                         // 11286\n          deferred.resolve(iteration);                                                                                 // 11287\n          clearInterval(promise.$$intervalId);                                                                         // 11288\n          delete intervals[promise.$$intervalId];                                                                      // 11289\n        }                                                                                                              // 11290\n                                                                                                                       // 11291\n        if (!skipApply) $rootScope.$apply();                                                                           // 11292\n                                                                                                                       // 11293\n      }, delay);                                                                                                       // 11294\n                                                                                                                       // 11295\n      intervals[promise.$$intervalId] = deferred;                                                                      // 11296\n                                                                                                                       // 11297\n      return promise;                                                                                                  // 11298\n    }                                                                                                                  // 11299\n                                                                                                                       // 11300\n                                                                                                                       // 11301\n     /**                                                                                                               // 11302\n      * @ngdoc method                                                                                                  // 11303\n      * @name $interval#cancel                                                                                         // 11304\n      *                                                                                                                // 11305\n      * @description                                                                                                   // 11306\n      * Cancels a task associated with the `promise`.                                                                  // 11307\n      *                                                                                                                // 11308\n      * @param {Promise=} promise returned by the `$interval` function.                                                // 11309\n      * @returns {boolean} Returns `true` if the task was successfully canceled.                                       // 11310\n      */                                                                                                               // 11311\n    interval.cancel = function(promise) {                                                                              // 11312\n      if (promise && promise.$$intervalId in intervals) {                                                              // 11313\n        intervals[promise.$$intervalId].reject('canceled');                                                            // 11314\n        $window.clearInterval(promise.$$intervalId);                                                                   // 11315\n        delete intervals[promise.$$intervalId];                                                                        // 11316\n        return true;                                                                                                   // 11317\n      }                                                                                                                // 11318\n      return false;                                                                                                    // 11319\n    };                                                                                                                 // 11320\n                                                                                                                       // 11321\n    return interval;                                                                                                   // 11322\n  }];                                                                                                                  // 11323\n}                                                                                                                      // 11324\n                                                                                                                       // 11325\n/**                                                                                                                    // 11326\n * @ngdoc service                                                                                                      // 11327\n * @name $locale                                                                                                       // 11328\n *                                                                                                                     // 11329\n * @description                                                                                                        // 11330\n * $locale service provides localization rules for various Angular components. As of right now the                     // 11331\n * only public api is:                                                                                                 // 11332\n *                                                                                                                     // 11333\n * * `id` – `{string}` – locale id formatted as `languageId-countryId` (e.g. `en-us`)                                  // 11334\n */                                                                                                                    // 11335\n                                                                                                                       // 11336\nvar PATH_MATCH = /^([^\\?#]*)(\\?([^#]*))?(#(.*))?$/,                                                                    // 11337\n    DEFAULT_PORTS = {'http': 80, 'https': 443, 'ftp': 21};                                                             // 11338\nvar $locationMinErr = minErr('$location');                                                                             // 11339\n                                                                                                                       // 11340\n                                                                                                                       // 11341\n/**                                                                                                                    // 11342\n * Encode path using encodeUriSegment, ignoring forward slashes                                                        // 11343\n *                                                                                                                     // 11344\n * @param {string} path Path to encode                                                                                 // 11345\n * @returns {string}                                                                                                   // 11346\n */                                                                                                                    // 11347\nfunction encodePath(path) {                                                                                            // 11348\n  var segments = path.split('/'),                                                                                      // 11349\n      i = segments.length;                                                                                             // 11350\n                                                                                                                       // 11351\n  while (i--) {                                                                                                        // 11352\n    segments[i] = encodeUriSegment(segments[i]);                                                                       // 11353\n  }                                                                                                                    // 11354\n                                                                                                                       // 11355\n  return segments.join('/');                                                                                           // 11356\n}                                                                                                                      // 11357\n                                                                                                                       // 11358\nfunction parseAbsoluteUrl(absoluteUrl, locationObj) {                                                                  // 11359\n  var parsedUrl = urlResolve(absoluteUrl);                                                                             // 11360\n                                                                                                                       // 11361\n  locationObj.$$protocol = parsedUrl.protocol;                                                                         // 11362\n  locationObj.$$host = parsedUrl.hostname;                                                                             // 11363\n  locationObj.$$port = toInt(parsedUrl.port) || DEFAULT_PORTS[parsedUrl.protocol] || null;                             // 11364\n}                                                                                                                      // 11365\n                                                                                                                       // 11366\n                                                                                                                       // 11367\nfunction parseAppUrl(relativeUrl, locationObj) {                                                                       // 11368\n  var prefixed = (relativeUrl.charAt(0) !== '/');                                                                      // 11369\n  if (prefixed) {                                                                                                      // 11370\n    relativeUrl = '/' + relativeUrl;                                                                                   // 11371\n  }                                                                                                                    // 11372\n  var match = urlResolve(relativeUrl);                                                                                 // 11373\n  locationObj.$$path = decodeURIComponent(prefixed && match.pathname.charAt(0) === '/' ?                               // 11374\n      match.pathname.substring(1) : match.pathname);                                                                   // 11375\n  locationObj.$$search = parseKeyValue(match.search);                                                                  // 11376\n  locationObj.$$hash = decodeURIComponent(match.hash);                                                                 // 11377\n                                                                                                                       // 11378\n  // make sure path starts with '/';                                                                                   // 11379\n  if (locationObj.$$path && locationObj.$$path.charAt(0) != '/') {                                                     // 11380\n    locationObj.$$path = '/' + locationObj.$$path;                                                                     // 11381\n  }                                                                                                                    // 11382\n}                                                                                                                      // 11383\n                                                                                                                       // 11384\n                                                                                                                       // 11385\n/**                                                                                                                    // 11386\n *                                                                                                                     // 11387\n * @param {string} begin                                                                                               // 11388\n * @param {string} whole                                                                                               // 11389\n * @returns {string} returns text from whole after begin or undefined if it does not begin with                        // 11390\n *                   expected string.                                                                                  // 11391\n */                                                                                                                    // 11392\nfunction beginsWith(begin, whole) {                                                                                    // 11393\n  if (whole.indexOf(begin) === 0) {                                                                                    // 11394\n    return whole.substr(begin.length);                                                                                 // 11395\n  }                                                                                                                    // 11396\n}                                                                                                                      // 11397\n                                                                                                                       // 11398\n                                                                                                                       // 11399\nfunction stripHash(url) {                                                                                              // 11400\n  var index = url.indexOf('#');                                                                                        // 11401\n  return index == -1 ? url : url.substr(0, index);                                                                     // 11402\n}                                                                                                                      // 11403\n                                                                                                                       // 11404\nfunction trimEmptyHash(url) {                                                                                          // 11405\n  return url.replace(/(#.+)|#$/, '$1');                                                                                // 11406\n}                                                                                                                      // 11407\n                                                                                                                       // 11408\n                                                                                                                       // 11409\nfunction stripFile(url) {                                                                                              // 11410\n  return url.substr(0, stripHash(url).lastIndexOf('/') + 1);                                                           // 11411\n}                                                                                                                      // 11412\n                                                                                                                       // 11413\n/* return the server only (scheme://host:port) */                                                                      // 11414\nfunction serverBase(url) {                                                                                             // 11415\n  return url.substring(0, url.indexOf('/', url.indexOf('//') + 2));                                                    // 11416\n}                                                                                                                      // 11417\n                                                                                                                       // 11418\n                                                                                                                       // 11419\n/**                                                                                                                    // 11420\n * LocationHtml5Url represents an url                                                                                  // 11421\n * This object is exposed as $location service when HTML5 mode is enabled and supported                                // 11422\n *                                                                                                                     // 11423\n * @constructor                                                                                                        // 11424\n * @param {string} appBase application base URL                                                                        // 11425\n * @param {string} appBaseNoFile application base URL stripped of any filename                                         // 11426\n * @param {string} basePrefix url path prefix                                                                          // 11427\n */                                                                                                                    // 11428\nfunction LocationHtml5Url(appBase, appBaseNoFile, basePrefix) {                                                        // 11429\n  this.$$html5 = true;                                                                                                 // 11430\n  basePrefix = basePrefix || '';                                                                                       // 11431\n  parseAbsoluteUrl(appBase, this);                                                                                     // 11432\n                                                                                                                       // 11433\n                                                                                                                       // 11434\n  /**                                                                                                                  // 11435\n   * Parse given html5 (regular) url string into properties                                                            // 11436\n   * @param {string} url HTML5 url                                                                                     // 11437\n   * @private                                                                                                          // 11438\n   */                                                                                                                  // 11439\n  this.$$parse = function(url) {                                                                                       // 11440\n    var pathUrl = beginsWith(appBaseNoFile, url);                                                                      // 11441\n    if (!isString(pathUrl)) {                                                                                          // 11442\n      throw $locationMinErr('ipthprfx', 'Invalid url \"{0}\", missing path prefix \"{1}\".', url,                          // 11443\n          appBaseNoFile);                                                                                              // 11444\n    }                                                                                                                  // 11445\n                                                                                                                       // 11446\n    parseAppUrl(pathUrl, this);                                                                                        // 11447\n                                                                                                                       // 11448\n    if (!this.$$path) {                                                                                                // 11449\n      this.$$path = '/';                                                                                               // 11450\n    }                                                                                                                  // 11451\n                                                                                                                       // 11452\n    this.$$compose();                                                                                                  // 11453\n  };                                                                                                                   // 11454\n                                                                                                                       // 11455\n  /**                                                                                                                  // 11456\n   * Compose url and update `absUrl` property                                                                          // 11457\n   * @private                                                                                                          // 11458\n   */                                                                                                                  // 11459\n  this.$$compose = function() {                                                                                        // 11460\n    var search = toKeyValue(this.$$search),                                                                            // 11461\n        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';                                                 // 11462\n                                                                                                                       // 11463\n    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;                                        // 11464\n    this.$$absUrl = appBaseNoFile + this.$$url.substr(1); // first char is always '/'                                  // 11465\n  };                                                                                                                   // 11466\n                                                                                                                       // 11467\n  this.$$parseLinkUrl = function(url, relHref) {                                                                       // 11468\n    if (relHref && relHref[0] === '#') {                                                                               // 11469\n      // special case for links to hash fragments:                                                                     // 11470\n      // keep the old url and only replace the hash fragment                                                           // 11471\n      this.hash(relHref.slice(1));                                                                                     // 11472\n      return true;                                                                                                     // 11473\n    }                                                                                                                  // 11474\n    var appUrl, prevAppUrl;                                                                                            // 11475\n    var rewrittenUrl;                                                                                                  // 11476\n                                                                                                                       // 11477\n    if (isDefined(appUrl = beginsWith(appBase, url))) {                                                                // 11478\n      prevAppUrl = appUrl;                                                                                             // 11479\n      if (isDefined(appUrl = beginsWith(basePrefix, appUrl))) {                                                        // 11480\n        rewrittenUrl = appBaseNoFile + (beginsWith('/', appUrl) || appUrl);                                            // 11481\n      } else {                                                                                                         // 11482\n        rewrittenUrl = appBase + prevAppUrl;                                                                           // 11483\n      }                                                                                                                // 11484\n    } else if (isDefined(appUrl = beginsWith(appBaseNoFile, url))) {                                                   // 11485\n      rewrittenUrl = appBaseNoFile + appUrl;                                                                           // 11486\n    } else if (appBaseNoFile == url + '/') {                                                                           // 11487\n      rewrittenUrl = appBaseNoFile;                                                                                    // 11488\n    }                                                                                                                  // 11489\n    if (rewrittenUrl) {                                                                                                // 11490\n      this.$$parse(rewrittenUrl);                                                                                      // 11491\n    }                                                                                                                  // 11492\n    return !!rewrittenUrl;                                                                                             // 11493\n  };                                                                                                                   // 11494\n}                                                                                                                      // 11495\n                                                                                                                       // 11496\n                                                                                                                       // 11497\n/**                                                                                                                    // 11498\n * LocationHashbangUrl represents url                                                                                  // 11499\n * This object is exposed as $location service when developer doesn't opt into html5 mode.                             // 11500\n * It also serves as the base class for html5 mode fallback on legacy browsers.                                        // 11501\n *                                                                                                                     // 11502\n * @constructor                                                                                                        // 11503\n * @param {string} appBase application base URL                                                                        // 11504\n * @param {string} appBaseNoFile application base URL stripped of any filename                                         // 11505\n * @param {string} hashPrefix hashbang prefix                                                                          // 11506\n */                                                                                                                    // 11507\nfunction LocationHashbangUrl(appBase, appBaseNoFile, hashPrefix) {                                                     // 11508\n                                                                                                                       // 11509\n  parseAbsoluteUrl(appBase, this);                                                                                     // 11510\n                                                                                                                       // 11511\n                                                                                                                       // 11512\n  /**                                                                                                                  // 11513\n   * Parse given hashbang url into properties                                                                          // 11514\n   * @param {string} url Hashbang url                                                                                  // 11515\n   * @private                                                                                                          // 11516\n   */                                                                                                                  // 11517\n  this.$$parse = function(url) {                                                                                       // 11518\n    var withoutBaseUrl = beginsWith(appBase, url) || beginsWith(appBaseNoFile, url);                                   // 11519\n    var withoutHashUrl;                                                                                                // 11520\n                                                                                                                       // 11521\n    if (!isUndefined(withoutBaseUrl) && withoutBaseUrl.charAt(0) === '#') {                                            // 11522\n                                                                                                                       // 11523\n      // The rest of the url starts with a hash so we have                                                             // 11524\n      // got either a hashbang path or a plain hash fragment                                                           // 11525\n      withoutHashUrl = beginsWith(hashPrefix, withoutBaseUrl);                                                         // 11526\n      if (isUndefined(withoutHashUrl)) {                                                                               // 11527\n        // There was no hashbang prefix so we just have a hash fragment                                                // 11528\n        withoutHashUrl = withoutBaseUrl;                                                                               // 11529\n      }                                                                                                                // 11530\n                                                                                                                       // 11531\n    } else {                                                                                                           // 11532\n      // There was no hashbang path nor hash fragment:                                                                 // 11533\n      // If we are in HTML5 mode we use what is left as the path;                                                      // 11534\n      // Otherwise we ignore what is left                                                                              // 11535\n      if (this.$$html5) {                                                                                              // 11536\n        withoutHashUrl = withoutBaseUrl;                                                                               // 11537\n      } else {                                                                                                         // 11538\n        withoutHashUrl = '';                                                                                           // 11539\n        if (isUndefined(withoutBaseUrl)) {                                                                             // 11540\n          appBase = url;                                                                                               // 11541\n          this.replace();                                                                                              // 11542\n        }                                                                                                              // 11543\n      }                                                                                                                // 11544\n    }                                                                                                                  // 11545\n                                                                                                                       // 11546\n    parseAppUrl(withoutHashUrl, this);                                                                                 // 11547\n                                                                                                                       // 11548\n    this.$$path = removeWindowsDriveName(this.$$path, withoutHashUrl, appBase);                                        // 11549\n                                                                                                                       // 11550\n    this.$$compose();                                                                                                  // 11551\n                                                                                                                       // 11552\n    /*                                                                                                                 // 11553\n     * In Windows, on an anchor node on documents loaded from                                                          // 11554\n     * the filesystem, the browser will return a pathname                                                              // 11555\n     * prefixed with the drive name ('/C:/path') when a                                                                // 11556\n     * pathname without a drive is set:                                                                                // 11557\n     *  * a.setAttribute('href', '/foo')                                                                               // 11558\n     *   * a.pathname === '/C:/foo' //true                                                                             // 11559\n     *                                                                                                                 // 11560\n     * Inside of Angular, we're always using pathnames that                                                            // 11561\n     * do not include drive names for routing.                                                                         // 11562\n     */                                                                                                                // 11563\n    function removeWindowsDriveName(path, url, base) {                                                                 // 11564\n      /*                                                                                                               // 11565\n      Matches paths for file protocol on windows,                                                                      // 11566\n      such as /C:/foo/bar, and captures only /foo/bar.                                                                 // 11567\n      */                                                                                                               // 11568\n      var windowsFilePathExp = /^\\/[A-Z]:(\\/.*)/;                                                                      // 11569\n                                                                                                                       // 11570\n      var firstPathSegmentMatch;                                                                                       // 11571\n                                                                                                                       // 11572\n      //Get the relative path from the input URL.                                                                      // 11573\n      if (url.indexOf(base) === 0) {                                                                                   // 11574\n        url = url.replace(base, '');                                                                                   // 11575\n      }                                                                                                                // 11576\n                                                                                                                       // 11577\n      // The input URL intentionally contains a first path segment that ends with a colon.                             // 11578\n      if (windowsFilePathExp.exec(url)) {                                                                              // 11579\n        return path;                                                                                                   // 11580\n      }                                                                                                                // 11581\n                                                                                                                       // 11582\n      firstPathSegmentMatch = windowsFilePathExp.exec(path);                                                           // 11583\n      return firstPathSegmentMatch ? firstPathSegmentMatch[1] : path;                                                  // 11584\n    }                                                                                                                  // 11585\n  };                                                                                                                   // 11586\n                                                                                                                       // 11587\n  /**                                                                                                                  // 11588\n   * Compose hashbang url and update `absUrl` property                                                                 // 11589\n   * @private                                                                                                          // 11590\n   */                                                                                                                  // 11591\n  this.$$compose = function() {                                                                                        // 11592\n    var search = toKeyValue(this.$$search),                                                                            // 11593\n        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';                                                 // 11594\n                                                                                                                       // 11595\n    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;                                        // 11596\n    this.$$absUrl = appBase + (this.$$url ? hashPrefix + this.$$url : '');                                             // 11597\n  };                                                                                                                   // 11598\n                                                                                                                       // 11599\n  this.$$parseLinkUrl = function(url, relHref) {                                                                       // 11600\n    if (stripHash(appBase) == stripHash(url)) {                                                                        // 11601\n      this.$$parse(url);                                                                                               // 11602\n      return true;                                                                                                     // 11603\n    }                                                                                                                  // 11604\n    return false;                                                                                                      // 11605\n  };                                                                                                                   // 11606\n}                                                                                                                      // 11607\n                                                                                                                       // 11608\n                                                                                                                       // 11609\n/**                                                                                                                    // 11610\n * LocationHashbangUrl represents url                                                                                  // 11611\n * This object is exposed as $location service when html5 history api is enabled but the browser                       // 11612\n * does not support it.                                                                                                // 11613\n *                                                                                                                     // 11614\n * @constructor                                                                                                        // 11615\n * @param {string} appBase application base URL                                                                        // 11616\n * @param {string} appBaseNoFile application base URL stripped of any filename                                         // 11617\n * @param {string} hashPrefix hashbang prefix                                                                          // 11618\n */                                                                                                                    // 11619\nfunction LocationHashbangInHtml5Url(appBase, appBaseNoFile, hashPrefix) {                                              // 11620\n  this.$$html5 = true;                                                                                                 // 11621\n  LocationHashbangUrl.apply(this, arguments);                                                                          // 11622\n                                                                                                                       // 11623\n  this.$$parseLinkUrl = function(url, relHref) {                                                                       // 11624\n    if (relHref && relHref[0] === '#') {                                                                               // 11625\n      // special case for links to hash fragments:                                                                     // 11626\n      // keep the old url and only replace the hash fragment                                                           // 11627\n      this.hash(relHref.slice(1));                                                                                     // 11628\n      return true;                                                                                                     // 11629\n    }                                                                                                                  // 11630\n                                                                                                                       // 11631\n    var rewrittenUrl;                                                                                                  // 11632\n    var appUrl;                                                                                                        // 11633\n                                                                                                                       // 11634\n    if (appBase == stripHash(url)) {                                                                                   // 11635\n      rewrittenUrl = url;                                                                                              // 11636\n    } else if ((appUrl = beginsWith(appBaseNoFile, url))) {                                                            // 11637\n      rewrittenUrl = appBase + hashPrefix + appUrl;                                                                    // 11638\n    } else if (appBaseNoFile === url + '/') {                                                                          // 11639\n      rewrittenUrl = appBaseNoFile;                                                                                    // 11640\n    }                                                                                                                  // 11641\n    if (rewrittenUrl) {                                                                                                // 11642\n      this.$$parse(rewrittenUrl);                                                                                      // 11643\n    }                                                                                                                  // 11644\n    return !!rewrittenUrl;                                                                                             // 11645\n  };                                                                                                                   // 11646\n                                                                                                                       // 11647\n  this.$$compose = function() {                                                                                        // 11648\n    var search = toKeyValue(this.$$search),                                                                            // 11649\n        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';                                                 // 11650\n                                                                                                                       // 11651\n    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;                                        // 11652\n    // include hashPrefix in $$absUrl when $$url is empty so IE9 does not reload page because of removal of '#'        // 11653\n    this.$$absUrl = appBase + hashPrefix + this.$$url;                                                                 // 11654\n  };                                                                                                                   // 11655\n                                                                                                                       // 11656\n}                                                                                                                      // 11657\n                                                                                                                       // 11658\n                                                                                                                       // 11659\nvar locationPrototype = {                                                                                              // 11660\n                                                                                                                       // 11661\n  /**                                                                                                                  // 11662\n   * Are we in html5 mode?                                                                                             // 11663\n   * @private                                                                                                          // 11664\n   */                                                                                                                  // 11665\n  $$html5: false,                                                                                                      // 11666\n                                                                                                                       // 11667\n  /**                                                                                                                  // 11668\n   * Has any change been replacing?                                                                                    // 11669\n   * @private                                                                                                          // 11670\n   */                                                                                                                  // 11671\n  $$replace: false,                                                                                                    // 11672\n                                                                                                                       // 11673\n  /**                                                                                                                  // 11674\n   * @ngdoc method                                                                                                     // 11675\n   * @name $location#absUrl                                                                                            // 11676\n   *                                                                                                                   // 11677\n   * @description                                                                                                      // 11678\n   * This method is getter only.                                                                                       // 11679\n   *                                                                                                                   // 11680\n   * Return full url representation with all segments encoded according to rules specified in                          // 11681\n   * [RFC 3986](http://www.ietf.org/rfc/rfc3986.txt).                                                                  // 11682\n   *                                                                                                                   // 11683\n   *                                                                                                                   // 11684\n   * ```js                                                                                                             // 11685\n   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo                                                      // 11686\n   * var absUrl = $location.absUrl();                                                                                  // 11687\n   * // => \"http://example.com/#/some/path?foo=bar&baz=xoxo\"                                                           // 11688\n   * ```                                                                                                               // 11689\n   *                                                                                                                   // 11690\n   * @return {string} full url                                                                                         // 11691\n   */                                                                                                                  // 11692\n  absUrl: locationGetter('$$absUrl'),                                                                                  // 11693\n                                                                                                                       // 11694\n  /**                                                                                                                  // 11695\n   * @ngdoc method                                                                                                     // 11696\n   * @name $location#url                                                                                               // 11697\n   *                                                                                                                   // 11698\n   * @description                                                                                                      // 11699\n   * This method is getter / setter.                                                                                   // 11700\n   *                                                                                                                   // 11701\n   * Return url (e.g. `/path?a=b#hash`) when called without any parameter.                                             // 11702\n   *                                                                                                                   // 11703\n   * Change path, search and hash, when called with parameter and return `$location`.                                  // 11704\n   *                                                                                                                   // 11705\n   *                                                                                                                   // 11706\n   * ```js                                                                                                             // 11707\n   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo                                                      // 11708\n   * var url = $location.url();                                                                                        // 11709\n   * // => \"/some/path?foo=bar&baz=xoxo\"                                                                               // 11710\n   * ```                                                                                                               // 11711\n   *                                                                                                                   // 11712\n   * @param {string=} url New url without base prefix (e.g. `/path?a=b#hash`)                                          // 11713\n   * @return {string} url                                                                                              // 11714\n   */                                                                                                                  // 11715\n  url: function(url) {                                                                                                 // 11716\n    if (isUndefined(url)) {                                                                                            // 11717\n      return this.$$url;                                                                                               // 11718\n    }                                                                                                                  // 11719\n                                                                                                                       // 11720\n    var match = PATH_MATCH.exec(url);                                                                                  // 11721\n    if (match[1] || url === '') this.path(decodeURIComponent(match[1]));                                               // 11722\n    if (match[2] || match[1] || url === '') this.search(match[3] || '');                                               // 11723\n    this.hash(match[5] || '');                                                                                         // 11724\n                                                                                                                       // 11725\n    return this;                                                                                                       // 11726\n  },                                                                                                                   // 11727\n                                                                                                                       // 11728\n  /**                                                                                                                  // 11729\n   * @ngdoc method                                                                                                     // 11730\n   * @name $location#protocol                                                                                          // 11731\n   *                                                                                                                   // 11732\n   * @description                                                                                                      // 11733\n   * This method is getter only.                                                                                       // 11734\n   *                                                                                                                   // 11735\n   * Return protocol of current url.                                                                                   // 11736\n   *                                                                                                                   // 11737\n   *                                                                                                                   // 11738\n   * ```js                                                                                                             // 11739\n   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo                                                      // 11740\n   * var protocol = $location.protocol();                                                                              // 11741\n   * // => \"http\"                                                                                                      // 11742\n   * ```                                                                                                               // 11743\n   *                                                                                                                   // 11744\n   * @return {string} protocol of current url                                                                          // 11745\n   */                                                                                                                  // 11746\n  protocol: locationGetter('$$protocol'),                                                                              // 11747\n                                                                                                                       // 11748\n  /**                                                                                                                  // 11749\n   * @ngdoc method                                                                                                     // 11750\n   * @name $location#host                                                                                              // 11751\n   *                                                                                                                   // 11752\n   * @description                                                                                                      // 11753\n   * This method is getter only.                                                                                       // 11754\n   *                                                                                                                   // 11755\n   * Return host of current url.                                                                                       // 11756\n   *                                                                                                                   // 11757\n   * Note: compared to the non-angular version `location.host` which returns `hostname:port`, this returns the `hostname` portion only.\n   *                                                                                                                   // 11759\n   *                                                                                                                   // 11760\n   * ```js                                                                                                             // 11761\n   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo                                                      // 11762\n   * var host = $location.host();                                                                                      // 11763\n   * // => \"example.com\"                                                                                               // 11764\n   *                                                                                                                   // 11765\n   * // given url http://user:password@example.com:8080/#/some/path?foo=bar&baz=xoxo                                   // 11766\n   * host = $location.host();                                                                                          // 11767\n   * // => \"example.com\"                                                                                               // 11768\n   * host = location.host;                                                                                             // 11769\n   * // => \"example.com:8080\"                                                                                          // 11770\n   * ```                                                                                                               // 11771\n   *                                                                                                                   // 11772\n   * @return {string} host of current url.                                                                             // 11773\n   */                                                                                                                  // 11774\n  host: locationGetter('$$host'),                                                                                      // 11775\n                                                                                                                       // 11776\n  /**                                                                                                                  // 11777\n   * @ngdoc method                                                                                                     // 11778\n   * @name $location#port                                                                                              // 11779\n   *                                                                                                                   // 11780\n   * @description                                                                                                      // 11781\n   * This method is getter only.                                                                                       // 11782\n   *                                                                                                                   // 11783\n   * Return port of current url.                                                                                       // 11784\n   *                                                                                                                   // 11785\n   *                                                                                                                   // 11786\n   * ```js                                                                                                             // 11787\n   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo                                                      // 11788\n   * var port = $location.port();                                                                                      // 11789\n   * // => 80                                                                                                          // 11790\n   * ```                                                                                                               // 11791\n   *                                                                                                                   // 11792\n   * @return {Number} port                                                                                             // 11793\n   */                                                                                                                  // 11794\n  port: locationGetter('$$port'),                                                                                      // 11795\n                                                                                                                       // 11796\n  /**                                                                                                                  // 11797\n   * @ngdoc method                                                                                                     // 11798\n   * @name $location#path                                                                                              // 11799\n   *                                                                                                                   // 11800\n   * @description                                                                                                      // 11801\n   * This method is getter / setter.                                                                                   // 11802\n   *                                                                                                                   // 11803\n   * Return path of current url when called without any parameter.                                                     // 11804\n   *                                                                                                                   // 11805\n   * Change path when called with parameter and return `$location`.                                                    // 11806\n   *                                                                                                                   // 11807\n   * Note: Path should always begin with forward slash (/), this method will add the forward slash                     // 11808\n   * if it is missing.                                                                                                 // 11809\n   *                                                                                                                   // 11810\n   *                                                                                                                   // 11811\n   * ```js                                                                                                             // 11812\n   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo                                                      // 11813\n   * var path = $location.path();                                                                                      // 11814\n   * // => \"/some/path\"                                                                                                // 11815\n   * ```                                                                                                               // 11816\n   *                                                                                                                   // 11817\n   * @param {(string|number)=} path New path                                                                           // 11818\n   * @return {string} path                                                                                             // 11819\n   */                                                                                                                  // 11820\n  path: locationGetterSetter('$$path', function(path) {                                                                // 11821\n    path = path !== null ? path.toString() : '';                                                                       // 11822\n    return path.charAt(0) == '/' ? path : '/' + path;                                                                  // 11823\n  }),                                                                                                                  // 11824\n                                                                                                                       // 11825\n  /**                                                                                                                  // 11826\n   * @ngdoc method                                                                                                     // 11827\n   * @name $location#search                                                                                            // 11828\n   *                                                                                                                   // 11829\n   * @description                                                                                                      // 11830\n   * This method is getter / setter.                                                                                   // 11831\n   *                                                                                                                   // 11832\n   * Return search part (as object) of current url when called without any parameter.                                  // 11833\n   *                                                                                                                   // 11834\n   * Change search part when called with parameter and return `$location`.                                             // 11835\n   *                                                                                                                   // 11836\n   *                                                                                                                   // 11837\n   * ```js                                                                                                             // 11838\n   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo                                                      // 11839\n   * var searchObject = $location.search();                                                                            // 11840\n   * // => {foo: 'bar', baz: 'xoxo'}                                                                                   // 11841\n   *                                                                                                                   // 11842\n   * // set foo to 'yipee'                                                                                             // 11843\n   * $location.search('foo', 'yipee');                                                                                 // 11844\n   * // $location.search() => {foo: 'yipee', baz: 'xoxo'}                                                              // 11845\n   * ```                                                                                                               // 11846\n   *                                                                                                                   // 11847\n   * @param {string|Object.<string>|Object.<Array.<string>>} search New search params - string or                      // 11848\n   * hash object.                                                                                                      // 11849\n   *                                                                                                                   // 11850\n   * When called with a single argument the method acts as a setter, setting the `search` component                    // 11851\n   * of `$location` to the specified value.                                                                            // 11852\n   *                                                                                                                   // 11853\n   * If the argument is a hash object containing an array of values, these values will be encoded                      // 11854\n   * as duplicate search parameters in the url.                                                                        // 11855\n   *                                                                                                                   // 11856\n   * @param {(string|Number|Array<string>|boolean)=} paramValue If `search` is a string or number, then `paramValue`   // 11857\n   * will override only a single search property.                                                                      // 11858\n   *                                                                                                                   // 11859\n   * If `paramValue` is an array, it will override the property of the `search` component of                           // 11860\n   * `$location` specified via the first argument.                                                                     // 11861\n   *                                                                                                                   // 11862\n   * If `paramValue` is `null`, the property specified via the first argument will be deleted.                         // 11863\n   *                                                                                                                   // 11864\n   * If `paramValue` is `true`, the property specified via the first argument will be added with no                    // 11865\n   * value nor trailing equal sign.                                                                                    // 11866\n   *                                                                                                                   // 11867\n   * @return {Object} If called with no arguments returns the parsed `search` object. If called with                   // 11868\n   * one or more arguments returns `$location` object itself.                                                          // 11869\n   */                                                                                                                  // 11870\n  search: function(search, paramValue) {                                                                               // 11871\n    switch (arguments.length) {                                                                                        // 11872\n      case 0:                                                                                                          // 11873\n        return this.$$search;                                                                                          // 11874\n      case 1:                                                                                                          // 11875\n        if (isString(search) || isNumber(search)) {                                                                    // 11876\n          search = search.toString();                                                                                  // 11877\n          this.$$search = parseKeyValue(search);                                                                       // 11878\n        } else if (isObject(search)) {                                                                                 // 11879\n          search = copy(search, {});                                                                                   // 11880\n          // remove object undefined or null properties                                                                // 11881\n          forEach(search, function(value, key) {                                                                       // 11882\n            if (value == null) delete search[key];                                                                     // 11883\n          });                                                                                                          // 11884\n                                                                                                                       // 11885\n          this.$$search = search;                                                                                      // 11886\n        } else {                                                                                                       // 11887\n          throw $locationMinErr('isrcharg',                                                                            // 11888\n              'The first argument of the `$location#search()` call must be a string or an object.');                   // 11889\n        }                                                                                                              // 11890\n        break;                                                                                                         // 11891\n      default:                                                                                                         // 11892\n        if (isUndefined(paramValue) || paramValue === null) {                                                          // 11893\n          delete this.$$search[search];                                                                                // 11894\n        } else {                                                                                                       // 11895\n          this.$$search[search] = paramValue;                                                                          // 11896\n        }                                                                                                              // 11897\n    }                                                                                                                  // 11898\n                                                                                                                       // 11899\n    this.$$compose();                                                                                                  // 11900\n    return this;                                                                                                       // 11901\n  },                                                                                                                   // 11902\n                                                                                                                       // 11903\n  /**                                                                                                                  // 11904\n   * @ngdoc method                                                                                                     // 11905\n   * @name $location#hash                                                                                              // 11906\n   *                                                                                                                   // 11907\n   * @description                                                                                                      // 11908\n   * This method is getter / setter.                                                                                   // 11909\n   *                                                                                                                   // 11910\n   * Return hash fragment when called without any parameter.                                                           // 11911\n   *                                                                                                                   // 11912\n   * Change hash fragment when called with parameter and return `$location`.                                           // 11913\n   *                                                                                                                   // 11914\n   *                                                                                                                   // 11915\n   * ```js                                                                                                             // 11916\n   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo#hashValue                                            // 11917\n   * var hash = $location.hash();                                                                                      // 11918\n   * // => \"hashValue\"                                                                                                 // 11919\n   * ```                                                                                                               // 11920\n   *                                                                                                                   // 11921\n   * @param {(string|number)=} hash New hash fragment                                                                  // 11922\n   * @return {string} hash                                                                                             // 11923\n   */                                                                                                                  // 11924\n  hash: locationGetterSetter('$$hash', function(hash) {                                                                // 11925\n    return hash !== null ? hash.toString() : '';                                                                       // 11926\n  }),                                                                                                                  // 11927\n                                                                                                                       // 11928\n  /**                                                                                                                  // 11929\n   * @ngdoc method                                                                                                     // 11930\n   * @name $location#replace                                                                                           // 11931\n   *                                                                                                                   // 11932\n   * @description                                                                                                      // 11933\n   * If called, all changes to $location during current `$digest` will be replacing current history                    // 11934\n   * record, instead of adding new one.                                                                                // 11935\n   */                                                                                                                  // 11936\n  replace: function() {                                                                                                // 11937\n    this.$$replace = true;                                                                                             // 11938\n    return this;                                                                                                       // 11939\n  }                                                                                                                    // 11940\n};                                                                                                                     // 11941\n                                                                                                                       // 11942\nforEach([LocationHashbangInHtml5Url, LocationHashbangUrl, LocationHtml5Url], function(Location) {                      // 11943\n  Location.prototype = Object.create(locationPrototype);                                                               // 11944\n                                                                                                                       // 11945\n  /**                                                                                                                  // 11946\n   * @ngdoc method                                                                                                     // 11947\n   * @name $location#state                                                                                             // 11948\n   *                                                                                                                   // 11949\n   * @description                                                                                                      // 11950\n   * This method is getter / setter.                                                                                   // 11951\n   *                                                                                                                   // 11952\n   * Return the history state object when called without any parameter.                                                // 11953\n   *                                                                                                                   // 11954\n   * Change the history state object when called with one parameter and return `$location`.                            // 11955\n   * The state object is later passed to `pushState` or `replaceState`.                                                // 11956\n   *                                                                                                                   // 11957\n   * NOTE: This method is supported only in HTML5 mode and only in browsers supporting                                 // 11958\n   * the HTML5 History API (i.e. methods `pushState` and `replaceState`). If you need to support                       // 11959\n   * older browsers (like IE9 or Android < 4.0), don't use this method.                                                // 11960\n   *                                                                                                                   // 11961\n   * @param {object=} state State object for pushState or replaceState                                                 // 11962\n   * @return {object} state                                                                                            // 11963\n   */                                                                                                                  // 11964\n  Location.prototype.state = function(state) {                                                                         // 11965\n    if (!arguments.length) {                                                                                           // 11966\n      return this.$$state;                                                                                             // 11967\n    }                                                                                                                  // 11968\n                                                                                                                       // 11969\n    if (Location !== LocationHtml5Url || !this.$$html5) {                                                              // 11970\n      throw $locationMinErr('nostate', 'History API state support is available only ' +                                // 11971\n        'in HTML5 mode and only in browsers supporting HTML5 History API');                                            // 11972\n    }                                                                                                                  // 11973\n    // The user might modify `stateObject` after invoking `$location.state(stateObject)`                               // 11974\n    // but we're changing the $$state reference to $browser.state() during the $digest                                 // 11975\n    // so the modification window is narrow.                                                                           // 11976\n    this.$$state = isUndefined(state) ? null : state;                                                                  // 11977\n                                                                                                                       // 11978\n    return this;                                                                                                       // 11979\n  };                                                                                                                   // 11980\n});                                                                                                                    // 11981\n                                                                                                                       // 11982\n                                                                                                                       // 11983\nfunction locationGetter(property) {                                                                                    // 11984\n  return function() {                                                                                                  // 11985\n    return this[property];                                                                                             // 11986\n  };                                                                                                                   // 11987\n}                                                                                                                      // 11988\n                                                                                                                       // 11989\n                                                                                                                       // 11990\nfunction locationGetterSetter(property, preprocess) {                                                                  // 11991\n  return function(value) {                                                                                             // 11992\n    if (isUndefined(value)) {                                                                                          // 11993\n      return this[property];                                                                                           // 11994\n    }                                                                                                                  // 11995\n                                                                                                                       // 11996\n    this[property] = preprocess(value);                                                                                // 11997\n    this.$$compose();                                                                                                  // 11998\n                                                                                                                       // 11999\n    return this;                                                                                                       // 12000\n  };                                                                                                                   // 12001\n}                                                                                                                      // 12002\n                                                                                                                       // 12003\n                                                                                                                       // 12004\n/**                                                                                                                    // 12005\n * @ngdoc service                                                                                                      // 12006\n * @name $location                                                                                                     // 12007\n *                                                                                                                     // 12008\n * @requires $rootElement                                                                                              // 12009\n *                                                                                                                     // 12010\n * @description                                                                                                        // 12011\n * The $location service parses the URL in the browser address bar (based on the                                       // 12012\n * [window.location](https://developer.mozilla.org/en/window.location)) and makes the URL                              // 12013\n * available to your application. Changes to the URL in the address bar are reflected into                             // 12014\n * $location service and changes to $location are reflected into the browser address bar.                              // 12015\n *                                                                                                                     // 12016\n * **The $location service:**                                                                                          // 12017\n *                                                                                                                     // 12018\n * - Exposes the current URL in the browser address bar, so you can                                                    // 12019\n *   - Watch and observe the URL.                                                                                      // 12020\n *   - Change the URL.                                                                                                 // 12021\n * - Synchronizes the URL with the browser when the user                                                               // 12022\n *   - Changes the address bar.                                                                                        // 12023\n *   - Clicks the back or forward button (or clicks a History link).                                                   // 12024\n *   - Clicks on a link.                                                                                               // 12025\n * - Represents the URL object as a set of methods (protocol, host, port, path, search, hash).                         // 12026\n *                                                                                                                     // 12027\n * For more information see {@link guide/$location Developer Guide: Using $location}                                   // 12028\n */                                                                                                                    // 12029\n                                                                                                                       // 12030\n/**                                                                                                                    // 12031\n * @ngdoc provider                                                                                                     // 12032\n * @name $locationProvider                                                                                             // 12033\n * @description                                                                                                        // 12034\n * Use the `$locationProvider` to configure how the application deep linking paths are stored.                         // 12035\n */                                                                                                                    // 12036\nfunction $LocationProvider() {                                                                                         // 12037\n  var hashPrefix = '',                                                                                                 // 12038\n      html5Mode = {                                                                                                    // 12039\n        enabled: false,                                                                                                // 12040\n        requireBase: true,                                                                                             // 12041\n        rewriteLinks: true                                                                                             // 12042\n      };                                                                                                               // 12043\n                                                                                                                       // 12044\n  /**                                                                                                                  // 12045\n   * @ngdoc method                                                                                                     // 12046\n   * @name $locationProvider#hashPrefix                                                                                // 12047\n   * @description                                                                                                      // 12048\n   * @param {string=} prefix Prefix for hash part (containing path and search)                                         // 12049\n   * @returns {*} current value if used as getter or itself (chaining) if used as setter                               // 12050\n   */                                                                                                                  // 12051\n  this.hashPrefix = function(prefix) {                                                                                 // 12052\n    if (isDefined(prefix)) {                                                                                           // 12053\n      hashPrefix = prefix;                                                                                             // 12054\n      return this;                                                                                                     // 12055\n    } else {                                                                                                           // 12056\n      return hashPrefix;                                                                                               // 12057\n    }                                                                                                                  // 12058\n  };                                                                                                                   // 12059\n                                                                                                                       // 12060\n  /**                                                                                                                  // 12061\n   * @ngdoc method                                                                                                     // 12062\n   * @name $locationProvider#html5Mode                                                                                 // 12063\n   * @description                                                                                                      // 12064\n   * @param {(boolean|Object)=} mode If boolean, sets `html5Mode.enabled` to value.                                    // 12065\n   *   If object, sets `enabled`, `requireBase` and `rewriteLinks` to respective values. Supported                     // 12066\n   *   properties:                                                                                                     // 12067\n   *   - **enabled** – `{boolean}` – (default: false) If true, will rely on `history.pushState` to                     // 12068\n   *     change urls where supported. Will fall back to hash-prefixed paths in browsers that do not                    // 12069\n   *     support `pushState`.                                                                                          // 12070\n   *   - **requireBase** - `{boolean}` - (default: `true`) When html5Mode is enabled, specifies                        // 12071\n   *     whether or not a <base> tag is required to be present. If `enabled` and `requireBase` are                     // 12072\n   *     true, and a base tag is not present, an error will be thrown when `$location` is injected.                    // 12073\n   *     See the {@link guide/$location $location guide for more information}                                          // 12074\n   *   - **rewriteLinks** - `{boolean}` - (default: `true`) When html5Mode is enabled,                                 // 12075\n   *     enables/disables url rewriting for relative links.                                                            // 12076\n   *                                                                                                                   // 12077\n   * @returns {Object} html5Mode object if used as getter or itself (chaining) if used as setter                       // 12078\n   */                                                                                                                  // 12079\n  this.html5Mode = function(mode) {                                                                                    // 12080\n    if (isBoolean(mode)) {                                                                                             // 12081\n      html5Mode.enabled = mode;                                                                                        // 12082\n      return this;                                                                                                     // 12083\n    } else if (isObject(mode)) {                                                                                       // 12084\n                                                                                                                       // 12085\n      if (isBoolean(mode.enabled)) {                                                                                   // 12086\n        html5Mode.enabled = mode.enabled;                                                                              // 12087\n      }                                                                                                                // 12088\n                                                                                                                       // 12089\n      if (isBoolean(mode.requireBase)) {                                                                               // 12090\n        html5Mode.requireBase = mode.requireBase;                                                                      // 12091\n      }                                                                                                                // 12092\n                                                                                                                       // 12093\n      if (isBoolean(mode.rewriteLinks)) {                                                                              // 12094\n        html5Mode.rewriteLinks = mode.rewriteLinks;                                                                    // 12095\n      }                                                                                                                // 12096\n                                                                                                                       // 12097\n      return this;                                                                                                     // 12098\n    } else {                                                                                                           // 12099\n      return html5Mode;                                                                                                // 12100\n    }                                                                                                                  // 12101\n  };                                                                                                                   // 12102\n                                                                                                                       // 12103\n  /**                                                                                                                  // 12104\n   * @ngdoc event                                                                                                      // 12105\n   * @name $location#$locationChangeStart                                                                              // 12106\n   * @eventType broadcast on root scope                                                                                // 12107\n   * @description                                                                                                      // 12108\n   * Broadcasted before a URL will change.                                                                             // 12109\n   *                                                                                                                   // 12110\n   * This change can be prevented by calling                                                                           // 12111\n   * `preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on} for more                                // 12112\n   * details about event object. Upon successful change                                                                // 12113\n   * {@link ng.$location#$locationChangeSuccess $locationChangeSuccess} is fired.                                      // 12114\n   *                                                                                                                   // 12115\n   * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when                               // 12116\n   * the browser supports the HTML5 History API.                                                                       // 12117\n   *                                                                                                                   // 12118\n   * @param {Object} angularEvent Synthetic event object.                                                              // 12119\n   * @param {string} newUrl New URL                                                                                    // 12120\n   * @param {string=} oldUrl URL that was before it was changed.                                                       // 12121\n   * @param {string=} newState New history state object                                                                // 12122\n   * @param {string=} oldState History state object that was before it was changed.                                    // 12123\n   */                                                                                                                  // 12124\n                                                                                                                       // 12125\n  /**                                                                                                                  // 12126\n   * @ngdoc event                                                                                                      // 12127\n   * @name $location#$locationChangeSuccess                                                                            // 12128\n   * @eventType broadcast on root scope                                                                                // 12129\n   * @description                                                                                                      // 12130\n   * Broadcasted after a URL was changed.                                                                              // 12131\n   *                                                                                                                   // 12132\n   * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when                               // 12133\n   * the browser supports the HTML5 History API.                                                                       // 12134\n   *                                                                                                                   // 12135\n   * @param {Object} angularEvent Synthetic event object.                                                              // 12136\n   * @param {string} newUrl New URL                                                                                    // 12137\n   * @param {string=} oldUrl URL that was before it was changed.                                                       // 12138\n   * @param {string=} newState New history state object                                                                // 12139\n   * @param {string=} oldState History state object that was before it was changed.                                    // 12140\n   */                                                                                                                  // 12141\n                                                                                                                       // 12142\n  this.$get = ['$rootScope', '$browser', '$sniffer', '$rootElement', '$window',                                        // 12143\n      function($rootScope, $browser, $sniffer, $rootElement, $window) {                                                // 12144\n    var $location,                                                                                                     // 12145\n        LocationMode,                                                                                                  // 12146\n        baseHref = $browser.baseHref(), // if base[href] is undefined, it defaults to ''                               // 12147\n        initialUrl = $browser.url(),                                                                                   // 12148\n        appBase;                                                                                                       // 12149\n                                                                                                                       // 12150\n    if (html5Mode.enabled) {                                                                                           // 12151\n      if (!baseHref && html5Mode.requireBase) {                                                                        // 12152\n        throw $locationMinErr('nobase',                                                                                // 12153\n          \"$location in HTML5 mode requires a <base> tag to be present!\");                                             // 12154\n      }                                                                                                                // 12155\n      appBase = serverBase(initialUrl) + (baseHref || '/');                                                            // 12156\n      LocationMode = $sniffer.history ? LocationHtml5Url : LocationHashbangInHtml5Url;                                 // 12157\n    } else {                                                                                                           // 12158\n      appBase = stripHash(initialUrl);                                                                                 // 12159\n      LocationMode = LocationHashbangUrl;                                                                              // 12160\n    }                                                                                                                  // 12161\n    var appBaseNoFile = stripFile(appBase);                                                                            // 12162\n                                                                                                                       // 12163\n    $location = new LocationMode(appBase, appBaseNoFile, '#' + hashPrefix);                                            // 12164\n    $location.$$parseLinkUrl(initialUrl, initialUrl);                                                                  // 12165\n                                                                                                                       // 12166\n    $location.$$state = $browser.state();                                                                              // 12167\n                                                                                                                       // 12168\n    var IGNORE_URI_REGEXP = /^\\s*(javascript|mailto):/i;                                                               // 12169\n                                                                                                                       // 12170\n    function setBrowserUrlWithFallback(url, replace, state) {                                                          // 12171\n      var oldUrl = $location.url();                                                                                    // 12172\n      var oldState = $location.$$state;                                                                                // 12173\n      try {                                                                                                            // 12174\n        $browser.url(url, replace, state);                                                                             // 12175\n                                                                                                                       // 12176\n        // Make sure $location.state() returns referentially identical (not just deeply equal)                         // 12177\n        // state object; this makes possible quick checking if the state changed in the digest                         // 12178\n        // loop. Checking deep equality would be too expensive.                                                        // 12179\n        $location.$$state = $browser.state();                                                                          // 12180\n      } catch (e) {                                                                                                    // 12181\n        // Restore old values if pushState fails                                                                       // 12182\n        $location.url(oldUrl);                                                                                         // 12183\n        $location.$$state = oldState;                                                                                  // 12184\n                                                                                                                       // 12185\n        throw e;                                                                                                       // 12186\n      }                                                                                                                // 12187\n    }                                                                                                                  // 12188\n                                                                                                                       // 12189\n    $rootElement.on('click', function(event) {                                                                         // 12190\n      // TODO(vojta): rewrite link when opening in new tab/window (in legacy browser)                                  // 12191\n      // currently we open nice url link and redirect then                                                             // 12192\n                                                                                                                       // 12193\n      if (!html5Mode.rewriteLinks || event.ctrlKey || event.metaKey || event.shiftKey || event.which == 2 || event.button == 2) return;\n                                                                                                                       // 12195\n      var elm = jqLite(event.target);                                                                                  // 12196\n                                                                                                                       // 12197\n      // traverse the DOM up to find first A tag                                                                       // 12198\n      while (nodeName_(elm[0]) !== 'a') {                                                                              // 12199\n        // ignore rewriting if no A tag (reached root element, or no parent - removed from document)                   // 12200\n        if (elm[0] === $rootElement[0] || !(elm = elm.parent())[0]) return;                                            // 12201\n      }                                                                                                                // 12202\n                                                                                                                       // 12203\n      var absHref = elm.prop('href');                                                                                  // 12204\n      // get the actual href attribute - see                                                                           // 12205\n      // http://msdn.microsoft.com/en-us/library/ie/dd347148(v=vs.85).aspx                                             // 12206\n      var relHref = elm.attr('href') || elm.attr('xlink:href');                                                        // 12207\n                                                                                                                       // 12208\n      if (isObject(absHref) && absHref.toString() === '[object SVGAnimatedString]') {                                  // 12209\n        // SVGAnimatedString.animVal should be identical to SVGAnimatedString.baseVal, unless during                   // 12210\n        // an animation.                                                                                               // 12211\n        absHref = urlResolve(absHref.animVal).href;                                                                    // 12212\n      }                                                                                                                // 12213\n                                                                                                                       // 12214\n      // Ignore when url is started with javascript: or mailto:                                                        // 12215\n      if (IGNORE_URI_REGEXP.test(absHref)) return;                                                                     // 12216\n                                                                                                                       // 12217\n      if (absHref && !elm.attr('target') && !event.isDefaultPrevented()) {                                             // 12218\n        if ($location.$$parseLinkUrl(absHref, relHref)) {                                                              // 12219\n          // We do a preventDefault for all urls that are part of the angular application,                             // 12220\n          // in html5mode and also without, so that we are able to abort navigation without                            // 12221\n          // getting double entries in the location history.                                                           // 12222\n          event.preventDefault();                                                                                      // 12223\n          // update location manually                                                                                  // 12224\n          if ($location.absUrl() != $browser.url()) {                                                                  // 12225\n            $rootScope.$apply();                                                                                       // 12226\n            // hack to work around FF6 bug 684208 when scenario runner clicks on links                                 // 12227\n            $window.angular['ff-684208-preventDefault'] = true;                                                        // 12228\n          }                                                                                                            // 12229\n        }                                                                                                              // 12230\n      }                                                                                                                // 12231\n    });                                                                                                                // 12232\n                                                                                                                       // 12233\n                                                                                                                       // 12234\n    // rewrite hashbang url <> html5 url                                                                               // 12235\n    if (trimEmptyHash($location.absUrl()) != trimEmptyHash(initialUrl)) {                                              // 12236\n      $browser.url($location.absUrl(), true);                                                                          // 12237\n    }                                                                                                                  // 12238\n                                                                                                                       // 12239\n    var initializing = true;                                                                                           // 12240\n                                                                                                                       // 12241\n    // update $location when $browser url changes                                                                      // 12242\n    $browser.onUrlChange(function(newUrl, newState) {                                                                  // 12243\n                                                                                                                       // 12244\n      if (isUndefined(beginsWith(appBaseNoFile, newUrl))) {                                                            // 12245\n        // If we are navigating outside of the app then force a reload                                                 // 12246\n        $window.location.href = newUrl;                                                                                // 12247\n        return;                                                                                                        // 12248\n      }                                                                                                                // 12249\n                                                                                                                       // 12250\n      $rootScope.$evalAsync(function() {                                                                               // 12251\n        var oldUrl = $location.absUrl();                                                                               // 12252\n        var oldState = $location.$$state;                                                                              // 12253\n        var defaultPrevented;                                                                                          // 12254\n                                                                                                                       // 12255\n        $location.$$parse(newUrl);                                                                                     // 12256\n        $location.$$state = newState;                                                                                  // 12257\n                                                                                                                       // 12258\n        defaultPrevented = $rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl,                               // 12259\n            newState, oldState).defaultPrevented;                                                                      // 12260\n                                                                                                                       // 12261\n        // if the location was changed by a `$locationChangeStart` handler then stop                                   // 12262\n        // processing this location change                                                                             // 12263\n        if ($location.absUrl() !== newUrl) return;                                                                     // 12264\n                                                                                                                       // 12265\n        if (defaultPrevented) {                                                                                        // 12266\n          $location.$$parse(oldUrl);                                                                                   // 12267\n          $location.$$state = oldState;                                                                                // 12268\n          setBrowserUrlWithFallback(oldUrl, false, oldState);                                                          // 12269\n        } else {                                                                                                       // 12270\n          initializing = false;                                                                                        // 12271\n          afterLocationChange(oldUrl, oldState);                                                                       // 12272\n        }                                                                                                              // 12273\n      });                                                                                                              // 12274\n      if (!$rootScope.$$phase) $rootScope.$digest();                                                                   // 12275\n    });                                                                                                                // 12276\n                                                                                                                       // 12277\n    // update browser                                                                                                  // 12278\n    $rootScope.$watch(function $locationWatch() {                                                                      // 12279\n      var oldUrl = trimEmptyHash($browser.url());                                                                      // 12280\n      var newUrl = trimEmptyHash($location.absUrl());                                                                  // 12281\n      var oldState = $browser.state();                                                                                 // 12282\n      var currentReplace = $location.$$replace;                                                                        // 12283\n      var urlOrStateChanged = oldUrl !== newUrl ||                                                                     // 12284\n        ($location.$$html5 && $sniffer.history && oldState !== $location.$$state);                                     // 12285\n                                                                                                                       // 12286\n      if (initializing || urlOrStateChanged) {                                                                         // 12287\n        initializing = false;                                                                                          // 12288\n                                                                                                                       // 12289\n        $rootScope.$evalAsync(function() {                                                                             // 12290\n          var newUrl = $location.absUrl();                                                                             // 12291\n          var defaultPrevented = $rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl,                         // 12292\n              $location.$$state, oldState).defaultPrevented;                                                           // 12293\n                                                                                                                       // 12294\n          // if the location was changed by a `$locationChangeStart` handler then stop                                 // 12295\n          // processing this location change                                                                           // 12296\n          if ($location.absUrl() !== newUrl) return;                                                                   // 12297\n                                                                                                                       // 12298\n          if (defaultPrevented) {                                                                                      // 12299\n            $location.$$parse(oldUrl);                                                                                 // 12300\n            $location.$$state = oldState;                                                                              // 12301\n          } else {                                                                                                     // 12302\n            if (urlOrStateChanged) {                                                                                   // 12303\n              setBrowserUrlWithFallback(newUrl, currentReplace,                                                        // 12304\n                                        oldState === $location.$$state ? null : $location.$$state);                    // 12305\n            }                                                                                                          // 12306\n            afterLocationChange(oldUrl, oldState);                                                                     // 12307\n          }                                                                                                            // 12308\n        });                                                                                                            // 12309\n      }                                                                                                                // 12310\n                                                                                                                       // 12311\n      $location.$$replace = false;                                                                                     // 12312\n                                                                                                                       // 12313\n      // we don't need to return anything because $evalAsync will make the digest loop dirty when                      // 12314\n      // there is a change                                                                                             // 12315\n    });                                                                                                                // 12316\n                                                                                                                       // 12317\n    return $location;                                                                                                  // 12318\n                                                                                                                       // 12319\n    function afterLocationChange(oldUrl, oldState) {                                                                   // 12320\n      $rootScope.$broadcast('$locationChangeSuccess', $location.absUrl(), oldUrl,                                      // 12321\n        $location.$$state, oldState);                                                                                  // 12322\n    }                                                                                                                  // 12323\n}];                                                                                                                    // 12324\n}                                                                                                                      // 12325\n                                                                                                                       // 12326\n/**                                                                                                                    // 12327\n * @ngdoc service                                                                                                      // 12328\n * @name $log                                                                                                          // 12329\n * @requires $window                                                                                                   // 12330\n *                                                                                                                     // 12331\n * @description                                                                                                        // 12332\n * Simple service for logging. Default implementation safely writes the message                                        // 12333\n * into the browser's console (if present).                                                                            // 12334\n *                                                                                                                     // 12335\n * The main purpose of this service is to simplify debugging and troubleshooting.                                      // 12336\n *                                                                                                                     // 12337\n * The default is to log `debug` messages. You can use                                                                 // 12338\n * {@link ng.$logProvider ng.$logProvider#debugEnabled} to change this.                                                // 12339\n *                                                                                                                     // 12340\n * @example                                                                                                            // 12341\n   <example module=\"logExample\">                                                                                       // 12342\n     <file name=\"script.js\">                                                                                           // 12343\n       angular.module('logExample', [])                                                                                // 12344\n         .controller('LogController', ['$scope', '$log', function($scope, $log) {                                      // 12345\n           $scope.$log = $log;                                                                                         // 12346\n           $scope.message = 'Hello World!';                                                                            // 12347\n         }]);                                                                                                          // 12348\n     </file>                                                                                                           // 12349\n     <file name=\"index.html\">                                                                                          // 12350\n       <div ng-controller=\"LogController\">                                                                             // 12351\n         <p>Reload this page with open console, enter text and hit the log button...</p>                               // 12352\n         <label>Message:                                                                                               // 12353\n         <input type=\"text\" ng-model=\"message\" /></label>                                                              // 12354\n         <button ng-click=\"$log.log(message)\">log</button>                                                             // 12355\n         <button ng-click=\"$log.warn(message)\">warn</button>                                                           // 12356\n         <button ng-click=\"$log.info(message)\">info</button>                                                           // 12357\n         <button ng-click=\"$log.error(message)\">error</button>                                                         // 12358\n         <button ng-click=\"$log.debug(message)\">debug</button>                                                         // 12359\n       </div>                                                                                                          // 12360\n     </file>                                                                                                           // 12361\n   </example>                                                                                                          // 12362\n */                                                                                                                    // 12363\n                                                                                                                       // 12364\n/**                                                                                                                    // 12365\n * @ngdoc provider                                                                                                     // 12366\n * @name $logProvider                                                                                                  // 12367\n * @description                                                                                                        // 12368\n * Use the `$logProvider` to configure how the application logs messages                                               // 12369\n */                                                                                                                    // 12370\nfunction $LogProvider() {                                                                                              // 12371\n  var debug = true,                                                                                                    // 12372\n      self = this;                                                                                                     // 12373\n                                                                                                                       // 12374\n  /**                                                                                                                  // 12375\n   * @ngdoc method                                                                                                     // 12376\n   * @name $logProvider#debugEnabled                                                                                   // 12377\n   * @description                                                                                                      // 12378\n   * @param {boolean=} flag enable or disable debug level messages                                                     // 12379\n   * @returns {*} current value if used as getter or itself (chaining) if used as setter                               // 12380\n   */                                                                                                                  // 12381\n  this.debugEnabled = function(flag) {                                                                                 // 12382\n    if (isDefined(flag)) {                                                                                             // 12383\n      debug = flag;                                                                                                    // 12384\n    return this;                                                                                                       // 12385\n    } else {                                                                                                           // 12386\n      return debug;                                                                                                    // 12387\n    }                                                                                                                  // 12388\n  };                                                                                                                   // 12389\n                                                                                                                       // 12390\n  this.$get = ['$window', function($window) {                                                                          // 12391\n    return {                                                                                                           // 12392\n      /**                                                                                                              // 12393\n       * @ngdoc method                                                                                                 // 12394\n       * @name $log#log                                                                                                // 12395\n       *                                                                                                               // 12396\n       * @description                                                                                                  // 12397\n       * Write a log message                                                                                           // 12398\n       */                                                                                                              // 12399\n      log: consoleLog('log'),                                                                                          // 12400\n                                                                                                                       // 12401\n      /**                                                                                                              // 12402\n       * @ngdoc method                                                                                                 // 12403\n       * @name $log#info                                                                                               // 12404\n       *                                                                                                               // 12405\n       * @description                                                                                                  // 12406\n       * Write an information message                                                                                  // 12407\n       */                                                                                                              // 12408\n      info: consoleLog('info'),                                                                                        // 12409\n                                                                                                                       // 12410\n      /**                                                                                                              // 12411\n       * @ngdoc method                                                                                                 // 12412\n       * @name $log#warn                                                                                               // 12413\n       *                                                                                                               // 12414\n       * @description                                                                                                  // 12415\n       * Write a warning message                                                                                       // 12416\n       */                                                                                                              // 12417\n      warn: consoleLog('warn'),                                                                                        // 12418\n                                                                                                                       // 12419\n      /**                                                                                                              // 12420\n       * @ngdoc method                                                                                                 // 12421\n       * @name $log#error                                                                                              // 12422\n       *                                                                                                               // 12423\n       * @description                                                                                                  // 12424\n       * Write an error message                                                                                        // 12425\n       */                                                                                                              // 12426\n      error: consoleLog('error'),                                                                                      // 12427\n                                                                                                                       // 12428\n      /**                                                                                                              // 12429\n       * @ngdoc method                                                                                                 // 12430\n       * @name $log#debug                                                                                              // 12431\n       *                                                                                                               // 12432\n       * @description                                                                                                  // 12433\n       * Write a debug message                                                                                         // 12434\n       */                                                                                                              // 12435\n      debug: (function() {                                                                                             // 12436\n        var fn = consoleLog('debug');                                                                                  // 12437\n                                                                                                                       // 12438\n        return function() {                                                                                            // 12439\n          if (debug) {                                                                                                 // 12440\n            fn.apply(self, arguments);                                                                                 // 12441\n          }                                                                                                            // 12442\n        };                                                                                                             // 12443\n      }())                                                                                                             // 12444\n    };                                                                                                                 // 12445\n                                                                                                                       // 12446\n    function formatError(arg) {                                                                                        // 12447\n      if (arg instanceof Error) {                                                                                      // 12448\n        if (arg.stack) {                                                                                               // 12449\n          arg = (arg.message && arg.stack.indexOf(arg.message) === -1)                                                 // 12450\n              ? 'Error: ' + arg.message + '\\n' + arg.stack                                                             // 12451\n              : arg.stack;                                                                                             // 12452\n        } else if (arg.sourceURL) {                                                                                    // 12453\n          arg = arg.message + '\\n' + arg.sourceURL + ':' + arg.line;                                                   // 12454\n        }                                                                                                              // 12455\n      }                                                                                                                // 12456\n      return arg;                                                                                                      // 12457\n    }                                                                                                                  // 12458\n                                                                                                                       // 12459\n    function consoleLog(type) {                                                                                        // 12460\n      var console = $window.console || {},                                                                             // 12461\n          logFn = console[type] || console.log || noop,                                                                // 12462\n          hasApply = false;                                                                                            // 12463\n                                                                                                                       // 12464\n      // Note: reading logFn.apply throws an error in IE11 in IE8 document mode.                                       // 12465\n      // The reason behind this is that console.log has type \"object\" in IE8...                                        // 12466\n      try {                                                                                                            // 12467\n        hasApply = !!logFn.apply;                                                                                      // 12468\n      } catch (e) {}                                                                                                   // 12469\n                                                                                                                       // 12470\n      if (hasApply) {                                                                                                  // 12471\n        return function() {                                                                                            // 12472\n          var args = [];                                                                                               // 12473\n          forEach(arguments, function(arg) {                                                                           // 12474\n            args.push(formatError(arg));                                                                               // 12475\n          });                                                                                                          // 12476\n          return logFn.apply(console, args);                                                                           // 12477\n        };                                                                                                             // 12478\n      }                                                                                                                // 12479\n                                                                                                                       // 12480\n      // we are IE which either doesn't have window.console => this is noop and we do nothing,                         // 12481\n      // or we are IE where console.log doesn't have apply so we log at least first 2 args                             // 12482\n      return function(arg1, arg2) {                                                                                    // 12483\n        logFn(arg1, arg2 == null ? '' : arg2);                                                                         // 12484\n      };                                                                                                               // 12485\n    }                                                                                                                  // 12486\n  }];                                                                                                                  // 12487\n}                                                                                                                      // 12488\n                                                                                                                       // 12489\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *                                           // 12490\n *     Any commits to this file should be reviewed with security in mind.  *                                           // 12491\n *   Changes to this file can potentially create security vulnerabilities. *                                           // 12492\n *          An approval from 2 Core members with history of modifying      *                                           // 12493\n *                         this file is required.                          *                                           // 12494\n *                                                                         *                                           // 12495\n *  Does the change somehow allow for arbitrary javascript to be executed? *                                           // 12496\n *    Or allows for someone to change the prototype of built-in objects?   *                                           // 12497\n *     Or gives undesired access to variables likes document or window?    *                                           // 12498\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */                                          // 12499\n                                                                                                                       // 12500\nvar $parseMinErr = minErr('$parse');                                                                                   // 12501\n                                                                                                                       // 12502\n// Sandboxing Angular Expressions                                                                                      // 12503\n// ------------------------------                                                                                      // 12504\n// Angular expressions are generally considered safe because these expressions only have direct                        // 12505\n// access to `$scope` and locals. However, one can obtain the ability to execute arbitrary JS code by                  // 12506\n// obtaining a reference to native JS functions such as the Function constructor.                                      // 12507\n//                                                                                                                     // 12508\n// As an example, consider the following Angular expression:                                                           // 12509\n//                                                                                                                     // 12510\n//   {}.toString.constructor('alert(\"evil JS code\")')                                                                  // 12511\n//                                                                                                                     // 12512\n// This sandboxing technique is not perfect and doesn't aim to be. The goal is to prevent exploits                     // 12513\n// against the expression language, but not to prevent exploits that were enabled by exposing                          // 12514\n// sensitive JavaScript or browser APIs on Scope. Exposing such objects on a Scope is never a good                     // 12515\n// practice and therefore we are not even trying to protect against interaction with an object                         // 12516\n// explicitly exposed in this way.                                                                                     // 12517\n//                                                                                                                     // 12518\n// In general, it is not possible to access a Window object from an angular expression unless a                        // 12519\n// window or some DOM object that has a reference to window is published onto a Scope.                                 // 12520\n// Similarly we prevent invocations of function known to be dangerous, as well as assignments to                       // 12521\n// native objects.                                                                                                     // 12522\n//                                                                                                                     // 12523\n// See https://docs.angularjs.org/guide/security                                                                       // 12524\n                                                                                                                       // 12525\n                                                                                                                       // 12526\nfunction ensureSafeMemberName(name, fullExpression) {                                                                  // 12527\n  if (name === \"__defineGetter__\" || name === \"__defineSetter__\"                                                       // 12528\n      || name === \"__lookupGetter__\" || name === \"__lookupSetter__\"                                                    // 12529\n      || name === \"__proto__\") {                                                                                       // 12530\n    throw $parseMinErr('isecfld',                                                                                      // 12531\n        'Attempting to access a disallowed field in Angular expressions! '                                             // 12532\n        + 'Expression: {0}', fullExpression);                                                                          // 12533\n  }                                                                                                                    // 12534\n  return name;                                                                                                         // 12535\n}                                                                                                                      // 12536\n                                                                                                                       // 12537\nfunction getStringValue(name, fullExpression) {                                                                        // 12538\n  // From the JavaScript docs:                                                                                         // 12539\n  // Property names must be strings. This means that non-string objects cannot be used                                 // 12540\n  // as keys in an object. Any non-string object, including a number, is typecasted                                    // 12541\n  // into a string via the toString method.                                                                            // 12542\n  //                                                                                                                   // 12543\n  // So, to ensure that we are checking the same `name` that JavaScript would use,                                     // 12544\n  // we cast it to a string, if possible.                                                                              // 12545\n  // Doing `name + ''` can cause a repl error if the result to `toString` is not a string,                             // 12546\n  // this is, this will handle objects that misbehave.                                                                 // 12547\n  name = name + '';                                                                                                    // 12548\n  if (!isString(name)) {                                                                                               // 12549\n    throw $parseMinErr('iseccst',                                                                                      // 12550\n        'Cannot convert object to primitive value! '                                                                   // 12551\n        + 'Expression: {0}', fullExpression);                                                                          // 12552\n  }                                                                                                                    // 12553\n  return name;                                                                                                         // 12554\n}                                                                                                                      // 12555\n                                                                                                                       // 12556\nfunction ensureSafeObject(obj, fullExpression) {                                                                       // 12557\n  // nifty check if obj is Function that is fast and works across iframes and other contexts                           // 12558\n  if (obj) {                                                                                                           // 12559\n    if (obj.constructor === obj) {                                                                                     // 12560\n      throw $parseMinErr('isecfn',                                                                                     // 12561\n          'Referencing Function in Angular expressions is disallowed! Expression: {0}',                                // 12562\n          fullExpression);                                                                                             // 12563\n    } else if (// isWindow(obj)                                                                                        // 12564\n        obj.window === obj) {                                                                                          // 12565\n      throw $parseMinErr('isecwindow',                                                                                 // 12566\n          'Referencing the Window in Angular expressions is disallowed! Expression: {0}',                              // 12567\n          fullExpression);                                                                                             // 12568\n    } else if (// isElement(obj)                                                                                       // 12569\n        obj.children && (obj.nodeName || (obj.prop && obj.attr && obj.find))) {                                        // 12570\n      throw $parseMinErr('isecdom',                                                                                    // 12571\n          'Referencing DOM nodes in Angular expressions is disallowed! Expression: {0}',                               // 12572\n          fullExpression);                                                                                             // 12573\n    } else if (// block Object so that we can't get hold of dangerous Object.* methods                                 // 12574\n        obj === Object) {                                                                                              // 12575\n      throw $parseMinErr('isecobj',                                                                                    // 12576\n          'Referencing Object in Angular expressions is disallowed! Expression: {0}',                                  // 12577\n          fullExpression);                                                                                             // 12578\n    }                                                                                                                  // 12579\n  }                                                                                                                    // 12580\n  return obj;                                                                                                          // 12581\n}                                                                                                                      // 12582\n                                                                                                                       // 12583\nvar CALL = Function.prototype.call;                                                                                    // 12584\nvar APPLY = Function.prototype.apply;                                                                                  // 12585\nvar BIND = Function.prototype.bind;                                                                                    // 12586\n                                                                                                                       // 12587\nfunction ensureSafeFunction(obj, fullExpression) {                                                                     // 12588\n  if (obj) {                                                                                                           // 12589\n    if (obj.constructor === obj) {                                                                                     // 12590\n      throw $parseMinErr('isecfn',                                                                                     // 12591\n        'Referencing Function in Angular expressions is disallowed! Expression: {0}',                                  // 12592\n        fullExpression);                                                                                               // 12593\n    } else if (obj === CALL || obj === APPLY || obj === BIND) {                                                        // 12594\n      throw $parseMinErr('isecff',                                                                                     // 12595\n        'Referencing call, apply or bind in Angular expressions is disallowed! Expression: {0}',                       // 12596\n        fullExpression);                                                                                               // 12597\n    }                                                                                                                  // 12598\n  }                                                                                                                    // 12599\n}                                                                                                                      // 12600\n                                                                                                                       // 12601\nfunction ensureSafeAssignContext(obj, fullExpression) {                                                                // 12602\n  if (obj) {                                                                                                           // 12603\n    if (obj === (0).constructor || obj === (false).constructor || obj === ''.constructor ||                            // 12604\n        obj === {}.constructor || obj === [].constructor || obj === Function.constructor) {                            // 12605\n      throw $parseMinErr('isecaf',                                                                                     // 12606\n        'Assigning to a constructor is disallowed! Expression: {0}', fullExpression);                                  // 12607\n    }                                                                                                                  // 12608\n  }                                                                                                                    // 12609\n}                                                                                                                      // 12610\n                                                                                                                       // 12611\nvar OPERATORS = createMap();                                                                                           // 12612\nforEach('+ - * / % === !== == != < > <= >= && || ! = |'.split(' '), function(operator) { OPERATORS[operator] = true; });\nvar ESCAPE = {\"n\":\"\\n\", \"f\":\"\\f\", \"r\":\"\\r\", \"t\":\"\\t\", \"v\":\"\\v\", \"'\":\"'\", '\"':'\"'};                                     // 12614\n                                                                                                                       // 12615\n                                                                                                                       // 12616\n/////////////////////////////////////////                                                                              // 12617\n                                                                                                                       // 12618\n                                                                                                                       // 12619\n/**                                                                                                                    // 12620\n * @constructor                                                                                                        // 12621\n */                                                                                                                    // 12622\nvar Lexer = function(options) {                                                                                        // 12623\n  this.options = options;                                                                                              // 12624\n};                                                                                                                     // 12625\n                                                                                                                       // 12626\nLexer.prototype = {                                                                                                    // 12627\n  constructor: Lexer,                                                                                                  // 12628\n                                                                                                                       // 12629\n  lex: function(text) {                                                                                                // 12630\n    this.text = text;                                                                                                  // 12631\n    this.index = 0;                                                                                                    // 12632\n    this.tokens = [];                                                                                                  // 12633\n                                                                                                                       // 12634\n    while (this.index < this.text.length) {                                                                            // 12635\n      var ch = this.text.charAt(this.index);                                                                           // 12636\n      if (ch === '\"' || ch === \"'\") {                                                                                  // 12637\n        this.readString(ch);                                                                                           // 12638\n      } else if (this.isNumber(ch) || ch === '.' && this.isNumber(this.peek())) {                                      // 12639\n        this.readNumber();                                                                                             // 12640\n      } else if (this.isIdent(ch)) {                                                                                   // 12641\n        this.readIdent();                                                                                              // 12642\n      } else if (this.is(ch, '(){}[].,;:?')) {                                                                         // 12643\n        this.tokens.push({index: this.index, text: ch});                                                               // 12644\n        this.index++;                                                                                                  // 12645\n      } else if (this.isWhitespace(ch)) {                                                                              // 12646\n        this.index++;                                                                                                  // 12647\n      } else {                                                                                                         // 12648\n        var ch2 = ch + this.peek();                                                                                    // 12649\n        var ch3 = ch2 + this.peek(2);                                                                                  // 12650\n        var op1 = OPERATORS[ch];                                                                                       // 12651\n        var op2 = OPERATORS[ch2];                                                                                      // 12652\n        var op3 = OPERATORS[ch3];                                                                                      // 12653\n        if (op1 || op2 || op3) {                                                                                       // 12654\n          var token = op3 ? ch3 : (op2 ? ch2 : ch);                                                                    // 12655\n          this.tokens.push({index: this.index, text: token, operator: true});                                          // 12656\n          this.index += token.length;                                                                                  // 12657\n        } else {                                                                                                       // 12658\n          this.throwError('Unexpected next character ', this.index, this.index + 1);                                   // 12659\n        }                                                                                                              // 12660\n      }                                                                                                                // 12661\n    }                                                                                                                  // 12662\n    return this.tokens;                                                                                                // 12663\n  },                                                                                                                   // 12664\n                                                                                                                       // 12665\n  is: function(ch, chars) {                                                                                            // 12666\n    return chars.indexOf(ch) !== -1;                                                                                   // 12667\n  },                                                                                                                   // 12668\n                                                                                                                       // 12669\n  peek: function(i) {                                                                                                  // 12670\n    var num = i || 1;                                                                                                  // 12671\n    return (this.index + num < this.text.length) ? this.text.charAt(this.index + num) : false;                         // 12672\n  },                                                                                                                   // 12673\n                                                                                                                       // 12674\n  isNumber: function(ch) {                                                                                             // 12675\n    return ('0' <= ch && ch <= '9') && typeof ch === \"string\";                                                         // 12676\n  },                                                                                                                   // 12677\n                                                                                                                       // 12678\n  isWhitespace: function(ch) {                                                                                         // 12679\n    // IE treats non-breaking space as \\u00A0                                                                          // 12680\n    return (ch === ' ' || ch === '\\r' || ch === '\\t' ||                                                                // 12681\n            ch === '\\n' || ch === '\\v' || ch === '\\u00A0');                                                            // 12682\n  },                                                                                                                   // 12683\n                                                                                                                       // 12684\n  isIdent: function(ch) {                                                                                              // 12685\n    return ('a' <= ch && ch <= 'z' ||                                                                                  // 12686\n            'A' <= ch && ch <= 'Z' ||                                                                                  // 12687\n            '_' === ch || ch === '$');                                                                                 // 12688\n  },                                                                                                                   // 12689\n                                                                                                                       // 12690\n  isExpOperator: function(ch) {                                                                                        // 12691\n    return (ch === '-' || ch === '+' || this.isNumber(ch));                                                            // 12692\n  },                                                                                                                   // 12693\n                                                                                                                       // 12694\n  throwError: function(error, start, end) {                                                                            // 12695\n    end = end || this.index;                                                                                           // 12696\n    var colStr = (isDefined(start)                                                                                     // 12697\n            ? 's ' + start +  '-' + this.index + ' [' + this.text.substring(start, end) + ']'                          // 12698\n            : ' ' + end);                                                                                              // 12699\n    throw $parseMinErr('lexerr', 'Lexer Error: {0} at column{1} in expression [{2}].',                                 // 12700\n        error, colStr, this.text);                                                                                     // 12701\n  },                                                                                                                   // 12702\n                                                                                                                       // 12703\n  readNumber: function() {                                                                                             // 12704\n    var number = '';                                                                                                   // 12705\n    var start = this.index;                                                                                            // 12706\n    while (this.index < this.text.length) {                                                                            // 12707\n      var ch = lowercase(this.text.charAt(this.index));                                                                // 12708\n      if (ch == '.' || this.isNumber(ch)) {                                                                            // 12709\n        number += ch;                                                                                                  // 12710\n      } else {                                                                                                         // 12711\n        var peekCh = this.peek();                                                                                      // 12712\n        if (ch == 'e' && this.isExpOperator(peekCh)) {                                                                 // 12713\n          number += ch;                                                                                                // 12714\n        } else if (this.isExpOperator(ch) &&                                                                           // 12715\n            peekCh && this.isNumber(peekCh) &&                                                                         // 12716\n            number.charAt(number.length - 1) == 'e') {                                                                 // 12717\n          number += ch;                                                                                                // 12718\n        } else if (this.isExpOperator(ch) &&                                                                           // 12719\n            (!peekCh || !this.isNumber(peekCh)) &&                                                                     // 12720\n            number.charAt(number.length - 1) == 'e') {                                                                 // 12721\n          this.throwError('Invalid exponent');                                                                         // 12722\n        } else {                                                                                                       // 12723\n          break;                                                                                                       // 12724\n        }                                                                                                              // 12725\n      }                                                                                                                // 12726\n      this.index++;                                                                                                    // 12727\n    }                                                                                                                  // 12728\n    this.tokens.push({                                                                                                 // 12729\n      index: start,                                                                                                    // 12730\n      text: number,                                                                                                    // 12731\n      constant: true,                                                                                                  // 12732\n      value: Number(number)                                                                                            // 12733\n    });                                                                                                                // 12734\n  },                                                                                                                   // 12735\n                                                                                                                       // 12736\n  readIdent: function() {                                                                                              // 12737\n    var start = this.index;                                                                                            // 12738\n    while (this.index < this.text.length) {                                                                            // 12739\n      var ch = this.text.charAt(this.index);                                                                           // 12740\n      if (!(this.isIdent(ch) || this.isNumber(ch))) {                                                                  // 12741\n        break;                                                                                                         // 12742\n      }                                                                                                                // 12743\n      this.index++;                                                                                                    // 12744\n    }                                                                                                                  // 12745\n    this.tokens.push({                                                                                                 // 12746\n      index: start,                                                                                                    // 12747\n      text: this.text.slice(start, this.index),                                                                        // 12748\n      identifier: true                                                                                                 // 12749\n    });                                                                                                                // 12750\n  },                                                                                                                   // 12751\n                                                                                                                       // 12752\n  readString: function(quote) {                                                                                        // 12753\n    var start = this.index;                                                                                            // 12754\n    this.index++;                                                                                                      // 12755\n    var string = '';                                                                                                   // 12756\n    var rawString = quote;                                                                                             // 12757\n    var escape = false;                                                                                                // 12758\n    while (this.index < this.text.length) {                                                                            // 12759\n      var ch = this.text.charAt(this.index);                                                                           // 12760\n      rawString += ch;                                                                                                 // 12761\n      if (escape) {                                                                                                    // 12762\n        if (ch === 'u') {                                                                                              // 12763\n          var hex = this.text.substring(this.index + 1, this.index + 5);                                               // 12764\n          if (!hex.match(/[\\da-f]{4}/i)) {                                                                             // 12765\n            this.throwError('Invalid unicode escape [\\\\u' + hex + ']');                                                // 12766\n          }                                                                                                            // 12767\n          this.index += 4;                                                                                             // 12768\n          string += String.fromCharCode(parseInt(hex, 16));                                                            // 12769\n        } else {                                                                                                       // 12770\n          var rep = ESCAPE[ch];                                                                                        // 12771\n          string = string + (rep || ch);                                                                               // 12772\n        }                                                                                                              // 12773\n        escape = false;                                                                                                // 12774\n      } else if (ch === '\\\\') {                                                                                        // 12775\n        escape = true;                                                                                                 // 12776\n      } else if (ch === quote) {                                                                                       // 12777\n        this.index++;                                                                                                  // 12778\n        this.tokens.push({                                                                                             // 12779\n          index: start,                                                                                                // 12780\n          text: rawString,                                                                                             // 12781\n          constant: true,                                                                                              // 12782\n          value: string                                                                                                // 12783\n        });                                                                                                            // 12784\n        return;                                                                                                        // 12785\n      } else {                                                                                                         // 12786\n        string += ch;                                                                                                  // 12787\n      }                                                                                                                // 12788\n      this.index++;                                                                                                    // 12789\n    }                                                                                                                  // 12790\n    this.throwError('Unterminated quote', start);                                                                      // 12791\n  }                                                                                                                    // 12792\n};                                                                                                                     // 12793\n                                                                                                                       // 12794\nvar AST = function(lexer, options) {                                                                                   // 12795\n  this.lexer = lexer;                                                                                                  // 12796\n  this.options = options;                                                                                              // 12797\n};                                                                                                                     // 12798\n                                                                                                                       // 12799\nAST.Program = 'Program';                                                                                               // 12800\nAST.ExpressionStatement = 'ExpressionStatement';                                                                       // 12801\nAST.AssignmentExpression = 'AssignmentExpression';                                                                     // 12802\nAST.ConditionalExpression = 'ConditionalExpression';                                                                   // 12803\nAST.LogicalExpression = 'LogicalExpression';                                                                           // 12804\nAST.BinaryExpression = 'BinaryExpression';                                                                             // 12805\nAST.UnaryExpression = 'UnaryExpression';                                                                               // 12806\nAST.CallExpression = 'CallExpression';                                                                                 // 12807\nAST.MemberExpression = 'MemberExpression';                                                                             // 12808\nAST.Identifier = 'Identifier';                                                                                         // 12809\nAST.Literal = 'Literal';                                                                                               // 12810\nAST.ArrayExpression = 'ArrayExpression';                                                                               // 12811\nAST.Property = 'Property';                                                                                             // 12812\nAST.ObjectExpression = 'ObjectExpression';                                                                             // 12813\nAST.ThisExpression = 'ThisExpression';                                                                                 // 12814\n                                                                                                                       // 12815\n// Internal use only                                                                                                   // 12816\nAST.NGValueParameter = 'NGValueParameter';                                                                             // 12817\n                                                                                                                       // 12818\nAST.prototype = {                                                                                                      // 12819\n  ast: function(text) {                                                                                                // 12820\n    this.text = text;                                                                                                  // 12821\n    this.tokens = this.lexer.lex(text);                                                                                // 12822\n                                                                                                                       // 12823\n    var value = this.program();                                                                                        // 12824\n                                                                                                                       // 12825\n    if (this.tokens.length !== 0) {                                                                                    // 12826\n      this.throwError('is an unexpected token', this.tokens[0]);                                                       // 12827\n    }                                                                                                                  // 12828\n                                                                                                                       // 12829\n    return value;                                                                                                      // 12830\n  },                                                                                                                   // 12831\n                                                                                                                       // 12832\n  program: function() {                                                                                                // 12833\n    var body = [];                                                                                                     // 12834\n    while (true) {                                                                                                     // 12835\n      if (this.tokens.length > 0 && !this.peek('}', ')', ';', ']'))                                                    // 12836\n        body.push(this.expressionStatement());                                                                         // 12837\n      if (!this.expect(';')) {                                                                                         // 12838\n        return { type: AST.Program, body: body};                                                                       // 12839\n      }                                                                                                                // 12840\n    }                                                                                                                  // 12841\n  },                                                                                                                   // 12842\n                                                                                                                       // 12843\n  expressionStatement: function() {                                                                                    // 12844\n    return { type: AST.ExpressionStatement, expression: this.filterChain() };                                          // 12845\n  },                                                                                                                   // 12846\n                                                                                                                       // 12847\n  filterChain: function() {                                                                                            // 12848\n    var left = this.expression();                                                                                      // 12849\n    var token;                                                                                                         // 12850\n    while ((token = this.expect('|'))) {                                                                               // 12851\n      left = this.filter(left);                                                                                        // 12852\n    }                                                                                                                  // 12853\n    return left;                                                                                                       // 12854\n  },                                                                                                                   // 12855\n                                                                                                                       // 12856\n  expression: function() {                                                                                             // 12857\n    return this.assignment();                                                                                          // 12858\n  },                                                                                                                   // 12859\n                                                                                                                       // 12860\n  assignment: function() {                                                                                             // 12861\n    var result = this.ternary();                                                                                       // 12862\n    if (this.expect('=')) {                                                                                            // 12863\n      result = { type: AST.AssignmentExpression, left: result, right: this.assignment(), operator: '='};               // 12864\n    }                                                                                                                  // 12865\n    return result;                                                                                                     // 12866\n  },                                                                                                                   // 12867\n                                                                                                                       // 12868\n  ternary: function() {                                                                                                // 12869\n    var test = this.logicalOR();                                                                                       // 12870\n    var alternate;                                                                                                     // 12871\n    var consequent;                                                                                                    // 12872\n    if (this.expect('?')) {                                                                                            // 12873\n      alternate = this.expression();                                                                                   // 12874\n      if (this.consume(':')) {                                                                                         // 12875\n        consequent = this.expression();                                                                                // 12876\n        return { type: AST.ConditionalExpression, test: test, alternate: alternate, consequent: consequent};           // 12877\n      }                                                                                                                // 12878\n    }                                                                                                                  // 12879\n    return test;                                                                                                       // 12880\n  },                                                                                                                   // 12881\n                                                                                                                       // 12882\n  logicalOR: function() {                                                                                              // 12883\n    var left = this.logicalAND();                                                                                      // 12884\n    while (this.expect('||')) {                                                                                        // 12885\n      left = { type: AST.LogicalExpression, operator: '||', left: left, right: this.logicalAND() };                    // 12886\n    }                                                                                                                  // 12887\n    return left;                                                                                                       // 12888\n  },                                                                                                                   // 12889\n                                                                                                                       // 12890\n  logicalAND: function() {                                                                                             // 12891\n    var left = this.equality();                                                                                        // 12892\n    while (this.expect('&&')) {                                                                                        // 12893\n      left = { type: AST.LogicalExpression, operator: '&&', left: left, right: this.equality()};                       // 12894\n    }                                                                                                                  // 12895\n    return left;                                                                                                       // 12896\n  },                                                                                                                   // 12897\n                                                                                                                       // 12898\n  equality: function() {                                                                                               // 12899\n    var left = this.relational();                                                                                      // 12900\n    var token;                                                                                                         // 12901\n    while ((token = this.expect('==','!=','===','!=='))) {                                                             // 12902\n      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.relational() };               // 12903\n    }                                                                                                                  // 12904\n    return left;                                                                                                       // 12905\n  },                                                                                                                   // 12906\n                                                                                                                       // 12907\n  relational: function() {                                                                                             // 12908\n    var left = this.additive();                                                                                        // 12909\n    var token;                                                                                                         // 12910\n    while ((token = this.expect('<', '>', '<=', '>='))) {                                                              // 12911\n      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.additive() };                 // 12912\n    }                                                                                                                  // 12913\n    return left;                                                                                                       // 12914\n  },                                                                                                                   // 12915\n                                                                                                                       // 12916\n  additive: function() {                                                                                               // 12917\n    var left = this.multiplicative();                                                                                  // 12918\n    var token;                                                                                                         // 12919\n    while ((token = this.expect('+','-'))) {                                                                           // 12920\n      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.multiplicative() };           // 12921\n    }                                                                                                                  // 12922\n    return left;                                                                                                       // 12923\n  },                                                                                                                   // 12924\n                                                                                                                       // 12925\n  multiplicative: function() {                                                                                         // 12926\n    var left = this.unary();                                                                                           // 12927\n    var token;                                                                                                         // 12928\n    while ((token = this.expect('*','/','%'))) {                                                                       // 12929\n      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.unary() };                    // 12930\n    }                                                                                                                  // 12931\n    return left;                                                                                                       // 12932\n  },                                                                                                                   // 12933\n                                                                                                                       // 12934\n  unary: function() {                                                                                                  // 12935\n    var token;                                                                                                         // 12936\n    if ((token = this.expect('+', '-', '!'))) {                                                                        // 12937\n      return { type: AST.UnaryExpression, operator: token.text, prefix: true, argument: this.unary() };                // 12938\n    } else {                                                                                                           // 12939\n      return this.primary();                                                                                           // 12940\n    }                                                                                                                  // 12941\n  },                                                                                                                   // 12942\n                                                                                                                       // 12943\n  primary: function() {                                                                                                // 12944\n    var primary;                                                                                                       // 12945\n    if (this.expect('(')) {                                                                                            // 12946\n      primary = this.filterChain();                                                                                    // 12947\n      this.consume(')');                                                                                               // 12948\n    } else if (this.expect('[')) {                                                                                     // 12949\n      primary = this.arrayDeclaration();                                                                               // 12950\n    } else if (this.expect('{')) {                                                                                     // 12951\n      primary = this.object();                                                                                         // 12952\n    } else if (this.constants.hasOwnProperty(this.peek().text)) {                                                      // 12953\n      primary = copy(this.constants[this.consume().text]);                                                             // 12954\n    } else if (this.peek().identifier) {                                                                               // 12955\n      primary = this.identifier();                                                                                     // 12956\n    } else if (this.peek().constant) {                                                                                 // 12957\n      primary = this.constant();                                                                                       // 12958\n    } else {                                                                                                           // 12959\n      this.throwError('not a primary expression', this.peek());                                                        // 12960\n    }                                                                                                                  // 12961\n                                                                                                                       // 12962\n    var next;                                                                                                          // 12963\n    while ((next = this.expect('(', '[', '.'))) {                                                                      // 12964\n      if (next.text === '(') {                                                                                         // 12965\n        primary = {type: AST.CallExpression, callee: primary, arguments: this.parseArguments() };                      // 12966\n        this.consume(')');                                                                                             // 12967\n      } else if (next.text === '[') {                                                                                  // 12968\n        primary = { type: AST.MemberExpression, object: primary, property: this.expression(), computed: true };        // 12969\n        this.consume(']');                                                                                             // 12970\n      } else if (next.text === '.') {                                                                                  // 12971\n        primary = { type: AST.MemberExpression, object: primary, property: this.identifier(), computed: false };       // 12972\n      } else {                                                                                                         // 12973\n        this.throwError('IMPOSSIBLE');                                                                                 // 12974\n      }                                                                                                                // 12975\n    }                                                                                                                  // 12976\n    return primary;                                                                                                    // 12977\n  },                                                                                                                   // 12978\n                                                                                                                       // 12979\n  filter: function(baseExpression) {                                                                                   // 12980\n    var args = [baseExpression];                                                                                       // 12981\n    var result = {type: AST.CallExpression, callee: this.identifier(), arguments: args, filter: true};                 // 12982\n                                                                                                                       // 12983\n    while (this.expect(':')) {                                                                                         // 12984\n      args.push(this.expression());                                                                                    // 12985\n    }                                                                                                                  // 12986\n                                                                                                                       // 12987\n    return result;                                                                                                     // 12988\n  },                                                                                                                   // 12989\n                                                                                                                       // 12990\n  parseArguments: function() {                                                                                         // 12991\n    var args = [];                                                                                                     // 12992\n    if (this.peekToken().text !== ')') {                                                                               // 12993\n      do {                                                                                                             // 12994\n        args.push(this.expression());                                                                                  // 12995\n      } while (this.expect(','));                                                                                      // 12996\n    }                                                                                                                  // 12997\n    return args;                                                                                                       // 12998\n  },                                                                                                                   // 12999\n                                                                                                                       // 13000\n  identifier: function() {                                                                                             // 13001\n    var token = this.consume();                                                                                        // 13002\n    if (!token.identifier) {                                                                                           // 13003\n      this.throwError('is not a valid identifier', token);                                                             // 13004\n    }                                                                                                                  // 13005\n    return { type: AST.Identifier, name: token.text };                                                                 // 13006\n  },                                                                                                                   // 13007\n                                                                                                                       // 13008\n  constant: function() {                                                                                               // 13009\n    // TODO check that it is a constant                                                                                // 13010\n    return { type: AST.Literal, value: this.consume().value };                                                         // 13011\n  },                                                                                                                   // 13012\n                                                                                                                       // 13013\n  arrayDeclaration: function() {                                                                                       // 13014\n    var elements = [];                                                                                                 // 13015\n    if (this.peekToken().text !== ']') {                                                                               // 13016\n      do {                                                                                                             // 13017\n        if (this.peek(']')) {                                                                                          // 13018\n          // Support trailing commas per ES5.1.                                                                        // 13019\n          break;                                                                                                       // 13020\n        }                                                                                                              // 13021\n        elements.push(this.expression());                                                                              // 13022\n      } while (this.expect(','));                                                                                      // 13023\n    }                                                                                                                  // 13024\n    this.consume(']');                                                                                                 // 13025\n                                                                                                                       // 13026\n    return { type: AST.ArrayExpression, elements: elements };                                                          // 13027\n  },                                                                                                                   // 13028\n                                                                                                                       // 13029\n  object: function() {                                                                                                 // 13030\n    var properties = [], property;                                                                                     // 13031\n    if (this.peekToken().text !== '}') {                                                                               // 13032\n      do {                                                                                                             // 13033\n        if (this.peek('}')) {                                                                                          // 13034\n          // Support trailing commas per ES5.1.                                                                        // 13035\n          break;                                                                                                       // 13036\n        }                                                                                                              // 13037\n        property = {type: AST.Property, kind: 'init'};                                                                 // 13038\n        if (this.peek().constant) {                                                                                    // 13039\n          property.key = this.constant();                                                                              // 13040\n        } else if (this.peek().identifier) {                                                                           // 13041\n          property.key = this.identifier();                                                                            // 13042\n        } else {                                                                                                       // 13043\n          this.throwError(\"invalid key\", this.peek());                                                                 // 13044\n        }                                                                                                              // 13045\n        this.consume(':');                                                                                             // 13046\n        property.value = this.expression();                                                                            // 13047\n        properties.push(property);                                                                                     // 13048\n      } while (this.expect(','));                                                                                      // 13049\n    }                                                                                                                  // 13050\n    this.consume('}');                                                                                                 // 13051\n                                                                                                                       // 13052\n    return {type: AST.ObjectExpression, properties: properties };                                                      // 13053\n  },                                                                                                                   // 13054\n                                                                                                                       // 13055\n  throwError: function(msg, token) {                                                                                   // 13056\n    throw $parseMinErr('syntax',                                                                                       // 13057\n        'Syntax Error: Token \\'{0}\\' {1} at column {2} of the expression [{3}] starting at [{4}].',                    // 13058\n          token.text, msg, (token.index + 1), this.text, this.text.substring(token.index));                            // 13059\n  },                                                                                                                   // 13060\n                                                                                                                       // 13061\n  consume: function(e1) {                                                                                              // 13062\n    if (this.tokens.length === 0) {                                                                                    // 13063\n      throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);                                      // 13064\n    }                                                                                                                  // 13065\n                                                                                                                       // 13066\n    var token = this.expect(e1);                                                                                       // 13067\n    if (!token) {                                                                                                      // 13068\n      this.throwError('is unexpected, expecting [' + e1 + ']', this.peek());                                           // 13069\n    }                                                                                                                  // 13070\n    return token;                                                                                                      // 13071\n  },                                                                                                                   // 13072\n                                                                                                                       // 13073\n  peekToken: function() {                                                                                              // 13074\n    if (this.tokens.length === 0) {                                                                                    // 13075\n      throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);                                      // 13076\n    }                                                                                                                  // 13077\n    return this.tokens[0];                                                                                             // 13078\n  },                                                                                                                   // 13079\n                                                                                                                       // 13080\n  peek: function(e1, e2, e3, e4) {                                                                                     // 13081\n    return this.peekAhead(0, e1, e2, e3, e4);                                                                          // 13082\n  },                                                                                                                   // 13083\n                                                                                                                       // 13084\n  peekAhead: function(i, e1, e2, e3, e4) {                                                                             // 13085\n    if (this.tokens.length > i) {                                                                                      // 13086\n      var token = this.tokens[i];                                                                                      // 13087\n      var t = token.text;                                                                                              // 13088\n      if (t === e1 || t === e2 || t === e3 || t === e4 ||                                                              // 13089\n          (!e1 && !e2 && !e3 && !e4)) {                                                                                // 13090\n        return token;                                                                                                  // 13091\n      }                                                                                                                // 13092\n    }                                                                                                                  // 13093\n    return false;                                                                                                      // 13094\n  },                                                                                                                   // 13095\n                                                                                                                       // 13096\n  expect: function(e1, e2, e3, e4) {                                                                                   // 13097\n    var token = this.peek(e1, e2, e3, e4);                                                                             // 13098\n    if (token) {                                                                                                       // 13099\n      this.tokens.shift();                                                                                             // 13100\n      return token;                                                                                                    // 13101\n    }                                                                                                                  // 13102\n    return false;                                                                                                      // 13103\n  },                                                                                                                   // 13104\n                                                                                                                       // 13105\n                                                                                                                       // 13106\n  /* `undefined` is not a constant, it is an identifier,                                                               // 13107\n   * but using it as an identifier is not supported                                                                    // 13108\n   */                                                                                                                  // 13109\n  constants: {                                                                                                         // 13110\n    'true': { type: AST.Literal, value: true },                                                                        // 13111\n    'false': { type: AST.Literal, value: false },                                                                      // 13112\n    'null': { type: AST.Literal, value: null },                                                                        // 13113\n    'undefined': {type: AST.Literal, value: undefined },                                                               // 13114\n    'this': {type: AST.ThisExpression }                                                                                // 13115\n  }                                                                                                                    // 13116\n};                                                                                                                     // 13117\n                                                                                                                       // 13118\nfunction ifDefined(v, d) {                                                                                             // 13119\n  return typeof v !== 'undefined' ? v : d;                                                                             // 13120\n}                                                                                                                      // 13121\n                                                                                                                       // 13122\nfunction plusFn(l, r) {                                                                                                // 13123\n  if (typeof l === 'undefined') return r;                                                                              // 13124\n  if (typeof r === 'undefined') return l;                                                                              // 13125\n  return l + r;                                                                                                        // 13126\n}                                                                                                                      // 13127\n                                                                                                                       // 13128\nfunction isStateless($filter, filterName) {                                                                            // 13129\n  var fn = $filter(filterName);                                                                                        // 13130\n  return !fn.$stateful;                                                                                                // 13131\n}                                                                                                                      // 13132\n                                                                                                                       // 13133\nfunction findConstantAndWatchExpressions(ast, $filter) {                                                               // 13134\n  var allConstants;                                                                                                    // 13135\n  var argsToWatch;                                                                                                     // 13136\n  switch (ast.type) {                                                                                                  // 13137\n  case AST.Program:                                                                                                    // 13138\n    allConstants = true;                                                                                               // 13139\n    forEach(ast.body, function(expr) {                                                                                 // 13140\n      findConstantAndWatchExpressions(expr.expression, $filter);                                                       // 13141\n      allConstants = allConstants && expr.expression.constant;                                                         // 13142\n    });                                                                                                                // 13143\n    ast.constant = allConstants;                                                                                       // 13144\n    break;                                                                                                             // 13145\n  case AST.Literal:                                                                                                    // 13146\n    ast.constant = true;                                                                                               // 13147\n    ast.toWatch = [];                                                                                                  // 13148\n    break;                                                                                                             // 13149\n  case AST.UnaryExpression:                                                                                            // 13150\n    findConstantAndWatchExpressions(ast.argument, $filter);                                                            // 13151\n    ast.constant = ast.argument.constant;                                                                              // 13152\n    ast.toWatch = ast.argument.toWatch;                                                                                // 13153\n    break;                                                                                                             // 13154\n  case AST.BinaryExpression:                                                                                           // 13155\n    findConstantAndWatchExpressions(ast.left, $filter);                                                                // 13156\n    findConstantAndWatchExpressions(ast.right, $filter);                                                               // 13157\n    ast.constant = ast.left.constant && ast.right.constant;                                                            // 13158\n    ast.toWatch = ast.left.toWatch.concat(ast.right.toWatch);                                                          // 13159\n    break;                                                                                                             // 13160\n  case AST.LogicalExpression:                                                                                          // 13161\n    findConstantAndWatchExpressions(ast.left, $filter);                                                                // 13162\n    findConstantAndWatchExpressions(ast.right, $filter);                                                               // 13163\n    ast.constant = ast.left.constant && ast.right.constant;                                                            // 13164\n    ast.toWatch = ast.constant ? [] : [ast];                                                                           // 13165\n    break;                                                                                                             // 13166\n  case AST.ConditionalExpression:                                                                                      // 13167\n    findConstantAndWatchExpressions(ast.test, $filter);                                                                // 13168\n    findConstantAndWatchExpressions(ast.alternate, $filter);                                                           // 13169\n    findConstantAndWatchExpressions(ast.consequent, $filter);                                                          // 13170\n    ast.constant = ast.test.constant && ast.alternate.constant && ast.consequent.constant;                             // 13171\n    ast.toWatch = ast.constant ? [] : [ast];                                                                           // 13172\n    break;                                                                                                             // 13173\n  case AST.Identifier:                                                                                                 // 13174\n    ast.constant = false;                                                                                              // 13175\n    ast.toWatch = [ast];                                                                                               // 13176\n    break;                                                                                                             // 13177\n  case AST.MemberExpression:                                                                                           // 13178\n    findConstantAndWatchExpressions(ast.object, $filter);                                                              // 13179\n    if (ast.computed) {                                                                                                // 13180\n      findConstantAndWatchExpressions(ast.property, $filter);                                                          // 13181\n    }                                                                                                                  // 13182\n    ast.constant = ast.object.constant && (!ast.computed || ast.property.constant);                                    // 13183\n    ast.toWatch = [ast];                                                                                               // 13184\n    break;                                                                                                             // 13185\n  case AST.CallExpression:                                                                                             // 13186\n    allConstants = ast.filter ? isStateless($filter, ast.callee.name) : false;                                         // 13187\n    argsToWatch = [];                                                                                                  // 13188\n    forEach(ast.arguments, function(expr) {                                                                            // 13189\n      findConstantAndWatchExpressions(expr, $filter);                                                                  // 13190\n      allConstants = allConstants && expr.constant;                                                                    // 13191\n      if (!expr.constant) {                                                                                            // 13192\n        argsToWatch.push.apply(argsToWatch, expr.toWatch);                                                             // 13193\n      }                                                                                                                // 13194\n    });                                                                                                                // 13195\n    ast.constant = allConstants;                                                                                       // 13196\n    ast.toWatch = ast.filter && isStateless($filter, ast.callee.name) ? argsToWatch : [ast];                           // 13197\n    break;                                                                                                             // 13198\n  case AST.AssignmentExpression:                                                                                       // 13199\n    findConstantAndWatchExpressions(ast.left, $filter);                                                                // 13200\n    findConstantAndWatchExpressions(ast.right, $filter);                                                               // 13201\n    ast.constant = ast.left.constant && ast.right.constant;                                                            // 13202\n    ast.toWatch = [ast];                                                                                               // 13203\n    break;                                                                                                             // 13204\n  case AST.ArrayExpression:                                                                                            // 13205\n    allConstants = true;                                                                                               // 13206\n    argsToWatch = [];                                                                                                  // 13207\n    forEach(ast.elements, function(expr) {                                                                             // 13208\n      findConstantAndWatchExpressions(expr, $filter);                                                                  // 13209\n      allConstants = allConstants && expr.constant;                                                                    // 13210\n      if (!expr.constant) {                                                                                            // 13211\n        argsToWatch.push.apply(argsToWatch, expr.toWatch);                                                             // 13212\n      }                                                                                                                // 13213\n    });                                                                                                                // 13214\n    ast.constant = allConstants;                                                                                       // 13215\n    ast.toWatch = argsToWatch;                                                                                         // 13216\n    break;                                                                                                             // 13217\n  case AST.ObjectExpression:                                                                                           // 13218\n    allConstants = true;                                                                                               // 13219\n    argsToWatch = [];                                                                                                  // 13220\n    forEach(ast.properties, function(property) {                                                                       // 13221\n      findConstantAndWatchExpressions(property.value, $filter);                                                        // 13222\n      allConstants = allConstants && property.value.constant;                                                          // 13223\n      if (!property.value.constant) {                                                                                  // 13224\n        argsToWatch.push.apply(argsToWatch, property.value.toWatch);                                                   // 13225\n      }                                                                                                                // 13226\n    });                                                                                                                // 13227\n    ast.constant = allConstants;                                                                                       // 13228\n    ast.toWatch = argsToWatch;                                                                                         // 13229\n    break;                                                                                                             // 13230\n  case AST.ThisExpression:                                                                                             // 13231\n    ast.constant = false;                                                                                              // 13232\n    ast.toWatch = [];                                                                                                  // 13233\n    break;                                                                                                             // 13234\n  }                                                                                                                    // 13235\n}                                                                                                                      // 13236\n                                                                                                                       // 13237\nfunction getInputs(body) {                                                                                             // 13238\n  if (body.length != 1) return;                                                                                        // 13239\n  var lastExpression = body[0].expression;                                                                             // 13240\n  var candidate = lastExpression.toWatch;                                                                              // 13241\n  if (candidate.length !== 1) return candidate;                                                                        // 13242\n  return candidate[0] !== lastExpression ? candidate : undefined;                                                      // 13243\n}                                                                                                                      // 13244\n                                                                                                                       // 13245\nfunction isAssignable(ast) {                                                                                           // 13246\n  return ast.type === AST.Identifier || ast.type === AST.MemberExpression;                                             // 13247\n}                                                                                                                      // 13248\n                                                                                                                       // 13249\nfunction assignableAST(ast) {                                                                                          // 13250\n  if (ast.body.length === 1 && isAssignable(ast.body[0].expression)) {                                                 // 13251\n    return {type: AST.AssignmentExpression, left: ast.body[0].expression, right: {type: AST.NGValueParameter}, operator: '='};\n  }                                                                                                                    // 13253\n}                                                                                                                      // 13254\n                                                                                                                       // 13255\nfunction isLiteral(ast) {                                                                                              // 13256\n  return ast.body.length === 0 ||                                                                                      // 13257\n      ast.body.length === 1 && (                                                                                       // 13258\n      ast.body[0].expression.type === AST.Literal ||                                                                   // 13259\n      ast.body[0].expression.type === AST.ArrayExpression ||                                                           // 13260\n      ast.body[0].expression.type === AST.ObjectExpression);                                                           // 13261\n}                                                                                                                      // 13262\n                                                                                                                       // 13263\nfunction isConstant(ast) {                                                                                             // 13264\n  return ast.constant;                                                                                                 // 13265\n}                                                                                                                      // 13266\n                                                                                                                       // 13267\nfunction ASTCompiler(astBuilder, $filter) {                                                                            // 13268\n  this.astBuilder = astBuilder;                                                                                        // 13269\n  this.$filter = $filter;                                                                                              // 13270\n}                                                                                                                      // 13271\n                                                                                                                       // 13272\nASTCompiler.prototype = {                                                                                              // 13273\n  compile: function(expression, expensiveChecks) {                                                                     // 13274\n    var self = this;                                                                                                   // 13275\n    var ast = this.astBuilder.ast(expression);                                                                         // 13276\n    this.state = {                                                                                                     // 13277\n      nextId: 0,                                                                                                       // 13278\n      filters: {},                                                                                                     // 13279\n      expensiveChecks: expensiveChecks,                                                                                // 13280\n      fn: {vars: [], body: [], own: {}},                                                                               // 13281\n      assign: {vars: [], body: [], own: {}},                                                                           // 13282\n      inputs: []                                                                                                       // 13283\n    };                                                                                                                 // 13284\n    findConstantAndWatchExpressions(ast, self.$filter);                                                                // 13285\n    var extra = '';                                                                                                    // 13286\n    var assignable;                                                                                                    // 13287\n    this.stage = 'assign';                                                                                             // 13288\n    if ((assignable = assignableAST(ast))) {                                                                           // 13289\n      this.state.computing = 'assign';                                                                                 // 13290\n      var result = this.nextId();                                                                                      // 13291\n      this.recurse(assignable, result);                                                                                // 13292\n      this.return_(result);                                                                                            // 13293\n      extra = 'fn.assign=' + this.generateFunction('assign', 's,v,l');                                                 // 13294\n    }                                                                                                                  // 13295\n    var toWatch = getInputs(ast.body);                                                                                 // 13296\n    self.stage = 'inputs';                                                                                             // 13297\n    forEach(toWatch, function(watch, key) {                                                                            // 13298\n      var fnKey = 'fn' + key;                                                                                          // 13299\n      self.state[fnKey] = {vars: [], body: [], own: {}};                                                               // 13300\n      self.state.computing = fnKey;                                                                                    // 13301\n      var intoId = self.nextId();                                                                                      // 13302\n      self.recurse(watch, intoId);                                                                                     // 13303\n      self.return_(intoId);                                                                                            // 13304\n      self.state.inputs.push(fnKey);                                                                                   // 13305\n      watch.watchId = key;                                                                                             // 13306\n    });                                                                                                                // 13307\n    this.state.computing = 'fn';                                                                                       // 13308\n    this.stage = 'main';                                                                                               // 13309\n    this.recurse(ast);                                                                                                 // 13310\n    var fnString =                                                                                                     // 13311\n      // The build and minification steps remove the string \"use strict\" from the code, but this is done using a regex.\n      // This is a workaround for this until we do a better job at only removing the prefix only when we should.       // 13313\n      '\"' + this.USE + ' ' + this.STRICT + '\";\\n' +                                                                    // 13314\n      this.filterPrefix() +                                                                                            // 13315\n      'var fn=' + this.generateFunction('fn', 's,l,a,i') +                                                             // 13316\n      extra +                                                                                                          // 13317\n      this.watchFns() +                                                                                                // 13318\n      'return fn;';                                                                                                    // 13319\n                                                                                                                       // 13320\n    /* jshint -W054 */                                                                                                 // 13321\n    var fn = (new Function('$filter',                                                                                  // 13322\n        'ensureSafeMemberName',                                                                                        // 13323\n        'ensureSafeObject',                                                                                            // 13324\n        'ensureSafeFunction',                                                                                          // 13325\n        'getStringValue',                                                                                              // 13326\n        'ensureSafeAssignContext',                                                                                     // 13327\n        'ifDefined',                                                                                                   // 13328\n        'plus',                                                                                                        // 13329\n        'text',                                                                                                        // 13330\n        fnString))(                                                                                                    // 13331\n          this.$filter,                                                                                                // 13332\n          ensureSafeMemberName,                                                                                        // 13333\n          ensureSafeObject,                                                                                            // 13334\n          ensureSafeFunction,                                                                                          // 13335\n          getStringValue,                                                                                              // 13336\n          ensureSafeAssignContext,                                                                                     // 13337\n          ifDefined,                                                                                                   // 13338\n          plusFn,                                                                                                      // 13339\n          expression);                                                                                                 // 13340\n    /* jshint +W054 */                                                                                                 // 13341\n    this.state = this.stage = undefined;                                                                               // 13342\n    fn.literal = isLiteral(ast);                                                                                       // 13343\n    fn.constant = isConstant(ast);                                                                                     // 13344\n    return fn;                                                                                                         // 13345\n  },                                                                                                                   // 13346\n                                                                                                                       // 13347\n  USE: 'use',                                                                                                          // 13348\n                                                                                                                       // 13349\n  STRICT: 'strict',                                                                                                    // 13350\n                                                                                                                       // 13351\n  watchFns: function() {                                                                                               // 13352\n    var result = [];                                                                                                   // 13353\n    var fns = this.state.inputs;                                                                                       // 13354\n    var self = this;                                                                                                   // 13355\n    forEach(fns, function(name) {                                                                                      // 13356\n      result.push('var ' + name + '=' + self.generateFunction(name, 's'));                                             // 13357\n    });                                                                                                                // 13358\n    if (fns.length) {                                                                                                  // 13359\n      result.push('fn.inputs=[' + fns.join(',') + '];');                                                               // 13360\n    }                                                                                                                  // 13361\n    return result.join('');                                                                                            // 13362\n  },                                                                                                                   // 13363\n                                                                                                                       // 13364\n  generateFunction: function(name, params) {                                                                           // 13365\n    return 'function(' + params + '){' +                                                                               // 13366\n        this.varsPrefix(name) +                                                                                        // 13367\n        this.body(name) +                                                                                              // 13368\n        '};';                                                                                                          // 13369\n  },                                                                                                                   // 13370\n                                                                                                                       // 13371\n  filterPrefix: function() {                                                                                           // 13372\n    var parts = [];                                                                                                    // 13373\n    var self = this;                                                                                                   // 13374\n    forEach(this.state.filters, function(id, filter) {                                                                 // 13375\n      parts.push(id + '=$filter(' + self.escape(filter) + ')');                                                        // 13376\n    });                                                                                                                // 13377\n    if (parts.length) return 'var ' + parts.join(',') + ';';                                                           // 13378\n    return '';                                                                                                         // 13379\n  },                                                                                                                   // 13380\n                                                                                                                       // 13381\n  varsPrefix: function(section) {                                                                                      // 13382\n    return this.state[section].vars.length ? 'var ' + this.state[section].vars.join(',') + ';' : '';                   // 13383\n  },                                                                                                                   // 13384\n                                                                                                                       // 13385\n  body: function(section) {                                                                                            // 13386\n    return this.state[section].body.join('');                                                                          // 13387\n  },                                                                                                                   // 13388\n                                                                                                                       // 13389\n  recurse: function(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck) {                                      // 13390\n    var left, right, self = this, args, expression;                                                                    // 13391\n    recursionFn = recursionFn || noop;                                                                                 // 13392\n    if (!skipWatchIdCheck && isDefined(ast.watchId)) {                                                                 // 13393\n      intoId = intoId || this.nextId();                                                                                // 13394\n      this.if_('i',                                                                                                    // 13395\n        this.lazyAssign(intoId, this.computedMember('i', ast.watchId)),                                                // 13396\n        this.lazyRecurse(ast, intoId, nameId, recursionFn, create, true)                                               // 13397\n      );                                                                                                               // 13398\n      return;                                                                                                          // 13399\n    }                                                                                                                  // 13400\n    switch (ast.type) {                                                                                                // 13401\n    case AST.Program:                                                                                                  // 13402\n      forEach(ast.body, function(expression, pos) {                                                                    // 13403\n        self.recurse(expression.expression, undefined, undefined, function(expr) { right = expr; });                   // 13404\n        if (pos !== ast.body.length - 1) {                                                                             // 13405\n          self.current().body.push(right, ';');                                                                        // 13406\n        } else {                                                                                                       // 13407\n          self.return_(right);                                                                                         // 13408\n        }                                                                                                              // 13409\n      });                                                                                                              // 13410\n      break;                                                                                                           // 13411\n    case AST.Literal:                                                                                                  // 13412\n      expression = this.escape(ast.value);                                                                             // 13413\n      this.assign(intoId, expression);                                                                                 // 13414\n      recursionFn(expression);                                                                                         // 13415\n      break;                                                                                                           // 13416\n    case AST.UnaryExpression:                                                                                          // 13417\n      this.recurse(ast.argument, undefined, undefined, function(expr) { right = expr; });                              // 13418\n      expression = ast.operator + '(' + this.ifDefined(right, 0) + ')';                                                // 13419\n      this.assign(intoId, expression);                                                                                 // 13420\n      recursionFn(expression);                                                                                         // 13421\n      break;                                                                                                           // 13422\n    case AST.BinaryExpression:                                                                                         // 13423\n      this.recurse(ast.left, undefined, undefined, function(expr) { left = expr; });                                   // 13424\n      this.recurse(ast.right, undefined, undefined, function(expr) { right = expr; });                                 // 13425\n      if (ast.operator === '+') {                                                                                      // 13426\n        expression = this.plus(left, right);                                                                           // 13427\n      } else if (ast.operator === '-') {                                                                               // 13428\n        expression = this.ifDefined(left, 0) + ast.operator + this.ifDefined(right, 0);                                // 13429\n      } else {                                                                                                         // 13430\n        expression = '(' + left + ')' + ast.operator + '(' + right + ')';                                              // 13431\n      }                                                                                                                // 13432\n      this.assign(intoId, expression);                                                                                 // 13433\n      recursionFn(expression);                                                                                         // 13434\n      break;                                                                                                           // 13435\n    case AST.LogicalExpression:                                                                                        // 13436\n      intoId = intoId || this.nextId();                                                                                // 13437\n      self.recurse(ast.left, intoId);                                                                                  // 13438\n      self.if_(ast.operator === '&&' ? intoId : self.not(intoId), self.lazyRecurse(ast.right, intoId));                // 13439\n      recursionFn(intoId);                                                                                             // 13440\n      break;                                                                                                           // 13441\n    case AST.ConditionalExpression:                                                                                    // 13442\n      intoId = intoId || this.nextId();                                                                                // 13443\n      self.recurse(ast.test, intoId);                                                                                  // 13444\n      self.if_(intoId, self.lazyRecurse(ast.alternate, intoId), self.lazyRecurse(ast.consequent, intoId));             // 13445\n      recursionFn(intoId);                                                                                             // 13446\n      break;                                                                                                           // 13447\n    case AST.Identifier:                                                                                               // 13448\n      intoId = intoId || this.nextId();                                                                                // 13449\n      if (nameId) {                                                                                                    // 13450\n        nameId.context = self.stage === 'inputs' ? 's' : this.assign(this.nextId(), this.getHasOwnProperty('l', ast.name) + '?l:s');\n        nameId.computed = false;                                                                                       // 13452\n        nameId.name = ast.name;                                                                                        // 13453\n      }                                                                                                                // 13454\n      ensureSafeMemberName(ast.name);                                                                                  // 13455\n      self.if_(self.stage === 'inputs' || self.not(self.getHasOwnProperty('l', ast.name)),                             // 13456\n        function() {                                                                                                   // 13457\n          self.if_(self.stage === 'inputs' || 's', function() {                                                        // 13458\n            if (create && create !== 1) {                                                                              // 13459\n              self.if_(                                                                                                // 13460\n                self.not(self.nonComputedMember('s', ast.name)),                                                       // 13461\n                self.lazyAssign(self.nonComputedMember('s', ast.name), '{}'));                                         // 13462\n            }                                                                                                          // 13463\n            self.assign(intoId, self.nonComputedMember('s', ast.name));                                                // 13464\n          });                                                                                                          // 13465\n        }, intoId && self.lazyAssign(intoId, self.nonComputedMember('l', ast.name))                                    // 13466\n        );                                                                                                             // 13467\n      if (self.state.expensiveChecks || isPossiblyDangerousMemberName(ast.name)) {                                     // 13468\n        self.addEnsureSafeObject(intoId);                                                                              // 13469\n      }                                                                                                                // 13470\n      recursionFn(intoId);                                                                                             // 13471\n      break;                                                                                                           // 13472\n    case AST.MemberExpression:                                                                                         // 13473\n      left = nameId && (nameId.context = this.nextId()) || this.nextId();                                              // 13474\n      intoId = intoId || this.nextId();                                                                                // 13475\n      self.recurse(ast.object, left, undefined, function() {                                                           // 13476\n        self.if_(self.notNull(left), function() {                                                                      // 13477\n          if (ast.computed) {                                                                                          // 13478\n            right = self.nextId();                                                                                     // 13479\n            self.recurse(ast.property, right);                                                                         // 13480\n            self.getStringValue(right);                                                                                // 13481\n            self.addEnsureSafeMemberName(right);                                                                       // 13482\n            if (create && create !== 1) {                                                                              // 13483\n              self.if_(self.not(self.computedMember(left, right)), self.lazyAssign(self.computedMember(left, right), '{}'));\n            }                                                                                                          // 13485\n            expression = self.ensureSafeObject(self.computedMember(left, right));                                      // 13486\n            self.assign(intoId, expression);                                                                           // 13487\n            if (nameId) {                                                                                              // 13488\n              nameId.computed = true;                                                                                  // 13489\n              nameId.name = right;                                                                                     // 13490\n            }                                                                                                          // 13491\n          } else {                                                                                                     // 13492\n            ensureSafeMemberName(ast.property.name);                                                                   // 13493\n            if (create && create !== 1) {                                                                              // 13494\n              self.if_(self.not(self.nonComputedMember(left, ast.property.name)), self.lazyAssign(self.nonComputedMember(left, ast.property.name), '{}'));\n            }                                                                                                          // 13496\n            expression = self.nonComputedMember(left, ast.property.name);                                              // 13497\n            if (self.state.expensiveChecks || isPossiblyDangerousMemberName(ast.property.name)) {                      // 13498\n              expression = self.ensureSafeObject(expression);                                                          // 13499\n            }                                                                                                          // 13500\n            self.assign(intoId, expression);                                                                           // 13501\n            if (nameId) {                                                                                              // 13502\n              nameId.computed = false;                                                                                 // 13503\n              nameId.name = ast.property.name;                                                                         // 13504\n            }                                                                                                          // 13505\n          }                                                                                                            // 13506\n        }, function() {                                                                                                // 13507\n          self.assign(intoId, 'undefined');                                                                            // 13508\n        });                                                                                                            // 13509\n        recursionFn(intoId);                                                                                           // 13510\n      }, !!create);                                                                                                    // 13511\n      break;                                                                                                           // 13512\n    case AST.CallExpression:                                                                                           // 13513\n      intoId = intoId || this.nextId();                                                                                // 13514\n      if (ast.filter) {                                                                                                // 13515\n        right = self.filter(ast.callee.name);                                                                          // 13516\n        args = [];                                                                                                     // 13517\n        forEach(ast.arguments, function(expr) {                                                                        // 13518\n          var argument = self.nextId();                                                                                // 13519\n          self.recurse(expr, argument);                                                                                // 13520\n          args.push(argument);                                                                                         // 13521\n        });                                                                                                            // 13522\n        expression = right + '(' + args.join(',') + ')';                                                               // 13523\n        self.assign(intoId, expression);                                                                               // 13524\n        recursionFn(intoId);                                                                                           // 13525\n      } else {                                                                                                         // 13526\n        right = self.nextId();                                                                                         // 13527\n        left = {};                                                                                                     // 13528\n        args = [];                                                                                                     // 13529\n        self.recurse(ast.callee, right, left, function() {                                                             // 13530\n          self.if_(self.notNull(right), function() {                                                                   // 13531\n            self.addEnsureSafeFunction(right);                                                                         // 13532\n            forEach(ast.arguments, function(expr) {                                                                    // 13533\n              self.recurse(expr, self.nextId(), undefined, function(argument) {                                        // 13534\n                args.push(self.ensureSafeObject(argument));                                                            // 13535\n              });                                                                                                      // 13536\n            });                                                                                                        // 13537\n            if (left.name) {                                                                                           // 13538\n              if (!self.state.expensiveChecks) {                                                                       // 13539\n                self.addEnsureSafeObject(left.context);                                                                // 13540\n              }                                                                                                        // 13541\n              expression = self.member(left.context, left.name, left.computed) + '(' + args.join(',') + ')';           // 13542\n            } else {                                                                                                   // 13543\n              expression = right + '(' + args.join(',') + ')';                                                         // 13544\n            }                                                                                                          // 13545\n            expression = self.ensureSafeObject(expression);                                                            // 13546\n            self.assign(intoId, expression);                                                                           // 13547\n          }, function() {                                                                                              // 13548\n            self.assign(intoId, 'undefined');                                                                          // 13549\n          });                                                                                                          // 13550\n          recursionFn(intoId);                                                                                         // 13551\n        });                                                                                                            // 13552\n      }                                                                                                                // 13553\n      break;                                                                                                           // 13554\n    case AST.AssignmentExpression:                                                                                     // 13555\n      right = this.nextId();                                                                                           // 13556\n      left = {};                                                                                                       // 13557\n      if (!isAssignable(ast.left)) {                                                                                   // 13558\n        throw $parseMinErr('lval', 'Trying to assing a value to a non l-value');                                       // 13559\n      }                                                                                                                // 13560\n      this.recurse(ast.left, undefined, left, function() {                                                             // 13561\n        self.if_(self.notNull(left.context), function() {                                                              // 13562\n          self.recurse(ast.right, right);                                                                              // 13563\n          self.addEnsureSafeObject(self.member(left.context, left.name, left.computed));                               // 13564\n          self.addEnsureSafeAssignContext(left.context);                                                               // 13565\n          expression = self.member(left.context, left.name, left.computed) + ast.operator + right;                     // 13566\n          self.assign(intoId, expression);                                                                             // 13567\n          recursionFn(intoId || expression);                                                                           // 13568\n        });                                                                                                            // 13569\n      }, 1);                                                                                                           // 13570\n      break;                                                                                                           // 13571\n    case AST.ArrayExpression:                                                                                          // 13572\n      args = [];                                                                                                       // 13573\n      forEach(ast.elements, function(expr) {                                                                           // 13574\n        self.recurse(expr, self.nextId(), undefined, function(argument) {                                              // 13575\n          args.push(argument);                                                                                         // 13576\n        });                                                                                                            // 13577\n      });                                                                                                              // 13578\n      expression = '[' + args.join(',') + ']';                                                                         // 13579\n      this.assign(intoId, expression);                                                                                 // 13580\n      recursionFn(expression);                                                                                         // 13581\n      break;                                                                                                           // 13582\n    case AST.ObjectExpression:                                                                                         // 13583\n      args = [];                                                                                                       // 13584\n      forEach(ast.properties, function(property) {                                                                     // 13585\n        self.recurse(property.value, self.nextId(), undefined, function(expr) {                                        // 13586\n          args.push(self.escape(                                                                                       // 13587\n              property.key.type === AST.Identifier ? property.key.name :                                               // 13588\n                ('' + property.key.value)) +                                                                           // 13589\n              ':' + expr);                                                                                             // 13590\n        });                                                                                                            // 13591\n      });                                                                                                              // 13592\n      expression = '{' + args.join(',') + '}';                                                                         // 13593\n      this.assign(intoId, expression);                                                                                 // 13594\n      recursionFn(expression);                                                                                         // 13595\n      break;                                                                                                           // 13596\n    case AST.ThisExpression:                                                                                           // 13597\n      this.assign(intoId, 's');                                                                                        // 13598\n      recursionFn('s');                                                                                                // 13599\n      break;                                                                                                           // 13600\n    case AST.NGValueParameter:                                                                                         // 13601\n      this.assign(intoId, 'v');                                                                                        // 13602\n      recursionFn('v');                                                                                                // 13603\n      break;                                                                                                           // 13604\n    }                                                                                                                  // 13605\n  },                                                                                                                   // 13606\n                                                                                                                       // 13607\n  getHasOwnProperty: function(element, property) {                                                                     // 13608\n    var key = element + '.' + property;                                                                                // 13609\n    var own = this.current().own;                                                                                      // 13610\n    if (!own.hasOwnProperty(key)) {                                                                                    // 13611\n      own[key] = this.nextId(false, element + '&&(' + this.escape(property) + ' in ' + element + ')');                 // 13612\n    }                                                                                                                  // 13613\n    return own[key];                                                                                                   // 13614\n  },                                                                                                                   // 13615\n                                                                                                                       // 13616\n  assign: function(id, value) {                                                                                        // 13617\n    if (!id) return;                                                                                                   // 13618\n    this.current().body.push(id, '=', value, ';');                                                                     // 13619\n    return id;                                                                                                         // 13620\n  },                                                                                                                   // 13621\n                                                                                                                       // 13622\n  filter: function(filterName) {                                                                                       // 13623\n    if (!this.state.filters.hasOwnProperty(filterName)) {                                                              // 13624\n      this.state.filters[filterName] = this.nextId(true);                                                              // 13625\n    }                                                                                                                  // 13626\n    return this.state.filters[filterName];                                                                             // 13627\n  },                                                                                                                   // 13628\n                                                                                                                       // 13629\n  ifDefined: function(id, defaultValue) {                                                                              // 13630\n    return 'ifDefined(' + id + ',' + this.escape(defaultValue) + ')';                                                  // 13631\n  },                                                                                                                   // 13632\n                                                                                                                       // 13633\n  plus: function(left, right) {                                                                                        // 13634\n    return 'plus(' + left + ',' + right + ')';                                                                         // 13635\n  },                                                                                                                   // 13636\n                                                                                                                       // 13637\n  return_: function(id) {                                                                                              // 13638\n    this.current().body.push('return ', id, ';');                                                                      // 13639\n  },                                                                                                                   // 13640\n                                                                                                                       // 13641\n  if_: function(test, alternate, consequent) {                                                                         // 13642\n    if (test === true) {                                                                                               // 13643\n      alternate();                                                                                                     // 13644\n    } else {                                                                                                           // 13645\n      var body = this.current().body;                                                                                  // 13646\n      body.push('if(', test, '){');                                                                                    // 13647\n      alternate();                                                                                                     // 13648\n      body.push('}');                                                                                                  // 13649\n      if (consequent) {                                                                                                // 13650\n        body.push('else{');                                                                                            // 13651\n        consequent();                                                                                                  // 13652\n        body.push('}');                                                                                                // 13653\n      }                                                                                                                // 13654\n    }                                                                                                                  // 13655\n  },                                                                                                                   // 13656\n                                                                                                                       // 13657\n  not: function(expression) {                                                                                          // 13658\n    return '!(' + expression + ')';                                                                                    // 13659\n  },                                                                                                                   // 13660\n                                                                                                                       // 13661\n  notNull: function(expression) {                                                                                      // 13662\n    return expression + '!=null';                                                                                      // 13663\n  },                                                                                                                   // 13664\n                                                                                                                       // 13665\n  nonComputedMember: function(left, right) {                                                                           // 13666\n    return left + '.' + right;                                                                                         // 13667\n  },                                                                                                                   // 13668\n                                                                                                                       // 13669\n  computedMember: function(left, right) {                                                                              // 13670\n    return left + '[' + right + ']';                                                                                   // 13671\n  },                                                                                                                   // 13672\n                                                                                                                       // 13673\n  member: function(left, right, computed) {                                                                            // 13674\n    if (computed) return this.computedMember(left, right);                                                             // 13675\n    return this.nonComputedMember(left, right);                                                                        // 13676\n  },                                                                                                                   // 13677\n                                                                                                                       // 13678\n  addEnsureSafeObject: function(item) {                                                                                // 13679\n    this.current().body.push(this.ensureSafeObject(item), ';');                                                        // 13680\n  },                                                                                                                   // 13681\n                                                                                                                       // 13682\n  addEnsureSafeMemberName: function(item) {                                                                            // 13683\n    this.current().body.push(this.ensureSafeMemberName(item), ';');                                                    // 13684\n  },                                                                                                                   // 13685\n                                                                                                                       // 13686\n  addEnsureSafeFunction: function(item) {                                                                              // 13687\n    this.current().body.push(this.ensureSafeFunction(item), ';');                                                      // 13688\n  },                                                                                                                   // 13689\n                                                                                                                       // 13690\n  addEnsureSafeAssignContext: function(item) {                                                                         // 13691\n    this.current().body.push(this.ensureSafeAssignContext(item), ';');                                                 // 13692\n  },                                                                                                                   // 13693\n                                                                                                                       // 13694\n  ensureSafeObject: function(item) {                                                                                   // 13695\n    return 'ensureSafeObject(' + item + ',text)';                                                                      // 13696\n  },                                                                                                                   // 13697\n                                                                                                                       // 13698\n  ensureSafeMemberName: function(item) {                                                                               // 13699\n    return 'ensureSafeMemberName(' + item + ',text)';                                                                  // 13700\n  },                                                                                                                   // 13701\n                                                                                                                       // 13702\n  ensureSafeFunction: function(item) {                                                                                 // 13703\n    return 'ensureSafeFunction(' + item + ',text)';                                                                    // 13704\n  },                                                                                                                   // 13705\n                                                                                                                       // 13706\n  getStringValue: function(item) {                                                                                     // 13707\n    this.assign(item, 'getStringValue(' + item + ',text)');                                                            // 13708\n  },                                                                                                                   // 13709\n                                                                                                                       // 13710\n  ensureSafeAssignContext: function(item) {                                                                            // 13711\n    return 'ensureSafeAssignContext(' + item + ',text)';                                                               // 13712\n  },                                                                                                                   // 13713\n                                                                                                                       // 13714\n  lazyRecurse: function(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck) {                                  // 13715\n    var self = this;                                                                                                   // 13716\n    return function() {                                                                                                // 13717\n      self.recurse(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck);                                        // 13718\n    };                                                                                                                 // 13719\n  },                                                                                                                   // 13720\n                                                                                                                       // 13721\n  lazyAssign: function(id, value) {                                                                                    // 13722\n    var self = this;                                                                                                   // 13723\n    return function() {                                                                                                // 13724\n      self.assign(id, value);                                                                                          // 13725\n    };                                                                                                                 // 13726\n  },                                                                                                                   // 13727\n                                                                                                                       // 13728\n  stringEscapeRegex: /[^ a-zA-Z0-9]/g,                                                                                 // 13729\n                                                                                                                       // 13730\n  stringEscapeFn: function(c) {                                                                                        // 13731\n    return '\\\\u' + ('0000' + c.charCodeAt(0).toString(16)).slice(-4);                                                  // 13732\n  },                                                                                                                   // 13733\n                                                                                                                       // 13734\n  escape: function(value) {                                                                                            // 13735\n    if (isString(value)) return \"'\" + value.replace(this.stringEscapeRegex, this.stringEscapeFn) + \"'\";                // 13736\n    if (isNumber(value)) return value.toString();                                                                      // 13737\n    if (value === true) return 'true';                                                                                 // 13738\n    if (value === false) return 'false';                                                                               // 13739\n    if (value === null) return 'null';                                                                                 // 13740\n    if (typeof value === 'undefined') return 'undefined';                                                              // 13741\n                                                                                                                       // 13742\n    throw $parseMinErr('esc', 'IMPOSSIBLE');                                                                           // 13743\n  },                                                                                                                   // 13744\n                                                                                                                       // 13745\n  nextId: function(skip, init) {                                                                                       // 13746\n    var id = 'v' + (this.state.nextId++);                                                                              // 13747\n    if (!skip) {                                                                                                       // 13748\n      this.current().vars.push(id + (init ? '=' + init : ''));                                                         // 13749\n    }                                                                                                                  // 13750\n    return id;                                                                                                         // 13751\n  },                                                                                                                   // 13752\n                                                                                                                       // 13753\n  current: function() {                                                                                                // 13754\n    return this.state[this.state.computing];                                                                           // 13755\n  }                                                                                                                    // 13756\n};                                                                                                                     // 13757\n                                                                                                                       // 13758\n                                                                                                                       // 13759\nfunction ASTInterpreter(astBuilder, $filter) {                                                                         // 13760\n  this.astBuilder = astBuilder;                                                                                        // 13761\n  this.$filter = $filter;                                                                                              // 13762\n}                                                                                                                      // 13763\n                                                                                                                       // 13764\nASTInterpreter.prototype = {                                                                                           // 13765\n  compile: function(expression, expensiveChecks) {                                                                     // 13766\n    var self = this;                                                                                                   // 13767\n    var ast = this.astBuilder.ast(expression);                                                                         // 13768\n    this.expression = expression;                                                                                      // 13769\n    this.expensiveChecks = expensiveChecks;                                                                            // 13770\n    findConstantAndWatchExpressions(ast, self.$filter);                                                                // 13771\n    var assignable;                                                                                                    // 13772\n    var assign;                                                                                                        // 13773\n    if ((assignable = assignableAST(ast))) {                                                                           // 13774\n      assign = this.recurse(assignable);                                                                               // 13775\n    }                                                                                                                  // 13776\n    var toWatch = getInputs(ast.body);                                                                                 // 13777\n    var inputs;                                                                                                        // 13778\n    if (toWatch) {                                                                                                     // 13779\n      inputs = [];                                                                                                     // 13780\n      forEach(toWatch, function(watch, key) {                                                                          // 13781\n        var input = self.recurse(watch);                                                                               // 13782\n        watch.input = input;                                                                                           // 13783\n        inputs.push(input);                                                                                            // 13784\n        watch.watchId = key;                                                                                           // 13785\n      });                                                                                                              // 13786\n    }                                                                                                                  // 13787\n    var expressions = [];                                                                                              // 13788\n    forEach(ast.body, function(expression) {                                                                           // 13789\n      expressions.push(self.recurse(expression.expression));                                                           // 13790\n    });                                                                                                                // 13791\n    var fn = ast.body.length === 0 ? function() {} :                                                                   // 13792\n             ast.body.length === 1 ? expressions[0] :                                                                  // 13793\n             function(scope, locals) {                                                                                 // 13794\n               var lastValue;                                                                                          // 13795\n               forEach(expressions, function(exp) {                                                                    // 13796\n                 lastValue = exp(scope, locals);                                                                       // 13797\n               });                                                                                                     // 13798\n               return lastValue;                                                                                       // 13799\n             };                                                                                                        // 13800\n    if (assign) {                                                                                                      // 13801\n      fn.assign = function(scope, value, locals) {                                                                     // 13802\n        return assign(scope, locals, value);                                                                           // 13803\n      };                                                                                                               // 13804\n    }                                                                                                                  // 13805\n    if (inputs) {                                                                                                      // 13806\n      fn.inputs = inputs;                                                                                              // 13807\n    }                                                                                                                  // 13808\n    fn.literal = isLiteral(ast);                                                                                       // 13809\n    fn.constant = isConstant(ast);                                                                                     // 13810\n    return fn;                                                                                                         // 13811\n  },                                                                                                                   // 13812\n                                                                                                                       // 13813\n  recurse: function(ast, context, create) {                                                                            // 13814\n    var left, right, self = this, args, expression;                                                                    // 13815\n    if (ast.input) {                                                                                                   // 13816\n      return this.inputs(ast.input, ast.watchId);                                                                      // 13817\n    }                                                                                                                  // 13818\n    switch (ast.type) {                                                                                                // 13819\n    case AST.Literal:                                                                                                  // 13820\n      return this.value(ast.value, context);                                                                           // 13821\n    case AST.UnaryExpression:                                                                                          // 13822\n      right = this.recurse(ast.argument);                                                                              // 13823\n      return this['unary' + ast.operator](right, context);                                                             // 13824\n    case AST.BinaryExpression:                                                                                         // 13825\n      left = this.recurse(ast.left);                                                                                   // 13826\n      right = this.recurse(ast.right);                                                                                 // 13827\n      return this['binary' + ast.operator](left, right, context);                                                      // 13828\n    case AST.LogicalExpression:                                                                                        // 13829\n      left = this.recurse(ast.left);                                                                                   // 13830\n      right = this.recurse(ast.right);                                                                                 // 13831\n      return this['binary' + ast.operator](left, right, context);                                                      // 13832\n    case AST.ConditionalExpression:                                                                                    // 13833\n      return this['ternary?:'](                                                                                        // 13834\n        this.recurse(ast.test),                                                                                        // 13835\n        this.recurse(ast.alternate),                                                                                   // 13836\n        this.recurse(ast.consequent),                                                                                  // 13837\n        context                                                                                                        // 13838\n      );                                                                                                               // 13839\n    case AST.Identifier:                                                                                               // 13840\n      ensureSafeMemberName(ast.name, self.expression);                                                                 // 13841\n      return self.identifier(ast.name,                                                                                 // 13842\n                             self.expensiveChecks || isPossiblyDangerousMemberName(ast.name),                          // 13843\n                             context, create, self.expression);                                                        // 13844\n    case AST.MemberExpression:                                                                                         // 13845\n      left = this.recurse(ast.object, false, !!create);                                                                // 13846\n      if (!ast.computed) {                                                                                             // 13847\n        ensureSafeMemberName(ast.property.name, self.expression);                                                      // 13848\n        right = ast.property.name;                                                                                     // 13849\n      }                                                                                                                // 13850\n      if (ast.computed) right = this.recurse(ast.property);                                                            // 13851\n      return ast.computed ?                                                                                            // 13852\n        this.computedMember(left, right, context, create, self.expression) :                                           // 13853\n        this.nonComputedMember(left, right, self.expensiveChecks, context, create, self.expression);                   // 13854\n    case AST.CallExpression:                                                                                           // 13855\n      args = [];                                                                                                       // 13856\n      forEach(ast.arguments, function(expr) {                                                                          // 13857\n        args.push(self.recurse(expr));                                                                                 // 13858\n      });                                                                                                              // 13859\n      if (ast.filter) right = this.$filter(ast.callee.name);                                                           // 13860\n      if (!ast.filter) right = this.recurse(ast.callee, true);                                                         // 13861\n      return ast.filter ?                                                                                              // 13862\n        function(scope, locals, assign, inputs) {                                                                      // 13863\n          var values = [];                                                                                             // 13864\n          for (var i = 0; i < args.length; ++i) {                                                                      // 13865\n            values.push(args[i](scope, locals, assign, inputs));                                                       // 13866\n          }                                                                                                            // 13867\n          var value = right.apply(undefined, values, inputs);                                                          // 13868\n          return context ? {context: undefined, name: undefined, value: value} : value;                                // 13869\n        } :                                                                                                            // 13870\n        function(scope, locals, assign, inputs) {                                                                      // 13871\n          var rhs = right(scope, locals, assign, inputs);                                                              // 13872\n          var value;                                                                                                   // 13873\n          if (rhs.value != null) {                                                                                     // 13874\n            ensureSafeObject(rhs.context, self.expression);                                                            // 13875\n            ensureSafeFunction(rhs.value, self.expression);                                                            // 13876\n            var values = [];                                                                                           // 13877\n            for (var i = 0; i < args.length; ++i) {                                                                    // 13878\n              values.push(ensureSafeObject(args[i](scope, locals, assign, inputs), self.expression));                  // 13879\n            }                                                                                                          // 13880\n            value = ensureSafeObject(rhs.value.apply(rhs.context, values), self.expression);                           // 13881\n          }                                                                                                            // 13882\n          return context ? {value: value} : value;                                                                     // 13883\n        };                                                                                                             // 13884\n    case AST.AssignmentExpression:                                                                                     // 13885\n      left = this.recurse(ast.left, true, 1);                                                                          // 13886\n      right = this.recurse(ast.right);                                                                                 // 13887\n      return function(scope, locals, assign, inputs) {                                                                 // 13888\n        var lhs = left(scope, locals, assign, inputs);                                                                 // 13889\n        var rhs = right(scope, locals, assign, inputs);                                                                // 13890\n        ensureSafeObject(lhs.value, self.expression);                                                                  // 13891\n        ensureSafeAssignContext(lhs.context);                                                                          // 13892\n        lhs.context[lhs.name] = rhs;                                                                                   // 13893\n        return context ? {value: rhs} : rhs;                                                                           // 13894\n      };                                                                                                               // 13895\n    case AST.ArrayExpression:                                                                                          // 13896\n      args = [];                                                                                                       // 13897\n      forEach(ast.elements, function(expr) {                                                                           // 13898\n        args.push(self.recurse(expr));                                                                                 // 13899\n      });                                                                                                              // 13900\n      return function(scope, locals, assign, inputs) {                                                                 // 13901\n        var value = [];                                                                                                // 13902\n        for (var i = 0; i < args.length; ++i) {                                                                        // 13903\n          value.push(args[i](scope, locals, assign, inputs));                                                          // 13904\n        }                                                                                                              // 13905\n        return context ? {value: value} : value;                                                                       // 13906\n      };                                                                                                               // 13907\n    case AST.ObjectExpression:                                                                                         // 13908\n      args = [];                                                                                                       // 13909\n      forEach(ast.properties, function(property) {                                                                     // 13910\n        args.push({key: property.key.type === AST.Identifier ?                                                         // 13911\n                        property.key.name :                                                                            // 13912\n                        ('' + property.key.value),                                                                     // 13913\n                   value: self.recurse(property.value)                                                                 // 13914\n        });                                                                                                            // 13915\n      });                                                                                                              // 13916\n      return function(scope, locals, assign, inputs) {                                                                 // 13917\n        var value = {};                                                                                                // 13918\n        for (var i = 0; i < args.length; ++i) {                                                                        // 13919\n          value[args[i].key] = args[i].value(scope, locals, assign, inputs);                                           // 13920\n        }                                                                                                              // 13921\n        return context ? {value: value} : value;                                                                       // 13922\n      };                                                                                                               // 13923\n    case AST.ThisExpression:                                                                                           // 13924\n      return function(scope) {                                                                                         // 13925\n        return context ? {value: scope} : scope;                                                                       // 13926\n      };                                                                                                               // 13927\n    case AST.NGValueParameter:                                                                                         // 13928\n      return function(scope, locals, assign, inputs) {                                                                 // 13929\n        return context ? {value: assign} : assign;                                                                     // 13930\n      };                                                                                                               // 13931\n    }                                                                                                                  // 13932\n  },                                                                                                                   // 13933\n                                                                                                                       // 13934\n  'unary+': function(argument, context) {                                                                              // 13935\n    return function(scope, locals, assign, inputs) {                                                                   // 13936\n      var arg = argument(scope, locals, assign, inputs);                                                               // 13937\n      if (isDefined(arg)) {                                                                                            // 13938\n        arg = +arg;                                                                                                    // 13939\n      } else {                                                                                                         // 13940\n        arg = 0;                                                                                                       // 13941\n      }                                                                                                                // 13942\n      return context ? {value: arg} : arg;                                                                             // 13943\n    };                                                                                                                 // 13944\n  },                                                                                                                   // 13945\n  'unary-': function(argument, context) {                                                                              // 13946\n    return function(scope, locals, assign, inputs) {                                                                   // 13947\n      var arg = argument(scope, locals, assign, inputs);                                                               // 13948\n      if (isDefined(arg)) {                                                                                            // 13949\n        arg = -arg;                                                                                                    // 13950\n      } else {                                                                                                         // 13951\n        arg = 0;                                                                                                       // 13952\n      }                                                                                                                // 13953\n      return context ? {value: arg} : arg;                                                                             // 13954\n    };                                                                                                                 // 13955\n  },                                                                                                                   // 13956\n  'unary!': function(argument, context) {                                                                              // 13957\n    return function(scope, locals, assign, inputs) {                                                                   // 13958\n      var arg = !argument(scope, locals, assign, inputs);                                                              // 13959\n      return context ? {value: arg} : arg;                                                                             // 13960\n    };                                                                                                                 // 13961\n  },                                                                                                                   // 13962\n  'binary+': function(left, right, context) {                                                                          // 13963\n    return function(scope, locals, assign, inputs) {                                                                   // 13964\n      var lhs = left(scope, locals, assign, inputs);                                                                   // 13965\n      var rhs = right(scope, locals, assign, inputs);                                                                  // 13966\n      var arg = plusFn(lhs, rhs);                                                                                      // 13967\n      return context ? {value: arg} : arg;                                                                             // 13968\n    };                                                                                                                 // 13969\n  },                                                                                                                   // 13970\n  'binary-': function(left, right, context) {                                                                          // 13971\n    return function(scope, locals, assign, inputs) {                                                                   // 13972\n      var lhs = left(scope, locals, assign, inputs);                                                                   // 13973\n      var rhs = right(scope, locals, assign, inputs);                                                                  // 13974\n      var arg = (isDefined(lhs) ? lhs : 0) - (isDefined(rhs) ? rhs : 0);                                               // 13975\n      return context ? {value: arg} : arg;                                                                             // 13976\n    };                                                                                                                 // 13977\n  },                                                                                                                   // 13978\n  'binary*': function(left, right, context) {                                                                          // 13979\n    return function(scope, locals, assign, inputs) {                                                                   // 13980\n      var arg = left(scope, locals, assign, inputs) * right(scope, locals, assign, inputs);                            // 13981\n      return context ? {value: arg} : arg;                                                                             // 13982\n    };                                                                                                                 // 13983\n  },                                                                                                                   // 13984\n  'binary/': function(left, right, context) {                                                                          // 13985\n    return function(scope, locals, assign, inputs) {                                                                   // 13986\n      var arg = left(scope, locals, assign, inputs) / right(scope, locals, assign, inputs);                            // 13987\n      return context ? {value: arg} : arg;                                                                             // 13988\n    };                                                                                                                 // 13989\n  },                                                                                                                   // 13990\n  'binary%': function(left, right, context) {                                                                          // 13991\n    return function(scope, locals, assign, inputs) {                                                                   // 13992\n      var arg = left(scope, locals, assign, inputs) % right(scope, locals, assign, inputs);                            // 13993\n      return context ? {value: arg} : arg;                                                                             // 13994\n    };                                                                                                                 // 13995\n  },                                                                                                                   // 13996\n  'binary===': function(left, right, context) {                                                                        // 13997\n    return function(scope, locals, assign, inputs) {                                                                   // 13998\n      var arg = left(scope, locals, assign, inputs) === right(scope, locals, assign, inputs);                          // 13999\n      return context ? {value: arg} : arg;                                                                             // 14000\n    };                                                                                                                 // 14001\n  },                                                                                                                   // 14002\n  'binary!==': function(left, right, context) {                                                                        // 14003\n    return function(scope, locals, assign, inputs) {                                                                   // 14004\n      var arg = left(scope, locals, assign, inputs) !== right(scope, locals, assign, inputs);                          // 14005\n      return context ? {value: arg} : arg;                                                                             // 14006\n    };                                                                                                                 // 14007\n  },                                                                                                                   // 14008\n  'binary==': function(left, right, context) {                                                                         // 14009\n    return function(scope, locals, assign, inputs) {                                                                   // 14010\n      var arg = left(scope, locals, assign, inputs) == right(scope, locals, assign, inputs);                           // 14011\n      return context ? {value: arg} : arg;                                                                             // 14012\n    };                                                                                                                 // 14013\n  },                                                                                                                   // 14014\n  'binary!=': function(left, right, context) {                                                                         // 14015\n    return function(scope, locals, assign, inputs) {                                                                   // 14016\n      var arg = left(scope, locals, assign, inputs) != right(scope, locals, assign, inputs);                           // 14017\n      return context ? {value: arg} : arg;                                                                             // 14018\n    };                                                                                                                 // 14019\n  },                                                                                                                   // 14020\n  'binary<': function(left, right, context) {                                                                          // 14021\n    return function(scope, locals, assign, inputs) {                                                                   // 14022\n      var arg = left(scope, locals, assign, inputs) < right(scope, locals, assign, inputs);                            // 14023\n      return context ? {value: arg} : arg;                                                                             // 14024\n    };                                                                                                                 // 14025\n  },                                                                                                                   // 14026\n  'binary>': function(left, right, context) {                                                                          // 14027\n    return function(scope, locals, assign, inputs) {                                                                   // 14028\n      var arg = left(scope, locals, assign, inputs) > right(scope, locals, assign, inputs);                            // 14029\n      return context ? {value: arg} : arg;                                                                             // 14030\n    };                                                                                                                 // 14031\n  },                                                                                                                   // 14032\n  'binary<=': function(left, right, context) {                                                                         // 14033\n    return function(scope, locals, assign, inputs) {                                                                   // 14034\n      var arg = left(scope, locals, assign, inputs) <= right(scope, locals, assign, inputs);                           // 14035\n      return context ? {value: arg} : arg;                                                                             // 14036\n    };                                                                                                                 // 14037\n  },                                                                                                                   // 14038\n  'binary>=': function(left, right, context) {                                                                         // 14039\n    return function(scope, locals, assign, inputs) {                                                                   // 14040\n      var arg = left(scope, locals, assign, inputs) >= right(scope, locals, assign, inputs);                           // 14041\n      return context ? {value: arg} : arg;                                                                             // 14042\n    };                                                                                                                 // 14043\n  },                                                                                                                   // 14044\n  'binary&&': function(left, right, context) {                                                                         // 14045\n    return function(scope, locals, assign, inputs) {                                                                   // 14046\n      var arg = left(scope, locals, assign, inputs) && right(scope, locals, assign, inputs);                           // 14047\n      return context ? {value: arg} : arg;                                                                             // 14048\n    };                                                                                                                 // 14049\n  },                                                                                                                   // 14050\n  'binary||': function(left, right, context) {                                                                         // 14051\n    return function(scope, locals, assign, inputs) {                                                                   // 14052\n      var arg = left(scope, locals, assign, inputs) || right(scope, locals, assign, inputs);                           // 14053\n      return context ? {value: arg} : arg;                                                                             // 14054\n    };                                                                                                                 // 14055\n  },                                                                                                                   // 14056\n  'ternary?:': function(test, alternate, consequent, context) {                                                        // 14057\n    return function(scope, locals, assign, inputs) {                                                                   // 14058\n      var arg = test(scope, locals, assign, inputs) ? alternate(scope, locals, assign, inputs) : consequent(scope, locals, assign, inputs);\n      return context ? {value: arg} : arg;                                                                             // 14060\n    };                                                                                                                 // 14061\n  },                                                                                                                   // 14062\n  value: function(value, context) {                                                                                    // 14063\n    return function() { return context ? {context: undefined, name: undefined, value: value} : value; };               // 14064\n  },                                                                                                                   // 14065\n  identifier: function(name, expensiveChecks, context, create, expression) {                                           // 14066\n    return function(scope, locals, assign, inputs) {                                                                   // 14067\n      var base = locals && (name in locals) ? locals : scope;                                                          // 14068\n      if (create && create !== 1 && base && !(base[name])) {                                                           // 14069\n        base[name] = {};                                                                                               // 14070\n      }                                                                                                                // 14071\n      var value = base ? base[name] : undefined;                                                                       // 14072\n      if (expensiveChecks) {                                                                                           // 14073\n        ensureSafeObject(value, expression);                                                                           // 14074\n      }                                                                                                                // 14075\n      if (context) {                                                                                                   // 14076\n        return {context: base, name: name, value: value};                                                              // 14077\n      } else {                                                                                                         // 14078\n        return value;                                                                                                  // 14079\n      }                                                                                                                // 14080\n    };                                                                                                                 // 14081\n  },                                                                                                                   // 14082\n  computedMember: function(left, right, context, create, expression) {                                                 // 14083\n    return function(scope, locals, assign, inputs) {                                                                   // 14084\n      var lhs = left(scope, locals, assign, inputs);                                                                   // 14085\n      var rhs;                                                                                                         // 14086\n      var value;                                                                                                       // 14087\n      if (lhs != null) {                                                                                               // 14088\n        rhs = right(scope, locals, assign, inputs);                                                                    // 14089\n        rhs = getStringValue(rhs);                                                                                     // 14090\n        ensureSafeMemberName(rhs, expression);                                                                         // 14091\n        if (create && create !== 1 && lhs && !(lhs[rhs])) {                                                            // 14092\n          lhs[rhs] = {};                                                                                               // 14093\n        }                                                                                                              // 14094\n        value = lhs[rhs];                                                                                              // 14095\n        ensureSafeObject(value, expression);                                                                           // 14096\n      }                                                                                                                // 14097\n      if (context) {                                                                                                   // 14098\n        return {context: lhs, name: rhs, value: value};                                                                // 14099\n      } else {                                                                                                         // 14100\n        return value;                                                                                                  // 14101\n      }                                                                                                                // 14102\n    };                                                                                                                 // 14103\n  },                                                                                                                   // 14104\n  nonComputedMember: function(left, right, expensiveChecks, context, create, expression) {                             // 14105\n    return function(scope, locals, assign, inputs) {                                                                   // 14106\n      var lhs = left(scope, locals, assign, inputs);                                                                   // 14107\n      if (create && create !== 1 && lhs && !(lhs[right])) {                                                            // 14108\n        lhs[right] = {};                                                                                               // 14109\n      }                                                                                                                // 14110\n      var value = lhs != null ? lhs[right] : undefined;                                                                // 14111\n      if (expensiveChecks || isPossiblyDangerousMemberName(right)) {                                                   // 14112\n        ensureSafeObject(value, expression);                                                                           // 14113\n      }                                                                                                                // 14114\n      if (context) {                                                                                                   // 14115\n        return {context: lhs, name: right, value: value};                                                              // 14116\n      } else {                                                                                                         // 14117\n        return value;                                                                                                  // 14118\n      }                                                                                                                // 14119\n    };                                                                                                                 // 14120\n  },                                                                                                                   // 14121\n  inputs: function(input, watchId) {                                                                                   // 14122\n    return function(scope, value, locals, inputs) {                                                                    // 14123\n      if (inputs) return inputs[watchId];                                                                              // 14124\n      return input(scope, value, locals);                                                                              // 14125\n    };                                                                                                                 // 14126\n  }                                                                                                                    // 14127\n};                                                                                                                     // 14128\n                                                                                                                       // 14129\n/**                                                                                                                    // 14130\n * @constructor                                                                                                        // 14131\n */                                                                                                                    // 14132\nvar Parser = function(lexer, $filter, options) {                                                                       // 14133\n  this.lexer = lexer;                                                                                                  // 14134\n  this.$filter = $filter;                                                                                              // 14135\n  this.options = options;                                                                                              // 14136\n  this.ast = new AST(this.lexer);                                                                                      // 14137\n  this.astCompiler = options.csp ? new ASTInterpreter(this.ast, $filter) :                                             // 14138\n                                   new ASTCompiler(this.ast, $filter);                                                 // 14139\n};                                                                                                                     // 14140\n                                                                                                                       // 14141\nParser.prototype = {                                                                                                   // 14142\n  constructor: Parser,                                                                                                 // 14143\n                                                                                                                       // 14144\n  parse: function(text) {                                                                                              // 14145\n    return this.astCompiler.compile(text, this.options.expensiveChecks);                                               // 14146\n  }                                                                                                                    // 14147\n};                                                                                                                     // 14148\n                                                                                                                       // 14149\nvar getterFnCacheDefault = createMap();                                                                                // 14150\nvar getterFnCacheExpensive = createMap();                                                                              // 14151\n                                                                                                                       // 14152\nfunction isPossiblyDangerousMemberName(name) {                                                                         // 14153\n  return name == 'constructor';                                                                                        // 14154\n}                                                                                                                      // 14155\n                                                                                                                       // 14156\nvar objectValueOf = Object.prototype.valueOf;                                                                          // 14157\n                                                                                                                       // 14158\nfunction getValueOf(value) {                                                                                           // 14159\n  return isFunction(value.valueOf) ? value.valueOf() : objectValueOf.call(value);                                      // 14160\n}                                                                                                                      // 14161\n                                                                                                                       // 14162\n///////////////////////////////////                                                                                    // 14163\n                                                                                                                       // 14164\n/**                                                                                                                    // 14165\n * @ngdoc service                                                                                                      // 14166\n * @name $parse                                                                                                        // 14167\n * @kind function                                                                                                      // 14168\n *                                                                                                                     // 14169\n * @description                                                                                                        // 14170\n *                                                                                                                     // 14171\n * Converts Angular {@link guide/expression expression} into a function.                                               // 14172\n *                                                                                                                     // 14173\n * ```js                                                                                                               // 14174\n *   var getter = $parse('user.name');                                                                                 // 14175\n *   var setter = getter.assign;                                                                                       // 14176\n *   var context = {user:{name:'angular'}};                                                                            // 14177\n *   var locals = {user:{name:'local'}};                                                                               // 14178\n *                                                                                                                     // 14179\n *   expect(getter(context)).toEqual('angular');                                                                       // 14180\n *   setter(context, 'newValue');                                                                                      // 14181\n *   expect(context.user.name).toEqual('newValue');                                                                    // 14182\n *   expect(getter(context, locals)).toEqual('local');                                                                 // 14183\n * ```                                                                                                                 // 14184\n *                                                                                                                     // 14185\n *                                                                                                                     // 14186\n * @param {string} expression String expression to compile.                                                            // 14187\n * @returns {function(context, locals)} a function which represents the compiled expression:                           // 14188\n *                                                                                                                     // 14189\n *    * `context` – `{object}` – an object against which any expressions embedded in the strings                       // 14190\n *      are evaluated against (typically a scope object).                                                              // 14191\n *    * `locals` – `{object=}` – local variables context object, useful for overriding values in                       // 14192\n *      `context`.                                                                                                     // 14193\n *                                                                                                                     // 14194\n *    The returned function also has the following properties:                                                         // 14195\n *      * `literal` – `{boolean}` – whether the expression's top-level node is a JavaScript                            // 14196\n *        literal.                                                                                                     // 14197\n *      * `constant` – `{boolean}` – whether the expression is made entirely of JavaScript                             // 14198\n *        constant literals.                                                                                           // 14199\n *      * `assign` – `{?function(context, value)}` – if the expression is assignable, this will be                     // 14200\n *        set to a function to change its value on the given context.                                                  // 14201\n *                                                                                                                     // 14202\n */                                                                                                                    // 14203\n                                                                                                                       // 14204\n                                                                                                                       // 14205\n/**                                                                                                                    // 14206\n * @ngdoc provider                                                                                                     // 14207\n * @name $parseProvider                                                                                                // 14208\n *                                                                                                                     // 14209\n * @description                                                                                                        // 14210\n * `$parseProvider` can be used for configuring the default behavior of the {@link ng.$parse $parse}                   // 14211\n *  service.                                                                                                           // 14212\n */                                                                                                                    // 14213\nfunction $ParseProvider() {                                                                                            // 14214\n  var cacheDefault = createMap();                                                                                      // 14215\n  var cacheExpensive = createMap();                                                                                    // 14216\n                                                                                                                       // 14217\n  this.$get = ['$filter', function($filter) {                                                                          // 14218\n    var noUnsafeEval = csp().noUnsafeEval;                                                                             // 14219\n    var $parseOptions = {                                                                                              // 14220\n          csp: noUnsafeEval,                                                                                           // 14221\n          expensiveChecks: false                                                                                       // 14222\n        },                                                                                                             // 14223\n        $parseOptionsExpensive = {                                                                                     // 14224\n          csp: noUnsafeEval,                                                                                           // 14225\n          expensiveChecks: true                                                                                        // 14226\n        };                                                                                                             // 14227\n                                                                                                                       // 14228\n    return function $parse(exp, interceptorFn, expensiveChecks) {                                                      // 14229\n      var parsedExpression, oneTime, cacheKey;                                                                         // 14230\n                                                                                                                       // 14231\n      switch (typeof exp) {                                                                                            // 14232\n        case 'string':                                                                                                 // 14233\n          exp = exp.trim();                                                                                            // 14234\n          cacheKey = exp;                                                                                              // 14235\n                                                                                                                       // 14236\n          var cache = (expensiveChecks ? cacheExpensive : cacheDefault);                                               // 14237\n          parsedExpression = cache[cacheKey];                                                                          // 14238\n                                                                                                                       // 14239\n          if (!parsedExpression) {                                                                                     // 14240\n            if (exp.charAt(0) === ':' && exp.charAt(1) === ':') {                                                      // 14241\n              oneTime = true;                                                                                          // 14242\n              exp = exp.substring(2);                                                                                  // 14243\n            }                                                                                                          // 14244\n            var parseOptions = expensiveChecks ? $parseOptionsExpensive : $parseOptions;                               // 14245\n            var lexer = new Lexer(parseOptions);                                                                       // 14246\n            var parser = new Parser(lexer, $filter, parseOptions);                                                     // 14247\n            parsedExpression = parser.parse(exp);                                                                      // 14248\n            if (parsedExpression.constant) {                                                                           // 14249\n              parsedExpression.$$watchDelegate = constantWatchDelegate;                                                // 14250\n            } else if (oneTime) {                                                                                      // 14251\n              parsedExpression.$$watchDelegate = parsedExpression.literal ?                                            // 14252\n                  oneTimeLiteralWatchDelegate : oneTimeWatchDelegate;                                                  // 14253\n            } else if (parsedExpression.inputs) {                                                                      // 14254\n              parsedExpression.$$watchDelegate = inputsWatchDelegate;                                                  // 14255\n            }                                                                                                          // 14256\n            cache[cacheKey] = parsedExpression;                                                                        // 14257\n          }                                                                                                            // 14258\n          return addInterceptor(parsedExpression, interceptorFn);                                                      // 14259\n                                                                                                                       // 14260\n        case 'function':                                                                                               // 14261\n          return addInterceptor(exp, interceptorFn);                                                                   // 14262\n                                                                                                                       // 14263\n        default:                                                                                                       // 14264\n          return noop;                                                                                                 // 14265\n      }                                                                                                                // 14266\n    };                                                                                                                 // 14267\n                                                                                                                       // 14268\n    function expressionInputDirtyCheck(newValue, oldValueOfValue) {                                                    // 14269\n                                                                                                                       // 14270\n      if (newValue == null || oldValueOfValue == null) { // null/undefined                                             // 14271\n        return newValue === oldValueOfValue;                                                                           // 14272\n      }                                                                                                                // 14273\n                                                                                                                       // 14274\n      if (typeof newValue === 'object') {                                                                              // 14275\n                                                                                                                       // 14276\n        // attempt to convert the value to a primitive type                                                            // 14277\n        // TODO(docs): add a note to docs that by implementing valueOf even objects and arrays can                     // 14278\n        //             be cheaply dirty-checked                                                                        // 14279\n        newValue = getValueOf(newValue);                                                                               // 14280\n                                                                                                                       // 14281\n        if (typeof newValue === 'object') {                                                                            // 14282\n          // objects/arrays are not supported - deep-watching them would be too expensive                              // 14283\n          return false;                                                                                                // 14284\n        }                                                                                                              // 14285\n                                                                                                                       // 14286\n        // fall-through to the primitive equality check                                                                // 14287\n      }                                                                                                                // 14288\n                                                                                                                       // 14289\n      //Primitive or NaN                                                                                               // 14290\n      return newValue === oldValueOfValue || (newValue !== newValue && oldValueOfValue !== oldValueOfValue);           // 14291\n    }                                                                                                                  // 14292\n                                                                                                                       // 14293\n    function inputsWatchDelegate(scope, listener, objectEquality, parsedExpression, prettyPrintExpression) {           // 14294\n      var inputExpressions = parsedExpression.inputs;                                                                  // 14295\n      var lastResult;                                                                                                  // 14296\n                                                                                                                       // 14297\n      if (inputExpressions.length === 1) {                                                                             // 14298\n        var oldInputValueOf = expressionInputDirtyCheck; // init to something unique so that equals check fails        // 14299\n        inputExpressions = inputExpressions[0];                                                                        // 14300\n        return scope.$watch(function expressionInputWatch(scope) {                                                     // 14301\n          var newInputValue = inputExpressions(scope);                                                                 // 14302\n          if (!expressionInputDirtyCheck(newInputValue, oldInputValueOf)) {                                            // 14303\n            lastResult = parsedExpression(scope, undefined, undefined, [newInputValue]);                               // 14304\n            oldInputValueOf = newInputValue && getValueOf(newInputValue);                                              // 14305\n          }                                                                                                            // 14306\n          return lastResult;                                                                                           // 14307\n        }, listener, objectEquality, prettyPrintExpression);                                                           // 14308\n      }                                                                                                                // 14309\n                                                                                                                       // 14310\n      var oldInputValueOfValues = [];                                                                                  // 14311\n      var oldInputValues = [];                                                                                         // 14312\n      for (var i = 0, ii = inputExpressions.length; i < ii; i++) {                                                     // 14313\n        oldInputValueOfValues[i] = expressionInputDirtyCheck; // init to something unique so that equals check fails   // 14314\n        oldInputValues[i] = null;                                                                                      // 14315\n      }                                                                                                                // 14316\n                                                                                                                       // 14317\n      return scope.$watch(function expressionInputsWatch(scope) {                                                      // 14318\n        var changed = false;                                                                                           // 14319\n                                                                                                                       // 14320\n        for (var i = 0, ii = inputExpressions.length; i < ii; i++) {                                                   // 14321\n          var newInputValue = inputExpressions[i](scope);                                                              // 14322\n          if (changed || (changed = !expressionInputDirtyCheck(newInputValue, oldInputValueOfValues[i]))) {            // 14323\n            oldInputValues[i] = newInputValue;                                                                         // 14324\n            oldInputValueOfValues[i] = newInputValue && getValueOf(newInputValue);                                     // 14325\n          }                                                                                                            // 14326\n        }                                                                                                              // 14327\n                                                                                                                       // 14328\n        if (changed) {                                                                                                 // 14329\n          lastResult = parsedExpression(scope, undefined, undefined, oldInputValues);                                  // 14330\n        }                                                                                                              // 14331\n                                                                                                                       // 14332\n        return lastResult;                                                                                             // 14333\n      }, listener, objectEquality, prettyPrintExpression);                                                             // 14334\n    }                                                                                                                  // 14335\n                                                                                                                       // 14336\n    function oneTimeWatchDelegate(scope, listener, objectEquality, parsedExpression) {                                 // 14337\n      var unwatch, lastValue;                                                                                          // 14338\n      return unwatch = scope.$watch(function oneTimeWatch(scope) {                                                     // 14339\n        return parsedExpression(scope);                                                                                // 14340\n      }, function oneTimeListener(value, old, scope) {                                                                 // 14341\n        lastValue = value;                                                                                             // 14342\n        if (isFunction(listener)) {                                                                                    // 14343\n          listener.apply(this, arguments);                                                                             // 14344\n        }                                                                                                              // 14345\n        if (isDefined(value)) {                                                                                        // 14346\n          scope.$$postDigest(function() {                                                                              // 14347\n            if (isDefined(lastValue)) {                                                                                // 14348\n              unwatch();                                                                                               // 14349\n            }                                                                                                          // 14350\n          });                                                                                                          // 14351\n        }                                                                                                              // 14352\n      }, objectEquality);                                                                                              // 14353\n    }                                                                                                                  // 14354\n                                                                                                                       // 14355\n    function oneTimeLiteralWatchDelegate(scope, listener, objectEquality, parsedExpression) {                          // 14356\n      var unwatch, lastValue;                                                                                          // 14357\n      return unwatch = scope.$watch(function oneTimeWatch(scope) {                                                     // 14358\n        return parsedExpression(scope);                                                                                // 14359\n      }, function oneTimeListener(value, old, scope) {                                                                 // 14360\n        lastValue = value;                                                                                             // 14361\n        if (isFunction(listener)) {                                                                                    // 14362\n          listener.call(this, value, old, scope);                                                                      // 14363\n        }                                                                                                              // 14364\n        if (isAllDefined(value)) {                                                                                     // 14365\n          scope.$$postDigest(function() {                                                                              // 14366\n            if (isAllDefined(lastValue)) unwatch();                                                                    // 14367\n          });                                                                                                          // 14368\n        }                                                                                                              // 14369\n      }, objectEquality);                                                                                              // 14370\n                                                                                                                       // 14371\n      function isAllDefined(value) {                                                                                   // 14372\n        var allDefined = true;                                                                                         // 14373\n        forEach(value, function(val) {                                                                                 // 14374\n          if (!isDefined(val)) allDefined = false;                                                                     // 14375\n        });                                                                                                            // 14376\n        return allDefined;                                                                                             // 14377\n      }                                                                                                                // 14378\n    }                                                                                                                  // 14379\n                                                                                                                       // 14380\n    function constantWatchDelegate(scope, listener, objectEquality, parsedExpression) {                                // 14381\n      var unwatch;                                                                                                     // 14382\n      return unwatch = scope.$watch(function constantWatch(scope) {                                                    // 14383\n        return parsedExpression(scope);                                                                                // 14384\n      }, function constantListener(value, old, scope) {                                                                // 14385\n        if (isFunction(listener)) {                                                                                    // 14386\n          listener.apply(this, arguments);                                                                             // 14387\n        }                                                                                                              // 14388\n        unwatch();                                                                                                     // 14389\n      }, objectEquality);                                                                                              // 14390\n    }                                                                                                                  // 14391\n                                                                                                                       // 14392\n    function addInterceptor(parsedExpression, interceptorFn) {                                                         // 14393\n      if (!interceptorFn) return parsedExpression;                                                                     // 14394\n      var watchDelegate = parsedExpression.$$watchDelegate;                                                            // 14395\n                                                                                                                       // 14396\n      var regularWatch =                                                                                               // 14397\n          watchDelegate !== oneTimeLiteralWatchDelegate &&                                                             // 14398\n          watchDelegate !== oneTimeWatchDelegate;                                                                      // 14399\n                                                                                                                       // 14400\n      var fn = regularWatch ? function regularInterceptedExpression(scope, locals, assign, inputs) {                   // 14401\n        var value = parsedExpression(scope, locals, assign, inputs);                                                   // 14402\n        return interceptorFn(value, scope, locals);                                                                    // 14403\n      } : function oneTimeInterceptedExpression(scope, locals, assign, inputs) {                                       // 14404\n        var value = parsedExpression(scope, locals, assign, inputs);                                                   // 14405\n        var result = interceptorFn(value, scope, locals);                                                              // 14406\n        // we only return the interceptor's result if the                                                              // 14407\n        // initial value is defined (for bind-once)                                                                    // 14408\n        return isDefined(value) ? result : value;                                                                      // 14409\n      };                                                                                                               // 14410\n                                                                                                                       // 14411\n      // Propagate $$watchDelegates other then inputsWatchDelegate                                                     // 14412\n      if (parsedExpression.$$watchDelegate &&                                                                          // 14413\n          parsedExpression.$$watchDelegate !== inputsWatchDelegate) {                                                  // 14414\n        fn.$$watchDelegate = parsedExpression.$$watchDelegate;                                                         // 14415\n      } else if (!interceptorFn.$stateful) {                                                                           // 14416\n        // If there is an interceptor, but no watchDelegate then treat the interceptor like                            // 14417\n        // we treat filters - it is assumed to be a pure function unless flagged with $stateful                        // 14418\n        fn.$$watchDelegate = inputsWatchDelegate;                                                                      // 14419\n        fn.inputs = parsedExpression.inputs ? parsedExpression.inputs : [parsedExpression];                            // 14420\n      }                                                                                                                // 14421\n                                                                                                                       // 14422\n      return fn;                                                                                                       // 14423\n    }                                                                                                                  // 14424\n  }];                                                                                                                  // 14425\n}                                                                                                                      // 14426\n                                                                                                                       // 14427\n/**                                                                                                                    // 14428\n * @ngdoc service                                                                                                      // 14429\n * @name $q                                                                                                            // 14430\n * @requires $rootScope                                                                                                // 14431\n *                                                                                                                     // 14432\n * @description                                                                                                        // 14433\n * A service that helps you run functions asynchronously, and use their return values (or exceptions)                  // 14434\n * when they are done processing.                                                                                      // 14435\n *                                                                                                                     // 14436\n * This is an implementation of promises/deferred objects inspired by                                                  // 14437\n * [Kris Kowal's Q](https://github.com/kriskowal/q).                                                                   // 14438\n *                                                                                                                     // 14439\n * $q can be used in two fashions --- one which is more similar to Kris Kowal's Q or jQuery's Deferred                 // 14440\n * implementations, and the other which resembles ES6 promises to some degree.                                         // 14441\n *                                                                                                                     // 14442\n * # $q constructor                                                                                                    // 14443\n *                                                                                                                     // 14444\n * The streamlined ES6 style promise is essentially just using $q as a constructor which takes a `resolver`            // 14445\n * function as the first argument. This is similar to the native Promise implementation from ES6 Harmony,              // 14446\n * see [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).                // 14447\n *                                                                                                                     // 14448\n * While the constructor-style use is supported, not all of the supporting methods from ES6 Harmony promises are       // 14449\n * available yet.                                                                                                      // 14450\n *                                                                                                                     // 14451\n * It can be used like so:                                                                                             // 14452\n *                                                                                                                     // 14453\n * ```js                                                                                                               // 14454\n *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`                               // 14455\n *   // are available in the current lexical scope (they could have been injected or passed in).                       // 14456\n *                                                                                                                     // 14457\n *   function asyncGreet(name) {                                                                                       // 14458\n *     // perform some asynchronous operation, resolve or reject the promise when appropriate.                         // 14459\n *     return $q(function(resolve, reject) {                                                                           // 14460\n *       setTimeout(function() {                                                                                       // 14461\n *         if (okToGreet(name)) {                                                                                      // 14462\n *           resolve('Hello, ' + name + '!');                                                                          // 14463\n *         } else {                                                                                                    // 14464\n *           reject('Greeting ' + name + ' is not allowed.');                                                          // 14465\n *         }                                                                                                           // 14466\n *       }, 1000);                                                                                                     // 14467\n *     });                                                                                                             // 14468\n *   }                                                                                                                 // 14469\n *                                                                                                                     // 14470\n *   var promise = asyncGreet('Robin Hood');                                                                           // 14471\n *   promise.then(function(greeting) {                                                                                 // 14472\n *     alert('Success: ' + greeting);                                                                                  // 14473\n *   }, function(reason) {                                                                                             // 14474\n *     alert('Failed: ' + reason);                                                                                     // 14475\n *   });                                                                                                               // 14476\n * ```                                                                                                                 // 14477\n *                                                                                                                     // 14478\n * Note: progress/notify callbacks are not currently supported via the ES6-style interface.                            // 14479\n *                                                                                                                     // 14480\n * However, the more traditional CommonJS-style usage is still available, and documented below.                        // 14481\n *                                                                                                                     // 14482\n * [The CommonJS Promise proposal](http://wiki.commonjs.org/wiki/Promises) describes a promise as an                   // 14483\n * interface for interacting with an object that represents the result of an action that is                            // 14484\n * performed asynchronously, and may or may not be finished at any given point in time.                                // 14485\n *                                                                                                                     // 14486\n * From the perspective of dealing with error handling, deferred and promise APIs are to                               // 14487\n * asynchronous programming what `try`, `catch` and `throw` keywords are to synchronous programming.                   // 14488\n *                                                                                                                     // 14489\n * ```js                                                                                                               // 14490\n *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`                               // 14491\n *   // are available in the current lexical scope (they could have been injected or passed in).                       // 14492\n *                                                                                                                     // 14493\n *   function asyncGreet(name) {                                                                                       // 14494\n *     var deferred = $q.defer();                                                                                      // 14495\n *                                                                                                                     // 14496\n *     setTimeout(function() {                                                                                         // 14497\n *       deferred.notify('About to greet ' + name + '.');                                                              // 14498\n *                                                                                                                     // 14499\n *       if (okToGreet(name)) {                                                                                        // 14500\n *         deferred.resolve('Hello, ' + name + '!');                                                                   // 14501\n *       } else {                                                                                                      // 14502\n *         deferred.reject('Greeting ' + name + ' is not allowed.');                                                   // 14503\n *       }                                                                                                             // 14504\n *     }, 1000);                                                                                                       // 14505\n *                                                                                                                     // 14506\n *     return deferred.promise;                                                                                        // 14507\n *   }                                                                                                                 // 14508\n *                                                                                                                     // 14509\n *   var promise = asyncGreet('Robin Hood');                                                                           // 14510\n *   promise.then(function(greeting) {                                                                                 // 14511\n *     alert('Success: ' + greeting);                                                                                  // 14512\n *   }, function(reason) {                                                                                             // 14513\n *     alert('Failed: ' + reason);                                                                                     // 14514\n *   }, function(update) {                                                                                             // 14515\n *     alert('Got notification: ' + update);                                                                           // 14516\n *   });                                                                                                               // 14517\n * ```                                                                                                                 // 14518\n *                                                                                                                     // 14519\n * At first it might not be obvious why this extra complexity is worth the trouble. The payoff                         // 14520\n * comes in the way of guarantees that promise and deferred APIs make, see                                             // 14521\n * https://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md.                                      // 14522\n *                                                                                                                     // 14523\n * Additionally the promise api allows for composition that is very hard to do with the                                // 14524\n * traditional callback ([CPS](http://en.wikipedia.org/wiki/Continuation-passing_style)) approach.                     // 14525\n * For more on this please see the [Q documentation](https://github.com/kriskowal/q) especially the                    // 14526\n * section on serial or parallel joining of promises.                                                                  // 14527\n *                                                                                                                     // 14528\n * # The Deferred API                                                                                                  // 14529\n *                                                                                                                     // 14530\n * A new instance of deferred is constructed by calling `$q.defer()`.                                                  // 14531\n *                                                                                                                     // 14532\n * The purpose of the deferred object is to expose the associated Promise instance as well as APIs                     // 14533\n * that can be used for signaling the successful or unsuccessful completion, as well as the status                     // 14534\n * of the task.                                                                                                        // 14535\n *                                                                                                                     // 14536\n * **Methods**                                                                                                         // 14537\n *                                                                                                                     // 14538\n * - `resolve(value)` – resolves the derived promise with the `value`. If the value is a rejection                     // 14539\n *   constructed via `$q.reject`, the promise will be rejected instead.                                                // 14540\n * - `reject(reason)` – rejects the derived promise with the `reason`. This is equivalent to                           // 14541\n *   resolving it with a rejection constructed via `$q.reject`.                                                        // 14542\n * - `notify(value)` - provides updates on the status of the promise's execution. This may be called                   // 14543\n *   multiple times before the promise is either resolved or rejected.                                                 // 14544\n *                                                                                                                     // 14545\n * **Properties**                                                                                                      // 14546\n *                                                                                                                     // 14547\n * - promise – `{Promise}` – promise object associated with this deferred.                                             // 14548\n *                                                                                                                     // 14549\n *                                                                                                                     // 14550\n * # The Promise API                                                                                                   // 14551\n *                                                                                                                     // 14552\n * A new promise instance is created when a deferred instance is created and can be retrieved by                       // 14553\n * calling `deferred.promise`.                                                                                         // 14554\n *                                                                                                                     // 14555\n * The purpose of the promise object is to allow for interested parties to get access to the result                    // 14556\n * of the deferred task when it completes.                                                                             // 14557\n *                                                                                                                     // 14558\n * **Methods**                                                                                                         // 14559\n *                                                                                                                     // 14560\n * - `then(successCallback, errorCallback, notifyCallback)` – regardless of when the promise was or                    // 14561\n *   will be resolved or rejected, `then` calls one of the success or error callbacks asynchronously                   // 14562\n *   as soon as the result is available. The callbacks are called with a single argument: the result                   // 14563\n *   or rejection reason. Additionally, the notify callback may be called zero or more times to                        // 14564\n *   provide a progress indication, before the promise is resolved or rejected.                                        // 14565\n *                                                                                                                     // 14566\n *   This method *returns a new promise* which is resolved or rejected via the return value of the                     // 14567\n *   `successCallback`, `errorCallback` (unless that value is a promise, in which case it is resolved                  // 14568\n *   with the value which is resolved in that promise using                                                            // 14569\n *   [promise chaining](http://www.html5rocks.com/en/tutorials/es6/promises/#toc-promises-queues)).                    // 14570\n *   It also notifies via the return value of the `notifyCallback` method. The promise cannot be                       // 14571\n *   resolved or rejected from the notifyCallback method.                                                              // 14572\n *                                                                                                                     // 14573\n * - `catch(errorCallback)` – shorthand for `promise.then(null, errorCallback)`                                        // 14574\n *                                                                                                                     // 14575\n * - `finally(callback, notifyCallback)` – allows you to observe either the fulfillment or rejection of a promise,     // 14576\n *   but to do so without modifying the final value. This is useful to release resources or do some                    // 14577\n *   clean-up that needs to be done whether the promise was rejected or resolved. See the [full                        // 14578\n *   specification](https://github.com/kriskowal/q/wiki/API-Reference#promisefinallycallback) for                      // 14579\n *   more information.                                                                                                 // 14580\n *                                                                                                                     // 14581\n * # Chaining promises                                                                                                 // 14582\n *                                                                                                                     // 14583\n * Because calling the `then` method of a promise returns a new derived promise, it is easily                          // 14584\n * possible to create a chain of promises:                                                                             // 14585\n *                                                                                                                     // 14586\n * ```js                                                                                                               // 14587\n *   promiseB = promiseA.then(function(result) {                                                                       // 14588\n *     return result + 1;                                                                                              // 14589\n *   });                                                                                                               // 14590\n *                                                                                                                     // 14591\n *   // promiseB will be resolved immediately after promiseA is resolved and its value                                 // 14592\n *   // will be the result of promiseA incremented by 1                                                                // 14593\n * ```                                                                                                                 // 14594\n *                                                                                                                     // 14595\n * It is possible to create chains of any length and since a promise can be resolved with another                      // 14596\n * promise (which will defer its resolution further), it is possible to pause/defer resolution of                      // 14597\n * the promises at any point in the chain. This makes it possible to implement powerful APIs like                      // 14598\n * $http's response interceptors.                                                                                      // 14599\n *                                                                                                                     // 14600\n *                                                                                                                     // 14601\n * # Differences between Kris Kowal's Q and $q                                                                         // 14602\n *                                                                                                                     // 14603\n *  There are two main differences:                                                                                    // 14604\n *                                                                                                                     // 14605\n * - $q is integrated with the {@link ng.$rootScope.Scope} Scope model observation                                     // 14606\n *   mechanism in angular, which means faster propagation of resolution or rejection into your                         // 14607\n *   models and avoiding unnecessary browser repaints, which would result in flickering UI.                            // 14608\n * - Q has many more features than $q, but that comes at a cost of bytes. $q is tiny, but contains                     // 14609\n *   all the important functionality needed for common async tasks.                                                    // 14610\n *                                                                                                                     // 14611\n *  # Testing                                                                                                          // 14612\n *                                                                                                                     // 14613\n *  ```js                                                                                                              // 14614\n *    it('should simulate promise', inject(function($q, $rootScope) {                                                  // 14615\n *      var deferred = $q.defer();                                                                                     // 14616\n *      var promise = deferred.promise;                                                                                // 14617\n *      var resolvedValue;                                                                                             // 14618\n *                                                                                                                     // 14619\n *      promise.then(function(value) { resolvedValue = value; });                                                      // 14620\n *      expect(resolvedValue).toBeUndefined();                                                                         // 14621\n *                                                                                                                     // 14622\n *      // Simulate resolving of promise                                                                               // 14623\n *      deferred.resolve(123);                                                                                         // 14624\n *      // Note that the 'then' function does not get called synchronously.                                            // 14625\n *      // This is because we want the promise API to always be async, whether or not                                  // 14626\n *      // it got called synchronously or asynchronously.                                                              // 14627\n *      expect(resolvedValue).toBeUndefined();                                                                         // 14628\n *                                                                                                                     // 14629\n *      // Propagate promise resolution to 'then' functions using $apply().                                            // 14630\n *      $rootScope.$apply();                                                                                           // 14631\n *      expect(resolvedValue).toEqual(123);                                                                            // 14632\n *    }));                                                                                                             // 14633\n *  ```                                                                                                                // 14634\n *                                                                                                                     // 14635\n * @param {function(function, function)} resolver Function which is responsible for resolving or                       // 14636\n *   rejecting the newly created promise. The first parameter is a function which resolves the                         // 14637\n *   promise, the second parameter is a function which rejects the promise.                                            // 14638\n *                                                                                                                     // 14639\n * @returns {Promise} The newly created promise.                                                                       // 14640\n */                                                                                                                    // 14641\nfunction $QProvider() {                                                                                                // 14642\n                                                                                                                       // 14643\n  this.$get = ['$rootScope', '$exceptionHandler', function($rootScope, $exceptionHandler) {                            // 14644\n    return qFactory(function(callback) {                                                                               // 14645\n      $rootScope.$evalAsync(callback);                                                                                 // 14646\n    }, $exceptionHandler);                                                                                             // 14647\n  }];                                                                                                                  // 14648\n}                                                                                                                      // 14649\n                                                                                                                       // 14650\nfunction $$QProvider() {                                                                                               // 14651\n  this.$get = ['$browser', '$exceptionHandler', function($browser, $exceptionHandler) {                                // 14652\n    return qFactory(function(callback) {                                                                               // 14653\n      $browser.defer(callback);                                                                                        // 14654\n    }, $exceptionHandler);                                                                                             // 14655\n  }];                                                                                                                  // 14656\n}                                                                                                                      // 14657\n                                                                                                                       // 14658\n/**                                                                                                                    // 14659\n * Constructs a promise manager.                                                                                       // 14660\n *                                                                                                                     // 14661\n * @param {function(function)} nextTick Function for executing functions in the next turn.                             // 14662\n * @param {function(...*)} exceptionHandler Function into which unexpected exceptions are passed for                   // 14663\n *     debugging purposes.                                                                                             // 14664\n * @returns {object} Promise manager.                                                                                  // 14665\n */                                                                                                                    // 14666\nfunction qFactory(nextTick, exceptionHandler) {                                                                        // 14667\n  var $qMinErr = minErr('$q', TypeError);                                                                              // 14668\n  function callOnce(self, resolveFn, rejectFn) {                                                                       // 14669\n    var called = false;                                                                                                // 14670\n    function wrap(fn) {                                                                                                // 14671\n      return function(value) {                                                                                         // 14672\n        if (called) return;                                                                                            // 14673\n        called = true;                                                                                                 // 14674\n        fn.call(self, value);                                                                                          // 14675\n      };                                                                                                               // 14676\n    }                                                                                                                  // 14677\n                                                                                                                       // 14678\n    return [wrap(resolveFn), wrap(rejectFn)];                                                                          // 14679\n  }                                                                                                                    // 14680\n                                                                                                                       // 14681\n  /**                                                                                                                  // 14682\n   * @ngdoc method                                                                                                     // 14683\n   * @name ng.$q#defer                                                                                                 // 14684\n   * @kind function                                                                                                    // 14685\n   *                                                                                                                   // 14686\n   * @description                                                                                                      // 14687\n   * Creates a `Deferred` object which represents a task which will finish in the future.                              // 14688\n   *                                                                                                                   // 14689\n   * @returns {Deferred} Returns a new instance of deferred.                                                           // 14690\n   */                                                                                                                  // 14691\n  var defer = function() {                                                                                             // 14692\n    return new Deferred();                                                                                             // 14693\n  };                                                                                                                   // 14694\n                                                                                                                       // 14695\n  function Promise() {                                                                                                 // 14696\n    this.$$state = { status: 0 };                                                                                      // 14697\n  }                                                                                                                    // 14698\n                                                                                                                       // 14699\n  extend(Promise.prototype, {                                                                                          // 14700\n    then: function(onFulfilled, onRejected, progressBack) {                                                            // 14701\n      if (isUndefined(onFulfilled) && isUndefined(onRejected) && isUndefined(progressBack)) {                          // 14702\n        return this;                                                                                                   // 14703\n      }                                                                                                                // 14704\n      var result = new Deferred();                                                                                     // 14705\n                                                                                                                       // 14706\n      this.$$state.pending = this.$$state.pending || [];                                                               // 14707\n      this.$$state.pending.push([result, onFulfilled, onRejected, progressBack]);                                      // 14708\n      if (this.$$state.status > 0) scheduleProcessQueue(this.$$state);                                                 // 14709\n                                                                                                                       // 14710\n      return result.promise;                                                                                           // 14711\n    },                                                                                                                 // 14712\n                                                                                                                       // 14713\n    \"catch\": function(callback) {                                                                                      // 14714\n      return this.then(null, callback);                                                                                // 14715\n    },                                                                                                                 // 14716\n                                                                                                                       // 14717\n    \"finally\": function(callback, progressBack) {                                                                      // 14718\n      return this.then(function(value) {                                                                               // 14719\n        return handleCallback(value, true, callback);                                                                  // 14720\n      }, function(error) {                                                                                             // 14721\n        return handleCallback(error, false, callback);                                                                 // 14722\n      }, progressBack);                                                                                                // 14723\n    }                                                                                                                  // 14724\n  });                                                                                                                  // 14725\n                                                                                                                       // 14726\n  //Faster, more basic than angular.bind http://jsperf.com/angular-bind-vs-custom-vs-native                            // 14727\n  function simpleBind(context, fn) {                                                                                   // 14728\n    return function(value) {                                                                                           // 14729\n      fn.call(context, value);                                                                                         // 14730\n    };                                                                                                                 // 14731\n  }                                                                                                                    // 14732\n                                                                                                                       // 14733\n  function processQueue(state) {                                                                                       // 14734\n    var fn, deferred, pending;                                                                                         // 14735\n                                                                                                                       // 14736\n    pending = state.pending;                                                                                           // 14737\n    state.processScheduled = false;                                                                                    // 14738\n    state.pending = undefined;                                                                                         // 14739\n    for (var i = 0, ii = pending.length; i < ii; ++i) {                                                                // 14740\n      deferred = pending[i][0];                                                                                        // 14741\n      fn = pending[i][state.status];                                                                                   // 14742\n      try {                                                                                                            // 14743\n        if (isFunction(fn)) {                                                                                          // 14744\n          deferred.resolve(fn(state.value));                                                                           // 14745\n        } else if (state.status === 1) {                                                                               // 14746\n          deferred.resolve(state.value);                                                                               // 14747\n        } else {                                                                                                       // 14748\n          deferred.reject(state.value);                                                                                // 14749\n        }                                                                                                              // 14750\n      } catch (e) {                                                                                                    // 14751\n        deferred.reject(e);                                                                                            // 14752\n        exceptionHandler(e);                                                                                           // 14753\n      }                                                                                                                // 14754\n    }                                                                                                                  // 14755\n  }                                                                                                                    // 14756\n                                                                                                                       // 14757\n  function scheduleProcessQueue(state) {                                                                               // 14758\n    if (state.processScheduled || !state.pending) return;                                                              // 14759\n    state.processScheduled = true;                                                                                     // 14760\n    nextTick(function() { processQueue(state); });                                                                     // 14761\n  }                                                                                                                    // 14762\n                                                                                                                       // 14763\n  function Deferred() {                                                                                                // 14764\n    this.promise = new Promise();                                                                                      // 14765\n    //Necessary to support unbound execution :/                                                                        // 14766\n    this.resolve = simpleBind(this, this.resolve);                                                                     // 14767\n    this.reject = simpleBind(this, this.reject);                                                                       // 14768\n    this.notify = simpleBind(this, this.notify);                                                                       // 14769\n  }                                                                                                                    // 14770\n                                                                                                                       // 14771\n  extend(Deferred.prototype, {                                                                                         // 14772\n    resolve: function(val) {                                                                                           // 14773\n      if (this.promise.$$state.status) return;                                                                         // 14774\n      if (val === this.promise) {                                                                                      // 14775\n        this.$$reject($qMinErr(                                                                                        // 14776\n          'qcycle',                                                                                                    // 14777\n          \"Expected promise to be resolved with value other than itself '{0}'\",                                        // 14778\n          val));                                                                                                       // 14779\n      } else {                                                                                                         // 14780\n        this.$$resolve(val);                                                                                           // 14781\n      }                                                                                                                // 14782\n                                                                                                                       // 14783\n    },                                                                                                                 // 14784\n                                                                                                                       // 14785\n    $$resolve: function(val) {                                                                                         // 14786\n      var then, fns;                                                                                                   // 14787\n                                                                                                                       // 14788\n      fns = callOnce(this, this.$$resolve, this.$$reject);                                                             // 14789\n      try {                                                                                                            // 14790\n        if ((isObject(val) || isFunction(val))) then = val && val.then;                                                // 14791\n        if (isFunction(then)) {                                                                                        // 14792\n          this.promise.$$state.status = -1;                                                                            // 14793\n          then.call(val, fns[0], fns[1], this.notify);                                                                 // 14794\n        } else {                                                                                                       // 14795\n          this.promise.$$state.value = val;                                                                            // 14796\n          this.promise.$$state.status = 1;                                                                             // 14797\n          scheduleProcessQueue(this.promise.$$state);                                                                  // 14798\n        }                                                                                                              // 14799\n      } catch (e) {                                                                                                    // 14800\n        fns[1](e);                                                                                                     // 14801\n        exceptionHandler(e);                                                                                           // 14802\n      }                                                                                                                // 14803\n    },                                                                                                                 // 14804\n                                                                                                                       // 14805\n    reject: function(reason) {                                                                                         // 14806\n      if (this.promise.$$state.status) return;                                                                         // 14807\n      this.$$reject(reason);                                                                                           // 14808\n    },                                                                                                                 // 14809\n                                                                                                                       // 14810\n    $$reject: function(reason) {                                                                                       // 14811\n      this.promise.$$state.value = reason;                                                                             // 14812\n      this.promise.$$state.status = 2;                                                                                 // 14813\n      scheduleProcessQueue(this.promise.$$state);                                                                      // 14814\n    },                                                                                                                 // 14815\n                                                                                                                       // 14816\n    notify: function(progress) {                                                                                       // 14817\n      var callbacks = this.promise.$$state.pending;                                                                    // 14818\n                                                                                                                       // 14819\n      if ((this.promise.$$state.status <= 0) && callbacks && callbacks.length) {                                       // 14820\n        nextTick(function() {                                                                                          // 14821\n          var callback, result;                                                                                        // 14822\n          for (var i = 0, ii = callbacks.length; i < ii; i++) {                                                        // 14823\n            result = callbacks[i][0];                                                                                  // 14824\n            callback = callbacks[i][3];                                                                                // 14825\n            try {                                                                                                      // 14826\n              result.notify(isFunction(callback) ? callback(progress) : progress);                                     // 14827\n            } catch (e) {                                                                                              // 14828\n              exceptionHandler(e);                                                                                     // 14829\n            }                                                                                                          // 14830\n          }                                                                                                            // 14831\n        });                                                                                                            // 14832\n      }                                                                                                                // 14833\n    }                                                                                                                  // 14834\n  });                                                                                                                  // 14835\n                                                                                                                       // 14836\n  /**                                                                                                                  // 14837\n   * @ngdoc method                                                                                                     // 14838\n   * @name $q#reject                                                                                                   // 14839\n   * @kind function                                                                                                    // 14840\n   *                                                                                                                   // 14841\n   * @description                                                                                                      // 14842\n   * Creates a promise that is resolved as rejected with the specified `reason`. This api should be                    // 14843\n   * used to forward rejection in a chain of promises. If you are dealing with the last promise in                     // 14844\n   * a promise chain, you don't need to worry about it.                                                                // 14845\n   *                                                                                                                   // 14846\n   * When comparing deferreds/promises to the familiar behavior of try/catch/throw, think of                           // 14847\n   * `reject` as the `throw` keyword in JavaScript. This also means that if you \"catch\" an error via                   // 14848\n   * a promise error callback and you want to forward the error to the promise derived from the                        // 14849\n   * current promise, you have to \"rethrow\" the error by returning a rejection constructed via                         // 14850\n   * `reject`.                                                                                                         // 14851\n   *                                                                                                                   // 14852\n   * ```js                                                                                                             // 14853\n   *   promiseB = promiseA.then(function(result) {                                                                     // 14854\n   *     // success: do something and resolve promiseB                                                                 // 14855\n   *     //          with the old or a new result                                                                      // 14856\n   *     return result;                                                                                                // 14857\n   *   }, function(reason) {                                                                                           // 14858\n   *     // error: handle the error if possible and                                                                    // 14859\n   *     //        resolve promiseB with newPromiseOrValue,                                                            // 14860\n   *     //        otherwise forward the rejection to promiseB                                                         // 14861\n   *     if (canHandle(reason)) {                                                                                      // 14862\n   *      // handle the error and recover                                                                              // 14863\n   *      return newPromiseOrValue;                                                                                    // 14864\n   *     }                                                                                                             // 14865\n   *     return $q.reject(reason);                                                                                     // 14866\n   *   });                                                                                                             // 14867\n   * ```                                                                                                               // 14868\n   *                                                                                                                   // 14869\n   * @param {*} reason Constant, message, exception or an object representing the rejection reason.                    // 14870\n   * @returns {Promise} Returns a promise that was already resolved as rejected with the `reason`.                     // 14871\n   */                                                                                                                  // 14872\n  var reject = function(reason) {                                                                                      // 14873\n    var result = new Deferred();                                                                                       // 14874\n    result.reject(reason);                                                                                             // 14875\n    return result.promise;                                                                                             // 14876\n  };                                                                                                                   // 14877\n                                                                                                                       // 14878\n  var makePromise = function makePromise(value, resolved) {                                                            // 14879\n    var result = new Deferred();                                                                                       // 14880\n    if (resolved) {                                                                                                    // 14881\n      result.resolve(value);                                                                                           // 14882\n    } else {                                                                                                           // 14883\n      result.reject(value);                                                                                            // 14884\n    }                                                                                                                  // 14885\n    return result.promise;                                                                                             // 14886\n  };                                                                                                                   // 14887\n                                                                                                                       // 14888\n  var handleCallback = function handleCallback(value, isResolved, callback) {                                          // 14889\n    var callbackOutput = null;                                                                                         // 14890\n    try {                                                                                                              // 14891\n      if (isFunction(callback)) callbackOutput = callback();                                                           // 14892\n    } catch (e) {                                                                                                      // 14893\n      return makePromise(e, false);                                                                                    // 14894\n    }                                                                                                                  // 14895\n    if (isPromiseLike(callbackOutput)) {                                                                               // 14896\n      return callbackOutput.then(function() {                                                                          // 14897\n        return makePromise(value, isResolved);                                                                         // 14898\n      }, function(error) {                                                                                             // 14899\n        return makePromise(error, false);                                                                              // 14900\n      });                                                                                                              // 14901\n    } else {                                                                                                           // 14902\n      return makePromise(value, isResolved);                                                                           // 14903\n    }                                                                                                                  // 14904\n  };                                                                                                                   // 14905\n                                                                                                                       // 14906\n  /**                                                                                                                  // 14907\n   * @ngdoc method                                                                                                     // 14908\n   * @name $q#when                                                                                                     // 14909\n   * @kind function                                                                                                    // 14910\n   *                                                                                                                   // 14911\n   * @description                                                                                                      // 14912\n   * Wraps an object that might be a value or a (3rd party) then-able promise into a $q promise.                       // 14913\n   * This is useful when you are dealing with an object that might or might not be a promise, or if                    // 14914\n   * the promise comes from a source that can't be trusted.                                                            // 14915\n   *                                                                                                                   // 14916\n   * @param {*} value Value or a promise                                                                               // 14917\n   * @param {Function=} successCallback                                                                                // 14918\n   * @param {Function=} errorCallback                                                                                  // 14919\n   * @param {Function=} progressCallback                                                                               // 14920\n   * @returns {Promise} Returns a promise of the passed value or promise                                               // 14921\n   */                                                                                                                  // 14922\n                                                                                                                       // 14923\n                                                                                                                       // 14924\n  var when = function(value, callback, errback, progressBack) {                                                        // 14925\n    var result = new Deferred();                                                                                       // 14926\n    result.resolve(value);                                                                                             // 14927\n    return result.promise.then(callback, errback, progressBack);                                                       // 14928\n  };                                                                                                                   // 14929\n                                                                                                                       // 14930\n  /**                                                                                                                  // 14931\n   * @ngdoc method                                                                                                     // 14932\n   * @name $q#resolve                                                                                                  // 14933\n   * @kind function                                                                                                    // 14934\n   *                                                                                                                   // 14935\n   * @description                                                                                                      // 14936\n   * Alias of {@link ng.$q#when when} to maintain naming consistency with ES6.                                         // 14937\n   *                                                                                                                   // 14938\n   * @param {*} value Value or a promise                                                                               // 14939\n   * @param {Function=} successCallback                                                                                // 14940\n   * @param {Function=} errorCallback                                                                                  // 14941\n   * @param {Function=} progressCallback                                                                               // 14942\n   * @returns {Promise} Returns a promise of the passed value or promise                                               // 14943\n   */                                                                                                                  // 14944\n  var resolve = when;                                                                                                  // 14945\n                                                                                                                       // 14946\n  /**                                                                                                                  // 14947\n   * @ngdoc method                                                                                                     // 14948\n   * @name $q#all                                                                                                      // 14949\n   * @kind function                                                                                                    // 14950\n   *                                                                                                                   // 14951\n   * @description                                                                                                      // 14952\n   * Combines multiple promises into a single promise that is resolved when all of the input                           // 14953\n   * promises are resolved.                                                                                            // 14954\n   *                                                                                                                   // 14955\n   * @param {Array.<Promise>|Object.<Promise>} promises An array or hash of promises.                                  // 14956\n   * @returns {Promise} Returns a single promise that will be resolved with an array/hash of values,                   // 14957\n   *   each value corresponding to the promise at the same index/key in the `promises` array/hash.                     // 14958\n   *   If any of the promises is resolved with a rejection, this resulting promise will be rejected                    // 14959\n   *   with the same rejection value.                                                                                  // 14960\n   */                                                                                                                  // 14961\n                                                                                                                       // 14962\n  function all(promises) {                                                                                             // 14963\n    var deferred = new Deferred(),                                                                                     // 14964\n        counter = 0,                                                                                                   // 14965\n        results = isArray(promises) ? [] : {};                                                                         // 14966\n                                                                                                                       // 14967\n    forEach(promises, function(promise, key) {                                                                         // 14968\n      counter++;                                                                                                       // 14969\n      when(promise).then(function(value) {                                                                             // 14970\n        if (results.hasOwnProperty(key)) return;                                                                       // 14971\n        results[key] = value;                                                                                          // 14972\n        if (!(--counter)) deferred.resolve(results);                                                                   // 14973\n      }, function(reason) {                                                                                            // 14974\n        if (results.hasOwnProperty(key)) return;                                                                       // 14975\n        deferred.reject(reason);                                                                                       // 14976\n      });                                                                                                              // 14977\n    });                                                                                                                // 14978\n                                                                                                                       // 14979\n    if (counter === 0) {                                                                                               // 14980\n      deferred.resolve(results);                                                                                       // 14981\n    }                                                                                                                  // 14982\n                                                                                                                       // 14983\n    return deferred.promise;                                                                                           // 14984\n  }                                                                                                                    // 14985\n                                                                                                                       // 14986\n  var $Q = function Q(resolver) {                                                                                      // 14987\n    if (!isFunction(resolver)) {                                                                                       // 14988\n      throw $qMinErr('norslvr', \"Expected resolverFn, got '{0}'\", resolver);                                           // 14989\n    }                                                                                                                  // 14990\n                                                                                                                       // 14991\n    if (!(this instanceof Q)) {                                                                                        // 14992\n      // More useful when $Q is the Promise itself.                                                                    // 14993\n      return new Q(resolver);                                                                                          // 14994\n    }                                                                                                                  // 14995\n                                                                                                                       // 14996\n    var deferred = new Deferred();                                                                                     // 14997\n                                                                                                                       // 14998\n    function resolveFn(value) {                                                                                        // 14999\n      deferred.resolve(value);                                                                                         // 15000\n    }                                                                                                                  // 15001\n                                                                                                                       // 15002\n    function rejectFn(reason) {                                                                                        // 15003\n      deferred.reject(reason);                                                                                         // 15004\n    }                                                                                                                  // 15005\n                                                                                                                       // 15006\n    resolver(resolveFn, rejectFn);                                                                                     // 15007\n                                                                                                                       // 15008\n    return deferred.promise;                                                                                           // 15009\n  };                                                                                                                   // 15010\n                                                                                                                       // 15011\n  $Q.defer = defer;                                                                                                    // 15012\n  $Q.reject = reject;                                                                                                  // 15013\n  $Q.when = when;                                                                                                      // 15014\n  $Q.resolve = resolve;                                                                                                // 15015\n  $Q.all = all;                                                                                                        // 15016\n                                                                                                                       // 15017\n  return $Q;                                                                                                           // 15018\n}                                                                                                                      // 15019\n                                                                                                                       // 15020\nfunction $$RAFProvider() { //rAF                                                                                       // 15021\n  this.$get = ['$window', '$timeout', function($window, $timeout) {                                                    // 15022\n    var requestAnimationFrame = $window.requestAnimationFrame ||                                                       // 15023\n                                $window.webkitRequestAnimationFrame;                                                   // 15024\n                                                                                                                       // 15025\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||                                                         // 15026\n                               $window.webkitCancelAnimationFrame ||                                                   // 15027\n                               $window.webkitCancelRequestAnimationFrame;                                              // 15028\n                                                                                                                       // 15029\n    var rafSupported = !!requestAnimationFrame;                                                                        // 15030\n    var raf = rafSupported                                                                                             // 15031\n      ? function(fn) {                                                                                                 // 15032\n          var id = requestAnimationFrame(fn);                                                                          // 15033\n          return function() {                                                                                          // 15034\n            cancelAnimationFrame(id);                                                                                  // 15035\n          };                                                                                                           // 15036\n        }                                                                                                              // 15037\n      : function(fn) {                                                                                                 // 15038\n          var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666                                                // 15039\n          return function() {                                                                                          // 15040\n            $timeout.cancel(timer);                                                                                    // 15041\n          };                                                                                                           // 15042\n        };                                                                                                             // 15043\n                                                                                                                       // 15044\n    raf.supported = rafSupported;                                                                                      // 15045\n                                                                                                                       // 15046\n    return raf;                                                                                                        // 15047\n  }];                                                                                                                  // 15048\n}                                                                                                                      // 15049\n                                                                                                                       // 15050\n/**                                                                                                                    // 15051\n * DESIGN NOTES                                                                                                        // 15052\n *                                                                                                                     // 15053\n * The design decisions behind the scope are heavily favored for speed and memory consumption.                         // 15054\n *                                                                                                                     // 15055\n * The typical use of scope is to watch the expressions, which most of the time return the same                        // 15056\n * value as last time so we optimize the operation.                                                                    // 15057\n *                                                                                                                     // 15058\n * Closures construction is expensive in terms of speed as well as memory:                                             // 15059\n *   - No closures, instead use prototypical inheritance for API                                                       // 15060\n *   - Internal state needs to be stored on scope directly, which means that private state is                          // 15061\n *     exposed as $$____ properties                                                                                    // 15062\n *                                                                                                                     // 15063\n * Loop operations are optimized by using while(count--) { ... }                                                       // 15064\n *   - this means that in order to keep the same order of execution as addition we have to add                         // 15065\n *     items to the array at the beginning (unshift) instead of at the end (push)                                      // 15066\n *                                                                                                                     // 15067\n * Child scopes are created and removed often                                                                          // 15068\n *   - Using an array would be slow since inserts in middle are expensive so we use linked list                        // 15069\n *                                                                                                                     // 15070\n * There are few watches then a lot of observers. This is why you don't want the observer to be                        // 15071\n * implemented in the same way as watch. Watch requires return of initialization function which                        // 15072\n * are expensive to construct.                                                                                         // 15073\n */                                                                                                                    // 15074\n                                                                                                                       // 15075\n                                                                                                                       // 15076\n/**                                                                                                                    // 15077\n * @ngdoc provider                                                                                                     // 15078\n * @name $rootScopeProvider                                                                                            // 15079\n * @description                                                                                                        // 15080\n *                                                                                                                     // 15081\n * Provider for the $rootScope service.                                                                                // 15082\n */                                                                                                                    // 15083\n                                                                                                                       // 15084\n/**                                                                                                                    // 15085\n * @ngdoc method                                                                                                       // 15086\n * @name $rootScopeProvider#digestTtl                                                                                  // 15087\n * @description                                                                                                        // 15088\n *                                                                                                                     // 15089\n * Sets the number of `$digest` iterations the scope should attempt to execute before giving up and                    // 15090\n * assuming that the model is unstable.                                                                                // 15091\n *                                                                                                                     // 15092\n * The current default is 10 iterations.                                                                               // 15093\n *                                                                                                                     // 15094\n * In complex applications it's possible that the dependencies between `$watch`s will result in                        // 15095\n * several digest iterations. However if an application needs more than the default 10 digest                          // 15096\n * iterations for its model to stabilize then you should investigate what is causing the model to                      // 15097\n * continuously change during the digest.                                                                              // 15098\n *                                                                                                                     // 15099\n * Increasing the TTL could have performance implications, so you should not change it without                         // 15100\n * proper justification.                                                                                               // 15101\n *                                                                                                                     // 15102\n * @param {number} limit The number of digest iterations.                                                              // 15103\n */                                                                                                                    // 15104\n                                                                                                                       // 15105\n                                                                                                                       // 15106\n/**                                                                                                                    // 15107\n * @ngdoc service                                                                                                      // 15108\n * @name $rootScope                                                                                                    // 15109\n * @description                                                                                                        // 15110\n *                                                                                                                     // 15111\n * Every application has a single root {@link ng.$rootScope.Scope scope}.                                              // 15112\n * All other scopes are descendant scopes of the root scope. Scopes provide separation                                 // 15113\n * between the model and the view, via a mechanism for watching the model for changes.                                 // 15114\n * They also provide an event emission/broadcast and subscription facility. See the                                    // 15115\n * {@link guide/scope developer guide on scopes}.                                                                      // 15116\n */                                                                                                                    // 15117\nfunction $RootScopeProvider() {                                                                                        // 15118\n  var TTL = 10;                                                                                                        // 15119\n  var $rootScopeMinErr = minErr('$rootScope');                                                                         // 15120\n  var lastDirtyWatch = null;                                                                                           // 15121\n  var applyAsyncId = null;                                                                                             // 15122\n                                                                                                                       // 15123\n  this.digestTtl = function(value) {                                                                                   // 15124\n    if (arguments.length) {                                                                                            // 15125\n      TTL = value;                                                                                                     // 15126\n    }                                                                                                                  // 15127\n    return TTL;                                                                                                        // 15128\n  };                                                                                                                   // 15129\n                                                                                                                       // 15130\n  function createChildScopeClass(parent) {                                                                             // 15131\n    function ChildScope() {                                                                                            // 15132\n      this.$$watchers = this.$$nextSibling =                                                                           // 15133\n          this.$$childHead = this.$$childTail = null;                                                                  // 15134\n      this.$$listeners = {};                                                                                           // 15135\n      this.$$listenerCount = {};                                                                                       // 15136\n      this.$$watchersCount = 0;                                                                                        // 15137\n      this.$id = nextUid();                                                                                            // 15138\n      this.$$ChildScope = null;                                                                                        // 15139\n    }                                                                                                                  // 15140\n    ChildScope.prototype = parent;                                                                                     // 15141\n    return ChildScope;                                                                                                 // 15142\n  }                                                                                                                    // 15143\n                                                                                                                       // 15144\n  this.$get = ['$injector', '$exceptionHandler', '$parse', '$browser',                                                 // 15145\n      function($injector, $exceptionHandler, $parse, $browser) {                                                       // 15146\n                                                                                                                       // 15147\n    function destroyChildScope($event) {                                                                               // 15148\n        $event.currentScope.$$destroyed = true;                                                                        // 15149\n    }                                                                                                                  // 15150\n                                                                                                                       // 15151\n    /**                                                                                                                // 15152\n     * @ngdoc type                                                                                                     // 15153\n     * @name $rootScope.Scope                                                                                          // 15154\n     *                                                                                                                 // 15155\n     * @description                                                                                                    // 15156\n     * A root scope can be retrieved using the {@link ng.$rootScope $rootScope} key from the                           // 15157\n     * {@link auto.$injector $injector}. Child scopes are created using the                                            // 15158\n     * {@link ng.$rootScope.Scope#$new $new()} method. (Most scopes are created automatically when                     // 15159\n     * compiled HTML template is executed.) See also the {@link guide/scope Scopes guide} for                          // 15160\n     * an in-depth introduction and usage examples.                                                                    // 15161\n     *                                                                                                                 // 15162\n     *                                                                                                                 // 15163\n     * # Inheritance                                                                                                   // 15164\n     * A scope can inherit from a parent scope, as in this example:                                                    // 15165\n     * ```js                                                                                                           // 15166\n         var parent = $rootScope;                                                                                      // 15167\n         var child = parent.$new();                                                                                    // 15168\n                                                                                                                       // 15169\n         parent.salutation = \"Hello\";                                                                                  // 15170\n         expect(child.salutation).toEqual('Hello');                                                                    // 15171\n                                                                                                                       // 15172\n         child.salutation = \"Welcome\";                                                                                 // 15173\n         expect(child.salutation).toEqual('Welcome');                                                                  // 15174\n         expect(parent.salutation).toEqual('Hello');                                                                   // 15175\n     * ```                                                                                                             // 15176\n     *                                                                                                                 // 15177\n     * When interacting with `Scope` in tests, additional helper methods are available on the                          // 15178\n     * instances of `Scope` type. See {@link ngMock.$rootScope.Scope ngMock Scope} for additional                      // 15179\n     * details.                                                                                                        // 15180\n     *                                                                                                                 // 15181\n     *                                                                                                                 // 15182\n     * @param {Object.<string, function()>=} providers Map of service factory which need to be                         // 15183\n     *                                       provided for the current scope. Defaults to {@link ng}.                   // 15184\n     * @param {Object.<string, *>=} instanceCache Provides pre-instantiated services which should                      // 15185\n     *                              append/override services provided by `providers`. This is handy                    // 15186\n     *                              when unit-testing and having the need to override a default                        // 15187\n     *                              service.                                                                           // 15188\n     * @returns {Object} Newly created scope.                                                                          // 15189\n     *                                                                                                                 // 15190\n     */                                                                                                                // 15191\n    function Scope() {                                                                                                 // 15192\n      this.$id = nextUid();                                                                                            // 15193\n      this.$$phase = this.$parent = this.$$watchers =                                                                  // 15194\n                     this.$$nextSibling = this.$$prevSibling =                                                         // 15195\n                     this.$$childHead = this.$$childTail = null;                                                       // 15196\n      this.$root = this;                                                                                               // 15197\n      this.$$destroyed = false;                                                                                        // 15198\n      this.$$listeners = {};                                                                                           // 15199\n      this.$$listenerCount = {};                                                                                       // 15200\n      this.$$watchersCount = 0;                                                                                        // 15201\n      this.$$isolateBindings = null;                                                                                   // 15202\n    }                                                                                                                  // 15203\n                                                                                                                       // 15204\n    /**                                                                                                                // 15205\n     * @ngdoc property                                                                                                 // 15206\n     * @name $rootScope.Scope#$id                                                                                      // 15207\n     *                                                                                                                 // 15208\n     * @description                                                                                                    // 15209\n     * Unique scope ID (monotonically increasing) useful for debugging.                                                // 15210\n     */                                                                                                                // 15211\n                                                                                                                       // 15212\n     /**                                                                                                               // 15213\n      * @ngdoc property                                                                                                // 15214\n      * @name $rootScope.Scope#$parent                                                                                 // 15215\n      *                                                                                                                // 15216\n      * @description                                                                                                   // 15217\n      * Reference to the parent scope.                                                                                 // 15218\n      */                                                                                                               // 15219\n                                                                                                                       // 15220\n      /**                                                                                                              // 15221\n       * @ngdoc property                                                                                               // 15222\n       * @name $rootScope.Scope#$root                                                                                  // 15223\n       *                                                                                                               // 15224\n       * @description                                                                                                  // 15225\n       * Reference to the root scope.                                                                                  // 15226\n       */                                                                                                              // 15227\n                                                                                                                       // 15228\n    Scope.prototype = {                                                                                                // 15229\n      constructor: Scope,                                                                                              // 15230\n      /**                                                                                                              // 15231\n       * @ngdoc method                                                                                                 // 15232\n       * @name $rootScope.Scope#$new                                                                                   // 15233\n       * @kind function                                                                                                // 15234\n       *                                                                                                               // 15235\n       * @description                                                                                                  // 15236\n       * Creates a new child {@link ng.$rootScope.Scope scope}.                                                        // 15237\n       *                                                                                                               // 15238\n       * The parent scope will propagate the {@link ng.$rootScope.Scope#$digest $digest()} event.                      // 15239\n       * The scope can be removed from the scope hierarchy using {@link ng.$rootScope.Scope#$destroy $destroy()}.      // 15240\n       *                                                                                                               // 15241\n       * {@link ng.$rootScope.Scope#$destroy $destroy()} must be called on a scope when it is                          // 15242\n       * desired for the scope and its child scopes to be permanently detached from the parent and                     // 15243\n       * thus stop participating in model change detection and listener notification by invoking.                      // 15244\n       *                                                                                                               // 15245\n       * @param {boolean} isolate If true, then the scope does not prototypically inherit from the                     // 15246\n       *         parent scope. The scope is isolated, as it can not see parent scope properties.                       // 15247\n       *         When creating widgets, it is useful for the widget to not accidentally read parent                    // 15248\n       *         state.                                                                                                // 15249\n       *                                                                                                               // 15250\n       * @param {Scope} [parent=this] The {@link ng.$rootScope.Scope `Scope`} that will be the `$parent`               // 15251\n       *                              of the newly created scope. Defaults to `this` scope if not provided.            // 15252\n       *                              This is used when creating a transclude scope to correctly place it              // 15253\n       *                              in the scope hierarchy while maintaining the correct prototypical                // 15254\n       *                              inheritance.                                                                     // 15255\n       *                                                                                                               // 15256\n       * @returns {Object} The newly created child scope.                                                              // 15257\n       *                                                                                                               // 15258\n       */                                                                                                              // 15259\n      $new: function(isolate, parent) {                                                                                // 15260\n        var child;                                                                                                     // 15261\n                                                                                                                       // 15262\n        parent = parent || this;                                                                                       // 15263\n                                                                                                                       // 15264\n        if (isolate) {                                                                                                 // 15265\n          child = new Scope();                                                                                         // 15266\n          child.$root = this.$root;                                                                                    // 15267\n        } else {                                                                                                       // 15268\n          // Only create a child scope class if somebody asks for one,                                                 // 15269\n          // but cache it to allow the VM to optimize lookups.                                                         // 15270\n          if (!this.$$ChildScope) {                                                                                    // 15271\n            this.$$ChildScope = createChildScopeClass(this);                                                           // 15272\n          }                                                                                                            // 15273\n          child = new this.$$ChildScope();                                                                             // 15274\n        }                                                                                                              // 15275\n        child.$parent = parent;                                                                                        // 15276\n        child.$$prevSibling = parent.$$childTail;                                                                      // 15277\n        if (parent.$$childHead) {                                                                                      // 15278\n          parent.$$childTail.$$nextSibling = child;                                                                    // 15279\n          parent.$$childTail = child;                                                                                  // 15280\n        } else {                                                                                                       // 15281\n          parent.$$childHead = parent.$$childTail = child;                                                             // 15282\n        }                                                                                                              // 15283\n                                                                                                                       // 15284\n        // When the new scope is not isolated or we inherit from `this`, and                                           // 15285\n        // the parent scope is destroyed, the property `$$destroyed` is inherited                                      // 15286\n        // prototypically. In all other cases, this property needs to be set                                           // 15287\n        // when the parent scope is destroyed.                                                                         // 15288\n        // The listener needs to be added after the parent is set                                                      // 15289\n        if (isolate || parent != this) child.$on('$destroy', destroyChildScope);                                       // 15290\n                                                                                                                       // 15291\n        return child;                                                                                                  // 15292\n      },                                                                                                               // 15293\n                                                                                                                       // 15294\n      /**                                                                                                              // 15295\n       * @ngdoc method                                                                                                 // 15296\n       * @name $rootScope.Scope#$watch                                                                                 // 15297\n       * @kind function                                                                                                // 15298\n       *                                                                                                               // 15299\n       * @description                                                                                                  // 15300\n       * Registers a `listener` callback to be executed whenever the `watchExpression` changes.                        // 15301\n       *                                                                                                               // 15302\n       * - The `watchExpression` is called on every call to {@link ng.$rootScope.Scope#$digest                         // 15303\n       *   $digest()} and should return the value that will be watched. (`watchExpression` should not change           // 15304\n       *   its value when executed multiple times with the same input because it may be executed multiple              // 15305\n       *   times by {@link ng.$rootScope.Scope#$digest $digest()}. That is, `watchExpression` should be                // 15306\n       *   [idempotent](http://en.wikipedia.org/wiki/Idempotence).                                                     // 15307\n       * - The `listener` is called only when the value from the current `watchExpression` and the                     // 15308\n       *   previous call to `watchExpression` are not equal (with the exception of the initial run,                    // 15309\n       *   see below). Inequality is determined according to reference inequality,                                     // 15310\n       *   [strict comparison](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators)\n       *    via the `!==` Javascript operator, unless `objectEquality == true`                                         // 15312\n       *   (see next point)                                                                                            // 15313\n       * - When `objectEquality == true`, inequality of the `watchExpression` is determined                            // 15314\n       *   according to the {@link angular.equals} function. To save the value of the object for                       // 15315\n       *   later comparison, the {@link angular.copy} function is used. This therefore means that                      // 15316\n       *   watching complex objects will have adverse memory and performance implications.                             // 15317\n       * - The watch `listener` may change the model, which may trigger other `listener`s to fire.                     // 15318\n       *   This is achieved by rerunning the watchers until no changes are detected. The rerun                         // 15319\n       *   iteration limit is 10 to prevent an infinite loop deadlock.                                                 // 15320\n       *                                                                                                               // 15321\n       *                                                                                                               // 15322\n       * If you want to be notified whenever {@link ng.$rootScope.Scope#$digest $digest} is called,                    // 15323\n       * you can register a `watchExpression` function with no `listener`. (Be prepared for                            // 15324\n       * multiple calls to your `watchExpression` because it will execute multiple times in a                          // 15325\n       * single {@link ng.$rootScope.Scope#$digest $digest} cycle if a change is detected.)                            // 15326\n       *                                                                                                               // 15327\n       * After a watcher is registered with the scope, the `listener` fn is called asynchronously                      // 15328\n       * (via {@link ng.$rootScope.Scope#$evalAsync $evalAsync}) to initialize the                                     // 15329\n       * watcher. In rare cases, this is undesirable because the listener is called when the result                    // 15330\n       * of `watchExpression` didn't change. To detect this scenario within the `listener` fn, you                     // 15331\n       * can compare the `newVal` and `oldVal`. If these two values are identical (`===`) then the                     // 15332\n       * listener was called due to initialization.                                                                    // 15333\n       *                                                                                                               // 15334\n       *                                                                                                               // 15335\n       *                                                                                                               // 15336\n       * # Example                                                                                                     // 15337\n       * ```js                                                                                                         // 15338\n           // let's assume that scope was dependency injected as the $rootScope                                        // 15339\n           var scope = $rootScope;                                                                                     // 15340\n           scope.name = 'misko';                                                                                       // 15341\n           scope.counter = 0;                                                                                          // 15342\n                                                                                                                       // 15343\n           expect(scope.counter).toEqual(0);                                                                           // 15344\n           scope.$watch('name', function(newValue, oldValue) {                                                         // 15345\n             scope.counter = scope.counter + 1;                                                                        // 15346\n           });                                                                                                         // 15347\n           expect(scope.counter).toEqual(0);                                                                           // 15348\n                                                                                                                       // 15349\n           scope.$digest();                                                                                            // 15350\n           // the listener is always called during the first $digest loop after it was registered                      // 15351\n           expect(scope.counter).toEqual(1);                                                                           // 15352\n                                                                                                                       // 15353\n           scope.$digest();                                                                                            // 15354\n           // but now it will not be called unless the value changes                                                   // 15355\n           expect(scope.counter).toEqual(1);                                                                           // 15356\n                                                                                                                       // 15357\n           scope.name = 'adam';                                                                                        // 15358\n           scope.$digest();                                                                                            // 15359\n           expect(scope.counter).toEqual(2);                                                                           // 15360\n                                                                                                                       // 15361\n                                                                                                                       // 15362\n                                                                                                                       // 15363\n           // Using a function as a watchExpression                                                                    // 15364\n           var food;                                                                                                   // 15365\n           scope.foodCounter = 0;                                                                                      // 15366\n           expect(scope.foodCounter).toEqual(0);                                                                       // 15367\n           scope.$watch(                                                                                               // 15368\n             // This function returns the value being watched. It is called for each turn of the $digest loop          // 15369\n             function() { return food; },                                                                              // 15370\n             // This is the change listener, called when the value returned from the above function changes            // 15371\n             function(newValue, oldValue) {                                                                            // 15372\n               if ( newValue !== oldValue ) {                                                                          // 15373\n                 // Only increment the counter if the value changed                                                    // 15374\n                 scope.foodCounter = scope.foodCounter + 1;                                                            // 15375\n               }                                                                                                       // 15376\n             }                                                                                                         // 15377\n           );                                                                                                          // 15378\n           // No digest has been run so the counter will be zero                                                       // 15379\n           expect(scope.foodCounter).toEqual(0);                                                                       // 15380\n                                                                                                                       // 15381\n           // Run the digest but since food has not changed count will still be zero                                   // 15382\n           scope.$digest();                                                                                            // 15383\n           expect(scope.foodCounter).toEqual(0);                                                                       // 15384\n                                                                                                                       // 15385\n           // Update food and run digest.  Now the counter will increment                                              // 15386\n           food = 'cheeseburger';                                                                                      // 15387\n           scope.$digest();                                                                                            // 15388\n           expect(scope.foodCounter).toEqual(1);                                                                       // 15389\n                                                                                                                       // 15390\n       * ```                                                                                                           // 15391\n       *                                                                                                               // 15392\n       *                                                                                                               // 15393\n       *                                                                                                               // 15394\n       * @param {(function()|string)} watchExpression Expression that is evaluated on each                             // 15395\n       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. A change in the return value triggers                   // 15396\n       *    a call to the `listener`.                                                                                  // 15397\n       *                                                                                                               // 15398\n       *    - `string`: Evaluated as {@link guide/expression expression}                                               // 15399\n       *    - `function(scope)`: called with current `scope` as a parameter.                                           // 15400\n       * @param {function(newVal, oldVal, scope)} listener Callback called whenever the value                          // 15401\n       *    of `watchExpression` changes.                                                                              // 15402\n       *                                                                                                               // 15403\n       *    - `newVal` contains the current value of the `watchExpression`                                             // 15404\n       *    - `oldVal` contains the previous value of the `watchExpression`                                            // 15405\n       *    - `scope` refers to the current scope                                                                      // 15406\n       * @param {boolean=} objectEquality Compare for object equality using {@link angular.equals} instead of          // 15407\n       *     comparing for reference equality.                                                                         // 15408\n       * @returns {function()} Returns a deregistration function for this listener.                                    // 15409\n       */                                                                                                              // 15410\n      $watch: function(watchExp, listener, objectEquality, prettyPrintExpression) {                                    // 15411\n        var get = $parse(watchExp);                                                                                    // 15412\n                                                                                                                       // 15413\n        if (get.$$watchDelegate) {                                                                                     // 15414\n          return get.$$watchDelegate(this, listener, objectEquality, get, watchExp);                                   // 15415\n        }                                                                                                              // 15416\n        var scope = this,                                                                                              // 15417\n            array = scope.$$watchers,                                                                                  // 15418\n            watcher = {                                                                                                // 15419\n              fn: listener,                                                                                            // 15420\n              last: initWatchVal,                                                                                      // 15421\n              get: get,                                                                                                // 15422\n              exp: prettyPrintExpression || watchExp,                                                                  // 15423\n              eq: !!objectEquality                                                                                     // 15424\n            };                                                                                                         // 15425\n                                                                                                                       // 15426\n        lastDirtyWatch = null;                                                                                         // 15427\n                                                                                                                       // 15428\n        if (!isFunction(listener)) {                                                                                   // 15429\n          watcher.fn = noop;                                                                                           // 15430\n        }                                                                                                              // 15431\n                                                                                                                       // 15432\n        if (!array) {                                                                                                  // 15433\n          array = scope.$$watchers = [];                                                                               // 15434\n        }                                                                                                              // 15435\n        // we use unshift since we use a while loop in $digest for speed.                                              // 15436\n        // the while loop reads in reverse order.                                                                      // 15437\n        array.unshift(watcher);                                                                                        // 15438\n        incrementWatchersCount(this, 1);                                                                               // 15439\n                                                                                                                       // 15440\n        return function deregisterWatch() {                                                                            // 15441\n          if (arrayRemove(array, watcher) >= 0) {                                                                      // 15442\n            incrementWatchersCount(scope, -1);                                                                         // 15443\n          }                                                                                                            // 15444\n          lastDirtyWatch = null;                                                                                       // 15445\n        };                                                                                                             // 15446\n      },                                                                                                               // 15447\n                                                                                                                       // 15448\n      /**                                                                                                              // 15449\n       * @ngdoc method                                                                                                 // 15450\n       * @name $rootScope.Scope#$watchGroup                                                                            // 15451\n       * @kind function                                                                                                // 15452\n       *                                                                                                               // 15453\n       * @description                                                                                                  // 15454\n       * A variant of {@link ng.$rootScope.Scope#$watch $watch()} where it watches an array of `watchExpressions`.     // 15455\n       * If any one expression in the collection changes the `listener` is executed.                                   // 15456\n       *                                                                                                               // 15457\n       * - The items in the `watchExpressions` array are observed via standard $watch operation and are examined on every\n       *   call to $digest() to see if any items changes.                                                              // 15459\n       * - The `listener` is called whenever any expression in the `watchExpressions` array changes.                   // 15460\n       *                                                                                                               // 15461\n       * @param {Array.<string|Function(scope)>} watchExpressions Array of expressions that will be individually       // 15462\n       * watched using {@link ng.$rootScope.Scope#$watch $watch()}                                                     // 15463\n       *                                                                                                               // 15464\n       * @param {function(newValues, oldValues, scope)} listener Callback called whenever the return value of any      // 15465\n       *    expression in `watchExpressions` changes                                                                   // 15466\n       *    The `newValues` array contains the current values of the `watchExpressions`, with the indexes matching     // 15467\n       *    those of `watchExpression`                                                                                 // 15468\n       *    and the `oldValues` array contains the previous values of the `watchExpressions`, with the indexes matching\n       *    those of `watchExpression`                                                                                 // 15470\n       *    The `scope` refers to the current scope.                                                                   // 15471\n       * @returns {function()} Returns a de-registration function for all listeners.                                   // 15472\n       */                                                                                                              // 15473\n      $watchGroup: function(watchExpressions, listener) {                                                              // 15474\n        var oldValues = new Array(watchExpressions.length);                                                            // 15475\n        var newValues = new Array(watchExpressions.length);                                                            // 15476\n        var deregisterFns = [];                                                                                        // 15477\n        var self = this;                                                                                               // 15478\n        var changeReactionScheduled = false;                                                                           // 15479\n        var firstRun = true;                                                                                           // 15480\n                                                                                                                       // 15481\n        if (!watchExpressions.length) {                                                                                // 15482\n          // No expressions means we call the listener ASAP                                                            // 15483\n          var shouldCall = true;                                                                                       // 15484\n          self.$evalAsync(function() {                                                                                 // 15485\n            if (shouldCall) listener(newValues, newValues, self);                                                      // 15486\n          });                                                                                                          // 15487\n          return function deregisterWatchGroup() {                                                                     // 15488\n            shouldCall = false;                                                                                        // 15489\n          };                                                                                                           // 15490\n        }                                                                                                              // 15491\n                                                                                                                       // 15492\n        if (watchExpressions.length === 1) {                                                                           // 15493\n          // Special case size of one                                                                                  // 15494\n          return this.$watch(watchExpressions[0], function watchGroupAction(value, oldValue, scope) {                  // 15495\n            newValues[0] = value;                                                                                      // 15496\n            oldValues[0] = oldValue;                                                                                   // 15497\n            listener(newValues, (value === oldValue) ? newValues : oldValues, scope);                                  // 15498\n          });                                                                                                          // 15499\n        }                                                                                                              // 15500\n                                                                                                                       // 15501\n        forEach(watchExpressions, function(expr, i) {                                                                  // 15502\n          var unwatchFn = self.$watch(expr, function watchGroupSubAction(value, oldValue) {                            // 15503\n            newValues[i] = value;                                                                                      // 15504\n            oldValues[i] = oldValue;                                                                                   // 15505\n            if (!changeReactionScheduled) {                                                                            // 15506\n              changeReactionScheduled = true;                                                                          // 15507\n              self.$evalAsync(watchGroupAction);                                                                       // 15508\n            }                                                                                                          // 15509\n          });                                                                                                          // 15510\n          deregisterFns.push(unwatchFn);                                                                               // 15511\n        });                                                                                                            // 15512\n                                                                                                                       // 15513\n        function watchGroupAction() {                                                                                  // 15514\n          changeReactionScheduled = false;                                                                             // 15515\n                                                                                                                       // 15516\n          if (firstRun) {                                                                                              // 15517\n            firstRun = false;                                                                                          // 15518\n            listener(newValues, newValues, self);                                                                      // 15519\n          } else {                                                                                                     // 15520\n            listener(newValues, oldValues, self);                                                                      // 15521\n          }                                                                                                            // 15522\n        }                                                                                                              // 15523\n                                                                                                                       // 15524\n        return function deregisterWatchGroup() {                                                                       // 15525\n          while (deregisterFns.length) {                                                                               // 15526\n            deregisterFns.shift()();                                                                                   // 15527\n          }                                                                                                            // 15528\n        };                                                                                                             // 15529\n      },                                                                                                               // 15530\n                                                                                                                       // 15531\n                                                                                                                       // 15532\n      /**                                                                                                              // 15533\n       * @ngdoc method                                                                                                 // 15534\n       * @name $rootScope.Scope#$watchCollection                                                                       // 15535\n       * @kind function                                                                                                // 15536\n       *                                                                                                               // 15537\n       * @description                                                                                                  // 15538\n       * Shallow watches the properties of an object and fires whenever any of the properties change                   // 15539\n       * (for arrays, this implies watching the array items; for object maps, this implies watching                    // 15540\n       * the properties). If a change is detected, the `listener` callback is fired.                                   // 15541\n       *                                                                                                               // 15542\n       * - The `obj` collection is observed via standard $watch operation and is examined on every                     // 15543\n       *   call to $digest() to see if any items have been added, removed, or moved.                                   // 15544\n       * - The `listener` is called whenever anything within the `obj` has changed. Examples include                   // 15545\n       *   adding, removing, and moving items belonging to an object or array.                                         // 15546\n       *                                                                                                               // 15547\n       *                                                                                                               // 15548\n       * # Example                                                                                                     // 15549\n       * ```js                                                                                                         // 15550\n          $scope.names = ['igor', 'matias', 'misko', 'james'];                                                         // 15551\n          $scope.dataCount = 4;                                                                                        // 15552\n                                                                                                                       // 15553\n          $scope.$watchCollection('names', function(newNames, oldNames) {                                              // 15554\n            $scope.dataCount = newNames.length;                                                                        // 15555\n          });                                                                                                          // 15556\n                                                                                                                       // 15557\n          expect($scope.dataCount).toEqual(4);                                                                         // 15558\n          $scope.$digest();                                                                                            // 15559\n                                                                                                                       // 15560\n          //still at 4 ... no changes                                                                                  // 15561\n          expect($scope.dataCount).toEqual(4);                                                                         // 15562\n                                                                                                                       // 15563\n          $scope.names.pop();                                                                                          // 15564\n          $scope.$digest();                                                                                            // 15565\n                                                                                                                       // 15566\n          //now there's been a change                                                                                  // 15567\n          expect($scope.dataCount).toEqual(3);                                                                         // 15568\n       * ```                                                                                                           // 15569\n       *                                                                                                               // 15570\n       *                                                                                                               // 15571\n       * @param {string|function(scope)} obj Evaluated as {@link guide/expression expression}. The                     // 15572\n       *    expression value should evaluate to an object or an array which is observed on each                        // 15573\n       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. Any shallow change within the                           // 15574\n       *    collection will trigger a call to the `listener`.                                                          // 15575\n       *                                                                                                               // 15576\n       * @param {function(newCollection, oldCollection, scope)} listener a callback function called                    // 15577\n       *    when a change is detected.                                                                                 // 15578\n       *    - The `newCollection` object is the newly modified data obtained from the `obj` expression                 // 15579\n       *    - The `oldCollection` object is a copy of the former collection data.                                      // 15580\n       *      Due to performance considerations, the`oldCollection` value is computed only if the                      // 15581\n       *      `listener` function declares two or more arguments.                                                      // 15582\n       *    - The `scope` argument refers to the current scope.                                                        // 15583\n       *                                                                                                               // 15584\n       * @returns {function()} Returns a de-registration function for this listener. When the                          // 15585\n       *    de-registration function is executed, the internal watch operation is terminated.                          // 15586\n       */                                                                                                              // 15587\n      $watchCollection: function(obj, listener) {                                                                      // 15588\n        $watchCollectionInterceptor.$stateful = true;                                                                  // 15589\n                                                                                                                       // 15590\n        var self = this;                                                                                               // 15591\n        // the current value, updated on each dirty-check run                                                          // 15592\n        var newValue;                                                                                                  // 15593\n        // a shallow copy of the newValue from the last dirty-check run,                                               // 15594\n        // updated to match newValue during dirty-check run                                                            // 15595\n        var oldValue;                                                                                                  // 15596\n        // a shallow copy of the newValue from when the last change happened                                           // 15597\n        var veryOldValue;                                                                                              // 15598\n        // only track veryOldValue if the listener is asking for it                                                    // 15599\n        var trackVeryOldValue = (listener.length > 1);                                                                 // 15600\n        var changeDetected = 0;                                                                                        // 15601\n        var changeDetector = $parse(obj, $watchCollectionInterceptor);                                                 // 15602\n        var internalArray = [];                                                                                        // 15603\n        var internalObject = {};                                                                                       // 15604\n        var initRun = true;                                                                                            // 15605\n        var oldLength = 0;                                                                                             // 15606\n                                                                                                                       // 15607\n        function $watchCollectionInterceptor(_value) {                                                                 // 15608\n          newValue = _value;                                                                                           // 15609\n          var newLength, key, bothNaN, newItem, oldItem;                                                               // 15610\n                                                                                                                       // 15611\n          // If the new value is undefined, then return undefined as the watch may be a one-time watch                 // 15612\n          if (isUndefined(newValue)) return;                                                                           // 15613\n                                                                                                                       // 15614\n          if (!isObject(newValue)) { // if primitive                                                                   // 15615\n            if (oldValue !== newValue) {                                                                               // 15616\n              oldValue = newValue;                                                                                     // 15617\n              changeDetected++;                                                                                        // 15618\n            }                                                                                                          // 15619\n          } else if (isArrayLike(newValue)) {                                                                          // 15620\n            if (oldValue !== internalArray) {                                                                          // 15621\n              // we are transitioning from something which was not an array into array.                                // 15622\n              oldValue = internalArray;                                                                                // 15623\n              oldLength = oldValue.length = 0;                                                                         // 15624\n              changeDetected++;                                                                                        // 15625\n            }                                                                                                          // 15626\n                                                                                                                       // 15627\n            newLength = newValue.length;                                                                               // 15628\n                                                                                                                       // 15629\n            if (oldLength !== newLength) {                                                                             // 15630\n              // if lengths do not match we need to trigger change notification                                        // 15631\n              changeDetected++;                                                                                        // 15632\n              oldValue.length = oldLength = newLength;                                                                 // 15633\n            }                                                                                                          // 15634\n            // copy the items to oldValue and look for changes.                                                        // 15635\n            for (var i = 0; i < newLength; i++) {                                                                      // 15636\n              oldItem = oldValue[i];                                                                                   // 15637\n              newItem = newValue[i];                                                                                   // 15638\n                                                                                                                       // 15639\n              bothNaN = (oldItem !== oldItem) && (newItem !== newItem);                                                // 15640\n              if (!bothNaN && (oldItem !== newItem)) {                                                                 // 15641\n                changeDetected++;                                                                                      // 15642\n                oldValue[i] = newItem;                                                                                 // 15643\n              }                                                                                                        // 15644\n            }                                                                                                          // 15645\n          } else {                                                                                                     // 15646\n            if (oldValue !== internalObject) {                                                                         // 15647\n              // we are transitioning from something which was not an object into object.                              // 15648\n              oldValue = internalObject = {};                                                                          // 15649\n              oldLength = 0;                                                                                           // 15650\n              changeDetected++;                                                                                        // 15651\n            }                                                                                                          // 15652\n            // copy the items to oldValue and look for changes.                                                        // 15653\n            newLength = 0;                                                                                             // 15654\n            for (key in newValue) {                                                                                    // 15655\n              if (hasOwnProperty.call(newValue, key)) {                                                                // 15656\n                newLength++;                                                                                           // 15657\n                newItem = newValue[key];                                                                               // 15658\n                oldItem = oldValue[key];                                                                               // 15659\n                                                                                                                       // 15660\n                if (key in oldValue) {                                                                                 // 15661\n                  bothNaN = (oldItem !== oldItem) && (newItem !== newItem);                                            // 15662\n                  if (!bothNaN && (oldItem !== newItem)) {                                                             // 15663\n                    changeDetected++;                                                                                  // 15664\n                    oldValue[key] = newItem;                                                                           // 15665\n                  }                                                                                                    // 15666\n                } else {                                                                                               // 15667\n                  oldLength++;                                                                                         // 15668\n                  oldValue[key] = newItem;                                                                             // 15669\n                  changeDetected++;                                                                                    // 15670\n                }                                                                                                      // 15671\n              }                                                                                                        // 15672\n            }                                                                                                          // 15673\n            if (oldLength > newLength) {                                                                               // 15674\n              // we used to have more keys, need to find them and destroy them.                                        // 15675\n              changeDetected++;                                                                                        // 15676\n              for (key in oldValue) {                                                                                  // 15677\n                if (!hasOwnProperty.call(newValue, key)) {                                                             // 15678\n                  oldLength--;                                                                                         // 15679\n                  delete oldValue[key];                                                                                // 15680\n                }                                                                                                      // 15681\n              }                                                                                                        // 15682\n            }                                                                                                          // 15683\n          }                                                                                                            // 15684\n          return changeDetected;                                                                                       // 15685\n        }                                                                                                              // 15686\n                                                                                                                       // 15687\n        function $watchCollectionAction() {                                                                            // 15688\n          if (initRun) {                                                                                               // 15689\n            initRun = false;                                                                                           // 15690\n            listener(newValue, newValue, self);                                                                        // 15691\n          } else {                                                                                                     // 15692\n            listener(newValue, veryOldValue, self);                                                                    // 15693\n          }                                                                                                            // 15694\n                                                                                                                       // 15695\n          // make a copy for the next time a collection is changed                                                     // 15696\n          if (trackVeryOldValue) {                                                                                     // 15697\n            if (!isObject(newValue)) {                                                                                 // 15698\n              //primitive                                                                                              // 15699\n              veryOldValue = newValue;                                                                                 // 15700\n            } else if (isArrayLike(newValue)) {                                                                        // 15701\n              veryOldValue = new Array(newValue.length);                                                               // 15702\n              for (var i = 0; i < newValue.length; i++) {                                                              // 15703\n                veryOldValue[i] = newValue[i];                                                                         // 15704\n              }                                                                                                        // 15705\n            } else { // if object                                                                                      // 15706\n              veryOldValue = {};                                                                                       // 15707\n              for (var key in newValue) {                                                                              // 15708\n                if (hasOwnProperty.call(newValue, key)) {                                                              // 15709\n                  veryOldValue[key] = newValue[key];                                                                   // 15710\n                }                                                                                                      // 15711\n              }                                                                                                        // 15712\n            }                                                                                                          // 15713\n          }                                                                                                            // 15714\n        }                                                                                                              // 15715\n                                                                                                                       // 15716\n        return this.$watch(changeDetector, $watchCollectionAction);                                                    // 15717\n      },                                                                                                               // 15718\n                                                                                                                       // 15719\n      /**                                                                                                              // 15720\n       * @ngdoc method                                                                                                 // 15721\n       * @name $rootScope.Scope#$digest                                                                                // 15722\n       * @kind function                                                                                                // 15723\n       *                                                                                                               // 15724\n       * @description                                                                                                  // 15725\n       * Processes all of the {@link ng.$rootScope.Scope#$watch watchers} of the current scope and                     // 15726\n       * its children. Because a {@link ng.$rootScope.Scope#$watch watcher}'s listener can change                      // 15727\n       * the model, the `$digest()` keeps calling the {@link ng.$rootScope.Scope#$watch watchers}                      // 15728\n       * until no more listeners are firing. This means that it is possible to get into an infinite                    // 15729\n       * loop. This function will throw `'Maximum iteration limit exceeded.'` if the number of                         // 15730\n       * iterations exceeds 10.                                                                                        // 15731\n       *                                                                                                               // 15732\n       * Usually, you don't call `$digest()` directly in                                                               // 15733\n       * {@link ng.directive:ngController controllers} or in                                                           // 15734\n       * {@link ng.$compileProvider#directive directives}.                                                             // 15735\n       * Instead, you should call {@link ng.$rootScope.Scope#$apply $apply()} (typically from within                   // 15736\n       * a {@link ng.$compileProvider#directive directive}), which will force a `$digest()`.                           // 15737\n       *                                                                                                               // 15738\n       * If you want to be notified whenever `$digest()` is called,                                                    // 15739\n       * you can register a `watchExpression` function with                                                            // 15740\n       * {@link ng.$rootScope.Scope#$watch $watch()} with no `listener`.                                               // 15741\n       *                                                                                                               // 15742\n       * In unit tests, you may need to call `$digest()` to simulate the scope life cycle.                             // 15743\n       *                                                                                                               // 15744\n       * # Example                                                                                                     // 15745\n       * ```js                                                                                                         // 15746\n           var scope = ...;                                                                                            // 15747\n           scope.name = 'misko';                                                                                       // 15748\n           scope.counter = 0;                                                                                          // 15749\n                                                                                                                       // 15750\n           expect(scope.counter).toEqual(0);                                                                           // 15751\n           scope.$watch('name', function(newValue, oldValue) {                                                         // 15752\n             scope.counter = scope.counter + 1;                                                                        // 15753\n           });                                                                                                         // 15754\n           expect(scope.counter).toEqual(0);                                                                           // 15755\n                                                                                                                       // 15756\n           scope.$digest();                                                                                            // 15757\n           // the listener is always called during the first $digest loop after it was registered                      // 15758\n           expect(scope.counter).toEqual(1);                                                                           // 15759\n                                                                                                                       // 15760\n           scope.$digest();                                                                                            // 15761\n           // but now it will not be called unless the value changes                                                   // 15762\n           expect(scope.counter).toEqual(1);                                                                           // 15763\n                                                                                                                       // 15764\n           scope.name = 'adam';                                                                                        // 15765\n           scope.$digest();                                                                                            // 15766\n           expect(scope.counter).toEqual(2);                                                                           // 15767\n       * ```                                                                                                           // 15768\n       *                                                                                                               // 15769\n       */                                                                                                              // 15770\n      $digest: function() {                                                                                            // 15771\n        var watch, value, last,                                                                                        // 15772\n            watchers,                                                                                                  // 15773\n            length,                                                                                                    // 15774\n            dirty, ttl = TTL,                                                                                          // 15775\n            next, current, target = this,                                                                              // 15776\n            watchLog = [],                                                                                             // 15777\n            logIdx, logMsg, asyncTask;                                                                                 // 15778\n                                                                                                                       // 15779\n        beginPhase('$digest');                                                                                         // 15780\n        // Check for changes to browser url that happened in sync before the call to $digest                           // 15781\n        $browser.$$checkUrlChange();                                                                                   // 15782\n                                                                                                                       // 15783\n        if (this === $rootScope && applyAsyncId !== null) {                                                            // 15784\n          // If this is the root scope, and $applyAsync has scheduled a deferred $apply(), then                        // 15785\n          // cancel the scheduled $apply and flush the queue of expressions to be evaluated.                           // 15786\n          $browser.defer.cancel(applyAsyncId);                                                                         // 15787\n          flushApplyAsync();                                                                                           // 15788\n        }                                                                                                              // 15789\n                                                                                                                       // 15790\n        lastDirtyWatch = null;                                                                                         // 15791\n                                                                                                                       // 15792\n        do { // \"while dirty\" loop                                                                                     // 15793\n          dirty = false;                                                                                               // 15794\n          current = target;                                                                                            // 15795\n                                                                                                                       // 15796\n          while (asyncQueue.length) {                                                                                  // 15797\n            try {                                                                                                      // 15798\n              asyncTask = asyncQueue.shift();                                                                          // 15799\n              asyncTask.scope.$eval(asyncTask.expression, asyncTask.locals);                                           // 15800\n            } catch (e) {                                                                                              // 15801\n              $exceptionHandler(e);                                                                                    // 15802\n            }                                                                                                          // 15803\n            lastDirtyWatch = null;                                                                                     // 15804\n          }                                                                                                            // 15805\n                                                                                                                       // 15806\n          traverseScopesLoop:                                                                                          // 15807\n          do { // \"traverse the scopes\" loop                                                                           // 15808\n            if ((watchers = current.$$watchers)) {                                                                     // 15809\n              // process our watches                                                                                   // 15810\n              length = watchers.length;                                                                                // 15811\n              while (length--) {                                                                                       // 15812\n                try {                                                                                                  // 15813\n                  watch = watchers[length];                                                                            // 15814\n                  // Most common watches are on primitives, in which case we can short                                 // 15815\n                  // circuit it with === operator, only when === fails do we use .equals                               // 15816\n                  if (watch) {                                                                                         // 15817\n                    if ((value = watch.get(current)) !== (last = watch.last) &&                                        // 15818\n                        !(watch.eq                                                                                     // 15819\n                            ? equals(value, last)                                                                      // 15820\n                            : (typeof value === 'number' && typeof last === 'number'                                   // 15821\n                               && isNaN(value) && isNaN(last)))) {                                                     // 15822\n                      dirty = true;                                                                                    // 15823\n                      lastDirtyWatch = watch;                                                                          // 15824\n                      watch.last = watch.eq ? copy(value, null) : value;                                               // 15825\n                      watch.fn(value, ((last === initWatchVal) ? value : last), current);                              // 15826\n                      if (ttl < 5) {                                                                                   // 15827\n                        logIdx = 4 - ttl;                                                                              // 15828\n                        if (!watchLog[logIdx]) watchLog[logIdx] = [];                                                  // 15829\n                        watchLog[logIdx].push({                                                                        // 15830\n                          msg: isFunction(watch.exp) ? 'fn: ' + (watch.exp.name || watch.exp.toString()) : watch.exp,  // 15831\n                          newVal: value,                                                                               // 15832\n                          oldVal: last                                                                                 // 15833\n                        });                                                                                            // 15834\n                      }                                                                                                // 15835\n                    } else if (watch === lastDirtyWatch) {                                                             // 15836\n                      // If the most recently dirty watcher is now clean, short circuit since the remaining watchers   // 15837\n                      // have already been tested.                                                                     // 15838\n                      dirty = false;                                                                                   // 15839\n                      break traverseScopesLoop;                                                                        // 15840\n                    }                                                                                                  // 15841\n                  }                                                                                                    // 15842\n                } catch (e) {                                                                                          // 15843\n                  $exceptionHandler(e);                                                                                // 15844\n                }                                                                                                      // 15845\n              }                                                                                                        // 15846\n            }                                                                                                          // 15847\n                                                                                                                       // 15848\n            // Insanity Warning: scope depth-first traversal                                                           // 15849\n            // yes, this code is a bit crazy, but it works and we have tests to prove it!                              // 15850\n            // this piece should be kept in sync with the traversal in $broadcast                                      // 15851\n            if (!(next = ((current.$$watchersCount && current.$$childHead) ||                                          // 15852\n                (current !== target && current.$$nextSibling)))) {                                                     // 15853\n              while (current !== target && !(next = current.$$nextSibling)) {                                          // 15854\n                current = current.$parent;                                                                             // 15855\n              }                                                                                                        // 15856\n            }                                                                                                          // 15857\n          } while ((current = next));                                                                                  // 15858\n                                                                                                                       // 15859\n          // `break traverseScopesLoop;` takes us to here                                                              // 15860\n                                                                                                                       // 15861\n          if ((dirty || asyncQueue.length) && !(ttl--)) {                                                              // 15862\n            clearPhase();                                                                                              // 15863\n            throw $rootScopeMinErr('infdig',                                                                           // 15864\n                '{0} $digest() iterations reached. Aborting!\\n' +                                                      // 15865\n                'Watchers fired in the last 5 iterations: {1}',                                                        // 15866\n                TTL, watchLog);                                                                                        // 15867\n          }                                                                                                            // 15868\n                                                                                                                       // 15869\n        } while (dirty || asyncQueue.length);                                                                          // 15870\n                                                                                                                       // 15871\n        clearPhase();                                                                                                  // 15872\n                                                                                                                       // 15873\n        while (postDigestQueue.length) {                                                                               // 15874\n          try {                                                                                                        // 15875\n            postDigestQueue.shift()();                                                                                 // 15876\n          } catch (e) {                                                                                                // 15877\n            $exceptionHandler(e);                                                                                      // 15878\n          }                                                                                                            // 15879\n        }                                                                                                              // 15880\n      },                                                                                                               // 15881\n                                                                                                                       // 15882\n                                                                                                                       // 15883\n      /**                                                                                                              // 15884\n       * @ngdoc event                                                                                                  // 15885\n       * @name $rootScope.Scope#$destroy                                                                               // 15886\n       * @eventType broadcast on scope being destroyed                                                                 // 15887\n       *                                                                                                               // 15888\n       * @description                                                                                                  // 15889\n       * Broadcasted when a scope and its children are being destroyed.                                                // 15890\n       *                                                                                                               // 15891\n       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to                        // 15892\n       * clean up DOM bindings before an element is removed from the DOM.                                              // 15893\n       */                                                                                                              // 15894\n                                                                                                                       // 15895\n      /**                                                                                                              // 15896\n       * @ngdoc method                                                                                                 // 15897\n       * @name $rootScope.Scope#$destroy                                                                               // 15898\n       * @kind function                                                                                                // 15899\n       *                                                                                                               // 15900\n       * @description                                                                                                  // 15901\n       * Removes the current scope (and all of its children) from the parent scope. Removal implies                    // 15902\n       * that calls to {@link ng.$rootScope.Scope#$digest $digest()} will no longer                                    // 15903\n       * propagate to the current scope and its children. Removal also implies that the current                        // 15904\n       * scope is eligible for garbage collection.                                                                     // 15905\n       *                                                                                                               // 15906\n       * The `$destroy()` is usually used by directives such as                                                        // 15907\n       * {@link ng.directive:ngRepeat ngRepeat} for managing the                                                       // 15908\n       * unrolling of the loop.                                                                                        // 15909\n       *                                                                                                               // 15910\n       * Just before a scope is destroyed, a `$destroy` event is broadcasted on this scope.                            // 15911\n       * Application code can register a `$destroy` event handler that will give it a chance to                        // 15912\n       * perform any necessary cleanup.                                                                                // 15913\n       *                                                                                                               // 15914\n       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to                        // 15915\n       * clean up DOM bindings before an element is removed from the DOM.                                              // 15916\n       */                                                                                                              // 15917\n      $destroy: function() {                                                                                           // 15918\n        // We can't destroy a scope that has been already destroyed.                                                   // 15919\n        if (this.$$destroyed) return;                                                                                  // 15920\n        var parent = this.$parent;                                                                                     // 15921\n                                                                                                                       // 15922\n        this.$broadcast('$destroy');                                                                                   // 15923\n        this.$$destroyed = true;                                                                                       // 15924\n                                                                                                                       // 15925\n        if (this === $rootScope) {                                                                                     // 15926\n          //Remove handlers attached to window when $rootScope is removed                                              // 15927\n          $browser.$$applicationDestroyed();                                                                           // 15928\n        }                                                                                                              // 15929\n                                                                                                                       // 15930\n        incrementWatchersCount(this, -this.$$watchersCount);                                                           // 15931\n        for (var eventName in this.$$listenerCount) {                                                                  // 15932\n          decrementListenerCount(this, this.$$listenerCount[eventName], eventName);                                    // 15933\n        }                                                                                                              // 15934\n                                                                                                                       // 15935\n        // sever all the references to parent scopes (after this cleanup, the current scope should                     // 15936\n        // not be retained by any of our references and should be eligible for garbage collection)                     // 15937\n        if (parent && parent.$$childHead == this) parent.$$childHead = this.$$nextSibling;                             // 15938\n        if (parent && parent.$$childTail == this) parent.$$childTail = this.$$prevSibling;                             // 15939\n        if (this.$$prevSibling) this.$$prevSibling.$$nextSibling = this.$$nextSibling;                                 // 15940\n        if (this.$$nextSibling) this.$$nextSibling.$$prevSibling = this.$$prevSibling;                                 // 15941\n                                                                                                                       // 15942\n        // Disable listeners, watchers and apply/digest methods                                                        // 15943\n        this.$destroy = this.$digest = this.$apply = this.$evalAsync = this.$applyAsync = noop;                        // 15944\n        this.$on = this.$watch = this.$watchGroup = function() { return noop; };                                       // 15945\n        this.$$listeners = {};                                                                                         // 15946\n                                                                                                                       // 15947\n        // All of the code below is bogus code that works around V8's memory leak via optimized code                   // 15948\n        // and inline caches.                                                                                          // 15949\n        //                                                                                                             // 15950\n        // see:                                                                                                        // 15951\n        // - https://code.google.com/p/v8/issues/detail?id=2073#c26                                                    // 15952\n        // - https://github.com/angular/angular.js/issues/6794#issuecomment-38648909                                   // 15953\n        // - https://github.com/angular/angular.js/issues/1313#issuecomment-10378451                                   // 15954\n                                                                                                                       // 15955\n        this.$parent = this.$$nextSibling = this.$$prevSibling = this.$$childHead =                                    // 15956\n            this.$$childTail = this.$root = this.$$watchers = null;                                                    // 15957\n      },                                                                                                               // 15958\n                                                                                                                       // 15959\n      /**                                                                                                              // 15960\n       * @ngdoc method                                                                                                 // 15961\n       * @name $rootScope.Scope#$eval                                                                                  // 15962\n       * @kind function                                                                                                // 15963\n       *                                                                                                               // 15964\n       * @description                                                                                                  // 15965\n       * Executes the `expression` on the current scope and returns the result. Any exceptions in                      // 15966\n       * the expression are propagated (uncaught). This is useful when evaluating Angular                              // 15967\n       * expressions.                                                                                                  // 15968\n       *                                                                                                               // 15969\n       * # Example                                                                                                     // 15970\n       * ```js                                                                                                         // 15971\n           var scope = ng.$rootScope.Scope();                                                                          // 15972\n           scope.a = 1;                                                                                                // 15973\n           scope.b = 2;                                                                                                // 15974\n                                                                                                                       // 15975\n           expect(scope.$eval('a+b')).toEqual(3);                                                                      // 15976\n           expect(scope.$eval(function(scope){ return scope.a + scope.b; })).toEqual(3);                               // 15977\n       * ```                                                                                                           // 15978\n       *                                                                                                               // 15979\n       * @param {(string|function())=} expression An angular expression to be executed.                                // 15980\n       *                                                                                                               // 15981\n       *    - `string`: execute using the rules as defined in  {@link guide/expression expression}.                    // 15982\n       *    - `function(scope)`: execute the function with the current `scope` parameter.                              // 15983\n       *                                                                                                               // 15984\n       * @param {(object)=} locals Local variables object, useful for overriding values in scope.                      // 15985\n       * @returns {*} The result of evaluating the expression.                                                         // 15986\n       */                                                                                                              // 15987\n      $eval: function(expr, locals) {                                                                                  // 15988\n        return $parse(expr)(this, locals);                                                                             // 15989\n      },                                                                                                               // 15990\n                                                                                                                       // 15991\n      /**                                                                                                              // 15992\n       * @ngdoc method                                                                                                 // 15993\n       * @name $rootScope.Scope#$evalAsync                                                                             // 15994\n       * @kind function                                                                                                // 15995\n       *                                                                                                               // 15996\n       * @description                                                                                                  // 15997\n       * Executes the expression on the current scope at a later point in time.                                        // 15998\n       *                                                                                                               // 15999\n       * The `$evalAsync` makes no guarantees as to when the `expression` will be executed, only                       // 16000\n       * that:                                                                                                         // 16001\n       *                                                                                                               // 16002\n       *   - it will execute after the function that scheduled the evaluation (preferably before DOM                   // 16003\n       *     rendering).                                                                                               // 16004\n       *   - at least one {@link ng.$rootScope.Scope#$digest $digest cycle} will be performed after                    // 16005\n       *     `expression` execution.                                                                                   // 16006\n       *                                                                                                               // 16007\n       * Any exceptions from the execution of the expression are forwarded to the                                      // 16008\n       * {@link ng.$exceptionHandler $exceptionHandler} service.                                                       // 16009\n       *                                                                                                               // 16010\n       * __Note:__ if this function is called outside of a `$digest` cycle, a new `$digest` cycle                      // 16011\n       * will be scheduled. However, it is encouraged to always call code that changes the model                       // 16012\n       * from within an `$apply` call. That includes code evaluated via `$evalAsync`.                                  // 16013\n       *                                                                                                               // 16014\n       * @param {(string|function())=} expression An angular expression to be executed.                                // 16015\n       *                                                                                                               // 16016\n       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.                     // 16017\n       *    - `function(scope)`: execute the function with the current `scope` parameter.                              // 16018\n       *                                                                                                               // 16019\n       * @param {(object)=} locals Local variables object, useful for overriding values in scope.                      // 16020\n       */                                                                                                              // 16021\n      $evalAsync: function(expr, locals) {                                                                             // 16022\n        // if we are outside of an $digest loop and this is the first time we are scheduling async                     // 16023\n        // task also schedule async auto-flush                                                                         // 16024\n        if (!$rootScope.$$phase && !asyncQueue.length) {                                                               // 16025\n          $browser.defer(function() {                                                                                  // 16026\n            if (asyncQueue.length) {                                                                                   // 16027\n              $rootScope.$digest();                                                                                    // 16028\n            }                                                                                                          // 16029\n          });                                                                                                          // 16030\n        }                                                                                                              // 16031\n                                                                                                                       // 16032\n        asyncQueue.push({scope: this, expression: expr, locals: locals});                                              // 16033\n      },                                                                                                               // 16034\n                                                                                                                       // 16035\n      $$postDigest: function(fn) {                                                                                     // 16036\n        postDigestQueue.push(fn);                                                                                      // 16037\n      },                                                                                                               // 16038\n                                                                                                                       // 16039\n      /**                                                                                                              // 16040\n       * @ngdoc method                                                                                                 // 16041\n       * @name $rootScope.Scope#$apply                                                                                 // 16042\n       * @kind function                                                                                                // 16043\n       *                                                                                                               // 16044\n       * @description                                                                                                  // 16045\n       * `$apply()` is used to execute an expression in angular from outside of the angular                            // 16046\n       * framework. (For example from browser DOM events, setTimeout, XHR or third party libraries).                   // 16047\n       * Because we are calling into the angular framework we need to perform proper scope life                        // 16048\n       * cycle of {@link ng.$exceptionHandler exception handling},                                                     // 16049\n       * {@link ng.$rootScope.Scope#$digest executing watches}.                                                        // 16050\n       *                                                                                                               // 16051\n       * ## Life cycle                                                                                                 // 16052\n       *                                                                                                               // 16053\n       * # Pseudo-Code of `$apply()`                                                                                   // 16054\n       * ```js                                                                                                         // 16055\n           function $apply(expr) {                                                                                     // 16056\n             try {                                                                                                     // 16057\n               return $eval(expr);                                                                                     // 16058\n             } catch (e) {                                                                                             // 16059\n               $exceptionHandler(e);                                                                                   // 16060\n             } finally {                                                                                               // 16061\n               $root.$digest();                                                                                        // 16062\n             }                                                                                                         // 16063\n           }                                                                                                           // 16064\n       * ```                                                                                                           // 16065\n       *                                                                                                               // 16066\n       *                                                                                                               // 16067\n       * Scope's `$apply()` method transitions through the following stages:                                           // 16068\n       *                                                                                                               // 16069\n       * 1. The {@link guide/expression expression} is executed using the                                              // 16070\n       *    {@link ng.$rootScope.Scope#$eval $eval()} method.                                                          // 16071\n       * 2. Any exceptions from the execution of the expression are forwarded to the                                   // 16072\n       *    {@link ng.$exceptionHandler $exceptionHandler} service.                                                    // 16073\n       * 3. The {@link ng.$rootScope.Scope#$watch watch} listeners are fired immediately after the                     // 16074\n       *    expression was executed using the {@link ng.$rootScope.Scope#$digest $digest()} method.                    // 16075\n       *                                                                                                               // 16076\n       *                                                                                                               // 16077\n       * @param {(string|function())=} exp An angular expression to be executed.                                       // 16078\n       *                                                                                                               // 16079\n       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.                     // 16080\n       *    - `function(scope)`: execute the function with current `scope` parameter.                                  // 16081\n       *                                                                                                               // 16082\n       * @returns {*} The result of evaluating the expression.                                                         // 16083\n       */                                                                                                              // 16084\n      $apply: function(expr) {                                                                                         // 16085\n        try {                                                                                                          // 16086\n          beginPhase('$apply');                                                                                        // 16087\n          try {                                                                                                        // 16088\n            return this.$eval(expr);                                                                                   // 16089\n          } finally {                                                                                                  // 16090\n            clearPhase();                                                                                              // 16091\n          }                                                                                                            // 16092\n        } catch (e) {                                                                                                  // 16093\n          $exceptionHandler(e);                                                                                        // 16094\n        } finally {                                                                                                    // 16095\n          try {                                                                                                        // 16096\n            $rootScope.$digest();                                                                                      // 16097\n          } catch (e) {                                                                                                // 16098\n            $exceptionHandler(e);                                                                                      // 16099\n            throw e;                                                                                                   // 16100\n          }                                                                                                            // 16101\n        }                                                                                                              // 16102\n      },                                                                                                               // 16103\n                                                                                                                       // 16104\n      /**                                                                                                              // 16105\n       * @ngdoc method                                                                                                 // 16106\n       * @name $rootScope.Scope#$applyAsync                                                                            // 16107\n       * @kind function                                                                                                // 16108\n       *                                                                                                               // 16109\n       * @description                                                                                                  // 16110\n       * Schedule the invocation of $apply to occur at a later time. The actual time difference                        // 16111\n       * varies across browsers, but is typically around ~10 milliseconds.                                             // 16112\n       *                                                                                                               // 16113\n       * This can be used to queue up multiple expressions which need to be evaluated in the same                      // 16114\n       * digest.                                                                                                       // 16115\n       *                                                                                                               // 16116\n       * @param {(string|function())=} exp An angular expression to be executed.                                       // 16117\n       *                                                                                                               // 16118\n       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.                     // 16119\n       *    - `function(scope)`: execute the function with current `scope` parameter.                                  // 16120\n       */                                                                                                              // 16121\n      $applyAsync: function(expr) {                                                                                    // 16122\n        var scope = this;                                                                                              // 16123\n        expr && applyAsyncQueue.push($applyAsyncExpression);                                                           // 16124\n        scheduleApplyAsync();                                                                                          // 16125\n                                                                                                                       // 16126\n        function $applyAsyncExpression() {                                                                             // 16127\n          scope.$eval(expr);                                                                                           // 16128\n        }                                                                                                              // 16129\n      },                                                                                                               // 16130\n                                                                                                                       // 16131\n      /**                                                                                                              // 16132\n       * @ngdoc method                                                                                                 // 16133\n       * @name $rootScope.Scope#$on                                                                                    // 16134\n       * @kind function                                                                                                // 16135\n       *                                                                                                               // 16136\n       * @description                                                                                                  // 16137\n       * Listens on events of a given type. See {@link ng.$rootScope.Scope#$emit $emit} for                            // 16138\n       * discussion of event life cycle.                                                                               // 16139\n       *                                                                                                               // 16140\n       * The event listener function format is: `function(event, args...)`. The `event` object                         // 16141\n       * passed into the listener has the following attributes:                                                        // 16142\n       *                                                                                                               // 16143\n       *   - `targetScope` - `{Scope}`: the scope on which the event was `$emit`-ed or                                 // 16144\n       *     `$broadcast`-ed.                                                                                          // 16145\n       *   - `currentScope` - `{Scope}`: the scope that is currently handling the event. Once the                      // 16146\n       *     event propagates through the scope hierarchy, this property is set to null.                               // 16147\n       *   - `name` - `{string}`: name of the event.                                                                   // 16148\n       *   - `stopPropagation` - `{function=}`: calling `stopPropagation` function will cancel                         // 16149\n       *     further event propagation (available only for events that were `$emit`-ed).                               // 16150\n       *   - `preventDefault` - `{function}`: calling `preventDefault` sets `defaultPrevented` flag                    // 16151\n       *     to true.                                                                                                  // 16152\n       *   - `defaultPrevented` - `{boolean}`: true if `preventDefault` was called.                                    // 16153\n       *                                                                                                               // 16154\n       * @param {string} name Event name to listen on.                                                                 // 16155\n       * @param {function(event, ...args)} listener Function to call when the event is emitted.                        // 16156\n       * @returns {function()} Returns a deregistration function for this listener.                                    // 16157\n       */                                                                                                              // 16158\n      $on: function(name, listener) {                                                                                  // 16159\n        var namedListeners = this.$$listeners[name];                                                                   // 16160\n        if (!namedListeners) {                                                                                         // 16161\n          this.$$listeners[name] = namedListeners = [];                                                                // 16162\n        }                                                                                                              // 16163\n        namedListeners.push(listener);                                                                                 // 16164\n                                                                                                                       // 16165\n        var current = this;                                                                                            // 16166\n        do {                                                                                                           // 16167\n          if (!current.$$listenerCount[name]) {                                                                        // 16168\n            current.$$listenerCount[name] = 0;                                                                         // 16169\n          }                                                                                                            // 16170\n          current.$$listenerCount[name]++;                                                                             // 16171\n        } while ((current = current.$parent));                                                                         // 16172\n                                                                                                                       // 16173\n        var self = this;                                                                                               // 16174\n        return function() {                                                                                            // 16175\n          var indexOfListener = namedListeners.indexOf(listener);                                                      // 16176\n          if (indexOfListener !== -1) {                                                                                // 16177\n            namedListeners[indexOfListener] = null;                                                                    // 16178\n            decrementListenerCount(self, 1, name);                                                                     // 16179\n          }                                                                                                            // 16180\n        };                                                                                                             // 16181\n      },                                                                                                               // 16182\n                                                                                                                       // 16183\n                                                                                                                       // 16184\n      /**                                                                                                              // 16185\n       * @ngdoc method                                                                                                 // 16186\n       * @name $rootScope.Scope#$emit                                                                                  // 16187\n       * @kind function                                                                                                // 16188\n       *                                                                                                               // 16189\n       * @description                                                                                                  // 16190\n       * Dispatches an event `name` upwards through the scope hierarchy notifying the                                  // 16191\n       * registered {@link ng.$rootScope.Scope#$on} listeners.                                                         // 16192\n       *                                                                                                               // 16193\n       * The event life cycle starts at the scope on which `$emit` was called. All                                     // 16194\n       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get                        // 16195\n       * notified. Afterwards, the event traverses upwards toward the root scope and calls all                         // 16196\n       * registered listeners along the way. The event will stop propagating if one of the listeners                   // 16197\n       * cancels it.                                                                                                   // 16198\n       *                                                                                                               // 16199\n       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed                       // 16200\n       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.                                              // 16201\n       *                                                                                                               // 16202\n       * @param {string} name Event name to emit.                                                                      // 16203\n       * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.              // 16204\n       * @return {Object} Event object (see {@link ng.$rootScope.Scope#$on}).                                          // 16205\n       */                                                                                                              // 16206\n      $emit: function(name, args) {                                                                                    // 16207\n        var empty = [],                                                                                                // 16208\n            namedListeners,                                                                                            // 16209\n            scope = this,                                                                                              // 16210\n            stopPropagation = false,                                                                                   // 16211\n            event = {                                                                                                  // 16212\n              name: name,                                                                                              // 16213\n              targetScope: scope,                                                                                      // 16214\n              stopPropagation: function() {stopPropagation = true;},                                                   // 16215\n              preventDefault: function() {                                                                             // 16216\n                event.defaultPrevented = true;                                                                         // 16217\n              },                                                                                                       // 16218\n              defaultPrevented: false                                                                                  // 16219\n            },                                                                                                         // 16220\n            listenerArgs = concat([event], arguments, 1),                                                              // 16221\n            i, length;                                                                                                 // 16222\n                                                                                                                       // 16223\n        do {                                                                                                           // 16224\n          namedListeners = scope.$$listeners[name] || empty;                                                           // 16225\n          event.currentScope = scope;                                                                                  // 16226\n          for (i = 0, length = namedListeners.length; i < length; i++) {                                               // 16227\n                                                                                                                       // 16228\n            // if listeners were deregistered, defragment the array                                                    // 16229\n            if (!namedListeners[i]) {                                                                                  // 16230\n              namedListeners.splice(i, 1);                                                                             // 16231\n              i--;                                                                                                     // 16232\n              length--;                                                                                                // 16233\n              continue;                                                                                                // 16234\n            }                                                                                                          // 16235\n            try {                                                                                                      // 16236\n              //allow all listeners attached to the current scope to run                                               // 16237\n              namedListeners[i].apply(null, listenerArgs);                                                             // 16238\n            } catch (e) {                                                                                              // 16239\n              $exceptionHandler(e);                                                                                    // 16240\n            }                                                                                                          // 16241\n          }                                                                                                            // 16242\n          //if any listener on the current scope stops propagation, prevent bubbling                                   // 16243\n          if (stopPropagation) {                                                                                       // 16244\n            event.currentScope = null;                                                                                 // 16245\n            return event;                                                                                              // 16246\n          }                                                                                                            // 16247\n          //traverse upwards                                                                                           // 16248\n          scope = scope.$parent;                                                                                       // 16249\n        } while (scope);                                                                                               // 16250\n                                                                                                                       // 16251\n        event.currentScope = null;                                                                                     // 16252\n                                                                                                                       // 16253\n        return event;                                                                                                  // 16254\n      },                                                                                                               // 16255\n                                                                                                                       // 16256\n                                                                                                                       // 16257\n      /**                                                                                                              // 16258\n       * @ngdoc method                                                                                                 // 16259\n       * @name $rootScope.Scope#$broadcast                                                                             // 16260\n       * @kind function                                                                                                // 16261\n       *                                                                                                               // 16262\n       * @description                                                                                                  // 16263\n       * Dispatches an event `name` downwards to all child scopes (and their children) notifying the                   // 16264\n       * registered {@link ng.$rootScope.Scope#$on} listeners.                                                         // 16265\n       *                                                                                                               // 16266\n       * The event life cycle starts at the scope on which `$broadcast` was called. All                                // 16267\n       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get                        // 16268\n       * notified. Afterwards, the event propagates to all direct and indirect scopes of the current                   // 16269\n       * scope and calls all registered listeners along the way. The event cannot be canceled.                         // 16270\n       *                                                                                                               // 16271\n       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed                       // 16272\n       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.                                              // 16273\n       *                                                                                                               // 16274\n       * @param {string} name Event name to broadcast.                                                                 // 16275\n       * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.              // 16276\n       * @return {Object} Event object, see {@link ng.$rootScope.Scope#$on}                                            // 16277\n       */                                                                                                              // 16278\n      $broadcast: function(name, args) {                                                                               // 16279\n        var target = this,                                                                                             // 16280\n            current = target,                                                                                          // 16281\n            next = target,                                                                                             // 16282\n            event = {                                                                                                  // 16283\n              name: name,                                                                                              // 16284\n              targetScope: target,                                                                                     // 16285\n              preventDefault: function() {                                                                             // 16286\n                event.defaultPrevented = true;                                                                         // 16287\n              },                                                                                                       // 16288\n              defaultPrevented: false                                                                                  // 16289\n            };                                                                                                         // 16290\n                                                                                                                       // 16291\n        if (!target.$$listenerCount[name]) return event;                                                               // 16292\n                                                                                                                       // 16293\n        var listenerArgs = concat([event], arguments, 1),                                                              // 16294\n            listeners, i, length;                                                                                      // 16295\n                                                                                                                       // 16296\n        //down while you can, then up and next sibling or up and next sibling until back at root                       // 16297\n        while ((current = next)) {                                                                                     // 16298\n          event.currentScope = current;                                                                                // 16299\n          listeners = current.$$listeners[name] || [];                                                                 // 16300\n          for (i = 0, length = listeners.length; i < length; i++) {                                                    // 16301\n            // if listeners were deregistered, defragment the array                                                    // 16302\n            if (!listeners[i]) {                                                                                       // 16303\n              listeners.splice(i, 1);                                                                                  // 16304\n              i--;                                                                                                     // 16305\n              length--;                                                                                                // 16306\n              continue;                                                                                                // 16307\n            }                                                                                                          // 16308\n                                                                                                                       // 16309\n            try {                                                                                                      // 16310\n              listeners[i].apply(null, listenerArgs);                                                                  // 16311\n            } catch (e) {                                                                                              // 16312\n              $exceptionHandler(e);                                                                                    // 16313\n            }                                                                                                          // 16314\n          }                                                                                                            // 16315\n                                                                                                                       // 16316\n          // Insanity Warning: scope depth-first traversal                                                             // 16317\n          // yes, this code is a bit crazy, but it works and we have tests to prove it!                                // 16318\n          // this piece should be kept in sync with the traversal in $digest                                           // 16319\n          // (though it differs due to having the extra check for $$listenerCount)                                     // 16320\n          if (!(next = ((current.$$listenerCount[name] && current.$$childHead) ||                                      // 16321\n              (current !== target && current.$$nextSibling)))) {                                                       // 16322\n            while (current !== target && !(next = current.$$nextSibling)) {                                            // 16323\n              current = current.$parent;                                                                               // 16324\n            }                                                                                                          // 16325\n          }                                                                                                            // 16326\n        }                                                                                                              // 16327\n                                                                                                                       // 16328\n        event.currentScope = null;                                                                                     // 16329\n        return event;                                                                                                  // 16330\n      }                                                                                                                // 16331\n    };                                                                                                                 // 16332\n                                                                                                                       // 16333\n    var $rootScope = new Scope();                                                                                      // 16334\n                                                                                                                       // 16335\n    //The internal queues. Expose them on the $rootScope for debugging/testing purposes.                               // 16336\n    var asyncQueue = $rootScope.$$asyncQueue = [];                                                                     // 16337\n    var postDigestQueue = $rootScope.$$postDigestQueue = [];                                                           // 16338\n    var applyAsyncQueue = $rootScope.$$applyAsyncQueue = [];                                                           // 16339\n                                                                                                                       // 16340\n    return $rootScope;                                                                                                 // 16341\n                                                                                                                       // 16342\n                                                                                                                       // 16343\n    function beginPhase(phase) {                                                                                       // 16344\n      if ($rootScope.$$phase) {                                                                                        // 16345\n        throw $rootScopeMinErr('inprog', '{0} already in progress', $rootScope.$$phase);                               // 16346\n      }                                                                                                                // 16347\n                                                                                                                       // 16348\n      $rootScope.$$phase = phase;                                                                                      // 16349\n    }                                                                                                                  // 16350\n                                                                                                                       // 16351\n    function clearPhase() {                                                                                            // 16352\n      $rootScope.$$phase = null;                                                                                       // 16353\n    }                                                                                                                  // 16354\n                                                                                                                       // 16355\n    function incrementWatchersCount(current, count) {                                                                  // 16356\n      do {                                                                                                             // 16357\n        current.$$watchersCount += count;                                                                              // 16358\n      } while ((current = current.$parent));                                                                           // 16359\n    }                                                                                                                  // 16360\n                                                                                                                       // 16361\n    function decrementListenerCount(current, count, name) {                                                            // 16362\n      do {                                                                                                             // 16363\n        current.$$listenerCount[name] -= count;                                                                        // 16364\n                                                                                                                       // 16365\n        if (current.$$listenerCount[name] === 0) {                                                                     // 16366\n          delete current.$$listenerCount[name];                                                                        // 16367\n        }                                                                                                              // 16368\n      } while ((current = current.$parent));                                                                           // 16369\n    }                                                                                                                  // 16370\n                                                                                                                       // 16371\n    /**                                                                                                                // 16372\n     * function used as an initial value for watchers.                                                                 // 16373\n     * because it's unique we can easily tell it apart from other values                                               // 16374\n     */                                                                                                                // 16375\n    function initWatchVal() {}                                                                                         // 16376\n                                                                                                                       // 16377\n    function flushApplyAsync() {                                                                                       // 16378\n      while (applyAsyncQueue.length) {                                                                                 // 16379\n        try {                                                                                                          // 16380\n          applyAsyncQueue.shift()();                                                                                   // 16381\n        } catch (e) {                                                                                                  // 16382\n          $exceptionHandler(e);                                                                                        // 16383\n        }                                                                                                              // 16384\n      }                                                                                                                // 16385\n      applyAsyncId = null;                                                                                             // 16386\n    }                                                                                                                  // 16387\n                                                                                                                       // 16388\n    function scheduleApplyAsync() {                                                                                    // 16389\n      if (applyAsyncId === null) {                                                                                     // 16390\n        applyAsyncId = $browser.defer(function() {                                                                     // 16391\n          $rootScope.$apply(flushApplyAsync);                                                                          // 16392\n        });                                                                                                            // 16393\n      }                                                                                                                // 16394\n    }                                                                                                                  // 16395\n  }];                                                                                                                  // 16396\n}                                                                                                                      // 16397\n                                                                                                                       // 16398\n/**                                                                                                                    // 16399\n * @description                                                                                                        // 16400\n * Private service to sanitize uris for links and images. Used by $compile and $sanitize.                              // 16401\n */                                                                                                                    // 16402\nfunction $$SanitizeUriProvider() {                                                                                     // 16403\n  var aHrefSanitizationWhitelist = /^\\s*(https?|ftp|mailto|tel|file):/,                                                // 16404\n    imgSrcSanitizationWhitelist = /^\\s*((https?|ftp|file|blob):|data:image\\/)/;                                        // 16405\n                                                                                                                       // 16406\n  /**                                                                                                                  // 16407\n   * @description                                                                                                      // 16408\n   * Retrieves or overrides the default regular expression that is used for whitelisting of safe                       // 16409\n   * urls during a[href] sanitization.                                                                                 // 16410\n   *                                                                                                                   // 16411\n   * The sanitization is a security measure aimed at prevent XSS attacks via html links.                               // 16412\n   *                                                                                                                   // 16413\n   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into                      // 16414\n   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`                          // 16415\n   * regular expression. If a match is found, the original url is written into the dom. Otherwise,                     // 16416\n   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.                    // 16417\n   *                                                                                                                   // 16418\n   * @param {RegExp=} regexp New regexp to whitelist urls with.                                                        // 16419\n   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for                          // 16420\n   *    chaining otherwise.                                                                                            // 16421\n   */                                                                                                                  // 16422\n  this.aHrefSanitizationWhitelist = function(regexp) {                                                                 // 16423\n    if (isDefined(regexp)) {                                                                                           // 16424\n      aHrefSanitizationWhitelist = regexp;                                                                             // 16425\n      return this;                                                                                                     // 16426\n    }                                                                                                                  // 16427\n    return aHrefSanitizationWhitelist;                                                                                 // 16428\n  };                                                                                                                   // 16429\n                                                                                                                       // 16430\n                                                                                                                       // 16431\n  /**                                                                                                                  // 16432\n   * @description                                                                                                      // 16433\n   * Retrieves or overrides the default regular expression that is used for whitelisting of safe                       // 16434\n   * urls during img[src] sanitization.                                                                                // 16435\n   *                                                                                                                   // 16436\n   * The sanitization is a security measure aimed at prevent XSS attacks via html links.                               // 16437\n   *                                                                                                                   // 16438\n   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into                     // 16439\n   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`                         // 16440\n   * regular expression. If a match is found, the original url is written into the dom. Otherwise,                     // 16441\n   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.                    // 16442\n   *                                                                                                                   // 16443\n   * @param {RegExp=} regexp New regexp to whitelist urls with.                                                        // 16444\n   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for                          // 16445\n   *    chaining otherwise.                                                                                            // 16446\n   */                                                                                                                  // 16447\n  this.imgSrcSanitizationWhitelist = function(regexp) {                                                                // 16448\n    if (isDefined(regexp)) {                                                                                           // 16449\n      imgSrcSanitizationWhitelist = regexp;                                                                            // 16450\n      return this;                                                                                                     // 16451\n    }                                                                                                                  // 16452\n    return imgSrcSanitizationWhitelist;                                                                                // 16453\n  };                                                                                                                   // 16454\n                                                                                                                       // 16455\n  this.$get = function() {                                                                                             // 16456\n    return function sanitizeUri(uri, isImage) {                                                                        // 16457\n      var regex = isImage ? imgSrcSanitizationWhitelist : aHrefSanitizationWhitelist;                                  // 16458\n      var normalizedVal;                                                                                               // 16459\n      normalizedVal = urlResolve(uri).href;                                                                            // 16460\n      if (normalizedVal !== '' && !normalizedVal.match(regex)) {                                                       // 16461\n        return 'unsafe:' + normalizedVal;                                                                              // 16462\n      }                                                                                                                // 16463\n      return uri;                                                                                                      // 16464\n    };                                                                                                                 // 16465\n  };                                                                                                                   // 16466\n}                                                                                                                      // 16467\n                                                                                                                       // 16468\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *                                           // 16469\n *     Any commits to this file should be reviewed with security in mind.  *                                           // 16470\n *   Changes to this file can potentially create security vulnerabilities. *                                           // 16471\n *          An approval from 2 Core members with history of modifying      *                                           // 16472\n *                         this file is required.                          *                                           // 16473\n *                                                                         *                                           // 16474\n *  Does the change somehow allow for arbitrary javascript to be executed? *                                           // 16475\n *    Or allows for someone to change the prototype of built-in objects?   *                                           // 16476\n *     Or gives undesired access to variables likes document or window?    *                                           // 16477\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */                                          // 16478\n                                                                                                                       // 16479\nvar $sceMinErr = minErr('$sce');                                                                                       // 16480\n                                                                                                                       // 16481\nvar SCE_CONTEXTS = {                                                                                                   // 16482\n  HTML: 'html',                                                                                                        // 16483\n  CSS: 'css',                                                                                                          // 16484\n  URL: 'url',                                                                                                          // 16485\n  // RESOURCE_URL is a subtype of URL used in contexts where a privileged resource is sourced from a                   // 16486\n  // url.  (e.g. ng-include, script src, templateUrl)                                                                  // 16487\n  RESOURCE_URL: 'resourceUrl',                                                                                         // 16488\n  JS: 'js'                                                                                                             // 16489\n};                                                                                                                     // 16490\n                                                                                                                       // 16491\n// Helper functions follow.                                                                                            // 16492\n                                                                                                                       // 16493\nfunction adjustMatcher(matcher) {                                                                                      // 16494\n  if (matcher === 'self') {                                                                                            // 16495\n    return matcher;                                                                                                    // 16496\n  } else if (isString(matcher)) {                                                                                      // 16497\n    // Strings match exactly except for 2 wildcards - '*' and '**'.                                                    // 16498\n    // '*' matches any character except those from the set ':/.?&'.                                                    // 16499\n    // '**' matches any character (like .* in a RegExp).                                                               // 16500\n    // More than 2 *'s raises an error as it's ill defined.                                                            // 16501\n    if (matcher.indexOf('***') > -1) {                                                                                 // 16502\n      throw $sceMinErr('iwcard',                                                                                       // 16503\n          'Illegal sequence *** in string matcher.  String: {0}', matcher);                                            // 16504\n    }                                                                                                                  // 16505\n    matcher = escapeForRegexp(matcher).                                                                                // 16506\n                  replace('\\\\*\\\\*', '.*').                                                                             // 16507\n                  replace('\\\\*', '[^:/.?&;]*');                                                                        // 16508\n    return new RegExp('^' + matcher + '$');                                                                            // 16509\n  } else if (isRegExp(matcher)) {                                                                                      // 16510\n    // The only other type of matcher allowed is a Regexp.                                                             // 16511\n    // Match entire URL / disallow partial matches.                                                                    // 16512\n    // Flags are reset (i.e. no global, ignoreCase or multiline)                                                       // 16513\n    return new RegExp('^' + matcher.source + '$');                                                                     // 16514\n  } else {                                                                                                             // 16515\n    throw $sceMinErr('imatcher',                                                                                       // 16516\n        'Matchers may only be \"self\", string patterns or RegExp objects');                                             // 16517\n  }                                                                                                                    // 16518\n}                                                                                                                      // 16519\n                                                                                                                       // 16520\n                                                                                                                       // 16521\nfunction adjustMatchers(matchers) {                                                                                    // 16522\n  var adjustedMatchers = [];                                                                                           // 16523\n  if (isDefined(matchers)) {                                                                                           // 16524\n    forEach(matchers, function(matcher) {                                                                              // 16525\n      adjustedMatchers.push(adjustMatcher(matcher));                                                                   // 16526\n    });                                                                                                                // 16527\n  }                                                                                                                    // 16528\n  return adjustedMatchers;                                                                                             // 16529\n}                                                                                                                      // 16530\n                                                                                                                       // 16531\n                                                                                                                       // 16532\n/**                                                                                                                    // 16533\n * @ngdoc service                                                                                                      // 16534\n * @name $sceDelegate                                                                                                  // 16535\n * @kind function                                                                                                      // 16536\n *                                                                                                                     // 16537\n * @description                                                                                                        // 16538\n *                                                                                                                     // 16539\n * `$sceDelegate` is a service that is used by the `$sce` service to provide {@link ng.$sce Strict                     // 16540\n * Contextual Escaping (SCE)} services to AngularJS.                                                                   // 16541\n *                                                                                                                     // 16542\n * Typically, you would configure or override the {@link ng.$sceDelegate $sceDelegate} instead of                      // 16543\n * the `$sce` service to customize the way Strict Contextual Escaping works in AngularJS.  This is                     // 16544\n * because, while the `$sce` provides numerous shorthand methods, etc., you really only need to                        // 16545\n * override 3 core functions (`trustAs`, `getTrusted` and `valueOf`) to replace the way things                         // 16546\n * work because `$sce` delegates to `$sceDelegate` for these operations.                                               // 16547\n *                                                                                                                     // 16548\n * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} to configure this service.                               // 16549\n *                                                                                                                     // 16550\n * The default instance of `$sceDelegate` should work out of the box with little pain.  While you                      // 16551\n * can override it completely to change the behavior of `$sce`, the common case would                                  // 16552\n * involve configuring the {@link ng.$sceDelegateProvider $sceDelegateProvider} instead by setting                     // 16553\n * your own whitelists and blacklists for trusting URLs used for loading AngularJS resources such as                   // 16554\n * templates.  Refer {@link ng.$sceDelegateProvider#resourceUrlWhitelist                                               // 16555\n * $sceDelegateProvider.resourceUrlWhitelist} and {@link                                                               // 16556\n * ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}                             // 16557\n */                                                                                                                    // 16558\n                                                                                                                       // 16559\n/**                                                                                                                    // 16560\n * @ngdoc provider                                                                                                     // 16561\n * @name $sceDelegateProvider                                                                                          // 16562\n * @description                                                                                                        // 16563\n *                                                                                                                     // 16564\n * The `$sceDelegateProvider` provider allows developers to configure the {@link ng.$sceDelegate                       // 16565\n * $sceDelegate} service.  This allows one to get/set the whitelists and blacklists used to ensure                     // 16566\n * that the URLs used for sourcing Angular templates are safe.  Refer {@link                                           // 16567\n * ng.$sceDelegateProvider#resourceUrlWhitelist $sceDelegateProvider.resourceUrlWhitelist} and                         // 16568\n * {@link ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}                      // 16569\n *                                                                                                                     // 16570\n * For the general details about this service in Angular, read the main page for {@link ng.$sce                        // 16571\n * Strict Contextual Escaping (SCE)}.                                                                                  // 16572\n *                                                                                                                     // 16573\n * **Example**:  Consider the following case. <a name=\"example\"></a>                                                   // 16574\n *                                                                                                                     // 16575\n * - your app is hosted at url `http://myapp.example.com/`                                                             // 16576\n * - but some of your templates are hosted on other domains you control such as                                        // 16577\n *   `http://srv01.assets.example.com/`,  `http://srv02.assets.example.com/`, etc.                                     // 16578\n * - and you have an open redirect at `http://myapp.example.com/clickThru?...`.                                        // 16579\n *                                                                                                                     // 16580\n * Here is what a secure configuration for this scenario might look like:                                              // 16581\n *                                                                                                                     // 16582\n * ```                                                                                                                 // 16583\n *  angular.module('myApp', []).config(function($sceDelegateProvider) {                                                // 16584\n *    $sceDelegateProvider.resourceUrlWhitelist([                                                                      // 16585\n *      // Allow same origin resource loads.                                                                           // 16586\n *      'self',                                                                                                        // 16587\n *      // Allow loading from our assets domain.  Notice the difference between * and **.                              // 16588\n *      'http://srv*.assets.example.com/**'                                                                            // 16589\n *    ]);                                                                                                              // 16590\n *                                                                                                                     // 16591\n *    // The blacklist overrides the whitelist so the open redirect here is blocked.                                   // 16592\n *    $sceDelegateProvider.resourceUrlBlacklist([                                                                      // 16593\n *      'http://myapp.example.com/clickThru**'                                                                         // 16594\n *    ]);                                                                                                              // 16595\n *  });                                                                                                                // 16596\n * ```                                                                                                                 // 16597\n */                                                                                                                    // 16598\n                                                                                                                       // 16599\nfunction $SceDelegateProvider() {                                                                                      // 16600\n  this.SCE_CONTEXTS = SCE_CONTEXTS;                                                                                    // 16601\n                                                                                                                       // 16602\n  // Resource URLs can also be trusted by policy.                                                                      // 16603\n  var resourceUrlWhitelist = ['self'],                                                                                 // 16604\n      resourceUrlBlacklist = [];                                                                                       // 16605\n                                                                                                                       // 16606\n  /**                                                                                                                  // 16607\n   * @ngdoc method                                                                                                     // 16608\n   * @name $sceDelegateProvider#resourceUrlWhitelist                                                                   // 16609\n   * @kind function                                                                                                    // 16610\n   *                                                                                                                   // 16611\n   * @param {Array=} whitelist When provided, replaces the resourceUrlWhitelist with the value                         // 16612\n   *     provided.  This must be an array or null.  A snapshot of this array is used so further                        // 16613\n   *     changes to the array are ignored.                                                                             // 16614\n   *                                                                                                                   // 16615\n   *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items                        // 16616\n   *     allowed in this array.                                                                                        // 16617\n   *                                                                                                                   // 16618\n   *     Note: **an empty whitelist array will block all URLs**!                                                       // 16619\n   *                                                                                                                   // 16620\n   * @return {Array} the currently set whitelist array.                                                                // 16621\n   *                                                                                                                   // 16622\n   * The **default value** when no whitelist has been explicitly set is `['self']` allowing only                       // 16623\n   * same origin resource requests.                                                                                    // 16624\n   *                                                                                                                   // 16625\n   * @description                                                                                                      // 16626\n   * Sets/Gets the whitelist of trusted resource URLs.                                                                 // 16627\n   */                                                                                                                  // 16628\n  this.resourceUrlWhitelist = function(value) {                                                                        // 16629\n    if (arguments.length) {                                                                                            // 16630\n      resourceUrlWhitelist = adjustMatchers(value);                                                                    // 16631\n    }                                                                                                                  // 16632\n    return resourceUrlWhitelist;                                                                                       // 16633\n  };                                                                                                                   // 16634\n                                                                                                                       // 16635\n  /**                                                                                                                  // 16636\n   * @ngdoc method                                                                                                     // 16637\n   * @name $sceDelegateProvider#resourceUrlBlacklist                                                                   // 16638\n   * @kind function                                                                                                    // 16639\n   *                                                                                                                   // 16640\n   * @param {Array=} blacklist When provided, replaces the resourceUrlBlacklist with the value                         // 16641\n   *     provided.  This must be an array or null.  A snapshot of this array is used so further                        // 16642\n   *     changes to the array are ignored.                                                                             // 16643\n   *                                                                                                                   // 16644\n   *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items                        // 16645\n   *     allowed in this array.                                                                                        // 16646\n   *                                                                                                                   // 16647\n   *     The typical usage for the blacklist is to **block                                                             // 16648\n   *     [open redirects](http://cwe.mitre.org/data/definitions/601.html)** served by your domain as                   // 16649\n   *     these would otherwise be trusted but actually return content from the redirected domain.                      // 16650\n   *                                                                                                                   // 16651\n   *     Finally, **the blacklist overrides the whitelist** and has the final say.                                     // 16652\n   *                                                                                                                   // 16653\n   * @return {Array} the currently set blacklist array.                                                                // 16654\n   *                                                                                                                   // 16655\n   * The **default value** when no whitelist has been explicitly set is the empty array (i.e. there                    // 16656\n   * is no blacklist.)                                                                                                 // 16657\n   *                                                                                                                   // 16658\n   * @description                                                                                                      // 16659\n   * Sets/Gets the blacklist of trusted resource URLs.                                                                 // 16660\n   */                                                                                                                  // 16661\n                                                                                                                       // 16662\n  this.resourceUrlBlacklist = function(value) {                                                                        // 16663\n    if (arguments.length) {                                                                                            // 16664\n      resourceUrlBlacklist = adjustMatchers(value);                                                                    // 16665\n    }                                                                                                                  // 16666\n    return resourceUrlBlacklist;                                                                                       // 16667\n  };                                                                                                                   // 16668\n                                                                                                                       // 16669\n  this.$get = ['$injector', function($injector) {                                                                      // 16670\n                                                                                                                       // 16671\n    var htmlSanitizer = function htmlSanitizer(html) {                                                                 // 16672\n      throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');                              // 16673\n    };                                                                                                                 // 16674\n                                                                                                                       // 16675\n    if ($injector.has('$sanitize')) {                                                                                  // 16676\n      htmlSanitizer = $injector.get('$sanitize');                                                                      // 16677\n    }                                                                                                                  // 16678\n                                                                                                                       // 16679\n                                                                                                                       // 16680\n    function matchUrl(matcher, parsedUrl) {                                                                            // 16681\n      if (matcher === 'self') {                                                                                        // 16682\n        return urlIsSameOrigin(parsedUrl);                                                                             // 16683\n      } else {                                                                                                         // 16684\n        // definitely a regex.  See adjustMatchers()                                                                   // 16685\n        return !!matcher.exec(parsedUrl.href);                                                                         // 16686\n      }                                                                                                                // 16687\n    }                                                                                                                  // 16688\n                                                                                                                       // 16689\n    function isResourceUrlAllowedByPolicy(url) {                                                                       // 16690\n      var parsedUrl = urlResolve(url.toString());                                                                      // 16691\n      var i, n, allowed = false;                                                                                       // 16692\n      // Ensure that at least one item from the whitelist allows this url.                                             // 16693\n      for (i = 0, n = resourceUrlWhitelist.length; i < n; i++) {                                                       // 16694\n        if (matchUrl(resourceUrlWhitelist[i], parsedUrl)) {                                                            // 16695\n          allowed = true;                                                                                              // 16696\n          break;                                                                                                       // 16697\n        }                                                                                                              // 16698\n      }                                                                                                                // 16699\n      if (allowed) {                                                                                                   // 16700\n        // Ensure that no item from the blacklist blocked this url.                                                    // 16701\n        for (i = 0, n = resourceUrlBlacklist.length; i < n; i++) {                                                     // 16702\n          if (matchUrl(resourceUrlBlacklist[i], parsedUrl)) {                                                          // 16703\n            allowed = false;                                                                                           // 16704\n            break;                                                                                                     // 16705\n          }                                                                                                            // 16706\n        }                                                                                                              // 16707\n      }                                                                                                                // 16708\n      return allowed;                                                                                                  // 16709\n    }                                                                                                                  // 16710\n                                                                                                                       // 16711\n    function generateHolderType(Base) {                                                                                // 16712\n      var holderType = function TrustedValueHolderType(trustedValue) {                                                 // 16713\n        this.$$unwrapTrustedValue = function() {                                                                       // 16714\n          return trustedValue;                                                                                         // 16715\n        };                                                                                                             // 16716\n      };                                                                                                               // 16717\n      if (Base) {                                                                                                      // 16718\n        holderType.prototype = new Base();                                                                             // 16719\n      }                                                                                                                // 16720\n      holderType.prototype.valueOf = function sceValueOf() {                                                           // 16721\n        return this.$$unwrapTrustedValue();                                                                            // 16722\n      };                                                                                                               // 16723\n      holderType.prototype.toString = function sceToString() {                                                         // 16724\n        return this.$$unwrapTrustedValue().toString();                                                                 // 16725\n      };                                                                                                               // 16726\n      return holderType;                                                                                               // 16727\n    }                                                                                                                  // 16728\n                                                                                                                       // 16729\n    var trustedValueHolderBase = generateHolderType(),                                                                 // 16730\n        byType = {};                                                                                                   // 16731\n                                                                                                                       // 16732\n    byType[SCE_CONTEXTS.HTML] = generateHolderType(trustedValueHolderBase);                                            // 16733\n    byType[SCE_CONTEXTS.CSS] = generateHolderType(trustedValueHolderBase);                                             // 16734\n    byType[SCE_CONTEXTS.URL] = generateHolderType(trustedValueHolderBase);                                             // 16735\n    byType[SCE_CONTEXTS.JS] = generateHolderType(trustedValueHolderBase);                                              // 16736\n    byType[SCE_CONTEXTS.RESOURCE_URL] = generateHolderType(byType[SCE_CONTEXTS.URL]);                                  // 16737\n                                                                                                                       // 16738\n    /**                                                                                                                // 16739\n     * @ngdoc method                                                                                                   // 16740\n     * @name $sceDelegate#trustAs                                                                                      // 16741\n     *                                                                                                                 // 16742\n     * @description                                                                                                    // 16743\n     * Returns an object that is trusted by angular for use in specified strict                                        // 16744\n     * contextual escaping contexts (such as ng-bind-html, ng-include, any src                                         // 16745\n     * attribute interpolation, any dom event binding attribute interpolation                                          // 16746\n     * such as for onclick,  etc.) that uses the provided value.                                                       // 16747\n     * See {@link ng.$sce $sce} for enabling strict contextual escaping.                                               // 16748\n     *                                                                                                                 // 16749\n     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,                        // 16750\n     *   resourceUrl, html, js and css.                                                                                // 16751\n     * @param {*} value The value that that should be considered trusted/safe.                                         // 16752\n     * @returns {*} A value that can be used to stand in for the provided `value` in places                            // 16753\n     * where Angular expects a $sce.trustAs() return value.                                                            // 16754\n     */                                                                                                                // 16755\n    function trustAs(type, trustedValue) {                                                                             // 16756\n      var Constructor = (byType.hasOwnProperty(type) ? byType[type] : null);                                           // 16757\n      if (!Constructor) {                                                                                              // 16758\n        throw $sceMinErr('icontext',                                                                                   // 16759\n            'Attempted to trust a value in invalid context. Context: {0}; Value: {1}',                                 // 16760\n            type, trustedValue);                                                                                       // 16761\n      }                                                                                                                // 16762\n      if (trustedValue === null || isUndefined(trustedValue) || trustedValue === '') {                                 // 16763\n        return trustedValue;                                                                                           // 16764\n      }                                                                                                                // 16765\n      // All the current contexts in SCE_CONTEXTS happen to be strings.  In order to avoid trusting                    // 16766\n      // mutable objects, we ensure here that the value passed in is actually a string.                                // 16767\n      if (typeof trustedValue !== 'string') {                                                                          // 16768\n        throw $sceMinErr('itype',                                                                                      // 16769\n            'Attempted to trust a non-string value in a content requiring a string: Context: {0}',                     // 16770\n            type);                                                                                                     // 16771\n      }                                                                                                                // 16772\n      return new Constructor(trustedValue);                                                                            // 16773\n    }                                                                                                                  // 16774\n                                                                                                                       // 16775\n    /**                                                                                                                // 16776\n     * @ngdoc method                                                                                                   // 16777\n     * @name $sceDelegate#valueOf                                                                                      // 16778\n     *                                                                                                                 // 16779\n     * @description                                                                                                    // 16780\n     * If the passed parameter had been returned by a prior call to {@link ng.$sceDelegate#trustAs                     // 16781\n     * `$sceDelegate.trustAs`}, returns the value that had been passed to {@link                                       // 16782\n     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.                                                                // 16783\n     *                                                                                                                 // 16784\n     * If the passed parameter is not a value that had been returned by {@link                                         // 16785\n     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}, returns it as-is.                                              // 16786\n     *                                                                                                                 // 16787\n     * @param {*} value The result of a prior {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}                   // 16788\n     *      call or anything else.                                                                                     // 16789\n     * @returns {*} The `value` that was originally provided to {@link ng.$sceDelegate#trustAs                         // 16790\n     *     `$sceDelegate.trustAs`} if `value` is the result of such a call.  Otherwise, returns                        // 16791\n     *     `value` unchanged.                                                                                          // 16792\n     */                                                                                                                // 16793\n    function valueOf(maybeTrusted) {                                                                                   // 16794\n      if (maybeTrusted instanceof trustedValueHolderBase) {                                                            // 16795\n        return maybeTrusted.$$unwrapTrustedValue();                                                                    // 16796\n      } else {                                                                                                         // 16797\n        return maybeTrusted;                                                                                           // 16798\n      }                                                                                                                // 16799\n    }                                                                                                                  // 16800\n                                                                                                                       // 16801\n    /**                                                                                                                // 16802\n     * @ngdoc method                                                                                                   // 16803\n     * @name $sceDelegate#getTrusted                                                                                   // 16804\n     *                                                                                                                 // 16805\n     * @description                                                                                                    // 16806\n     * Takes the result of a {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`} call and                           // 16807\n     * returns the originally supplied value if the queried context type is a supertype of the                         // 16808\n     * created type.  If this condition isn't satisfied, throws an exception.                                          // 16809\n     *                                                                                                                 // 16810\n     * @param {string} type The kind of context in which this value is to be used.                                     // 16811\n     * @param {*} maybeTrusted The result of a prior {@link ng.$sceDelegate#trustAs                                    // 16812\n     *     `$sceDelegate.trustAs`} call.                                                                               // 16813\n     * @returns {*} The value the was originally provided to {@link ng.$sceDelegate#trustAs                            // 16814\n     *     `$sceDelegate.trustAs`} if valid in this context.  Otherwise, throws an exception.                          // 16815\n     */                                                                                                                // 16816\n    function getTrusted(type, maybeTrusted) {                                                                          // 16817\n      if (maybeTrusted === null || isUndefined(maybeTrusted) || maybeTrusted === '') {                                 // 16818\n        return maybeTrusted;                                                                                           // 16819\n      }                                                                                                                // 16820\n      var constructor = (byType.hasOwnProperty(type) ? byType[type] : null);                                           // 16821\n      if (constructor && maybeTrusted instanceof constructor) {                                                        // 16822\n        return maybeTrusted.$$unwrapTrustedValue();                                                                    // 16823\n      }                                                                                                                // 16824\n      // If we get here, then we may only take one of two actions.                                                     // 16825\n      // 1. sanitize the value for the requested type, or                                                              // 16826\n      // 2. throw an exception.                                                                                        // 16827\n      if (type === SCE_CONTEXTS.RESOURCE_URL) {                                                                        // 16828\n        if (isResourceUrlAllowedByPolicy(maybeTrusted)) {                                                              // 16829\n          return maybeTrusted;                                                                                         // 16830\n        } else {                                                                                                       // 16831\n          throw $sceMinErr('insecurl',                                                                                 // 16832\n              'Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}',                       // 16833\n              maybeTrusted.toString());                                                                                // 16834\n        }                                                                                                              // 16835\n      } else if (type === SCE_CONTEXTS.HTML) {                                                                         // 16836\n        return htmlSanitizer(maybeTrusted);                                                                            // 16837\n      }                                                                                                                // 16838\n      throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');                              // 16839\n    }                                                                                                                  // 16840\n                                                                                                                       // 16841\n    return { trustAs: trustAs,                                                                                         // 16842\n             getTrusted: getTrusted,                                                                                   // 16843\n             valueOf: valueOf };                                                                                       // 16844\n  }];                                                                                                                  // 16845\n}                                                                                                                      // 16846\n                                                                                                                       // 16847\n                                                                                                                       // 16848\n/**                                                                                                                    // 16849\n * @ngdoc provider                                                                                                     // 16850\n * @name $sceProvider                                                                                                  // 16851\n * @description                                                                                                        // 16852\n *                                                                                                                     // 16853\n * The $sceProvider provider allows developers to configure the {@link ng.$sce $sce} service.                          // 16854\n * -   enable/disable Strict Contextual Escaping (SCE) in a module                                                     // 16855\n * -   override the default implementation with a custom delegate                                                      // 16856\n *                                                                                                                     // 16857\n * Read more about {@link ng.$sce Strict Contextual Escaping (SCE)}.                                                   // 16858\n */                                                                                                                    // 16859\n                                                                                                                       // 16860\n/* jshint maxlen: false*/                                                                                              // 16861\n                                                                                                                       // 16862\n/**                                                                                                                    // 16863\n * @ngdoc service                                                                                                      // 16864\n * @name $sce                                                                                                          // 16865\n * @kind function                                                                                                      // 16866\n *                                                                                                                     // 16867\n * @description                                                                                                        // 16868\n *                                                                                                                     // 16869\n * `$sce` is a service that provides Strict Contextual Escaping services to AngularJS.                                 // 16870\n *                                                                                                                     // 16871\n * # Strict Contextual Escaping                                                                                        // 16872\n *                                                                                                                     // 16873\n * Strict Contextual Escaping (SCE) is a mode in which AngularJS requires bindings in certain                          // 16874\n * contexts to result in a value that is marked as safe to use for that context.  One example of                       // 16875\n * such a context is binding arbitrary html controlled by the user via `ng-bind-html`.  We refer                       // 16876\n * to these contexts as privileged or SCE contexts.                                                                    // 16877\n *                                                                                                                     // 16878\n * As of version 1.2, Angular ships with SCE enabled by default.                                                       // 16879\n *                                                                                                                     // 16880\n * Note:  When enabled (the default), IE<11 in quirks mode is not supported.  In this mode, IE<11 allow                // 16881\n * one to execute arbitrary javascript by the use of the expression() syntax.  Refer                                   // 16882\n * <http://blogs.msdn.com/b/ie/archive/2008/10/16/ending-expressions.aspx> to learn more about them.                   // 16883\n * You can ensure your document is in standards mode and not quirks mode by adding `<!doctype html>`                   // 16884\n * to the top of your HTML document.                                                                                   // 16885\n *                                                                                                                     // 16886\n * SCE assists in writing code in way that (a) is secure by default and (b) makes auditing for                         // 16887\n * security vulnerabilities such as XSS, clickjacking, etc. a lot easier.                                              // 16888\n *                                                                                                                     // 16889\n * Here's an example of a binding in a privileged context:                                                             // 16890\n *                                                                                                                     // 16891\n * ```                                                                                                                 // 16892\n * <input ng-model=\"userHtml\" aria-label=\"User input\">                                                                 // 16893\n * <div ng-bind-html=\"userHtml\"></div>                                                                                 // 16894\n * ```                                                                                                                 // 16895\n *                                                                                                                     // 16896\n * Notice that `ng-bind-html` is bound to `userHtml` controlled by the user.  With SCE                                 // 16897\n * disabled, this application allows the user to render arbitrary HTML into the DIV.                                   // 16898\n * In a more realistic example, one may be rendering user comments, blog articles, etc. via                            // 16899\n * bindings.  (HTML is just one example of a context where rendering user controlled input creates                     // 16900\n * security vulnerabilities.)                                                                                          // 16901\n *                                                                                                                     // 16902\n * For the case of HTML, you might use a library, either on the client side, or on the server side,                    // 16903\n * to sanitize unsafe HTML before binding to the value and rendering it in the document.                               // 16904\n *                                                                                                                     // 16905\n * How would you ensure that every place that used these types of bindings was bound to a value that                   // 16906\n * was sanitized by your library (or returned as safe for rendering by your server?)  How can you                      // 16907\n * ensure that you didn't accidentally delete the line that sanitized the value, or renamed some                       // 16908\n * properties/fields and forgot to update the binding to the sanitized value?                                          // 16909\n *                                                                                                                     // 16910\n * To be secure by default, you want to ensure that any such bindings are disallowed unless you can                    // 16911\n * determine that something explicitly says it's safe to use a value for binding in that                               // 16912\n * context.  You can then audit your code (a simple grep would do) to ensure that this is only done                    // 16913\n * for those values that you can easily tell are safe - because they were received from your server,                   // 16914\n * sanitized by your library, etc.  You can organize your codebase to help with this - perhaps                         // 16915\n * allowing only the files in a specific directory to do this.  Ensuring that the internal API                         // 16916\n * exposed by that code doesn't markup arbitrary values as safe then becomes a more manageable task.                   // 16917\n *                                                                                                                     // 16918\n * In the case of AngularJS' SCE service, one uses {@link ng.$sce#trustAs $sce.trustAs}                                // 16919\n * (and shorthand methods such as {@link ng.$sce#trustAsHtml $sce.trustAsHtml}, etc.) to                               // 16920\n * obtain values that will be accepted by SCE / privileged contexts.                                                   // 16921\n *                                                                                                                     // 16922\n *                                                                                                                     // 16923\n * ## How does it work?                                                                                                // 16924\n *                                                                                                                     // 16925\n * In privileged contexts, directives and code will bind to the result of {@link ng.$sce#getTrusted                    // 16926\n * $sce.getTrusted(context, value)} rather than to the value directly.  Directives use {@link                          // 16927\n * ng.$sce#parseAs $sce.parseAs} rather than `$parse` to watch attribute bindings, which performs the                  // 16928\n * {@link ng.$sce#getTrusted $sce.getTrusted} behind the scenes on non-constant literals.                              // 16929\n *                                                                                                                     // 16930\n * As an example, {@link ng.directive:ngBindHtml ngBindHtml} uses {@link                                               // 16931\n * ng.$sce#parseAsHtml $sce.parseAsHtml(binding expression)}.  Here's the actual code (slightly                        // 16932\n * simplified):                                                                                                        // 16933\n *                                                                                                                     // 16934\n * ```                                                                                                                 // 16935\n * var ngBindHtmlDirective = ['$sce', function($sce) {                                                                 // 16936\n *   return function(scope, element, attr) {                                                                           // 16937\n *     scope.$watch($sce.parseAsHtml(attr.ngBindHtml), function(value) {                                               // 16938\n *       element.html(value || '');                                                                                    // 16939\n *     });                                                                                                             // 16940\n *   };                                                                                                                // 16941\n * }];                                                                                                                 // 16942\n * ```                                                                                                                 // 16943\n *                                                                                                                     // 16944\n * ## Impact on loading templates                                                                                      // 16945\n *                                                                                                                     // 16946\n * This applies both to the {@link ng.directive:ngInclude `ng-include`} directive as well as                           // 16947\n * `templateUrl`'s specified by {@link guide/directive directives}.                                                    // 16948\n *                                                                                                                     // 16949\n * By default, Angular only loads templates from the same domain and protocol as the application                       // 16950\n * document.  This is done by calling {@link ng.$sce#getTrustedResourceUrl                                             // 16951\n * $sce.getTrustedResourceUrl} on the template URL.  To load templates from other domains and/or                       // 16952\n * protocols, you may either either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist                      // 16953\n * them} or {@link ng.$sce#trustAsResourceUrl wrap it} into a trusted value.                                           // 16954\n *                                                                                                                     // 16955\n * *Please note*:                                                                                                      // 16956\n * The browser's                                                                                                       // 16957\n * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)         // 16958\n * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)                                              // 16959\n * policy apply in addition to this and may further restrict whether the template is successfully                      // 16960\n * loaded.  This means that without the right CORS policy, loading templates from a different domain                   // 16961\n * won't work on all browsers.  Also, loading templates from `file://` URL does not work on some                       // 16962\n * browsers.                                                                                                           // 16963\n *                                                                                                                     // 16964\n * ## This feels like too much overhead                                                                                // 16965\n *                                                                                                                     // 16966\n * It's important to remember that SCE only applies to interpolation expressions.                                      // 16967\n *                                                                                                                     // 16968\n * If your expressions are constant literals, they're automatically trusted and you don't need to                      // 16969\n * call `$sce.trustAs` on them (remember to include the `ngSanitize` module) (e.g.                                     // 16970\n * `<div ng-bind-html=\"'<b>implicitly trusted</b>'\"></div>`) just works.                                               // 16971\n *                                                                                                                     // 16972\n * Additionally, `a[href]` and `img[src]` automatically sanitize their URLs and do not pass them                       // 16973\n * through {@link ng.$sce#getTrusted $sce.getTrusted}.  SCE doesn't play a role here.                                  // 16974\n *                                                                                                                     // 16975\n * The included {@link ng.$sceDelegate $sceDelegate} comes with sane defaults to allow you to load                     // 16976\n * templates in `ng-include` from your application's domain without having to even know about SCE.                     // 16977\n * It blocks loading templates from other domains or loading templates over http from an https                         // 16978\n * served document.  You can change these by setting your own custom {@link                                            // 16979\n * ng.$sceDelegateProvider#resourceUrlWhitelist whitelists} and {@link                                                 // 16980\n * ng.$sceDelegateProvider#resourceUrlBlacklist blacklists} for matching such URLs.                                    // 16981\n *                                                                                                                     // 16982\n * This significantly reduces the overhead.  It is far easier to pay the small overhead and have an                    // 16983\n * application that's secure and can be audited to verify that with much more ease than bolting                        // 16984\n * security onto an application later.                                                                                 // 16985\n *                                                                                                                     // 16986\n * <a name=\"contexts\"></a>                                                                                             // 16987\n * ## What trusted context types are supported?                                                                        // 16988\n *                                                                                                                     // 16989\n * | Context             | Notes          |                                                                            // 16990\n * |---------------------|----------------|                                                                            // 16991\n * | `$sce.HTML`         | For HTML that's safe to source into the application.  The {@link ng.directive:ngBindHtml ngBindHtml} directive uses this context for bindings. If an unsafe value is encountered and the {@link ngSanitize $sanitize} module is present this will sanitize the value instead of throwing an error. |\n * | `$sce.CSS`          | For CSS that's safe to source into the application.  Currently unused.  Feel free to use it in your own directives. |\n * | `$sce.URL`          | For URLs that are safe to follow as links.  Currently unused (`<a href=` and `<img src=` sanitize their urls and don't constitute an SCE context. |\n * | `$sce.RESOURCE_URL` | For URLs that are not only safe to follow as links, but whose contents are also safe to include in your application.  Examples include `ng-include`, `src` / `ngSrc` bindings for tags other than `IMG` (e.g. `IFRAME`, `OBJECT`, etc.)  <br><br>Note that `$sce.RESOURCE_URL` makes a stronger statement about the URL than `$sce.URL` does and therefore contexts requiring values trusted for `$sce.RESOURCE_URL` can be used anywhere that values trusted for `$sce.URL` are required. |\n * | `$sce.JS`           | For JavaScript that is safe to execute in your application's context.  Currently unused.  Feel free to use it in your own directives. |\n *                                                                                                                     // 16997\n * ## Format of items in {@link ng.$sceDelegateProvider#resourceUrlWhitelist resourceUrlWhitelist}/{@link ng.$sceDelegateProvider#resourceUrlBlacklist Blacklist} <a name=\"resourceUrlPatternItem\"></a>\n *                                                                                                                     // 16999\n *  Each element in these arrays must be one of the following:                                                         // 17000\n *                                                                                                                     // 17001\n *  - **'self'**                                                                                                       // 17002\n *    - The special **string**, `'self'`, can be used to match against all URLs of the **same                          // 17003\n *      domain** as the application document using the **same protocol**.                                              // 17004\n *  - **String** (except the special value `'self'`)                                                                   // 17005\n *    - The string is matched against the full *normalized / absolute URL* of the resource                             // 17006\n *      being tested (substring matches are not good enough.)                                                          // 17007\n *    - There are exactly **two wildcard sequences** - `*` and `**`.  All other characters                             // 17008\n *      match themselves.                                                                                              // 17009\n *    - `*`: matches zero or more occurrences of any character other than one of the following 6                       // 17010\n *      characters: '`:`', '`/`', '`.`', '`?`', '`&`' and '`;`'.  It's a useful wildcard for use                       // 17011\n *      in a whitelist.                                                                                                // 17012\n *    - `**`: matches zero or more occurrences of *any* character.  As such, it's not                                  // 17013\n *      appropriate for use in a scheme, domain, etc. as it would match too much.  (e.g.                               // 17014\n *      http://**.example.com/ would match http://evil.com/?ignore=.example.com/ and that might                        // 17015\n *      not have been the intention.)  Its usage at the very end of the path is ok.  (e.g.                             // 17016\n *      http://foo.example.com/templates/**).                                                                          // 17017\n *  - **RegExp** (*see caveat below*)                                                                                  // 17018\n *    - *Caveat*:  While regular expressions are powerful and offer great flexibility,  their syntax                   // 17019\n *      (and all the inevitable escaping) makes them *harder to maintain*.  It's easy to                               // 17020\n *      accidentally introduce a bug when one updates a complex expression (imho, all regexes should                   // 17021\n *      have good test coverage).  For instance, the use of `.` in the regex is correct only in a                      // 17022\n *      small number of cases.  A `.` character in the regex used when matching the scheme or a                        // 17023\n *      subdomain could be matched against a `:` or literal `.` that was likely not intended.   It                     // 17024\n *      is highly recommended to use the string patterns and only fall back to regular expressions                     // 17025\n *      as a last resort.                                                                                              // 17026\n *    - The regular expression must be an instance of RegExp (i.e. not a string.)  It is                               // 17027\n *      matched against the **entire** *normalized / absolute URL* of the resource being tested                        // 17028\n *      (even when the RegExp did not have the `^` and `$` codes.)  In addition, any flags                             // 17029\n *      present on the RegExp (such as multiline, global, ignoreCase) are ignored.                                     // 17030\n *    - If you are generating your JavaScript from some other templating engine (not                                   // 17031\n *      recommended, e.g. in issue [#4006](https://github.com/angular/angular.js/issues/4006)),                        // 17032\n *      remember to escape your regular expression (and be aware that you might need more than                         // 17033\n *      one level of escaping depending on your templating engine and the way you interpolated                         // 17034\n *      the value.)  Do make use of your platform's escaping mechanism as it might be good                             // 17035\n *      enough before coding your own.  E.g. Ruby has                                                                  // 17036\n *      [Regexp.escape(str)](http://www.ruby-doc.org/core-2.0.0/Regexp.html#method-c-escape)                           // 17037\n *      and Python has [re.escape](http://docs.python.org/library/re.html#re.escape).                                  // 17038\n *      Javascript lacks a similar built in function for escaping.  Take a look at Google                              // 17039\n *      Closure library's [goog.string.regExpEscape(s)](                                                               // 17040\n *      http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962).             // 17041\n *                                                                                                                     // 17042\n * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} for an example.                                          // 17043\n *                                                                                                                     // 17044\n * ## Show me an example using SCE.                                                                                    // 17045\n *                                                                                                                     // 17046\n * <example module=\"mySceApp\" deps=\"angular-sanitize.js\">                                                              // 17047\n * <file name=\"index.html\">                                                                                            // 17048\n *   <div ng-controller=\"AppController as myCtrl\">                                                                     // 17049\n *     <i ng-bind-html=\"myCtrl.explicitlyTrustedHtml\" id=\"explicitlyTrustedHtml\"></i><br><br>                          // 17050\n *     <b>User comments</b><br>                                                                                        // 17051\n *     By default, HTML that isn't explicitly trusted (e.g. Alice's comment) is sanitized when                         // 17052\n *     $sanitize is available.  If $sanitize isn't available, this results in an error instead of an                   // 17053\n *     exploit.                                                                                                        // 17054\n *     <div class=\"well\">                                                                                              // 17055\n *       <div ng-repeat=\"userComment in myCtrl.userComments\">                                                          // 17056\n *         <b>{{userComment.name}}</b>:                                                                                // 17057\n *         <span ng-bind-html=\"userComment.htmlComment\" class=\"htmlComment\"></span>                                    // 17058\n *         <br>                                                                                                        // 17059\n *       </div>                                                                                                        // 17060\n *     </div>                                                                                                          // 17061\n *   </div>                                                                                                            // 17062\n * </file>                                                                                                             // 17063\n *                                                                                                                     // 17064\n * <file name=\"script.js\">                                                                                             // 17065\n *   angular.module('mySceApp', ['ngSanitize'])                                                                        // 17066\n *     .controller('AppController', ['$http', '$templateCache', '$sce',                                                // 17067\n *       function($http, $templateCache, $sce) {                                                                       // 17068\n *         var self = this;                                                                                            // 17069\n *         $http.get(\"test_data.json\", {cache: $templateCache}).success(function(userComments) {                       // 17070\n *           self.userComments = userComments;                                                                         // 17071\n *         });                                                                                                         // 17072\n *         self.explicitlyTrustedHtml = $sce.trustAsHtml(                                                              // 17073\n *             '<span onmouseover=\"this.textContent=&quot;Explicitly trusted HTML bypasses ' +                         // 17074\n *             'sanitization.&quot;\">Hover over this text.</span>');                                                   // 17075\n *       }]);                                                                                                          // 17076\n * </file>                                                                                                             // 17077\n *                                                                                                                     // 17078\n * <file name=\"test_data.json\">                                                                                        // 17079\n * [                                                                                                                   // 17080\n *   { \"name\": \"Alice\",                                                                                                // 17081\n *     \"htmlComment\":                                                                                                  // 17082\n *         \"<span onmouseover='this.textContent=\\\"PWN3D!\\\"'>Is <i>anyone</i> reading this?</span>\"                     // 17083\n *   },                                                                                                                // 17084\n *   { \"name\": \"Bob\",                                                                                                  // 17085\n *     \"htmlComment\": \"<i>Yes!</i>  Am I the only other one?\"                                                          // 17086\n *   }                                                                                                                 // 17087\n * ]                                                                                                                   // 17088\n * </file>                                                                                                             // 17089\n *                                                                                                                     // 17090\n * <file name=\"protractor.js\" type=\"protractor\">                                                                       // 17091\n *   describe('SCE doc demo', function() {                                                                             // 17092\n *     it('should sanitize untrusted values', function() {                                                             // 17093\n *       expect(element.all(by.css('.htmlComment')).first().getInnerHtml())                                            // 17094\n *           .toBe('<span>Is <i>anyone</i> reading this?</span>');                                                     // 17095\n *     });                                                                                                             // 17096\n *                                                                                                                     // 17097\n *     it('should NOT sanitize explicitly trusted values', function() {                                                // 17098\n *       expect(element(by.id('explicitlyTrustedHtml')).getInnerHtml()).toBe(                                          // 17099\n *           '<span onmouseover=\"this.textContent=&quot;Explicitly trusted HTML bypasses ' +                           // 17100\n *           'sanitization.&quot;\">Hover over this text.</span>');                                                     // 17101\n *     });                                                                                                             // 17102\n *   });                                                                                                               // 17103\n * </file>                                                                                                             // 17104\n * </example>                                                                                                          // 17105\n *                                                                                                                     // 17106\n *                                                                                                                     // 17107\n *                                                                                                                     // 17108\n * ## Can I disable SCE completely?                                                                                    // 17109\n *                                                                                                                     // 17110\n * Yes, you can.  However, this is strongly discouraged.  SCE gives you a lot of security benefits                     // 17111\n * for little coding overhead.  It will be much harder to take an SCE disabled application and                         // 17112\n * either secure it on your own or enable SCE at a later stage.  It might make sense to disable SCE                    // 17113\n * for cases where you have a lot of existing code that was written before SCE was introduced and                      // 17114\n * you're migrating them a module at a time.                                                                           // 17115\n *                                                                                                                     // 17116\n * That said, here's how you can completely disable SCE:                                                               // 17117\n *                                                                                                                     // 17118\n * ```                                                                                                                 // 17119\n * angular.module('myAppWithSceDisabledmyApp', []).config(function($sceProvider) {                                     // 17120\n *   // Completely disable SCE.  For demonstration purposes only!                                                      // 17121\n *   // Do not use in new projects.                                                                                    // 17122\n *   $sceProvider.enabled(false);                                                                                      // 17123\n * });                                                                                                                 // 17124\n * ```                                                                                                                 // 17125\n *                                                                                                                     // 17126\n */                                                                                                                    // 17127\n/* jshint maxlen: 100 */                                                                                               // 17128\n                                                                                                                       // 17129\nfunction $SceProvider() {                                                                                              // 17130\n  var enabled = true;                                                                                                  // 17131\n                                                                                                                       // 17132\n  /**                                                                                                                  // 17133\n   * @ngdoc method                                                                                                     // 17134\n   * @name $sceProvider#enabled                                                                                        // 17135\n   * @kind function                                                                                                    // 17136\n   *                                                                                                                   // 17137\n   * @param {boolean=} value If provided, then enables/disables SCE.                                                   // 17138\n   * @return {boolean} true if SCE is enabled, false otherwise.                                                        // 17139\n   *                                                                                                                   // 17140\n   * @description                                                                                                      // 17141\n   * Enables/disables SCE and returns the current value.                                                               // 17142\n   */                                                                                                                  // 17143\n  this.enabled = function(value) {                                                                                     // 17144\n    if (arguments.length) {                                                                                            // 17145\n      enabled = !!value;                                                                                               // 17146\n    }                                                                                                                  // 17147\n    return enabled;                                                                                                    // 17148\n  };                                                                                                                   // 17149\n                                                                                                                       // 17150\n                                                                                                                       // 17151\n  /* Design notes on the default implementation for SCE.                                                               // 17152\n   *                                                                                                                   // 17153\n   * The API contract for the SCE delegate                                                                             // 17154\n   * -------------------------------------                                                                             // 17155\n   * The SCE delegate object must provide the following 3 methods:                                                     // 17156\n   *                                                                                                                   // 17157\n   * - trustAs(contextEnum, value)                                                                                     // 17158\n   *     This method is used to tell the SCE service that the provided value is OK to use in the                       // 17159\n   *     contexts specified by contextEnum.  It must return an object that will be accepted by                         // 17160\n   *     getTrusted() for a compatible contextEnum and return this value.                                              // 17161\n   *                                                                                                                   // 17162\n   * - valueOf(value)                                                                                                  // 17163\n   *     For values that were not produced by trustAs(), return them as is.  For values that were                      // 17164\n   *     produced by trustAs(), return the corresponding input value to trustAs.  Basically, if                        // 17165\n   *     trustAs is wrapping the given values into some type, this operation unwraps it when given                     // 17166\n   *     such a value.                                                                                                 // 17167\n   *                                                                                                                   // 17168\n   * - getTrusted(contextEnum, value)                                                                                  // 17169\n   *     This function should return the a value that is safe to use in the context specified by                       // 17170\n   *     contextEnum or throw and exception otherwise.                                                                 // 17171\n   *                                                                                                                   // 17172\n   * NOTE: This contract deliberately does NOT state that values returned by trustAs() must be                         // 17173\n   * opaque or wrapped in some holder object.  That happens to be an implementation detail.  For                       // 17174\n   * instance, an implementation could maintain a registry of all trusted objects by context.  In                      // 17175\n   * such a case, trustAs() would return the same object that was passed in.  getTrusted() would                       // 17176\n   * return the same object passed in if it was found in the registry under a compatible context or                    // 17177\n   * throw an exception otherwise.  An implementation might only wrap values some of the time based                    // 17178\n   * on some criteria.  getTrusted() might return a value and not throw an exception for special                       // 17179\n   * constants or objects even if not wrapped.  All such implementations fulfill this contract.                        // 17180\n   *                                                                                                                   // 17181\n   *                                                                                                                   // 17182\n   * A note on the inheritance model for SCE contexts                                                                  // 17183\n   * ------------------------------------------------                                                                  // 17184\n   * I've used inheritance and made RESOURCE_URL wrapped types a subtype of URL wrapped types.  This                   // 17185\n   * is purely an implementation details.                                                                              // 17186\n   *                                                                                                                   // 17187\n   * The contract is simply this:                                                                                      // 17188\n   *                                                                                                                   // 17189\n   *     getTrusted($sce.RESOURCE_URL, value) succeeding implies that getTrusted($sce.URL, value)                      // 17190\n   *     will also succeed.                                                                                            // 17191\n   *                                                                                                                   // 17192\n   * Inheritance happens to capture this in a natural way.  In some future, we                                         // 17193\n   * may not use inheritance anymore.  That is OK because no code outside of                                           // 17194\n   * sce.js and sceSpecs.js would need to be aware of this detail.                                                     // 17195\n   */                                                                                                                  // 17196\n                                                                                                                       // 17197\n  this.$get = ['$parse', '$sceDelegate', function(                                                                     // 17198\n                $parse,   $sceDelegate) {                                                                              // 17199\n    // Prereq: Ensure that we're not running in IE<11 quirks mode.  In that mode, IE < 11 allow                        // 17200\n    // the \"expression(javascript expression)\" syntax which is insecure.                                               // 17201\n    if (enabled && msie < 8) {                                                                                         // 17202\n      throw $sceMinErr('iequirks',                                                                                     // 17203\n        'Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks ' +                      // 17204\n        'mode.  You can fix this by adding the text <!doctype html> to the top of your HTML ' +                        // 17205\n        'document.  See http://docs.angularjs.org/api/ng.$sce for more information.');                                 // 17206\n    }                                                                                                                  // 17207\n                                                                                                                       // 17208\n    var sce = shallowCopy(SCE_CONTEXTS);                                                                               // 17209\n                                                                                                                       // 17210\n    /**                                                                                                                // 17211\n     * @ngdoc method                                                                                                   // 17212\n     * @name $sce#isEnabled                                                                                            // 17213\n     * @kind function                                                                                                  // 17214\n     *                                                                                                                 // 17215\n     * @return {Boolean} true if SCE is enabled, false otherwise.  If you want to set the value, you                   // 17216\n     * have to do it at module config time on {@link ng.$sceProvider $sceProvider}.                                    // 17217\n     *                                                                                                                 // 17218\n     * @description                                                                                                    // 17219\n     * Returns a boolean indicating if SCE is enabled.                                                                 // 17220\n     */                                                                                                                // 17221\n    sce.isEnabled = function() {                                                                                       // 17222\n      return enabled;                                                                                                  // 17223\n    };                                                                                                                 // 17224\n    sce.trustAs = $sceDelegate.trustAs;                                                                                // 17225\n    sce.getTrusted = $sceDelegate.getTrusted;                                                                          // 17226\n    sce.valueOf = $sceDelegate.valueOf;                                                                                // 17227\n                                                                                                                       // 17228\n    if (!enabled) {                                                                                                    // 17229\n      sce.trustAs = sce.getTrusted = function(type, value) { return value; };                                          // 17230\n      sce.valueOf = identity;                                                                                          // 17231\n    }                                                                                                                  // 17232\n                                                                                                                       // 17233\n    /**                                                                                                                // 17234\n     * @ngdoc method                                                                                                   // 17235\n     * @name $sce#parseAs                                                                                              // 17236\n     *                                                                                                                 // 17237\n     * @description                                                                                                    // 17238\n     * Converts Angular {@link guide/expression expression} into a function.  This is like {@link                      // 17239\n     * ng.$parse $parse} and is identical when the expression is a literal constant.  Otherwise, it                    // 17240\n     * wraps the expression in a call to {@link ng.$sce#getTrusted $sce.getTrusted(*type*,                             // 17241\n     * *result*)}                                                                                                      // 17242\n     *                                                                                                                 // 17243\n     * @param {string} type The kind of SCE context in which this result will be used.                                 // 17244\n     * @param {string} expression String expression to compile.                                                        // 17245\n     * @returns {function(context, locals)} a function which represents the compiled expression:                       // 17246\n     *                                                                                                                 // 17247\n     *    * `context` – `{object}` – an object against which any expressions embedded in the strings                   // 17248\n     *      are evaluated against (typically a scope object).                                                          // 17249\n     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in                   // 17250\n     *      `context`.                                                                                                 // 17251\n     */                                                                                                                // 17252\n    sce.parseAs = function sceParseAs(type, expr) {                                                                    // 17253\n      var parsed = $parse(expr);                                                                                       // 17254\n      if (parsed.literal && parsed.constant) {                                                                         // 17255\n        return parsed;                                                                                                 // 17256\n      } else {                                                                                                         // 17257\n        return $parse(expr, function(value) {                                                                          // 17258\n          return sce.getTrusted(type, value);                                                                          // 17259\n        });                                                                                                            // 17260\n      }                                                                                                                // 17261\n    };                                                                                                                 // 17262\n                                                                                                                       // 17263\n    /**                                                                                                                // 17264\n     * @ngdoc method                                                                                                   // 17265\n     * @name $sce#trustAs                                                                                              // 17266\n     *                                                                                                                 // 17267\n     * @description                                                                                                    // 17268\n     * Delegates to {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.  As such,                                  // 17269\n     * returns an object that is trusted by angular for use in specified strict contextual                             // 17270\n     * escaping contexts (such as ng-bind-html, ng-include, any src attribute                                          // 17271\n     * interpolation, any dom event binding attribute interpolation such as for onclick,  etc.)                        // 17272\n     * that uses the provided value.  See * {@link ng.$sce $sce} for enabling strict contextual                        // 17273\n     * escaping.                                                                                                       // 17274\n     *                                                                                                                 // 17275\n     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,                        // 17276\n     *   resourceUrl, html, js and css.                                                                                // 17277\n     * @param {*} value The value that that should be considered trusted/safe.                                         // 17278\n     * @returns {*} A value that can be used to stand in for the provided `value` in places                            // 17279\n     * where Angular expects a $sce.trustAs() return value.                                                            // 17280\n     */                                                                                                                // 17281\n                                                                                                                       // 17282\n    /**                                                                                                                // 17283\n     * @ngdoc method                                                                                                   // 17284\n     * @name $sce#trustAsHtml                                                                                          // 17285\n     *                                                                                                                 // 17286\n     * @description                                                                                                    // 17287\n     * Shorthand method.  `$sce.trustAsHtml(value)` →                                                                  // 17288\n     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.HTML, value)`}                                    // 17289\n     *                                                                                                                 // 17290\n     * @param {*} value The value to trustAs.                                                                          // 17291\n     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedHtml                                      // 17292\n     *     $sce.getTrustedHtml(value)} to obtain the original value.  (privileged directives                           // 17293\n     *     only accept expressions that are either literal constants or are the                                        // 17294\n     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)                                                      // 17295\n     */                                                                                                                // 17296\n                                                                                                                       // 17297\n    /**                                                                                                                // 17298\n     * @ngdoc method                                                                                                   // 17299\n     * @name $sce#trustAsUrl                                                                                           // 17300\n     *                                                                                                                 // 17301\n     * @description                                                                                                    // 17302\n     * Shorthand method.  `$sce.trustAsUrl(value)` →                                                                   // 17303\n     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.URL, value)`}                                     // 17304\n     *                                                                                                                 // 17305\n     * @param {*} value The value to trustAs.                                                                          // 17306\n     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedUrl                                       // 17307\n     *     $sce.getTrustedUrl(value)} to obtain the original value.  (privileged directives                            // 17308\n     *     only accept expressions that are either literal constants or are the                                        // 17309\n     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)                                                      // 17310\n     */                                                                                                                // 17311\n                                                                                                                       // 17312\n    /**                                                                                                                // 17313\n     * @ngdoc method                                                                                                   // 17314\n     * @name $sce#trustAsResourceUrl                                                                                   // 17315\n     *                                                                                                                 // 17316\n     * @description                                                                                                    // 17317\n     * Shorthand method.  `$sce.trustAsResourceUrl(value)` →                                                           // 17318\n     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.RESOURCE_URL, value)`}                            // 17319\n     *                                                                                                                 // 17320\n     * @param {*} value The value to trustAs.                                                                          // 17321\n     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedResourceUrl                               // 17322\n     *     $sce.getTrustedResourceUrl(value)} to obtain the original value.  (privileged directives                    // 17323\n     *     only accept expressions that are either literal constants or are the return                                 // 17324\n     *     value of {@link ng.$sce#trustAs $sce.trustAs}.)                                                             // 17325\n     */                                                                                                                // 17326\n                                                                                                                       // 17327\n    /**                                                                                                                // 17328\n     * @ngdoc method                                                                                                   // 17329\n     * @name $sce#trustAsJs                                                                                            // 17330\n     *                                                                                                                 // 17331\n     * @description                                                                                                    // 17332\n     * Shorthand method.  `$sce.trustAsJs(value)` →                                                                    // 17333\n     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.JS, value)`}                                      // 17334\n     *                                                                                                                 // 17335\n     * @param {*} value The value to trustAs.                                                                          // 17336\n     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedJs                                        // 17337\n     *     $sce.getTrustedJs(value)} to obtain the original value.  (privileged directives                             // 17338\n     *     only accept expressions that are either literal constants or are the                                        // 17339\n     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)                                                      // 17340\n     */                                                                                                                // 17341\n                                                                                                                       // 17342\n    /**                                                                                                                // 17343\n     * @ngdoc method                                                                                                   // 17344\n     * @name $sce#getTrusted                                                                                           // 17345\n     *                                                                                                                 // 17346\n     * @description                                                                                                    // 17347\n     * Delegates to {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted`}.  As such,                            // 17348\n     * takes the result of a {@link ng.$sce#trustAs `$sce.trustAs`}() call and returns the                             // 17349\n     * originally supplied value if the queried context type is a supertype of the created type.                       // 17350\n     * If this condition isn't satisfied, throws an exception.                                                         // 17351\n     *                                                                                                                 // 17352\n     * @param {string} type The kind of context in which this value is to be used.                                     // 17353\n     * @param {*} maybeTrusted The result of a prior {@link ng.$sce#trustAs `$sce.trustAs`}                            // 17354\n     *                         call.                                                                                   // 17355\n     * @returns {*} The value the was originally provided to                                                           // 17356\n     *              {@link ng.$sce#trustAs `$sce.trustAs`} if valid in this context.                                   // 17357\n     *              Otherwise, throws an exception.                                                                    // 17358\n     */                                                                                                                // 17359\n                                                                                                                       // 17360\n    /**                                                                                                                // 17361\n     * @ngdoc method                                                                                                   // 17362\n     * @name $sce#getTrustedHtml                                                                                       // 17363\n     *                                                                                                                 // 17364\n     * @description                                                                                                    // 17365\n     * Shorthand method.  `$sce.getTrustedHtml(value)` →                                                               // 17366\n     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.HTML, value)`}                              // 17367\n     *                                                                                                                 // 17368\n     * @param {*} value The value to pass to `$sce.getTrusted`.                                                        // 17369\n     * @returns {*} The return value of `$sce.getTrusted($sce.HTML, value)`                                            // 17370\n     */                                                                                                                // 17371\n                                                                                                                       // 17372\n    /**                                                                                                                // 17373\n     * @ngdoc method                                                                                                   // 17374\n     * @name $sce#getTrustedCss                                                                                        // 17375\n     *                                                                                                                 // 17376\n     * @description                                                                                                    // 17377\n     * Shorthand method.  `$sce.getTrustedCss(value)` →                                                                // 17378\n     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.CSS, value)`}                               // 17379\n     *                                                                                                                 // 17380\n     * @param {*} value The value to pass to `$sce.getTrusted`.                                                        // 17381\n     * @returns {*} The return value of `$sce.getTrusted($sce.CSS, value)`                                             // 17382\n     */                                                                                                                // 17383\n                                                                                                                       // 17384\n    /**                                                                                                                // 17385\n     * @ngdoc method                                                                                                   // 17386\n     * @name $sce#getTrustedUrl                                                                                        // 17387\n     *                                                                                                                 // 17388\n     * @description                                                                                                    // 17389\n     * Shorthand method.  `$sce.getTrustedUrl(value)` →                                                                // 17390\n     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.URL, value)`}                               // 17391\n     *                                                                                                                 // 17392\n     * @param {*} value The value to pass to `$sce.getTrusted`.                                                        // 17393\n     * @returns {*} The return value of `$sce.getTrusted($sce.URL, value)`                                             // 17394\n     */                                                                                                                // 17395\n                                                                                                                       // 17396\n    /**                                                                                                                // 17397\n     * @ngdoc method                                                                                                   // 17398\n     * @name $sce#getTrustedResourceUrl                                                                                // 17399\n     *                                                                                                                 // 17400\n     * @description                                                                                                    // 17401\n     * Shorthand method.  `$sce.getTrustedResourceUrl(value)` →                                                        // 17402\n     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.RESOURCE_URL, value)`}                      // 17403\n     *                                                                                                                 // 17404\n     * @param {*} value The value to pass to `$sceDelegate.getTrusted`.                                                // 17405\n     * @returns {*} The return value of `$sce.getTrusted($sce.RESOURCE_URL, value)`                                    // 17406\n     */                                                                                                                // 17407\n                                                                                                                       // 17408\n    /**                                                                                                                // 17409\n     * @ngdoc method                                                                                                   // 17410\n     * @name $sce#getTrustedJs                                                                                         // 17411\n     *                                                                                                                 // 17412\n     * @description                                                                                                    // 17413\n     * Shorthand method.  `$sce.getTrustedJs(value)` →                                                                 // 17414\n     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.JS, value)`}                                // 17415\n     *                                                                                                                 // 17416\n     * @param {*} value The value to pass to `$sce.getTrusted`.                                                        // 17417\n     * @returns {*} The return value of `$sce.getTrusted($sce.JS, value)`                                              // 17418\n     */                                                                                                                // 17419\n                                                                                                                       // 17420\n    /**                                                                                                                // 17421\n     * @ngdoc method                                                                                                   // 17422\n     * @name $sce#parseAsHtml                                                                                          // 17423\n     *                                                                                                                 // 17424\n     * @description                                                                                                    // 17425\n     * Shorthand method.  `$sce.parseAsHtml(expression string)` →                                                      // 17426\n     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.HTML, value)`}                                                    // 17427\n     *                                                                                                                 // 17428\n     * @param {string} expression String expression to compile.                                                        // 17429\n     * @returns {function(context, locals)} a function which represents the compiled expression:                       // 17430\n     *                                                                                                                 // 17431\n     *    * `context` – `{object}` – an object against which any expressions embedded in the strings                   // 17432\n     *      are evaluated against (typically a scope object).                                                          // 17433\n     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in                   // 17434\n     *      `context`.                                                                                                 // 17435\n     */                                                                                                                // 17436\n                                                                                                                       // 17437\n    /**                                                                                                                // 17438\n     * @ngdoc method                                                                                                   // 17439\n     * @name $sce#parseAsCss                                                                                           // 17440\n     *                                                                                                                 // 17441\n     * @description                                                                                                    // 17442\n     * Shorthand method.  `$sce.parseAsCss(value)` →                                                                   // 17443\n     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.CSS, value)`}                                                     // 17444\n     *                                                                                                                 // 17445\n     * @param {string} expression String expression to compile.                                                        // 17446\n     * @returns {function(context, locals)} a function which represents the compiled expression:                       // 17447\n     *                                                                                                                 // 17448\n     *    * `context` – `{object}` – an object against which any expressions embedded in the strings                   // 17449\n     *      are evaluated against (typically a scope object).                                                          // 17450\n     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in                   // 17451\n     *      `context`.                                                                                                 // 17452\n     */                                                                                                                // 17453\n                                                                                                                       // 17454\n    /**                                                                                                                // 17455\n     * @ngdoc method                                                                                                   // 17456\n     * @name $sce#parseAsUrl                                                                                           // 17457\n     *                                                                                                                 // 17458\n     * @description                                                                                                    // 17459\n     * Shorthand method.  `$sce.parseAsUrl(value)` →                                                                   // 17460\n     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.URL, value)`}                                                     // 17461\n     *                                                                                                                 // 17462\n     * @param {string} expression String expression to compile.                                                        // 17463\n     * @returns {function(context, locals)} a function which represents the compiled expression:                       // 17464\n     *                                                                                                                 // 17465\n     *    * `context` – `{object}` – an object against which any expressions embedded in the strings                   // 17466\n     *      are evaluated against (typically a scope object).                                                          // 17467\n     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in                   // 17468\n     *      `context`.                                                                                                 // 17469\n     */                                                                                                                // 17470\n                                                                                                                       // 17471\n    /**                                                                                                                // 17472\n     * @ngdoc method                                                                                                   // 17473\n     * @name $sce#parseAsResourceUrl                                                                                   // 17474\n     *                                                                                                                 // 17475\n     * @description                                                                                                    // 17476\n     * Shorthand method.  `$sce.parseAsResourceUrl(value)` →                                                           // 17477\n     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.RESOURCE_URL, value)`}                                            // 17478\n     *                                                                                                                 // 17479\n     * @param {string} expression String expression to compile.                                                        // 17480\n     * @returns {function(context, locals)} a function which represents the compiled expression:                       // 17481\n     *                                                                                                                 // 17482\n     *    * `context` – `{object}` – an object against which any expressions embedded in the strings                   // 17483\n     *      are evaluated against (typically a scope object).                                                          // 17484\n     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in                   // 17485\n     *      `context`.                                                                                                 // 17486\n     */                                                                                                                // 17487\n                                                                                                                       // 17488\n    /**                                                                                                                // 17489\n     * @ngdoc method                                                                                                   // 17490\n     * @name $sce#parseAsJs                                                                                            // 17491\n     *                                                                                                                 // 17492\n     * @description                                                                                                    // 17493\n     * Shorthand method.  `$sce.parseAsJs(value)` →                                                                    // 17494\n     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.JS, value)`}                                                      // 17495\n     *                                                                                                                 // 17496\n     * @param {string} expression String expression to compile.                                                        // 17497\n     * @returns {function(context, locals)} a function which represents the compiled expression:                       // 17498\n     *                                                                                                                 // 17499\n     *    * `context` – `{object}` – an object against which any expressions embedded in the strings                   // 17500\n     *      are evaluated against (typically a scope object).                                                          // 17501\n     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in                   // 17502\n     *      `context`.                                                                                                 // 17503\n     */                                                                                                                // 17504\n                                                                                                                       // 17505\n    // Shorthand delegations.                                                                                          // 17506\n    var parse = sce.parseAs,                                                                                           // 17507\n        getTrusted = sce.getTrusted,                                                                                   // 17508\n        trustAs = sce.trustAs;                                                                                         // 17509\n                                                                                                                       // 17510\n    forEach(SCE_CONTEXTS, function(enumValue, name) {                                                                  // 17511\n      var lName = lowercase(name);                                                                                     // 17512\n      sce[camelCase(\"parse_as_\" + lName)] = function(expr) {                                                           // 17513\n        return parse(enumValue, expr);                                                                                 // 17514\n      };                                                                                                               // 17515\n      sce[camelCase(\"get_trusted_\" + lName)] = function(value) {                                                       // 17516\n        return getTrusted(enumValue, value);                                                                           // 17517\n      };                                                                                                               // 17518\n      sce[camelCase(\"trust_as_\" + lName)] = function(value) {                                                          // 17519\n        return trustAs(enumValue, value);                                                                              // 17520\n      };                                                                                                               // 17521\n    });                                                                                                                // 17522\n                                                                                                                       // 17523\n    return sce;                                                                                                        // 17524\n  }];                                                                                                                  // 17525\n}                                                                                                                      // 17526\n                                                                                                                       // 17527\n/**                                                                                                                    // 17528\n * !!! This is an undocumented \"private\" service !!!                                                                   // 17529\n *                                                                                                                     // 17530\n * @name $sniffer                                                                                                      // 17531\n * @requires $window                                                                                                   // 17532\n * @requires $document                                                                                                 // 17533\n *                                                                                                                     // 17534\n * @property {boolean} history Does the browser support html5 history api ?                                            // 17535\n * @property {boolean} transitions Does the browser support CSS transition events ?                                    // 17536\n * @property {boolean} animations Does the browser support CSS animation events ?                                      // 17537\n *                                                                                                                     // 17538\n * @description                                                                                                        // 17539\n * This is very simple implementation of testing browser's features.                                                   // 17540\n */                                                                                                                    // 17541\nfunction $SnifferProvider() {                                                                                          // 17542\n  this.$get = ['$window', '$document', function($window, $document) {                                                  // 17543\n    var eventSupport = {},                                                                                             // 17544\n        android =                                                                                                      // 17545\n          toInt((/android (\\d+)/.exec(lowercase(($window.navigator || {}).userAgent)) || [])[1]),                      // 17546\n        boxee = /Boxee/i.test(($window.navigator || {}).userAgent),                                                    // 17547\n        document = $document[0] || {},                                                                                 // 17548\n        vendorPrefix,                                                                                                  // 17549\n        vendorRegex = /^(Moz|webkit|ms)(?=[A-Z])/,                                                                     // 17550\n        bodyStyle = document.body && document.body.style,                                                              // 17551\n        transitions = false,                                                                                           // 17552\n        animations = false,                                                                                            // 17553\n        match;                                                                                                         // 17554\n                                                                                                                       // 17555\n    if (bodyStyle) {                                                                                                   // 17556\n      for (var prop in bodyStyle) {                                                                                    // 17557\n        if (match = vendorRegex.exec(prop)) {                                                                          // 17558\n          vendorPrefix = match[0];                                                                                     // 17559\n          vendorPrefix = vendorPrefix.substr(0, 1).toUpperCase() + vendorPrefix.substr(1);                             // 17560\n          break;                                                                                                       // 17561\n        }                                                                                                              // 17562\n      }                                                                                                                // 17563\n                                                                                                                       // 17564\n      if (!vendorPrefix) {                                                                                             // 17565\n        vendorPrefix = ('WebkitOpacity' in bodyStyle) && 'webkit';                                                     // 17566\n      }                                                                                                                // 17567\n                                                                                                                       // 17568\n      transitions = !!(('transition' in bodyStyle) || (vendorPrefix + 'Transition' in bodyStyle));                     // 17569\n      animations  = !!(('animation' in bodyStyle) || (vendorPrefix + 'Animation' in bodyStyle));                       // 17570\n                                                                                                                       // 17571\n      if (android && (!transitions ||  !animations)) {                                                                 // 17572\n        transitions = isString(bodyStyle.webkitTransition);                                                            // 17573\n        animations = isString(bodyStyle.webkitAnimation);                                                              // 17574\n      }                                                                                                                // 17575\n    }                                                                                                                  // 17576\n                                                                                                                       // 17577\n                                                                                                                       // 17578\n    return {                                                                                                           // 17579\n      // Android has history.pushState, but it does not update location correctly                                      // 17580\n      // so let's not use the history API at all.                                                                      // 17581\n      // http://code.google.com/p/android/issues/detail?id=17471                                                       // 17582\n      // https://github.com/angular/angular.js/issues/904                                                              // 17583\n                                                                                                                       // 17584\n      // older webkit browser (533.9) on Boxee box has exactly the same problem as Android has                         // 17585\n      // so let's not use the history API also                                                                         // 17586\n      // We are purposefully using `!(android < 4)` to cover the case when `android` is undefined                      // 17587\n      // jshint -W018                                                                                                  // 17588\n      history: !!($window.history && $window.history.pushState && !(android < 4) && !boxee),                           // 17589\n      // jshint +W018                                                                                                  // 17590\n      hasEvent: function(event) {                                                                                      // 17591\n        // IE9 implements 'input' event it's so fubared that we rather pretend that it doesn't have                    // 17592\n        // it. In particular the event is not fired when backspace or delete key are pressed or                        // 17593\n        // when cut operation is performed.                                                                            // 17594\n        // IE10+ implements 'input' event but it erroneously fires under various situations,                           // 17595\n        // e.g. when placeholder changes, or a form is focused.                                                        // 17596\n        if (event === 'input' && msie <= 11) return false;                                                             // 17597\n                                                                                                                       // 17598\n        if (isUndefined(eventSupport[event])) {                                                                        // 17599\n          var divElm = document.createElement('div');                                                                  // 17600\n          eventSupport[event] = 'on' + event in divElm;                                                                // 17601\n        }                                                                                                              // 17602\n                                                                                                                       // 17603\n        return eventSupport[event];                                                                                    // 17604\n      },                                                                                                               // 17605\n      csp: csp(),                                                                                                      // 17606\n      vendorPrefix: vendorPrefix,                                                                                      // 17607\n      transitions: transitions,                                                                                        // 17608\n      animations: animations,                                                                                          // 17609\n      android: android                                                                                                 // 17610\n    };                                                                                                                 // 17611\n  }];                                                                                                                  // 17612\n}                                                                                                                      // 17613\n                                                                                                                       // 17614\nvar $compileMinErr = minErr('$compile');                                                                               // 17615\n                                                                                                                       // 17616\n/**                                                                                                                    // 17617\n * @ngdoc service                                                                                                      // 17618\n * @name $templateRequest                                                                                              // 17619\n *                                                                                                                     // 17620\n * @description                                                                                                        // 17621\n * The `$templateRequest` service runs security checks then downloads the provided template using                      // 17622\n * `$http` and, upon success, stores the contents inside of `$templateCache`. If the HTTP request                      // 17623\n * fails or the response data of the HTTP request is empty, a `$compile` error will be thrown (the                     // 17624\n * exception can be thwarted by setting the 2nd parameter of the function to true). Note that the                      // 17625\n * contents of `$templateCache` are trusted, so the call to `$sce.getTrustedUrl(tpl)` is omitted                       // 17626\n * when `tpl` is of type string and `$templateCache` has the matching entry.                                           // 17627\n *                                                                                                                     // 17628\n * @param {string|TrustedResourceUrl} tpl The HTTP request template URL                                                // 17629\n * @param {boolean=} ignoreRequestError Whether or not to ignore the exception when the request fails or the template is empty\n *                                                                                                                     // 17631\n * @return {Promise} a promise for the HTTP response data of the given URL.                                            // 17632\n *                                                                                                                     // 17633\n * @property {number} totalPendingRequests total amount of pending template requests being downloaded.                 // 17634\n */                                                                                                                    // 17635\nfunction $TemplateRequestProvider() {                                                                                  // 17636\n  this.$get = ['$templateCache', '$http', '$q', '$sce', function($templateCache, $http, $q, $sce) {                    // 17637\n    function handleRequestFn(tpl, ignoreRequestError) {                                                                // 17638\n      handleRequestFn.totalPendingRequests++;                                                                          // 17639\n                                                                                                                       // 17640\n      // We consider the template cache holds only trusted templates, so                                               // 17641\n      // there's no need to go through whitelisting again for keys that already                                        // 17642\n      // are included in there. This also makes Angular accept any script                                              // 17643\n      // directive, no matter its name. However, we still need to unwrap trusted                                       // 17644\n      // types.                                                                                                        // 17645\n      if (!isString(tpl) || !$templateCache.get(tpl)) {                                                                // 17646\n        tpl = $sce.getTrustedResourceUrl(tpl);                                                                         // 17647\n      }                                                                                                                // 17648\n                                                                                                                       // 17649\n      var transformResponse = $http.defaults && $http.defaults.transformResponse;                                      // 17650\n                                                                                                                       // 17651\n      if (isArray(transformResponse)) {                                                                                // 17652\n        transformResponse = transformResponse.filter(function(transformer) {                                           // 17653\n          return transformer !== defaultHttpResponseTransform;                                                         // 17654\n        });                                                                                                            // 17655\n      } else if (transformResponse === defaultHttpResponseTransform) {                                                 // 17656\n        transformResponse = null;                                                                                      // 17657\n      }                                                                                                                // 17658\n                                                                                                                       // 17659\n      var httpOptions = {                                                                                              // 17660\n        cache: $templateCache,                                                                                         // 17661\n        transformResponse: transformResponse                                                                           // 17662\n      };                                                                                                               // 17663\n                                                                                                                       // 17664\n      return $http.get(tpl, httpOptions)                                                                               // 17665\n        ['finally'](function() {                                                                                       // 17666\n          handleRequestFn.totalPendingRequests--;                                                                      // 17667\n        })                                                                                                             // 17668\n        .then(function(response) {                                                                                     // 17669\n          $templateCache.put(tpl, response.data);                                                                      // 17670\n          return response.data;                                                                                        // 17671\n        }, handleError);                                                                                               // 17672\n                                                                                                                       // 17673\n      function handleError(resp) {                                                                                     // 17674\n        if (!ignoreRequestError) {                                                                                     // 17675\n          throw $compileMinErr('tpload', 'Failed to load template: {0} (HTTP status: {1} {2})',                        // 17676\n            tpl, resp.status, resp.statusText);                                                                        // 17677\n        }                                                                                                              // 17678\n        return $q.reject(resp);                                                                                        // 17679\n      }                                                                                                                // 17680\n    }                                                                                                                  // 17681\n                                                                                                                       // 17682\n    handleRequestFn.totalPendingRequests = 0;                                                                          // 17683\n                                                                                                                       // 17684\n    return handleRequestFn;                                                                                            // 17685\n  }];                                                                                                                  // 17686\n}                                                                                                                      // 17687\n                                                                                                                       // 17688\nfunction $$TestabilityProvider() {                                                                                     // 17689\n  this.$get = ['$rootScope', '$browser', '$location',                                                                  // 17690\n       function($rootScope,   $browser,   $location) {                                                                 // 17691\n                                                                                                                       // 17692\n    /**                                                                                                                // 17693\n     * @name $testability                                                                                              // 17694\n     *                                                                                                                 // 17695\n     * @description                                                                                                    // 17696\n     * The private $$testability service provides a collection of methods for use when debugging                       // 17697\n     * or by automated test and debugging tools.                                                                       // 17698\n     */                                                                                                                // 17699\n    var testability = {};                                                                                              // 17700\n                                                                                                                       // 17701\n    /**                                                                                                                // 17702\n     * @name $$testability#findBindings                                                                                // 17703\n     *                                                                                                                 // 17704\n     * @description                                                                                                    // 17705\n     * Returns an array of elements that are bound (via ng-bind or {{}})                                               // 17706\n     * to expressions matching the input.                                                                              // 17707\n     *                                                                                                                 // 17708\n     * @param {Element} element The element root to search from.                                                       // 17709\n     * @param {string} expression The binding expression to match.                                                     // 17710\n     * @param {boolean} opt_exactMatch If true, only returns exact matches                                             // 17711\n     *     for the expression. Filters and whitespace are ignored.                                                     // 17712\n     */                                                                                                                // 17713\n    testability.findBindings = function(element, expression, opt_exactMatch) {                                         // 17714\n      var bindings = element.getElementsByClassName('ng-binding');                                                     // 17715\n      var matches = [];                                                                                                // 17716\n      forEach(bindings, function(binding) {                                                                            // 17717\n        var dataBinding = angular.element(binding).data('$binding');                                                   // 17718\n        if (dataBinding) {                                                                                             // 17719\n          forEach(dataBinding, function(bindingName) {                                                                 // 17720\n            if (opt_exactMatch) {                                                                                      // 17721\n              var matcher = new RegExp('(^|\\\\s)' + escapeForRegexp(expression) + '(\\\\s|\\\\||$)');                       // 17722\n              if (matcher.test(bindingName)) {                                                                         // 17723\n                matches.push(binding);                                                                                 // 17724\n              }                                                                                                        // 17725\n            } else {                                                                                                   // 17726\n              if (bindingName.indexOf(expression) != -1) {                                                             // 17727\n                matches.push(binding);                                                                                 // 17728\n              }                                                                                                        // 17729\n            }                                                                                                          // 17730\n          });                                                                                                          // 17731\n        }                                                                                                              // 17732\n      });                                                                                                              // 17733\n      return matches;                                                                                                  // 17734\n    };                                                                                                                 // 17735\n                                                                                                                       // 17736\n    /**                                                                                                                // 17737\n     * @name $$testability#findModels                                                                                  // 17738\n     *                                                                                                                 // 17739\n     * @description                                                                                                    // 17740\n     * Returns an array of elements that are two-way found via ng-model to                                             // 17741\n     * expressions matching the input.                                                                                 // 17742\n     *                                                                                                                 // 17743\n     * @param {Element} element The element root to search from.                                                       // 17744\n     * @param {string} expression The model expression to match.                                                       // 17745\n     * @param {boolean} opt_exactMatch If true, only returns exact matches                                             // 17746\n     *     for the expression.                                                                                         // 17747\n     */                                                                                                                // 17748\n    testability.findModels = function(element, expression, opt_exactMatch) {                                           // 17749\n      var prefixes = ['ng-', 'data-ng-', 'ng\\\\:'];                                                                     // 17750\n      for (var p = 0; p < prefixes.length; ++p) {                                                                      // 17751\n        var attributeEquals = opt_exactMatch ? '=' : '*=';                                                             // 17752\n        var selector = '[' + prefixes[p] + 'model' + attributeEquals + '\"' + expression + '\"]';                        // 17753\n        var elements = element.querySelectorAll(selector);                                                             // 17754\n        if (elements.length) {                                                                                         // 17755\n          return elements;                                                                                             // 17756\n        }                                                                                                              // 17757\n      }                                                                                                                // 17758\n    };                                                                                                                 // 17759\n                                                                                                                       // 17760\n    /**                                                                                                                // 17761\n     * @name $$testability#getLocation                                                                                 // 17762\n     *                                                                                                                 // 17763\n     * @description                                                                                                    // 17764\n     * Shortcut for getting the location in a browser agnostic way. Returns                                            // 17765\n     *     the path, search, and hash. (e.g. /path?a=b#hash)                                                           // 17766\n     */                                                                                                                // 17767\n    testability.getLocation = function() {                                                                             // 17768\n      return $location.url();                                                                                          // 17769\n    };                                                                                                                 // 17770\n                                                                                                                       // 17771\n    /**                                                                                                                // 17772\n     * @name $$testability#setLocation                                                                                 // 17773\n     *                                                                                                                 // 17774\n     * @description                                                                                                    // 17775\n     * Shortcut for navigating to a location without doing a full page reload.                                         // 17776\n     *                                                                                                                 // 17777\n     * @param {string} url The location url (path, search and hash,                                                    // 17778\n     *     e.g. /path?a=b#hash) to go to.                                                                              // 17779\n     */                                                                                                                // 17780\n    testability.setLocation = function(url) {                                                                          // 17781\n      if (url !== $location.url()) {                                                                                   // 17782\n        $location.url(url);                                                                                            // 17783\n        $rootScope.$digest();                                                                                          // 17784\n      }                                                                                                                // 17785\n    };                                                                                                                 // 17786\n                                                                                                                       // 17787\n    /**                                                                                                                // 17788\n     * @name $$testability#whenStable                                                                                  // 17789\n     *                                                                                                                 // 17790\n     * @description                                                                                                    // 17791\n     * Calls the callback when $timeout and $http requests are completed.                                              // 17792\n     *                                                                                                                 // 17793\n     * @param {function} callback                                                                                      // 17794\n     */                                                                                                                // 17795\n    testability.whenStable = function(callback) {                                                                      // 17796\n      $browser.notifyWhenNoOutstandingRequests(callback);                                                              // 17797\n    };                                                                                                                 // 17798\n                                                                                                                       // 17799\n    return testability;                                                                                                // 17800\n  }];                                                                                                                  // 17801\n}                                                                                                                      // 17802\n                                                                                                                       // 17803\nfunction $TimeoutProvider() {                                                                                          // 17804\n  this.$get = ['$rootScope', '$browser', '$q', '$$q', '$exceptionHandler',                                             // 17805\n       function($rootScope,   $browser,   $q,   $$q,   $exceptionHandler) {                                            // 17806\n                                                                                                                       // 17807\n    var deferreds = {};                                                                                                // 17808\n                                                                                                                       // 17809\n                                                                                                                       // 17810\n     /**                                                                                                               // 17811\n      * @ngdoc service                                                                                                 // 17812\n      * @name $timeout                                                                                                 // 17813\n      *                                                                                                                // 17814\n      * @description                                                                                                   // 17815\n      * Angular's wrapper for `window.setTimeout`. The `fn` function is wrapped into a try/catch                       // 17816\n      * block and delegates any exceptions to                                                                          // 17817\n      * {@link ng.$exceptionHandler $exceptionHandler} service.                                                        // 17818\n      *                                                                                                                // 17819\n      * The return value of calling `$timeout` is a promise, which will be resolved when                               // 17820\n      * the delay has passed and the timeout function, if provided, is executed.                                       // 17821\n      *                                                                                                                // 17822\n      * To cancel a timeout request, call `$timeout.cancel(promise)`.                                                  // 17823\n      *                                                                                                                // 17824\n      * In tests you can use {@link ngMock.$timeout `$timeout.flush()`} to                                             // 17825\n      * synchronously flush the queue of deferred functions.                                                           // 17826\n      *                                                                                                                // 17827\n      * If you only want a promise that will be resolved after some specified delay                                    // 17828\n      * then you can call `$timeout` without the `fn` function.                                                        // 17829\n      *                                                                                                                // 17830\n      * @param {function()=} fn A function, whose execution should be delayed.                                         // 17831\n      * @param {number=} [delay=0] Delay in milliseconds.                                                              // 17832\n      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise                   // 17833\n      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.                                 // 17834\n      * @param {...*=} Pass additional parameters to the executed function.                                            // 17835\n      * @returns {Promise} Promise that will be resolved when the timeout is reached. The value this                   // 17836\n      *   promise will be resolved with is the return value of the `fn` function.                                      // 17837\n      *                                                                                                                // 17838\n      */                                                                                                               // 17839\n    function timeout(fn, delay, invokeApply) {                                                                         // 17840\n      if (!isFunction(fn)) {                                                                                           // 17841\n        invokeApply = delay;                                                                                           // 17842\n        delay = fn;                                                                                                    // 17843\n        fn = noop;                                                                                                     // 17844\n      }                                                                                                                // 17845\n                                                                                                                       // 17846\n      var args = sliceArgs(arguments, 3),                                                                              // 17847\n          skipApply = (isDefined(invokeApply) && !invokeApply),                                                        // 17848\n          deferred = (skipApply ? $$q : $q).defer(),                                                                   // 17849\n          promise = deferred.promise,                                                                                  // 17850\n          timeoutId;                                                                                                   // 17851\n                                                                                                                       // 17852\n      timeoutId = $browser.defer(function() {                                                                          // 17853\n        try {                                                                                                          // 17854\n          deferred.resolve(fn.apply(null, args));                                                                      // 17855\n        } catch (e) {                                                                                                  // 17856\n          deferred.reject(e);                                                                                          // 17857\n          $exceptionHandler(e);                                                                                        // 17858\n        }                                                                                                              // 17859\n        finally {                                                                                                      // 17860\n          delete deferreds[promise.$$timeoutId];                                                                       // 17861\n        }                                                                                                              // 17862\n                                                                                                                       // 17863\n        if (!skipApply) $rootScope.$apply();                                                                           // 17864\n      }, delay);                                                                                                       // 17865\n                                                                                                                       // 17866\n      promise.$$timeoutId = timeoutId;                                                                                 // 17867\n      deferreds[timeoutId] = deferred;                                                                                 // 17868\n                                                                                                                       // 17869\n      return promise;                                                                                                  // 17870\n    }                                                                                                                  // 17871\n                                                                                                                       // 17872\n                                                                                                                       // 17873\n     /**                                                                                                               // 17874\n      * @ngdoc method                                                                                                  // 17875\n      * @name $timeout#cancel                                                                                          // 17876\n      *                                                                                                                // 17877\n      * @description                                                                                                   // 17878\n      * Cancels a task associated with the `promise`. As a result of this, the promise will be                         // 17879\n      * resolved with a rejection.                                                                                     // 17880\n      *                                                                                                                // 17881\n      * @param {Promise=} promise Promise returned by the `$timeout` function.                                         // 17882\n      * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully                         // 17883\n      *   canceled.                                                                                                    // 17884\n      */                                                                                                               // 17885\n    timeout.cancel = function(promise) {                                                                               // 17886\n      if (promise && promise.$$timeoutId in deferreds) {                                                               // 17887\n        deferreds[promise.$$timeoutId].reject('canceled');                                                             // 17888\n        delete deferreds[promise.$$timeoutId];                                                                         // 17889\n        return $browser.defer.cancel(promise.$$timeoutId);                                                             // 17890\n      }                                                                                                                // 17891\n      return false;                                                                                                    // 17892\n    };                                                                                                                 // 17893\n                                                                                                                       // 17894\n    return timeout;                                                                                                    // 17895\n  }];                                                                                                                  // 17896\n}                                                                                                                      // 17897\n                                                                                                                       // 17898\n// NOTE:  The usage of window and document instead of $window and $document here is                                    // 17899\n// deliberate.  This service depends on the specific behavior of anchor nodes created by the                           // 17900\n// browser (resolving and parsing URLs) that is unlikely to be provided by mock objects and                            // 17901\n// cause us to break tests.  In addition, when the browser resolves a URL for XHR, it                                  // 17902\n// doesn't know about mocked locations and resolves URLs to the real document - which is                               // 17903\n// exactly the behavior needed here.  There is little value is mocking these out for this                              // 17904\n// service.                                                                                                            // 17905\nvar urlParsingNode = document.createElement(\"a\");                                                                      // 17906\nvar originUrl = urlResolve(window.location.href);                                                                      // 17907\n                                                                                                                       // 17908\n                                                                                                                       // 17909\n/**                                                                                                                    // 17910\n *                                                                                                                     // 17911\n * Implementation Notes for non-IE browsers                                                                            // 17912\n * ----------------------------------------                                                                            // 17913\n * Assigning a URL to the href property of an anchor DOM node, even one attached to the DOM,                           // 17914\n * results both in the normalizing and parsing of the URL.  Normalizing means that a relative                          // 17915\n * URL will be resolved into an absolute URL in the context of the application document.                               // 17916\n * Parsing means that the anchor node's host, hostname, protocol, port, pathname and related                           // 17917\n * properties are all populated to reflect the normalized URL.  This approach has wide                                 // 17918\n * compatibility - Safari 1+, Mozilla 1+, Opera 7+,e etc.  See                                                         // 17919\n * http://www.aptana.com/reference/html/api/HTMLAnchorElement.html                                                     // 17920\n *                                                                                                                     // 17921\n * Implementation Notes for IE                                                                                         // 17922\n * ---------------------------                                                                                         // 17923\n * IE <= 10 normalizes the URL when assigned to the anchor node similar to the other                                   // 17924\n * browsers.  However, the parsed components will not be set if the URL assigned did not specify                       // 17925\n * them.  (e.g. if you assign a.href = \"foo\", then a.protocol, a.host, etc. will be empty.)  We                        // 17926\n * work around that by performing the parsing in a 2nd step by taking a previously normalized                          // 17927\n * URL (e.g. by assigning to a.href) and assigning it a.href again.  This correctly populates the                      // 17928\n * properties such as protocol, hostname, port, etc.                                                                   // 17929\n *                                                                                                                     // 17930\n * References:                                                                                                         // 17931\n *   http://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement                                                 // 17932\n *   http://www.aptana.com/reference/html/api/HTMLAnchorElement.html                                                   // 17933\n *   http://url.spec.whatwg.org/#urlutils                                                                              // 17934\n *   https://github.com/angular/angular.js/pull/2902                                                                   // 17935\n *   http://james.padolsey.com/javascript/parsing-urls-with-the-dom/                                                   // 17936\n *                                                                                                                     // 17937\n * @kind function                                                                                                      // 17938\n * @param {string} url The URL to be parsed.                                                                           // 17939\n * @description Normalizes and parses a URL.                                                                           // 17940\n * @returns {object} Returns the normalized URL as a dictionary.                                                       // 17941\n *                                                                                                                     // 17942\n *   | member name   | Description    |                                                                                // 17943\n *   |---------------|----------------|                                                                                // 17944\n *   | href          | A normalized version of the provided URL if it was not an absolute URL |                        // 17945\n *   | protocol      | The protocol including the trailing colon                              |                        // 17946\n *   | host          | The host and port (if the port is non-default) of the normalizedUrl    |                        // 17947\n *   | search        | The search params, minus the question mark                             |                        // 17948\n *   | hash          | The hash string, minus the hash symbol                                                          // 17949\n *   | hostname      | The hostname                                                                                    // 17950\n *   | port          | The port, without \":\"                                                                           // 17951\n *   | pathname      | The pathname, beginning with \"/\"                                                                // 17952\n *                                                                                                                     // 17953\n */                                                                                                                    // 17954\nfunction urlResolve(url) {                                                                                             // 17955\n  var href = url;                                                                                                      // 17956\n                                                                                                                       // 17957\n  if (msie) {                                                                                                          // 17958\n    // Normalize before parse.  Refer Implementation Notes on why this is                                              // 17959\n    // done in two steps on IE.                                                                                        // 17960\n    urlParsingNode.setAttribute(\"href\", href);                                                                         // 17961\n    href = urlParsingNode.href;                                                                                        // 17962\n  }                                                                                                                    // 17963\n                                                                                                                       // 17964\n  urlParsingNode.setAttribute('href', href);                                                                           // 17965\n                                                                                                                       // 17966\n  // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils                             // 17967\n  return {                                                                                                             // 17968\n    href: urlParsingNode.href,                                                                                         // 17969\n    protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',                                // 17970\n    host: urlParsingNode.host,                                                                                         // 17971\n    search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',                                     // 17972\n    hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',                                            // 17973\n    hostname: urlParsingNode.hostname,                                                                                 // 17974\n    port: urlParsingNode.port,                                                                                         // 17975\n    pathname: (urlParsingNode.pathname.charAt(0) === '/')                                                              // 17976\n      ? urlParsingNode.pathname                                                                                        // 17977\n      : '/' + urlParsingNode.pathname                                                                                  // 17978\n  };                                                                                                                   // 17979\n}                                                                                                                      // 17980\n                                                                                                                       // 17981\n/**                                                                                                                    // 17982\n * Parse a request URL and determine whether this is a same-origin request as the application document.                // 17983\n *                                                                                                                     // 17984\n * @param {string|object} requestUrl The url of the request as a string that will be resolved                          // 17985\n * or a parsed URL object.                                                                                             // 17986\n * @returns {boolean} Whether the request is for the same origin as the application document.                          // 17987\n */                                                                                                                    // 17988\nfunction urlIsSameOrigin(requestUrl) {                                                                                 // 17989\n  var parsed = (isString(requestUrl)) ? urlResolve(requestUrl) : requestUrl;                                           // 17990\n  return (parsed.protocol === originUrl.protocol &&                                                                    // 17991\n          parsed.host === originUrl.host);                                                                             // 17992\n}                                                                                                                      // 17993\n                                                                                                                       // 17994\n/**                                                                                                                    // 17995\n * @ngdoc service                                                                                                      // 17996\n * @name $window                                                                                                       // 17997\n *                                                                                                                     // 17998\n * @description                                                                                                        // 17999\n * A reference to the browser's `window` object. While `window`                                                        // 18000\n * is globally available in JavaScript, it causes testability problems, because                                        // 18001\n * it is a global variable. In angular we always refer to it through the                                               // 18002\n * `$window` service, so it may be overridden, removed or mocked for testing.                                          // 18003\n *                                                                                                                     // 18004\n * Expressions, like the one defined for the `ngClick` directive in the example                                        // 18005\n * below, are evaluated with respect to the current scope.  Therefore, there is                                        // 18006\n * no risk of inadvertently coding in a dependency on a global value in such an                                        // 18007\n * expression.                                                                                                         // 18008\n *                                                                                                                     // 18009\n * @example                                                                                                            // 18010\n   <example module=\"windowExample\">                                                                                    // 18011\n     <file name=\"index.html\">                                                                                          // 18012\n       <script>                                                                                                        // 18013\n         angular.module('windowExample', [])                                                                           // 18014\n           .controller('ExampleController', ['$scope', '$window', function($scope, $window) {                          // 18015\n             $scope.greeting = 'Hello, World!';                                                                        // 18016\n             $scope.doGreeting = function(greeting) {                                                                  // 18017\n               $window.alert(greeting);                                                                                // 18018\n             };                                                                                                        // 18019\n           }]);                                                                                                        // 18020\n       </script>                                                                                                       // 18021\n       <div ng-controller=\"ExampleController\">                                                                         // 18022\n         <input type=\"text\" ng-model=\"greeting\" aria-label=\"greeting\" />                                               // 18023\n         <button ng-click=\"doGreeting(greeting)\">ALERT</button>                                                        // 18024\n       </div>                                                                                                          // 18025\n     </file>                                                                                                           // 18026\n     <file name=\"protractor.js\" type=\"protractor\">                                                                     // 18027\n      it('should display the greeting in the input box', function() {                                                  // 18028\n       element(by.model('greeting')).sendKeys('Hello, E2E Tests');                                                     // 18029\n       // If we click the button it will block the test runner                                                         // 18030\n       // element(':button').click();                                                                                  // 18031\n      });                                                                                                              // 18032\n     </file>                                                                                                           // 18033\n   </example>                                                                                                          // 18034\n */                                                                                                                    // 18035\nfunction $WindowProvider() {                                                                                           // 18036\n  this.$get = valueFn(window);                                                                                         // 18037\n}                                                                                                                      // 18038\n                                                                                                                       // 18039\n/**                                                                                                                    // 18040\n * @name $$cookieReader                                                                                                // 18041\n * @requires $document                                                                                                 // 18042\n *                                                                                                                     // 18043\n * @description                                                                                                        // 18044\n * This is a private service for reading cookies used by $http and ngCookies                                           // 18045\n *                                                                                                                     // 18046\n * @return {Object} a key/value map of the current cookies                                                             // 18047\n */                                                                                                                    // 18048\nfunction $$CookieReader($document) {                                                                                   // 18049\n  var rawDocument = $document[0] || {};                                                                                // 18050\n  var lastCookies = {};                                                                                                // 18051\n  var lastCookieString = '';                                                                                           // 18052\n                                                                                                                       // 18053\n  function safeDecodeURIComponent(str) {                                                                               // 18054\n    try {                                                                                                              // 18055\n      return decodeURIComponent(str);                                                                                  // 18056\n    } catch (e) {                                                                                                      // 18057\n      return str;                                                                                                      // 18058\n    }                                                                                                                  // 18059\n  }                                                                                                                    // 18060\n                                                                                                                       // 18061\n  return function() {                                                                                                  // 18062\n    var cookieArray, cookie, i, index, name;                                                                           // 18063\n    var currentCookieString = rawDocument.cookie || '';                                                                // 18064\n                                                                                                                       // 18065\n    if (currentCookieString !== lastCookieString) {                                                                    // 18066\n      lastCookieString = currentCookieString;                                                                          // 18067\n      cookieArray = lastCookieString.split('; ');                                                                      // 18068\n      lastCookies = {};                                                                                                // 18069\n                                                                                                                       // 18070\n      for (i = 0; i < cookieArray.length; i++) {                                                                       // 18071\n        cookie = cookieArray[i];                                                                                       // 18072\n        index = cookie.indexOf('=');                                                                                   // 18073\n        if (index > 0) { //ignore nameless cookies                                                                     // 18074\n          name = safeDecodeURIComponent(cookie.substring(0, index));                                                   // 18075\n          // the first value that is seen for a cookie is the most                                                     // 18076\n          // specific one.  values for the same cookie name that                                                       // 18077\n          // follow are for less specific paths.                                                                       // 18078\n          if (isUndefined(lastCookies[name])) {                                                                        // 18079\n            lastCookies[name] = safeDecodeURIComponent(cookie.substring(index + 1));                                   // 18080\n          }                                                                                                            // 18081\n        }                                                                                                              // 18082\n      }                                                                                                                // 18083\n    }                                                                                                                  // 18084\n    return lastCookies;                                                                                                // 18085\n  };                                                                                                                   // 18086\n}                                                                                                                      // 18087\n                                                                                                                       // 18088\n$$CookieReader.$inject = ['$document'];                                                                                // 18089\n                                                                                                                       // 18090\nfunction $$CookieReaderProvider() {                                                                                    // 18091\n  this.$get = $$CookieReader;                                                                                          // 18092\n}                                                                                                                      // 18093\n                                                                                                                       // 18094\n/* global currencyFilter: true,                                                                                        // 18095\n dateFilter: true,                                                                                                     // 18096\n filterFilter: true,                                                                                                   // 18097\n jsonFilter: true,                                                                                                     // 18098\n limitToFilter: true,                                                                                                  // 18099\n lowercaseFilter: true,                                                                                                // 18100\n numberFilter: true,                                                                                                   // 18101\n orderByFilter: true,                                                                                                  // 18102\n uppercaseFilter: true,                                                                                                // 18103\n */                                                                                                                    // 18104\n                                                                                                                       // 18105\n/**                                                                                                                    // 18106\n * @ngdoc provider                                                                                                     // 18107\n * @name $filterProvider                                                                                               // 18108\n * @description                                                                                                        // 18109\n *                                                                                                                     // 18110\n * Filters are just functions which transform input to an output. However filters need to be                           // 18111\n * Dependency Injected. To achieve this a filter definition consists of a factory function which is                    // 18112\n * annotated with dependencies and is responsible for creating a filter function.                                      // 18113\n *                                                                                                                     // 18114\n * <div class=\"alert alert-warning\">                                                                                   // 18115\n * **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.      // 18116\n * Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace                  // 18117\n * your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores                             // 18118\n * (`myapp_subsection_filterx`).                                                                                       // 18119\n * </div>                                                                                                              // 18120\n *                                                                                                                     // 18121\n * ```js                                                                                                               // 18122\n *   // Filter registration                                                                                            // 18123\n *   function MyModule($provide, $filterProvider) {                                                                    // 18124\n *     // create a service to demonstrate injection (not always needed)                                                // 18125\n *     $provide.value('greet', function(name){                                                                         // 18126\n *       return 'Hello ' + name + '!';                                                                                 // 18127\n *     });                                                                                                             // 18128\n *                                                                                                                     // 18129\n *     // register a filter factory which uses the                                                                     // 18130\n *     // greet service to demonstrate DI.                                                                             // 18131\n *     $filterProvider.register('greet', function(greet){                                                              // 18132\n *       // return the filter function which uses the greet service                                                    // 18133\n *       // to generate salutation                                                                                     // 18134\n *       return function(text) {                                                                                       // 18135\n *         // filters need to be forgiving so check input validity                                                     // 18136\n *         return text && greet(text) || text;                                                                         // 18137\n *       };                                                                                                            // 18138\n *     });                                                                                                             // 18139\n *   }                                                                                                                 // 18140\n * ```                                                                                                                 // 18141\n *                                                                                                                     // 18142\n * The filter function is registered with the `$injector` under the filter name suffix with                            // 18143\n * `Filter`.                                                                                                           // 18144\n *                                                                                                                     // 18145\n * ```js                                                                                                               // 18146\n *   it('should be the same instance', inject(                                                                         // 18147\n *     function($filterProvider) {                                                                                     // 18148\n *       $filterProvider.register('reverse', function(){                                                               // 18149\n *         return ...;                                                                                                 // 18150\n *       });                                                                                                           // 18151\n *     },                                                                                                              // 18152\n *     function($filter, reverseFilter) {                                                                              // 18153\n *       expect($filter('reverse')).toBe(reverseFilter);                                                               // 18154\n *     });                                                                                                             // 18155\n * ```                                                                                                                 // 18156\n *                                                                                                                     // 18157\n *                                                                                                                     // 18158\n * For more information about how angular filters work, and how to create your own filters, see                        // 18159\n * {@link guide/filter Filters} in the Angular Developer Guide.                                                        // 18160\n */                                                                                                                    // 18161\n                                                                                                                       // 18162\n/**                                                                                                                    // 18163\n * @ngdoc service                                                                                                      // 18164\n * @name $filter                                                                                                       // 18165\n * @kind function                                                                                                      // 18166\n * @description                                                                                                        // 18167\n * Filters are used for formatting data displayed to the user.                                                         // 18168\n *                                                                                                                     // 18169\n * The general syntax in templates is as follows:                                                                      // 18170\n *                                                                                                                     // 18171\n *         {{ expression [| filter_name[:parameter_value] ... ] }}                                                     // 18172\n *                                                                                                                     // 18173\n * @param {String} name Name of the filter function to retrieve                                                        // 18174\n * @return {Function} the filter function                                                                              // 18175\n * @example                                                                                                            // 18176\n   <example name=\"$filter\" module=\"filterExample\">                                                                     // 18177\n     <file name=\"index.html\">                                                                                          // 18178\n       <div ng-controller=\"MainCtrl\">                                                                                  // 18179\n        <h3>{{ originalText }}</h3>                                                                                    // 18180\n        <h3>{{ filteredText }}</h3>                                                                                    // 18181\n       </div>                                                                                                          // 18182\n     </file>                                                                                                           // 18183\n                                                                                                                       // 18184\n     <file name=\"script.js\">                                                                                           // 18185\n      angular.module('filterExample', [])                                                                              // 18186\n      .controller('MainCtrl', function($scope, $filter) {                                                              // 18187\n        $scope.originalText = 'hello';                                                                                 // 18188\n        $scope.filteredText = $filter('uppercase')($scope.originalText);                                               // 18189\n      });                                                                                                              // 18190\n     </file>                                                                                                           // 18191\n   </example>                                                                                                          // 18192\n  */                                                                                                                   // 18193\n$FilterProvider.$inject = ['$provide'];                                                                                // 18194\nfunction $FilterProvider($provide) {                                                                                   // 18195\n  var suffix = 'Filter';                                                                                               // 18196\n                                                                                                                       // 18197\n  /**                                                                                                                  // 18198\n   * @ngdoc method                                                                                                     // 18199\n   * @name $filterProvider#register                                                                                    // 18200\n   * @param {string|Object} name Name of the filter function, or an object map of filters where                        // 18201\n   *    the keys are the filter names and the values are the filter factories.                                         // 18202\n   *                                                                                                                   // 18203\n   *    <div class=\"alert alert-warning\">                                                                              // 18204\n   *    **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.\n   *    Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace             // 18206\n   *    your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores                        // 18207\n   *    (`myapp_subsection_filterx`).                                                                                  // 18208\n   *    </div>                                                                                                         // 18209\n    * @param {Function} factory If the first argument was a string, a factory function for the filter to be registered.\n   * @returns {Object} Registered filter instance, or if a map of filters was provided then a map                      // 18211\n   *    of the registered filter instances.                                                                            // 18212\n   */                                                                                                                  // 18213\n  function register(name, factory) {                                                                                   // 18214\n    if (isObject(name)) {                                                                                              // 18215\n      var filters = {};                                                                                                // 18216\n      forEach(name, function(filter, key) {                                                                            // 18217\n        filters[key] = register(key, filter);                                                                          // 18218\n      });                                                                                                              // 18219\n      return filters;                                                                                                  // 18220\n    } else {                                                                                                           // 18221\n      return $provide.factory(name + suffix, factory);                                                                 // 18222\n    }                                                                                                                  // 18223\n  }                                                                                                                    // 18224\n  this.register = register;                                                                                            // 18225\n                                                                                                                       // 18226\n  this.$get = ['$injector', function($injector) {                                                                      // 18227\n    return function(name) {                                                                                            // 18228\n      return $injector.get(name + suffix);                                                                             // 18229\n    };                                                                                                                 // 18230\n  }];                                                                                                                  // 18231\n                                                                                                                       // 18232\n  ////////////////////////////////////////                                                                             // 18233\n                                                                                                                       // 18234\n  /* global                                                                                                            // 18235\n    currencyFilter: false,                                                                                             // 18236\n    dateFilter: false,                                                                                                 // 18237\n    filterFilter: false,                                                                                               // 18238\n    jsonFilter: false,                                                                                                 // 18239\n    limitToFilter: false,                                                                                              // 18240\n    lowercaseFilter: false,                                                                                            // 18241\n    numberFilter: false,                                                                                               // 18242\n    orderByFilter: false,                                                                                              // 18243\n    uppercaseFilter: false,                                                                                            // 18244\n  */                                                                                                                   // 18245\n                                                                                                                       // 18246\n  register('currency', currencyFilter);                                                                                // 18247\n  register('date', dateFilter);                                                                                        // 18248\n  register('filter', filterFilter);                                                                                    // 18249\n  register('json', jsonFilter);                                                                                        // 18250\n  register('limitTo', limitToFilter);                                                                                  // 18251\n  register('lowercase', lowercaseFilter);                                                                              // 18252\n  register('number', numberFilter);                                                                                    // 18253\n  register('orderBy', orderByFilter);                                                                                  // 18254\n  register('uppercase', uppercaseFilter);                                                                              // 18255\n}                                                                                                                      // 18256\n                                                                                                                       // 18257\n/**                                                                                                                    // 18258\n * @ngdoc filter                                                                                                       // 18259\n * @name filter                                                                                                        // 18260\n * @kind function                                                                                                      // 18261\n *                                                                                                                     // 18262\n * @description                                                                                                        // 18263\n * Selects a subset of items from `array` and returns it as a new array.                                               // 18264\n *                                                                                                                     // 18265\n * @param {Array} array The source array.                                                                              // 18266\n * @param {string|Object|function()} expression The predicate to be used for selecting items from                      // 18267\n *   `array`.                                                                                                          // 18268\n *                                                                                                                     // 18269\n *   Can be one of:                                                                                                    // 18270\n *                                                                                                                     // 18271\n *   - `string`: The string is used for matching against the contents of the `array`. All strings or                   // 18272\n *     objects with string properties in `array` that match this string will be returned. This also                    // 18273\n *     applies to nested object properties.                                                                            // 18274\n *     The predicate can be negated by prefixing the string with `!`.                                                  // 18275\n *                                                                                                                     // 18276\n *   - `Object`: A pattern object can be used to filter specific properties on objects contained                       // 18277\n *     by `array`. For example `{name:\"M\", phone:\"1\"}` predicate will return an array of items                         // 18278\n *     which have property `name` containing \"M\" and property `phone` containing \"1\". A special                        // 18279\n *     property name `$` can be used (as in `{$:\"text\"}`) to accept a match against any                                // 18280\n *     property of the object or its nested object properties. That's equivalent to the simple                         // 18281\n *     substring match with a `string` as described above. The predicate can be negated by prefixing                   // 18282\n *     the string with `!`.                                                                                            // 18283\n *     For example `{name: \"!M\"}` predicate will return an array of items which have property `name`                   // 18284\n *     not containing \"M\".                                                                                             // 18285\n *                                                                                                                     // 18286\n *     Note that a named property will match properties on the same level only, while the special                      // 18287\n *     `$` property will match properties on the same level or deeper. E.g. an array item like                         // 18288\n *     `{name: {first: 'John', last: 'Doe'}}` will **not** be matched by `{name: 'John'}`, but                         // 18289\n *     **will** be matched by `{$: 'John'}`.                                                                           // 18290\n *                                                                                                                     // 18291\n *   - `function(value, index, array)`: A predicate function can be used to write arbitrary filters.                   // 18292\n *     The function is called for each element of the array, with the element, its index, and                          // 18293\n *     the entire array itself as arguments.                                                                           // 18294\n *                                                                                                                     // 18295\n *     The final result is an array of those elements that the predicate returned true for.                            // 18296\n *                                                                                                                     // 18297\n * @param {function(actual, expected)|true|undefined} comparator Comparator which is used in                           // 18298\n *     determining if the expected value (from the filter expression) and actual value (from                           // 18299\n *     the object in the array) should be considered a match.                                                          // 18300\n *                                                                                                                     // 18301\n *   Can be one of:                                                                                                    // 18302\n *                                                                                                                     // 18303\n *   - `function(actual, expected)`:                                                                                   // 18304\n *     The function will be given the object value and the predicate value to compare and                              // 18305\n *     should return true if both values should be considered equal.                                                   // 18306\n *                                                                                                                     // 18307\n *   - `true`: A shorthand for `function(actual, expected) { return angular.equals(actual, expected)}`.                // 18308\n *     This is essentially strict comparison of expected and actual.                                                   // 18309\n *                                                                                                                     // 18310\n *   - `false|undefined`: A short hand for a function which will look for a substring match in case                    // 18311\n *     insensitive way.                                                                                                // 18312\n *                                                                                                                     // 18313\n *     Primitive values are converted to strings. Objects are not compared against primitives,                         // 18314\n *     unless they have a custom `toString` method (e.g. `Date` objects).                                              // 18315\n *                                                                                                                     // 18316\n * @example                                                                                                            // 18317\n   <example>                                                                                                           // 18318\n     <file name=\"index.html\">                                                                                          // 18319\n       <div ng-init=\"friends = [{name:'John', phone:'555-1276'},                                                       // 18320\n                                {name:'Mary', phone:'800-BIG-MARY'},                                                   // 18321\n                                {name:'Mike', phone:'555-4321'},                                                       // 18322\n                                {name:'Adam', phone:'555-5678'},                                                       // 18323\n                                {name:'Julie', phone:'555-8765'},                                                      // 18324\n                                {name:'Juliette', phone:'555-5678'}]\"></div>                                           // 18325\n                                                                                                                       // 18326\n       <label>Search: <input ng-model=\"searchText\"></label>                                                            // 18327\n       <table id=\"searchTextResults\">                                                                                  // 18328\n         <tr><th>Name</th><th>Phone</th></tr>                                                                          // 18329\n         <tr ng-repeat=\"friend in friends | filter:searchText\">                                                        // 18330\n           <td>{{friend.name}}</td>                                                                                    // 18331\n           <td>{{friend.phone}}</td>                                                                                   // 18332\n         </tr>                                                                                                         // 18333\n       </table>                                                                                                        // 18334\n       <hr>                                                                                                            // 18335\n       <label>Any: <input ng-model=\"search.$\"></label> <br>                                                            // 18336\n       <label>Name only <input ng-model=\"search.name\"></label><br>                                                     // 18337\n       <label>Phone only <input ng-model=\"search.phone\"></label><br>                                                   // 18338\n       <label>Equality <input type=\"checkbox\" ng-model=\"strict\"></label><br>                                           // 18339\n       <table id=\"searchObjResults\">                                                                                   // 18340\n         <tr><th>Name</th><th>Phone</th></tr>                                                                          // 18341\n         <tr ng-repeat=\"friendObj in friends | filter:search:strict\">                                                  // 18342\n           <td>{{friendObj.name}}</td>                                                                                 // 18343\n           <td>{{friendObj.phone}}</td>                                                                                // 18344\n         </tr>                                                                                                         // 18345\n       </table>                                                                                                        // 18346\n     </file>                                                                                                           // 18347\n     <file name=\"protractor.js\" type=\"protractor\">                                                                     // 18348\n       var expectFriendNames = function(expectedNames, key) {                                                          // 18349\n         element.all(by.repeater(key + ' in friends').column(key + '.name')).then(function(arr) {                      // 18350\n           arr.forEach(function(wd, i) {                                                                               // 18351\n             expect(wd.getText()).toMatch(expectedNames[i]);                                                           // 18352\n           });                                                                                                         // 18353\n         });                                                                                                           // 18354\n       };                                                                                                              // 18355\n                                                                                                                       // 18356\n       it('should search across all fields when filtering with a string', function() {                                 // 18357\n         var searchText = element(by.model('searchText'));                                                             // 18358\n         searchText.clear();                                                                                           // 18359\n         searchText.sendKeys('m');                                                                                     // 18360\n         expectFriendNames(['Mary', 'Mike', 'Adam'], 'friend');                                                        // 18361\n                                                                                                                       // 18362\n         searchText.clear();                                                                                           // 18363\n         searchText.sendKeys('76');                                                                                    // 18364\n         expectFriendNames(['John', 'Julie'], 'friend');                                                               // 18365\n       });                                                                                                             // 18366\n                                                                                                                       // 18367\n       it('should search in specific fields when filtering with a predicate object', function() {                      // 18368\n         var searchAny = element(by.model('search.$'));                                                                // 18369\n         searchAny.clear();                                                                                            // 18370\n         searchAny.sendKeys('i');                                                                                      // 18371\n         expectFriendNames(['Mary', 'Mike', 'Julie', 'Juliette'], 'friendObj');                                        // 18372\n       });                                                                                                             // 18373\n       it('should use a equal comparison when comparator is true', function() {                                        // 18374\n         var searchName = element(by.model('search.name'));                                                            // 18375\n         var strict = element(by.model('strict'));                                                                     // 18376\n         searchName.clear();                                                                                           // 18377\n         searchName.sendKeys('Julie');                                                                                 // 18378\n         strict.click();                                                                                               // 18379\n         expectFriendNames(['Julie'], 'friendObj');                                                                    // 18380\n       });                                                                                                             // 18381\n     </file>                                                                                                           // 18382\n   </example>                                                                                                          // 18383\n */                                                                                                                    // 18384\nfunction filterFilter() {                                                                                              // 18385\n  return function(array, expression, comparator) {                                                                     // 18386\n    if (!isArrayLike(array)) {                                                                                         // 18387\n      if (array == null) {                                                                                             // 18388\n        return array;                                                                                                  // 18389\n      } else {                                                                                                         // 18390\n        throw minErr('filter')('notarray', 'Expected array but received: {0}', array);                                 // 18391\n      }                                                                                                                // 18392\n    }                                                                                                                  // 18393\n                                                                                                                       // 18394\n    var expressionType = getTypeForFilter(expression);                                                                 // 18395\n    var predicateFn;                                                                                                   // 18396\n    var matchAgainstAnyProp;                                                                                           // 18397\n                                                                                                                       // 18398\n    switch (expressionType) {                                                                                          // 18399\n      case 'function':                                                                                                 // 18400\n        predicateFn = expression;                                                                                      // 18401\n        break;                                                                                                         // 18402\n      case 'boolean':                                                                                                  // 18403\n      case 'null':                                                                                                     // 18404\n      case 'number':                                                                                                   // 18405\n      case 'string':                                                                                                   // 18406\n        matchAgainstAnyProp = true;                                                                                    // 18407\n        //jshint -W086                                                                                                 // 18408\n      case 'object':                                                                                                   // 18409\n        //jshint +W086                                                                                                 // 18410\n        predicateFn = createPredicateFn(expression, comparator, matchAgainstAnyProp);                                  // 18411\n        break;                                                                                                         // 18412\n      default:                                                                                                         // 18413\n        return array;                                                                                                  // 18414\n    }                                                                                                                  // 18415\n                                                                                                                       // 18416\n    return Array.prototype.filter.call(array, predicateFn);                                                            // 18417\n  };                                                                                                                   // 18418\n}                                                                                                                      // 18419\n                                                                                                                       // 18420\n// Helper functions for `filterFilter`                                                                                 // 18421\nfunction createPredicateFn(expression, comparator, matchAgainstAnyProp) {                                              // 18422\n  var shouldMatchPrimitives = isObject(expression) && ('$' in expression);                                             // 18423\n  var predicateFn;                                                                                                     // 18424\n                                                                                                                       // 18425\n  if (comparator === true) {                                                                                           // 18426\n    comparator = equals;                                                                                               // 18427\n  } else if (!isFunction(comparator)) {                                                                                // 18428\n    comparator = function(actual, expected) {                                                                          // 18429\n      if (isUndefined(actual)) {                                                                                       // 18430\n        // No substring matching against `undefined`                                                                   // 18431\n        return false;                                                                                                  // 18432\n      }                                                                                                                // 18433\n      if ((actual === null) || (expected === null)) {                                                                  // 18434\n        // No substring matching against `null`; only match against `null`                                             // 18435\n        return actual === expected;                                                                                    // 18436\n      }                                                                                                                // 18437\n      if (isObject(expected) || (isObject(actual) && !hasCustomToString(actual))) {                                    // 18438\n        // Should not compare primitives against objects, unless they have custom `toString` method                    // 18439\n        return false;                                                                                                  // 18440\n      }                                                                                                                // 18441\n                                                                                                                       // 18442\n      actual = lowercase('' + actual);                                                                                 // 18443\n      expected = lowercase('' + expected);                                                                             // 18444\n      return actual.indexOf(expected) !== -1;                                                                          // 18445\n    };                                                                                                                 // 18446\n  }                                                                                                                    // 18447\n                                                                                                                       // 18448\n  predicateFn = function(item) {                                                                                       // 18449\n    if (shouldMatchPrimitives && !isObject(item)) {                                                                    // 18450\n      return deepCompare(item, expression.$, comparator, false);                                                       // 18451\n    }                                                                                                                  // 18452\n    return deepCompare(item, expression, comparator, matchAgainstAnyProp);                                             // 18453\n  };                                                                                                                   // 18454\n                                                                                                                       // 18455\n  return predicateFn;                                                                                                  // 18456\n}                                                                                                                      // 18457\n                                                                                                                       // 18458\nfunction deepCompare(actual, expected, comparator, matchAgainstAnyProp, dontMatchWholeObject) {                        // 18459\n  var actualType = getTypeForFilter(actual);                                                                           // 18460\n  var expectedType = getTypeForFilter(expected);                                                                       // 18461\n                                                                                                                       // 18462\n  if ((expectedType === 'string') && (expected.charAt(0) === '!')) {                                                   // 18463\n    return !deepCompare(actual, expected.substring(1), comparator, matchAgainstAnyProp);                               // 18464\n  } else if (isArray(actual)) {                                                                                        // 18465\n    // In case `actual` is an array, consider it a match                                                               // 18466\n    // if ANY of it's items matches `expected`                                                                         // 18467\n    return actual.some(function(item) {                                                                                // 18468\n      return deepCompare(item, expected, comparator, matchAgainstAnyProp);                                             // 18469\n    });                                                                                                                // 18470\n  }                                                                                                                    // 18471\n                                                                                                                       // 18472\n  switch (actualType) {                                                                                                // 18473\n    case 'object':                                                                                                     // 18474\n      var key;                                                                                                         // 18475\n      if (matchAgainstAnyProp) {                                                                                       // 18476\n        for (key in actual) {                                                                                          // 18477\n          if ((key.charAt(0) !== '$') && deepCompare(actual[key], expected, comparator, true)) {                       // 18478\n            return true;                                                                                               // 18479\n          }                                                                                                            // 18480\n        }                                                                                                              // 18481\n        return dontMatchWholeObject ? false : deepCompare(actual, expected, comparator, false);                        // 18482\n      } else if (expectedType === 'object') {                                                                          // 18483\n        for (key in expected) {                                                                                        // 18484\n          var expectedVal = expected[key];                                                                             // 18485\n          if (isFunction(expectedVal) || isUndefined(expectedVal)) {                                                   // 18486\n            continue;                                                                                                  // 18487\n          }                                                                                                            // 18488\n                                                                                                                       // 18489\n          var matchAnyProperty = key === '$';                                                                          // 18490\n          var actualVal = matchAnyProperty ? actual : actual[key];                                                     // 18491\n          if (!deepCompare(actualVal, expectedVal, comparator, matchAnyProperty, matchAnyProperty)) {                  // 18492\n            return false;                                                                                              // 18493\n          }                                                                                                            // 18494\n        }                                                                                                              // 18495\n        return true;                                                                                                   // 18496\n      } else {                                                                                                         // 18497\n        return comparator(actual, expected);                                                                           // 18498\n      }                                                                                                                // 18499\n      break;                                                                                                           // 18500\n    case 'function':                                                                                                   // 18501\n      return false;                                                                                                    // 18502\n    default:                                                                                                           // 18503\n      return comparator(actual, expected);                                                                             // 18504\n  }                                                                                                                    // 18505\n}                                                                                                                      // 18506\n                                                                                                                       // 18507\n// Used for easily differentiating between `null` and actual `object`                                                  // 18508\nfunction getTypeForFilter(val) {                                                                                       // 18509\n  return (val === null) ? 'null' : typeof val;                                                                         // 18510\n}                                                                                                                      // 18511\n                                                                                                                       // 18512\n/**                                                                                                                    // 18513\n * @ngdoc filter                                                                                                       // 18514\n * @name currency                                                                                                      // 18515\n * @kind function                                                                                                      // 18516\n *                                                                                                                     // 18517\n * @description                                                                                                        // 18518\n * Formats a number as a currency (ie $1,234.56). When no currency symbol is provided, default                         // 18519\n * symbol for current locale is used.                                                                                  // 18520\n *                                                                                                                     // 18521\n * @param {number} amount Input to filter.                                                                             // 18522\n * @param {string=} symbol Currency symbol or identifier to be displayed.                                              // 18523\n * @param {number=} fractionSize Number of decimal places to round the amount to, defaults to default max fraction size for current locale\n * @returns {string} Formatted number.                                                                                 // 18525\n *                                                                                                                     // 18526\n *                                                                                                                     // 18527\n * @example                                                                                                            // 18528\n   <example module=\"currencyExample\">                                                                                  // 18529\n     <file name=\"index.html\">                                                                                          // 18530\n       <script>                                                                                                        // 18531\n         angular.module('currencyExample', [])                                                                         // 18532\n           .controller('ExampleController', ['$scope', function($scope) {                                              // 18533\n             $scope.amount = 1234.56;                                                                                  // 18534\n           }]);                                                                                                        // 18535\n       </script>                                                                                                       // 18536\n       <div ng-controller=\"ExampleController\">                                                                         // 18537\n         <input type=\"number\" ng-model=\"amount\" aria-label=\"amount\"> <br>                                              // 18538\n         default currency symbol ($): <span id=\"currency-default\">{{amount | currency}}</span><br>                     // 18539\n         custom currency identifier (USD$): <span id=\"currency-custom\">{{amount | currency:\"USD$\"}}</span>             // 18540\n         no fractions (0): <span id=\"currency-no-fractions\">{{amount | currency:\"USD$\":0}}</span>                      // 18541\n       </div>                                                                                                          // 18542\n     </file>                                                                                                           // 18543\n     <file name=\"protractor.js\" type=\"protractor\">                                                                     // 18544\n       it('should init with 1234.56', function() {                                                                     // 18545\n         expect(element(by.id('currency-default')).getText()).toBe('$1,234.56');                                       // 18546\n         expect(element(by.id('currency-custom')).getText()).toBe('USD$1,234.56');                                     // 18547\n         expect(element(by.id('currency-no-fractions')).getText()).toBe('USD$1,235');                                  // 18548\n       });                                                                                                             // 18549\n       it('should update', function() {                                                                                // 18550\n         if (browser.params.browser == 'safari') {                                                                     // 18551\n           // Safari does not understand the minus key. See                                                            // 18552\n           // https://github.com/angular/protractor/issues/481                                                         // 18553\n           return;                                                                                                     // 18554\n         }                                                                                                             // 18555\n         element(by.model('amount')).clear();                                                                          // 18556\n         element(by.model('amount')).sendKeys('-1234');                                                                // 18557\n         expect(element(by.id('currency-default')).getText()).toBe('-$1,234.00');                                      // 18558\n         expect(element(by.id('currency-custom')).getText()).toBe('-USD$1,234.00');                                    // 18559\n         expect(element(by.id('currency-no-fractions')).getText()).toBe('-USD$1,234');                                 // 18560\n       });                                                                                                             // 18561\n     </file>                                                                                                           // 18562\n   </example>                                                                                                          // 18563\n */                                                                                                                    // 18564\ncurrencyFilter.$inject = ['$locale'];                                                                                  // 18565\nfunction currencyFilter($locale) {                                                                                     // 18566\n  var formats = $locale.NUMBER_FORMATS;                                                                                // 18567\n  return function(amount, currencySymbol, fractionSize) {                                                              // 18568\n    if (isUndefined(currencySymbol)) {                                                                                 // 18569\n      currencySymbol = formats.CURRENCY_SYM;                                                                           // 18570\n    }                                                                                                                  // 18571\n                                                                                                                       // 18572\n    if (isUndefined(fractionSize)) {                                                                                   // 18573\n      fractionSize = formats.PATTERNS[1].maxFrac;                                                                      // 18574\n    }                                                                                                                  // 18575\n                                                                                                                       // 18576\n    // if null or undefined pass it through                                                                            // 18577\n    return (amount == null)                                                                                            // 18578\n        ? amount                                                                                                       // 18579\n        : formatNumber(amount, formats.PATTERNS[1], formats.GROUP_SEP, formats.DECIMAL_SEP, fractionSize).             // 18580\n            replace(/\\u00A4/g, currencySymbol);                                                                        // 18581\n  };                                                                                                                   // 18582\n}                                                                                                                      // 18583\n                                                                                                                       // 18584\n/**                                                                                                                    // 18585\n * @ngdoc filter                                                                                                       // 18586\n * @name number                                                                                                        // 18587\n * @kind function                                                                                                      // 18588\n *                                                                                                                     // 18589\n * @description                                                                                                        // 18590\n * Formats a number as text.                                                                                           // 18591\n *                                                                                                                     // 18592\n * If the input is null or undefined, it will just be returned.                                                        // 18593\n * If the input is infinite (Infinity/-Infinity) the Infinity symbol '∞' is returned.                                  // 18594\n * If the input is not a number an empty string is returned.                                                           // 18595\n *                                                                                                                     // 18596\n *                                                                                                                     // 18597\n * @param {number|string} number Number to format.                                                                     // 18598\n * @param {(number|string)=} fractionSize Number of decimal places to round the number to.                             // 18599\n * If this is not provided then the fraction size is computed from the current locale's number                         // 18600\n * formatting pattern. In the case of the default locale, it will be 3.                                                // 18601\n * @returns {string} Number rounded to decimalPlaces and places a “,” after each third digit.                          // 18602\n *                                                                                                                     // 18603\n * @example                                                                                                            // 18604\n   <example module=\"numberFilterExample\">                                                                              // 18605\n     <file name=\"index.html\">                                                                                          // 18606\n       <script>                                                                                                        // 18607\n         angular.module('numberFilterExample', [])                                                                     // 18608\n           .controller('ExampleController', ['$scope', function($scope) {                                              // 18609\n             $scope.val = 1234.56789;                                                                                  // 18610\n           }]);                                                                                                        // 18611\n       </script>                                                                                                       // 18612\n       <div ng-controller=\"ExampleController\">                                                                         // 18613\n         <label>Enter number: <input ng-model='val'></label><br>                                                       // 18614\n         Default formatting: <span id='number-default'>{{val | number}}</span><br>                                     // 18615\n         No fractions: <span>{{val | number:0}}</span><br>                                                             // 18616\n         Negative number: <span>{{-val | number:4}}</span>                                                             // 18617\n       </div>                                                                                                          // 18618\n     </file>                                                                                                           // 18619\n     <file name=\"protractor.js\" type=\"protractor\">                                                                     // 18620\n       it('should format numbers', function() {                                                                        // 18621\n         expect(element(by.id('number-default')).getText()).toBe('1,234.568');                                         // 18622\n         expect(element(by.binding('val | number:0')).getText()).toBe('1,235');                                        // 18623\n         expect(element(by.binding('-val | number:4')).getText()).toBe('-1,234.5679');                                 // 18624\n       });                                                                                                             // 18625\n                                                                                                                       // 18626\n       it('should update', function() {                                                                                // 18627\n         element(by.model('val')).clear();                                                                             // 18628\n         element(by.model('val')).sendKeys('3374.333');                                                                // 18629\n         expect(element(by.id('number-default')).getText()).toBe('3,374.333');                                         // 18630\n         expect(element(by.binding('val | number:0')).getText()).toBe('3,374');                                        // 18631\n         expect(element(by.binding('-val | number:4')).getText()).toBe('-3,374.3330');                                 // 18632\n      });                                                                                                              // 18633\n     </file>                                                                                                           // 18634\n   </example>                                                                                                          // 18635\n */                                                                                                                    // 18636\n                                                                                                                       // 18637\n                                                                                                                       // 18638\nnumberFilter.$inject = ['$locale'];                                                                                    // 18639\nfunction numberFilter($locale) {                                                                                       // 18640\n  var formats = $locale.NUMBER_FORMATS;                                                                                // 18641\n  return function(number, fractionSize) {                                                                              // 18642\n                                                                                                                       // 18643\n    // if null or undefined pass it through                                                                            // 18644\n    return (number == null)                                                                                            // 18645\n        ? number                                                                                                       // 18646\n        : formatNumber(number, formats.PATTERNS[0], formats.GROUP_SEP, formats.DECIMAL_SEP,                            // 18647\n                       fractionSize);                                                                                  // 18648\n  };                                                                                                                   // 18649\n}                                                                                                                      // 18650\n                                                                                                                       // 18651\nvar DECIMAL_SEP = '.';                                                                                                 // 18652\nfunction formatNumber(number, pattern, groupSep, decimalSep, fractionSize) {                                           // 18653\n  if (isObject(number)) return '';                                                                                     // 18654\n                                                                                                                       // 18655\n  var isNegative = number < 0;                                                                                         // 18656\n  number = Math.abs(number);                                                                                           // 18657\n                                                                                                                       // 18658\n  var isInfinity = number === Infinity;                                                                                // 18659\n  if (!isInfinity && !isFinite(number)) return '';                                                                     // 18660\n                                                                                                                       // 18661\n  var numStr = number + '',                                                                                            // 18662\n      formatedText = '',                                                                                               // 18663\n      hasExponent = false,                                                                                             // 18664\n      parts = [];                                                                                                      // 18665\n                                                                                                                       // 18666\n  if (isInfinity) formatedText = '\\u221e';                                                                             // 18667\n                                                                                                                       // 18668\n  if (!isInfinity && numStr.indexOf('e') !== -1) {                                                                     // 18669\n    var match = numStr.match(/([\\d\\.]+)e(-?)(\\d+)/);                                                                   // 18670\n    if (match && match[2] == '-' && match[3] > fractionSize + 1) {                                                     // 18671\n      number = 0;                                                                                                      // 18672\n    } else {                                                                                                           // 18673\n      formatedText = numStr;                                                                                           // 18674\n      hasExponent = true;                                                                                              // 18675\n    }                                                                                                                  // 18676\n  }                                                                                                                    // 18677\n                                                                                                                       // 18678\n  if (!isInfinity && !hasExponent) {                                                                                   // 18679\n    var fractionLen = (numStr.split(DECIMAL_SEP)[1] || '').length;                                                     // 18680\n                                                                                                                       // 18681\n    // determine fractionSize if it is not specified                                                                   // 18682\n    if (isUndefined(fractionSize)) {                                                                                   // 18683\n      fractionSize = Math.min(Math.max(pattern.minFrac, fractionLen), pattern.maxFrac);                                // 18684\n    }                                                                                                                  // 18685\n                                                                                                                       // 18686\n    // safely round numbers in JS without hitting imprecisions of floating-point arithmetics                           // 18687\n    // inspired by:                                                                                                    // 18688\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round                     // 18689\n    number = +(Math.round(+(number.toString() + 'e' + fractionSize)).toString() + 'e' + -fractionSize);                // 18690\n                                                                                                                       // 18691\n    var fraction = ('' + number).split(DECIMAL_SEP);                                                                   // 18692\n    var whole = fraction[0];                                                                                           // 18693\n    fraction = fraction[1] || '';                                                                                      // 18694\n                                                                                                                       // 18695\n    var i, pos = 0,                                                                                                    // 18696\n        lgroup = pattern.lgSize,                                                                                       // 18697\n        group = pattern.gSize;                                                                                         // 18698\n                                                                                                                       // 18699\n    if (whole.length >= (lgroup + group)) {                                                                            // 18700\n      pos = whole.length - lgroup;                                                                                     // 18701\n      for (i = 0; i < pos; i++) {                                                                                      // 18702\n        if ((pos - i) % group === 0 && i !== 0) {                                                                      // 18703\n          formatedText += groupSep;                                                                                    // 18704\n        }                                                                                                              // 18705\n        formatedText += whole.charAt(i);                                                                               // 18706\n      }                                                                                                                // 18707\n    }                                                                                                                  // 18708\n                                                                                                                       // 18709\n    for (i = pos; i < whole.length; i++) {                                                                             // 18710\n      if ((whole.length - i) % lgroup === 0 && i !== 0) {                                                              // 18711\n        formatedText += groupSep;                                                                                      // 18712\n      }                                                                                                                // 18713\n      formatedText += whole.charAt(i);                                                                                 // 18714\n    }                                                                                                                  // 18715\n                                                                                                                       // 18716\n    // format fraction part.                                                                                           // 18717\n    while (fraction.length < fractionSize) {                                                                           // 18718\n      fraction += '0';                                                                                                 // 18719\n    }                                                                                                                  // 18720\n                                                                                                                       // 18721\n    if (fractionSize && fractionSize !== \"0\") formatedText += decimalSep + fraction.substr(0, fractionSize);           // 18722\n  } else {                                                                                                             // 18723\n    if (fractionSize > 0 && number < 1) {                                                                              // 18724\n      formatedText = number.toFixed(fractionSize);                                                                     // 18725\n      number = parseFloat(formatedText);                                                                               // 18726\n      formatedText = formatedText.replace(DECIMAL_SEP, decimalSep);                                                    // 18727\n    }                                                                                                                  // 18728\n  }                                                                                                                    // 18729\n                                                                                                                       // 18730\n  if (number === 0) {                                                                                                  // 18731\n    isNegative = false;                                                                                                // 18732\n  }                                                                                                                    // 18733\n                                                                                                                       // 18734\n  parts.push(isNegative ? pattern.negPre : pattern.posPre,                                                             // 18735\n             formatedText,                                                                                             // 18736\n             isNegative ? pattern.negSuf : pattern.posSuf);                                                            // 18737\n  return parts.join('');                                                                                               // 18738\n}                                                                                                                      // 18739\n                                                                                                                       // 18740\nfunction padNumber(num, digits, trim) {                                                                                // 18741\n  var neg = '';                                                                                                        // 18742\n  if (num < 0) {                                                                                                       // 18743\n    neg =  '-';                                                                                                        // 18744\n    num = -num;                                                                                                        // 18745\n  }                                                                                                                    // 18746\n  num = '' + num;                                                                                                      // 18747\n  while (num.length < digits) num = '0' + num;                                                                         // 18748\n  if (trim) {                                                                                                          // 18749\n    num = num.substr(num.length - digits);                                                                             // 18750\n  }                                                                                                                    // 18751\n  return neg + num;                                                                                                    // 18752\n}                                                                                                                      // 18753\n                                                                                                                       // 18754\n                                                                                                                       // 18755\nfunction dateGetter(name, size, offset, trim) {                                                                        // 18756\n  offset = offset || 0;                                                                                                // 18757\n  return function(date) {                                                                                              // 18758\n    var value = date['get' + name]();                                                                                  // 18759\n    if (offset > 0 || value > -offset) {                                                                               // 18760\n      value += offset;                                                                                                 // 18761\n    }                                                                                                                  // 18762\n    if (value === 0 && offset == -12) value = 12;                                                                      // 18763\n    return padNumber(value, size, trim);                                                                               // 18764\n  };                                                                                                                   // 18765\n}                                                                                                                      // 18766\n                                                                                                                       // 18767\nfunction dateStrGetter(name, shortForm) {                                                                              // 18768\n  return function(date, formats) {                                                                                     // 18769\n    var value = date['get' + name]();                                                                                  // 18770\n    var get = uppercase(shortForm ? ('SHORT' + name) : name);                                                          // 18771\n                                                                                                                       // 18772\n    return formats[get][value];                                                                                        // 18773\n  };                                                                                                                   // 18774\n}                                                                                                                      // 18775\n                                                                                                                       // 18776\nfunction timeZoneGetter(date, formats, offset) {                                                                       // 18777\n  var zone = -1 * offset;                                                                                              // 18778\n  var paddedZone = (zone >= 0) ? \"+\" : \"\";                                                                             // 18779\n                                                                                                                       // 18780\n  paddedZone += padNumber(Math[zone > 0 ? 'floor' : 'ceil'](zone / 60), 2) +                                           // 18781\n                padNumber(Math.abs(zone % 60), 2);                                                                     // 18782\n                                                                                                                       // 18783\n  return paddedZone;                                                                                                   // 18784\n}                                                                                                                      // 18785\n                                                                                                                       // 18786\nfunction getFirstThursdayOfYear(year) {                                                                                // 18787\n    // 0 = index of January                                                                                            // 18788\n    var dayOfWeekOnFirst = (new Date(year, 0, 1)).getDay();                                                            // 18789\n    // 4 = index of Thursday (+1 to account for 1st = 5)                                                               // 18790\n    // 11 = index of *next* Thursday (+1 account for 1st = 12)                                                         // 18791\n    return new Date(year, 0, ((dayOfWeekOnFirst <= 4) ? 5 : 12) - dayOfWeekOnFirst);                                   // 18792\n}                                                                                                                      // 18793\n                                                                                                                       // 18794\nfunction getThursdayThisWeek(datetime) {                                                                               // 18795\n    return new Date(datetime.getFullYear(), datetime.getMonth(),                                                       // 18796\n      // 4 = index of Thursday                                                                                         // 18797\n      datetime.getDate() + (4 - datetime.getDay()));                                                                   // 18798\n}                                                                                                                      // 18799\n                                                                                                                       // 18800\nfunction weekGetter(size) {                                                                                            // 18801\n   return function(date) {                                                                                             // 18802\n      var firstThurs = getFirstThursdayOfYear(date.getFullYear()),                                                     // 18803\n         thisThurs = getThursdayThisWeek(date);                                                                        // 18804\n                                                                                                                       // 18805\n      var diff = +thisThurs - +firstThurs,                                                                             // 18806\n         result = 1 + Math.round(diff / 6.048e8); // 6.048e8 ms per week                                               // 18807\n                                                                                                                       // 18808\n      return padNumber(result, size);                                                                                  // 18809\n   };                                                                                                                  // 18810\n}                                                                                                                      // 18811\n                                                                                                                       // 18812\nfunction ampmGetter(date, formats) {                                                                                   // 18813\n  return date.getHours() < 12 ? formats.AMPMS[0] : formats.AMPMS[1];                                                   // 18814\n}                                                                                                                      // 18815\n                                                                                                                       // 18816\nfunction eraGetter(date, formats) {                                                                                    // 18817\n  return date.getFullYear() <= 0 ? formats.ERAS[0] : formats.ERAS[1];                                                  // 18818\n}                                                                                                                      // 18819\n                                                                                                                       // 18820\nfunction longEraGetter(date, formats) {                                                                                // 18821\n  return date.getFullYear() <= 0 ? formats.ERANAMES[0] : formats.ERANAMES[1];                                          // 18822\n}                                                                                                                      // 18823\n                                                                                                                       // 18824\nvar DATE_FORMATS = {                                                                                                   // 18825\n  yyyy: dateGetter('FullYear', 4),                                                                                     // 18826\n    yy: dateGetter('FullYear', 2, 0, true),                                                                            // 18827\n     y: dateGetter('FullYear', 1),                                                                                     // 18828\n  MMMM: dateStrGetter('Month'),                                                                                        // 18829\n   MMM: dateStrGetter('Month', true),                                                                                  // 18830\n    MM: dateGetter('Month', 2, 1),                                                                                     // 18831\n     M: dateGetter('Month', 1, 1),                                                                                     // 18832\n    dd: dateGetter('Date', 2),                                                                                         // 18833\n     d: dateGetter('Date', 1),                                                                                         // 18834\n    HH: dateGetter('Hours', 2),                                                                                        // 18835\n     H: dateGetter('Hours', 1),                                                                                        // 18836\n    hh: dateGetter('Hours', 2, -12),                                                                                   // 18837\n     h: dateGetter('Hours', 1, -12),                                                                                   // 18838\n    mm: dateGetter('Minutes', 2),                                                                                      // 18839\n     m: dateGetter('Minutes', 1),                                                                                      // 18840\n    ss: dateGetter('Seconds', 2),                                                                                      // 18841\n     s: dateGetter('Seconds', 1),                                                                                      // 18842\n     // while ISO 8601 requires fractions to be prefixed with `.` or `,`                                               // 18843\n     // we can be just safely rely on using `sss` since we currently don't support single or two digit fractions       // 18844\n   sss: dateGetter('Milliseconds', 3),                                                                                 // 18845\n  EEEE: dateStrGetter('Day'),                                                                                          // 18846\n   EEE: dateStrGetter('Day', true),                                                                                    // 18847\n     a: ampmGetter,                                                                                                    // 18848\n     Z: timeZoneGetter,                                                                                                // 18849\n    ww: weekGetter(2),                                                                                                 // 18850\n     w: weekGetter(1),                                                                                                 // 18851\n     G: eraGetter,                                                                                                     // 18852\n     GG: eraGetter,                                                                                                    // 18853\n     GGG: eraGetter,                                                                                                   // 18854\n     GGGG: longEraGetter                                                                                               // 18855\n};                                                                                                                     // 18856\n                                                                                                                       // 18857\nvar DATE_FORMATS_SPLIT = /((?:[^yMdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z|G+|w+))(.*)/,       // 18858\n    NUMBER_STRING = /^\\-?\\d+$/;                                                                                        // 18859\n                                                                                                                       // 18860\n/**                                                                                                                    // 18861\n * @ngdoc filter                                                                                                       // 18862\n * @name date                                                                                                          // 18863\n * @kind function                                                                                                      // 18864\n *                                                                                                                     // 18865\n * @description                                                                                                        // 18866\n *   Formats `date` to a string based on the requested `format`.                                                       // 18867\n *                                                                                                                     // 18868\n *   `format` string can be composed of the following elements:                                                        // 18869\n *                                                                                                                     // 18870\n *   * `'yyyy'`: 4 digit representation of year (e.g. AD 1 => 0001, AD 2010 => 2010)                                   // 18871\n *   * `'yy'`: 2 digit representation of year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)                     // 18872\n *   * `'y'`: 1 digit representation of year, e.g. (AD 1 => 1, AD 199 => 199)                                          // 18873\n *   * `'MMMM'`: Month in year (January-December)                                                                      // 18874\n *   * `'MMM'`: Month in year (Jan-Dec)                                                                                // 18875\n *   * `'MM'`: Month in year, padded (01-12)                                                                           // 18876\n *   * `'M'`: Month in year (1-12)                                                                                     // 18877\n *   * `'dd'`: Day in month, padded (01-31)                                                                            // 18878\n *   * `'d'`: Day in month (1-31)                                                                                      // 18879\n *   * `'EEEE'`: Day in Week,(Sunday-Saturday)                                                                         // 18880\n *   * `'EEE'`: Day in Week, (Sun-Sat)                                                                                 // 18881\n *   * `'HH'`: Hour in day, padded (00-23)                                                                             // 18882\n *   * `'H'`: Hour in day (0-23)                                                                                       // 18883\n *   * `'hh'`: Hour in AM/PM, padded (01-12)                                                                           // 18884\n *   * `'h'`: Hour in AM/PM, (1-12)                                                                                    // 18885\n *   * `'mm'`: Minute in hour, padded (00-59)                                                                          // 18886\n *   * `'m'`: Minute in hour (0-59)                                                                                    // 18887\n *   * `'ss'`: Second in minute, padded (00-59)                                                                        // 18888\n *   * `'s'`: Second in minute (0-59)                                                                                  // 18889\n *   * `'sss'`: Millisecond in second, padded (000-999)                                                                // 18890\n *   * `'a'`: AM/PM marker                                                                                             // 18891\n *   * `'Z'`: 4 digit (+sign) representation of the timezone offset (-1200-+1200)                                      // 18892\n *   * `'ww'`: Week of year, padded (00-53). Week 01 is the week with the first Thursday of the year                   // 18893\n *   * `'w'`: Week of year (0-53). Week 1 is the week with the first Thursday of the year                              // 18894\n *   * `'G'`, `'GG'`, `'GGG'`: The abbreviated form of the era string (e.g. 'AD')                                      // 18895\n *   * `'GGGG'`: The long form of the era string (e.g. 'Anno Domini')                                                  // 18896\n *                                                                                                                     // 18897\n *   `format` string can also be one of the following predefined                                                       // 18898\n *   {@link guide/i18n localizable formats}:                                                                           // 18899\n *                                                                                                                     // 18900\n *   * `'medium'`: equivalent to `'MMM d, y h:mm:ss a'` for en_US locale                                               // 18901\n *     (e.g. Sep 3, 2010 12:05:08 PM)                                                                                  // 18902\n *   * `'short'`: equivalent to `'M/d/yy h:mm a'` for en_US  locale (e.g. 9/3/10 12:05 PM)                             // 18903\n *   * `'fullDate'`: equivalent to `'EEEE, MMMM d, y'` for en_US  locale                                               // 18904\n *     (e.g. Friday, September 3, 2010)                                                                                // 18905\n *   * `'longDate'`: equivalent to `'MMMM d, y'` for en_US  locale (e.g. September 3, 2010)                            // 18906\n *   * `'mediumDate'`: equivalent to `'MMM d, y'` for en_US  locale (e.g. Sep 3, 2010)                                 // 18907\n *   * `'shortDate'`: equivalent to `'M/d/yy'` for en_US locale (e.g. 9/3/10)                                          // 18908\n *   * `'mediumTime'`: equivalent to `'h:mm:ss a'` for en_US locale (e.g. 12:05:08 PM)                                 // 18909\n *   * `'shortTime'`: equivalent to `'h:mm a'` for en_US locale (e.g. 12:05 PM)                                        // 18910\n *                                                                                                                     // 18911\n *   `format` string can contain literal values. These need to be escaped by surrounding with single quotes (e.g.      // 18912\n *   `\"h 'in the morning'\"`). In order to output a single quote, escape it - i.e., two single quotes in a sequence     // 18913\n *   (e.g. `\"h 'o''clock'\"`).                                                                                          // 18914\n *                                                                                                                     // 18915\n * @param {(Date|number|string)} date Date to format either as Date object, milliseconds (string or                    // 18916\n *    number) or various ISO 8601 datetime string formats (e.g. yyyy-MM-ddTHH:mm:ss.sssZ and its                       // 18917\n *    shorter versions like yyyy-MM-ddTHH:mmZ, yyyy-MM-dd or yyyyMMddTHHmmssZ). If no timezone is                      // 18918\n *    specified in the string input, the time is considered to be in the local timezone.                               // 18919\n * @param {string=} format Formatting rules (see Description). If not specified,                                       // 18920\n *    `mediumDate` is used.                                                                                            // 18921\n * @param {string=} timezone Timezone to be used for formatting. It understands UTC/GMT and the                        // 18922\n *    continental US time zone abbreviations, but for general use, use a time zone offset, for                         // 18923\n *    example, `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)                                          // 18924\n *    If not specified, the timezone of the browser will be used.                                                      // 18925\n * @returns {string} Formatted string or the input if input is not recognized as date/millis.                          // 18926\n *                                                                                                                     // 18927\n * @example                                                                                                            // 18928\n   <example>                                                                                                           // 18929\n     <file name=\"index.html\">                                                                                          // 18930\n       <span ng-non-bindable>{{1288323623006 | date:'medium'}}</span>:                                                 // 18931\n           <span>{{1288323623006 | date:'medium'}}</span><br>                                                          // 18932\n       <span ng-non-bindable>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span>:                                  // 18933\n          <span>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span><br>                                            // 18934\n       <span ng-non-bindable>{{1288323623006 | date:'MM/dd/yyyy @ h:mma'}}</span>:                                     // 18935\n          <span>{{'1288323623006' | date:'MM/dd/yyyy @ h:mma'}}</span><br>                                             // 18936\n       <span ng-non-bindable>{{1288323623006 | date:\"MM/dd/yyyy 'at' h:mma\"}}</span>:                                  // 18937\n          <span>{{'1288323623006' | date:\"MM/dd/yyyy 'at' h:mma\"}}</span><br>                                          // 18938\n     </file>                                                                                                           // 18939\n     <file name=\"protractor.js\" type=\"protractor\">                                                                     // 18940\n       it('should format date', function() {                                                                           // 18941\n         expect(element(by.binding(\"1288323623006 | date:'medium'\")).getText()).                                       // 18942\n            toMatch(/Oct 2\\d, 2010 \\d{1,2}:\\d{2}:\\d{2} (AM|PM)/);                                                      // 18943\n         expect(element(by.binding(\"1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'\")).getText()).                        // 18944\n            toMatch(/2010\\-10\\-2\\d \\d{2}:\\d{2}:\\d{2} (\\-|\\+)?\\d{4}/);                                                  // 18945\n         expect(element(by.binding(\"'1288323623006' | date:'MM/dd/yyyy @ h:mma'\")).getText()).                         // 18946\n            toMatch(/10\\/2\\d\\/2010 @ \\d{1,2}:\\d{2}(AM|PM)/);                                                           // 18947\n         expect(element(by.binding(\"'1288323623006' | date:\\\"MM/dd/yyyy 'at' h:mma\\\"\")).getText()).                    // 18948\n            toMatch(/10\\/2\\d\\/2010 at \\d{1,2}:\\d{2}(AM|PM)/);                                                          // 18949\n       });                                                                                                             // 18950\n     </file>                                                                                                           // 18951\n   </example>                                                                                                          // 18952\n */                                                                                                                    // 18953\ndateFilter.$inject = ['$locale'];                                                                                      // 18954\nfunction dateFilter($locale) {                                                                                         // 18955\n                                                                                                                       // 18956\n                                                                                                                       // 18957\n  var R_ISO8601_STR = /^(\\d{4})-?(\\d\\d)-?(\\d\\d)(?:T(\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:\\.(\\d+))?)?)?(Z|([+-])(\\d\\d):?(\\d\\d))?)?$/;\n                     // 1        2       3         4          5          6          7          8  9     10      11     // 18959\n  function jsonStringToDate(string) {                                                                                  // 18960\n    var match;                                                                                                         // 18961\n    if (match = string.match(R_ISO8601_STR)) {                                                                         // 18962\n      var date = new Date(0),                                                                                          // 18963\n          tzHour = 0,                                                                                                  // 18964\n          tzMin  = 0,                                                                                                  // 18965\n          dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear,                                              // 18966\n          timeSetter = match[8] ? date.setUTCHours : date.setHours;                                                    // 18967\n                                                                                                                       // 18968\n      if (match[9]) {                                                                                                  // 18969\n        tzHour = toInt(match[9] + match[10]);                                                                          // 18970\n        tzMin = toInt(match[9] + match[11]);                                                                           // 18971\n      }                                                                                                                // 18972\n      dateSetter.call(date, toInt(match[1]), toInt(match[2]) - 1, toInt(match[3]));                                    // 18973\n      var h = toInt(match[4] || 0) - tzHour;                                                                           // 18974\n      var m = toInt(match[5] || 0) - tzMin;                                                                            // 18975\n      var s = toInt(match[6] || 0);                                                                                    // 18976\n      var ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);                                                  // 18977\n      timeSetter.call(date, h, m, s, ms);                                                                              // 18978\n      return date;                                                                                                     // 18979\n    }                                                                                                                  // 18980\n    return string;                                                                                                     // 18981\n  }                                                                                                                    // 18982\n                                                                                                                       // 18983\n                                                                                                                       // 18984\n  return function(date, format, timezone) {                                                                            // 18985\n    var text = '',                                                                                                     // 18986\n        parts = [],                                                                                                    // 18987\n        fn, match;                                                                                                     // 18988\n                                                                                                                       // 18989\n    format = format || 'mediumDate';                                                                                   // 18990\n    format = $locale.DATETIME_FORMATS[format] || format;                                                               // 18991\n    if (isString(date)) {                                                                                              // 18992\n      date = NUMBER_STRING.test(date) ? toInt(date) : jsonStringToDate(date);                                          // 18993\n    }                                                                                                                  // 18994\n                                                                                                                       // 18995\n    if (isNumber(date)) {                                                                                              // 18996\n      date = new Date(date);                                                                                           // 18997\n    }                                                                                                                  // 18998\n                                                                                                                       // 18999\n    if (!isDate(date) || !isFinite(date.getTime())) {                                                                  // 19000\n      return date;                                                                                                     // 19001\n    }                                                                                                                  // 19002\n                                                                                                                       // 19003\n    while (format) {                                                                                                   // 19004\n      match = DATE_FORMATS_SPLIT.exec(format);                                                                         // 19005\n      if (match) {                                                                                                     // 19006\n        parts = concat(parts, match, 1);                                                                               // 19007\n        format = parts.pop();                                                                                          // 19008\n      } else {                                                                                                         // 19009\n        parts.push(format);                                                                                            // 19010\n        format = null;                                                                                                 // 19011\n      }                                                                                                                // 19012\n    }                                                                                                                  // 19013\n                                                                                                                       // 19014\n    var dateTimezoneOffset = date.getTimezoneOffset();                                                                 // 19015\n    if (timezone) {                                                                                                    // 19016\n      dateTimezoneOffset = timezoneToOffset(timezone, date.getTimezoneOffset());                                       // 19017\n      date = convertTimezoneToLocal(date, timezone, true);                                                             // 19018\n    }                                                                                                                  // 19019\n    forEach(parts, function(value) {                                                                                   // 19020\n      fn = DATE_FORMATS[value];                                                                                        // 19021\n      text += fn ? fn(date, $locale.DATETIME_FORMATS, dateTimezoneOffset)                                              // 19022\n                 : value.replace(/(^'|'$)/g, '').replace(/''/g, \"'\");                                                  // 19023\n    });                                                                                                                // 19024\n                                                                                                                       // 19025\n    return text;                                                                                                       // 19026\n  };                                                                                                                   // 19027\n}                                                                                                                      // 19028\n                                                                                                                       // 19029\n                                                                                                                       // 19030\n/**                                                                                                                    // 19031\n * @ngdoc filter                                                                                                       // 19032\n * @name json                                                                                                          // 19033\n * @kind function                                                                                                      // 19034\n *                                                                                                                     // 19035\n * @description                                                                                                        // 19036\n *   Allows you to convert a JavaScript object into JSON string.                                                       // 19037\n *                                                                                                                     // 19038\n *   This filter is mostly useful for debugging. When using the double curly {{value}} notation                        // 19039\n *   the binding is automatically converted to JSON.                                                                   // 19040\n *                                                                                                                     // 19041\n * @param {*} object Any JavaScript object (including arrays and primitive types) to filter.                           // 19042\n * @param {number=} spacing The number of spaces to use per indentation, defaults to 2.                                // 19043\n * @returns {string} JSON string.                                                                                      // 19044\n *                                                                                                                     // 19045\n *                                                                                                                     // 19046\n * @example                                                                                                            // 19047\n   <example>                                                                                                           // 19048\n     <file name=\"index.html\">                                                                                          // 19049\n       <pre id=\"default-spacing\">{{ {'name':'value'} | json }}</pre>                                                   // 19050\n       <pre id=\"custom-spacing\">{{ {'name':'value'} | json:4 }}</pre>                                                  // 19051\n     </file>                                                                                                           // 19052\n     <file name=\"protractor.js\" type=\"protractor\">                                                                     // 19053\n       it('should jsonify filtered objects', function() {                                                              // 19054\n         expect(element(by.id('default-spacing')).getText()).toMatch(/\\{\\n  \"name\": ?\"value\"\\n}/);                     // 19055\n         expect(element(by.id('custom-spacing')).getText()).toMatch(/\\{\\n    \"name\": ?\"value\"\\n}/);                    // 19056\n       });                                                                                                             // 19057\n     </file>                                                                                                           // 19058\n   </example>                                                                                                          // 19059\n *                                                                                                                     // 19060\n */                                                                                                                    // 19061\nfunction jsonFilter() {                                                                                                // 19062\n  return function(object, spacing) {                                                                                   // 19063\n    if (isUndefined(spacing)) {                                                                                        // 19064\n        spacing = 2;                                                                                                   // 19065\n    }                                                                                                                  // 19066\n    return toJson(object, spacing);                                                                                    // 19067\n  };                                                                                                                   // 19068\n}                                                                                                                      // 19069\n                                                                                                                       // 19070\n                                                                                                                       // 19071\n/**                                                                                                                    // 19072\n * @ngdoc filter                                                                                                       // 19073\n * @name lowercase                                                                                                     // 19074\n * @kind function                                                                                                      // 19075\n * @description                                                                                                        // 19076\n * Converts string to lowercase.                                                                                       // 19077\n * @see angular.lowercase                                                                                              // 19078\n */                                                                                                                    // 19079\nvar lowercaseFilter = valueFn(lowercase);                                                                              // 19080\n                                                                                                                       // 19081\n                                                                                                                       // 19082\n/**                                                                                                                    // 19083\n * @ngdoc filter                                                                                                       // 19084\n * @name uppercase                                                                                                     // 19085\n * @kind function                                                                                                      // 19086\n * @description                                                                                                        // 19087\n * Converts string to uppercase.                                                                                       // 19088\n * @see angular.uppercase                                                                                              // 19089\n */                                                                                                                    // 19090\nvar uppercaseFilter = valueFn(uppercase);                                                                              // 19091\n                                                                                                                       // 19092\n/**                                                                                                                    // 19093\n * @ngdoc filter                                                                                                       // 19094\n * @name limitTo                                                                                                       // 19095\n * @kind function                                                                                                      // 19096\n *                                                                                                                     // 19097\n * @description                                                                                                        // 19098\n * Creates a new array or string containing only a specified number of elements. The elements                          // 19099\n * are taken from either the beginning or the end of the source array, string or number, as specified by               // 19100\n * the value and sign (positive or negative) of `limit`. If a number is used as input, it is                           // 19101\n * converted to a string.                                                                                              // 19102\n *                                                                                                                     // 19103\n * @param {Array|string|number} input Source array, string or number to be limited.                                    // 19104\n * @param {string|number} limit The length of the returned array or string. If the `limit` number                      // 19105\n *     is positive, `limit` number of items from the beginning of the source array/string are copied.                  // 19106\n *     If the number is negative, `limit` number  of items from the end of the source array/string                     // 19107\n *     are copied. The `limit` will be trimmed if it exceeds `array.length`. If `limit` is undefined,                  // 19108\n *     the input will be returned unchanged.                                                                           // 19109\n * @param {(string|number)=} begin Index at which to begin limitation. As a negative index, `begin`                    // 19110\n *     indicates an offset from the end of `input`. Defaults to `0`.                                                   // 19111\n * @returns {Array|string} A new sub-array or substring of length `limit` or less if input array                       // 19112\n *     had less than `limit` elements.                                                                                 // 19113\n *                                                                                                                     // 19114\n * @example                                                                                                            // 19115\n   <example module=\"limitToExample\">                                                                                   // 19116\n     <file name=\"index.html\">                                                                                          // 19117\n       <script>                                                                                                        // 19118\n         angular.module('limitToExample', [])                                                                          // 19119\n           .controller('ExampleController', ['$scope', function($scope) {                                              // 19120\n             $scope.numbers = [1,2,3,4,5,6,7,8,9];                                                                     // 19121\n             $scope.letters = \"abcdefghi\";                                                                             // 19122\n             $scope.longNumber = 2345432342;                                                                           // 19123\n             $scope.numLimit = 3;                                                                                      // 19124\n             $scope.letterLimit = 3;                                                                                   // 19125\n             $scope.longNumberLimit = 3;                                                                               // 19126\n           }]);                                                                                                        // 19127\n       </script>                                                                                                       // 19128\n       <div ng-controller=\"ExampleController\">                                                                         // 19129\n         <label>                                                                                                       // 19130\n            Limit {{numbers}} to:                                                                                      // 19131\n            <input type=\"number\" step=\"1\" ng-model=\"numLimit\">                                                         // 19132\n         </label>                                                                                                      // 19133\n         <p>Output numbers: {{ numbers | limitTo:numLimit }}</p>                                                       // 19134\n         <label>                                                                                                       // 19135\n            Limit {{letters}} to:                                                                                      // 19136\n            <input type=\"number\" step=\"1\" ng-model=\"letterLimit\">                                                      // 19137\n         </label>                                                                                                      // 19138\n         <p>Output letters: {{ letters | limitTo:letterLimit }}</p>                                                    // 19139\n         <label>                                                                                                       // 19140\n            Limit {{longNumber}} to:                                                                                   // 19141\n            <input type=\"number\" step=\"1\" ng-model=\"longNumberLimit\">                                                  // 19142\n         </label>                                                                                                      // 19143\n         <p>Output long number: {{ longNumber | limitTo:longNumberLimit }}</p>                                         // 19144\n       </div>                                                                                                          // 19145\n     </file>                                                                                                           // 19146\n     <file name=\"protractor.js\" type=\"protractor\">                                                                     // 19147\n       var numLimitInput = element(by.model('numLimit'));                                                              // 19148\n       var letterLimitInput = element(by.model('letterLimit'));                                                        // 19149\n       var longNumberLimitInput = element(by.model('longNumberLimit'));                                                // 19150\n       var limitedNumbers = element(by.binding('numbers | limitTo:numLimit'));                                         // 19151\n       var limitedLetters = element(by.binding('letters | limitTo:letterLimit'));                                      // 19152\n       var limitedLongNumber = element(by.binding('longNumber | limitTo:longNumberLimit'));                            // 19153\n                                                                                                                       // 19154\n       it('should limit the number array to first three items', function() {                                           // 19155\n         expect(numLimitInput.getAttribute('value')).toBe('3');                                                        // 19156\n         expect(letterLimitInput.getAttribute('value')).toBe('3');                                                     // 19157\n         expect(longNumberLimitInput.getAttribute('value')).toBe('3');                                                 // 19158\n         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3]');                                          // 19159\n         expect(limitedLetters.getText()).toEqual('Output letters: abc');                                              // 19160\n         expect(limitedLongNumber.getText()).toEqual('Output long number: 234');                                       // 19161\n       });                                                                                                             // 19162\n                                                                                                                       // 19163\n       // There is a bug in safari and protractor that doesn't like the minus key                                      // 19164\n       // it('should update the output when -3 is entered', function() {                                               // 19165\n       //   numLimitInput.clear();                                                                                     // 19166\n       //   numLimitInput.sendKeys('-3');                                                                              // 19167\n       //   letterLimitInput.clear();                                                                                  // 19168\n       //   letterLimitInput.sendKeys('-3');                                                                           // 19169\n       //   longNumberLimitInput.clear();                                                                              // 19170\n       //   longNumberLimitInput.sendKeys('-3');                                                                       // 19171\n       //   expect(limitedNumbers.getText()).toEqual('Output numbers: [7,8,9]');                                       // 19172\n       //   expect(limitedLetters.getText()).toEqual('Output letters: ghi');                                           // 19173\n       //   expect(limitedLongNumber.getText()).toEqual('Output long number: 342');                                    // 19174\n       // });                                                                                                          // 19175\n                                                                                                                       // 19176\n       it('should not exceed the maximum size of input array', function() {                                            // 19177\n         numLimitInput.clear();                                                                                        // 19178\n         numLimitInput.sendKeys('100');                                                                                // 19179\n         letterLimitInput.clear();                                                                                     // 19180\n         letterLimitInput.sendKeys('100');                                                                             // 19181\n         longNumberLimitInput.clear();                                                                                 // 19182\n         longNumberLimitInput.sendKeys('100');                                                                         // 19183\n         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3,4,5,6,7,8,9]');                              // 19184\n         expect(limitedLetters.getText()).toEqual('Output letters: abcdefghi');                                        // 19185\n         expect(limitedLongNumber.getText()).toEqual('Output long number: 2345432342');                                // 19186\n       });                                                                                                             // 19187\n     </file>                                                                                                           // 19188\n   </example>                                                                                                          // 19189\n*/                                                                                                                     // 19190\nfunction limitToFilter() {                                                                                             // 19191\n  return function(input, limit, begin) {                                                                               // 19192\n    if (Math.abs(Number(limit)) === Infinity) {                                                                        // 19193\n      limit = Number(limit);                                                                                           // 19194\n    } else {                                                                                                           // 19195\n      limit = toInt(limit);                                                                                            // 19196\n    }                                                                                                                  // 19197\n    if (isNaN(limit)) return input;                                                                                    // 19198\n                                                                                                                       // 19199\n    if (isNumber(input)) input = input.toString();                                                                     // 19200\n    if (!isArray(input) && !isString(input)) return input;                                                             // 19201\n                                                                                                                       // 19202\n    begin = (!begin || isNaN(begin)) ? 0 : toInt(begin);                                                               // 19203\n    begin = (begin < 0 && begin >= -input.length) ? input.length + begin : begin;                                      // 19204\n                                                                                                                       // 19205\n    if (limit >= 0) {                                                                                                  // 19206\n      return input.slice(begin, begin + limit);                                                                        // 19207\n    } else {                                                                                                           // 19208\n      if (begin === 0) {                                                                                               // 19209\n        return input.slice(limit, input.length);                                                                       // 19210\n      } else {                                                                                                         // 19211\n        return input.slice(Math.max(0, begin + limit), begin);                                                         // 19212\n      }                                                                                                                // 19213\n    }                                                                                                                  // 19214\n  };                                                                                                                   // 19215\n}                                                                                                                      // 19216\n                                                                                                                       // 19217\n/**                                                                                                                    // 19218\n * @ngdoc filter                                                                                                       // 19219\n * @name orderBy                                                                                                       // 19220\n * @kind function                                                                                                      // 19221\n *                                                                                                                     // 19222\n * @description                                                                                                        // 19223\n * Orders a specified `array` by the `expression` predicate. It is ordered alphabetically                              // 19224\n * for strings and numerically for numbers. Note: if you notice numbers are not being sorted                           // 19225\n * as expected, make sure they are actually being saved as numbers and not strings.                                    // 19226\n *                                                                                                                     // 19227\n * @param {Array} array The array to sort.                                                                             // 19228\n * @param {function(*)|string|Array.<(function(*)|string)>=} expression A predicate to be                              // 19229\n *    used by the comparator to determine the order of elements.                                                       // 19230\n *                                                                                                                     // 19231\n *    Can be one of:                                                                                                   // 19232\n *                                                                                                                     // 19233\n *    - `function`: Getter function. The result of this function will be sorted using the                              // 19234\n *      `<`, `===`, `>` operator.                                                                                      // 19235\n *    - `string`: An Angular expression. The result of this expression is used to compare elements                     // 19236\n *      (for example `name` to sort by a property called `name` or `name.substr(0, 3)` to sort by                      // 19237\n *      3 first characters of a property called `name`). The result of a constant expression                           // 19238\n *      is interpreted as a property name to be used in comparisons (for example `\"special name\"`                      // 19239\n *      to sort object by the value of their `special name` property). An expression can be                            // 19240\n *      optionally prefixed with `+` or `-` to control ascending or descending sort order                              // 19241\n *      (for example, `+name` or `-name`). If no property is provided, (e.g. `'+'`) then the array                     // 19242\n *      element itself is used to compare where sorting.                                                               // 19243\n *    - `Array`: An array of function or string predicates. The first predicate in the array                           // 19244\n *      is used for sorting, but when two items are equivalent, the next predicate is used.                            // 19245\n *                                                                                                                     // 19246\n *    If the predicate is missing or empty then it defaults to `'+'`.                                                  // 19247\n *                                                                                                                     // 19248\n * @param {boolean=} reverse Reverse the order of the array.                                                           // 19249\n * @returns {Array} Sorted copy of the source array.                                                                   // 19250\n *                                                                                                                     // 19251\n *                                                                                                                     // 19252\n * @example                                                                                                            // 19253\n * The example below demonstrates a simple ngRepeat, where the data is sorted                                          // 19254\n * by age in descending order (predicate is set to `'-age'`).                                                          // 19255\n * `reverse` is not set, which means it defaults to `false`.                                                           // 19256\n   <example module=\"orderByExample\">                                                                                   // 19257\n     <file name=\"index.html\">                                                                                          // 19258\n       <script>                                                                                                        // 19259\n         angular.module('orderByExample', [])                                                                          // 19260\n           .controller('ExampleController', ['$scope', function($scope) {                                              // 19261\n             $scope.friends =                                                                                          // 19262\n                 [{name:'John', phone:'555-1212', age:10},                                                             // 19263\n                  {name:'Mary', phone:'555-9876', age:19},                                                             // 19264\n                  {name:'Mike', phone:'555-4321', age:21},                                                             // 19265\n                  {name:'Adam', phone:'555-5678', age:35},                                                             // 19266\n                  {name:'Julie', phone:'555-8765', age:29}];                                                           // 19267\n           }]);                                                                                                        // 19268\n       </script>                                                                                                       // 19269\n       <div ng-controller=\"ExampleController\">                                                                         // 19270\n         <table class=\"friend\">                                                                                        // 19271\n           <tr>                                                                                                        // 19272\n             <th>Name</th>                                                                                             // 19273\n             <th>Phone Number</th>                                                                                     // 19274\n             <th>Age</th>                                                                                              // 19275\n           </tr>                                                                                                       // 19276\n           <tr ng-repeat=\"friend in friends | orderBy:'-age'\">                                                         // 19277\n             <td>{{friend.name}}</td>                                                                                  // 19278\n             <td>{{friend.phone}}</td>                                                                                 // 19279\n             <td>{{friend.age}}</td>                                                                                   // 19280\n           </tr>                                                                                                       // 19281\n         </table>                                                                                                      // 19282\n       </div>                                                                                                          // 19283\n     </file>                                                                                                           // 19284\n   </example>                                                                                                          // 19285\n *                                                                                                                     // 19286\n * The predicate and reverse parameters can be controlled dynamically through scope properties,                        // 19287\n * as shown in the next example.                                                                                       // 19288\n * @example                                                                                                            // 19289\n   <example module=\"orderByExample\">                                                                                   // 19290\n     <file name=\"index.html\">                                                                                          // 19291\n       <script>                                                                                                        // 19292\n         angular.module('orderByExample', [])                                                                          // 19293\n           .controller('ExampleController', ['$scope', function($scope) {                                              // 19294\n             $scope.friends =                                                                                          // 19295\n                 [{name:'John', phone:'555-1212', age:10},                                                             // 19296\n                  {name:'Mary', phone:'555-9876', age:19},                                                             // 19297\n                  {name:'Mike', phone:'555-4321', age:21},                                                             // 19298\n                  {name:'Adam', phone:'555-5678', age:35},                                                             // 19299\n                  {name:'Julie', phone:'555-8765', age:29}];                                                           // 19300\n             $scope.predicate = 'age';                                                                                 // 19301\n             $scope.reverse = true;                                                                                    // 19302\n             $scope.order = function(predicate) {                                                                      // 19303\n               $scope.reverse = ($scope.predicate === predicate) ? !$scope.reverse : false;                            // 19304\n               $scope.predicate = predicate;                                                                           // 19305\n             };                                                                                                        // 19306\n           }]);                                                                                                        // 19307\n       </script>                                                                                                       // 19308\n       <style type=\"text/css\">                                                                                         // 19309\n         .sortorder:after {                                                                                            // 19310\n           content: '\\25b2';                                                                                           // 19311\n         }                                                                                                             // 19312\n         .sortorder.reverse:after {                                                                                    // 19313\n           content: '\\25bc';                                                                                           // 19314\n         }                                                                                                             // 19315\n       </style>                                                                                                        // 19316\n       <div ng-controller=\"ExampleController\">                                                                         // 19317\n         <pre>Sorting predicate = {{predicate}}; reverse = {{reverse}}</pre>                                           // 19318\n         <hr/>                                                                                                         // 19319\n         [ <a href=\"\" ng-click=\"predicate=''\">unsorted</a> ]                                                           // 19320\n         <table class=\"friend\">                                                                                        // 19321\n           <tr>                                                                                                        // 19322\n             <th>                                                                                                      // 19323\n               <a href=\"\" ng-click=\"order('name')\">Name</a>                                                            // 19324\n               <span class=\"sortorder\" ng-show=\"predicate === 'name'\" ng-class=\"{reverse:reverse}\"></span>             // 19325\n             </th>                                                                                                     // 19326\n             <th>                                                                                                      // 19327\n               <a href=\"\" ng-click=\"order('phone')\">Phone Number</a>                                                   // 19328\n               <span class=\"sortorder\" ng-show=\"predicate === 'phone'\" ng-class=\"{reverse:reverse}\"></span>            // 19329\n             </th>                                                                                                     // 19330\n             <th>                                                                                                      // 19331\n               <a href=\"\" ng-click=\"order('age')\">Age</a>                                                              // 19332\n               <span class=\"sortorder\" ng-show=\"predicate === 'age'\" ng-class=\"{reverse:reverse}\"></span>              // 19333\n             </th>                                                                                                     // 19334\n           </tr>                                                                                                       // 19335\n           <tr ng-repeat=\"friend in friends | orderBy:predicate:reverse\">                                              // 19336\n             <td>{{friend.name}}</td>                                                                                  // 19337\n             <td>{{friend.phone}}</td>                                                                                 // 19338\n             <td>{{friend.age}}</td>                                                                                   // 19339\n           </tr>                                                                                                       // 19340\n         </table>                                                                                                      // 19341\n       </div>                                                                                                          // 19342\n     </file>                                                                                                           // 19343\n   </example>                                                                                                          // 19344\n *                                                                                                                     // 19345\n * It's also possible to call the orderBy filter manually, by injecting `$filter`, retrieving the                      // 19346\n * filter routine with `$filter('orderBy')`, and calling the returned filter routine with the                          // 19347\n * desired parameters.                                                                                                 // 19348\n *                                                                                                                     // 19349\n * Example:                                                                                                            // 19350\n *                                                                                                                     // 19351\n * @example                                                                                                            // 19352\n  <example module=\"orderByExample\">                                                                                    // 19353\n    <file name=\"index.html\">                                                                                           // 19354\n      <div ng-controller=\"ExampleController\">                                                                          // 19355\n        <table class=\"friend\">                                                                                         // 19356\n          <tr>                                                                                                         // 19357\n            <th><a href=\"\" ng-click=\"reverse=false;order('name', false)\">Name</a>                                      // 19358\n              (<a href=\"\" ng-click=\"order('-name',false)\">^</a>)</th>                                                  // 19359\n            <th><a href=\"\" ng-click=\"reverse=!reverse;order('phone', reverse)\">Phone Number</a></th>                   // 19360\n            <th><a href=\"\" ng-click=\"reverse=!reverse;order('age',reverse)\">Age</a></th>                               // 19361\n          </tr>                                                                                                        // 19362\n          <tr ng-repeat=\"friend in friends\">                                                                           // 19363\n            <td>{{friend.name}}</td>                                                                                   // 19364\n            <td>{{friend.phone}}</td>                                                                                  // 19365\n            <td>{{friend.age}}</td>                                                                                    // 19366\n          </tr>                                                                                                        // 19367\n        </table>                                                                                                       // 19368\n      </div>                                                                                                           // 19369\n    </file>                                                                                                            // 19370\n                                                                                                                       // 19371\n    <file name=\"script.js\">                                                                                            // 19372\n      angular.module('orderByExample', [])                                                                             // 19373\n        .controller('ExampleController', ['$scope', '$filter', function($scope, $filter) {                             // 19374\n          var orderBy = $filter('orderBy');                                                                            // 19375\n          $scope.friends = [                                                                                           // 19376\n            { name: 'John',    phone: '555-1212',    age: 10 },                                                        // 19377\n            { name: 'Mary',    phone: '555-9876',    age: 19 },                                                        // 19378\n            { name: 'Mike',    phone: '555-4321',    age: 21 },                                                        // 19379\n            { name: 'Adam',    phone: '555-5678',    age: 35 },                                                        // 19380\n            { name: 'Julie',   phone: '555-8765',    age: 29 }                                                         // 19381\n          ];                                                                                                           // 19382\n          $scope.order = function(predicate, reverse) {                                                                // 19383\n            $scope.friends = orderBy($scope.friends, predicate, reverse);                                              // 19384\n          };                                                                                                           // 19385\n          $scope.order('-age',false);                                                                                  // 19386\n        }]);                                                                                                           // 19387\n    </file>                                                                                                            // 19388\n</example>                                                                                                             // 19389\n */                                                                                                                    // 19390\norderByFilter.$inject = ['$parse'];                                                                                    // 19391\nfunction orderByFilter($parse) {                                                                                       // 19392\n  return function(array, sortPredicate, reverseOrder) {                                                                // 19393\n                                                                                                                       // 19394\n    if (!(isArrayLike(array))) return array;                                                                           // 19395\n                                                                                                                       // 19396\n    if (!isArray(sortPredicate)) { sortPredicate = [sortPredicate]; }                                                  // 19397\n    if (sortPredicate.length === 0) { sortPredicate = ['+']; }                                                         // 19398\n                                                                                                                       // 19399\n    var predicates = processPredicates(sortPredicate, reverseOrder);                                                   // 19400\n    // Add a predicate at the end that evaluates to the element index. This makes the                                  // 19401\n    // sort stable as it works as a tie-breaker when all the input predicates cannot                                   // 19402\n    // distinguish between two elements.                                                                               // 19403\n    predicates.push({ get: function() { return {}; }, descending: reverseOrder ? -1 : 1});                             // 19404\n                                                                                                                       // 19405\n    // The next three lines are a version of a Swartzian Transform idiom from Perl                                     // 19406\n    // (sometimes called the Decorate-Sort-Undecorate idiom)                                                           // 19407\n    // See https://en.wikipedia.org/wiki/Schwartzian_transform                                                         // 19408\n    var compareValues = Array.prototype.map.call(array, getComparisonObject);                                          // 19409\n    compareValues.sort(doComparison);                                                                                  // 19410\n    array = compareValues.map(function(item) { return item.value; });                                                  // 19411\n                                                                                                                       // 19412\n    return array;                                                                                                      // 19413\n                                                                                                                       // 19414\n    function getComparisonObject(value, index) {                                                                       // 19415\n      return {                                                                                                         // 19416\n        value: value,                                                                                                  // 19417\n        predicateValues: predicates.map(function(predicate) {                                                          // 19418\n          return getPredicateValue(predicate.get(value), index);                                                       // 19419\n        })                                                                                                             // 19420\n      };                                                                                                               // 19421\n    }                                                                                                                  // 19422\n                                                                                                                       // 19423\n    function doComparison(v1, v2) {                                                                                    // 19424\n      var result = 0;                                                                                                  // 19425\n      for (var index=0, length = predicates.length; index < length; ++index) {                                         // 19426\n        result = compare(v1.predicateValues[index], v2.predicateValues[index]) * predicates[index].descending;         // 19427\n        if (result) break;                                                                                             // 19428\n      }                                                                                                                // 19429\n      return result;                                                                                                   // 19430\n    }                                                                                                                  // 19431\n  };                                                                                                                   // 19432\n                                                                                                                       // 19433\n  function processPredicates(sortPredicate, reverseOrder) {                                                            // 19434\n    reverseOrder = reverseOrder ? -1 : 1;                                                                              // 19435\n    return sortPredicate.map(function(predicate) {                                                                     // 19436\n      var descending = 1, get = identity;                                                                              // 19437\n                                                                                                                       // 19438\n      if (isFunction(predicate)) {                                                                                     // 19439\n        get = predicate;                                                                                               // 19440\n      } else if (isString(predicate)) {                                                                                // 19441\n        if ((predicate.charAt(0) == '+' || predicate.charAt(0) == '-')) {                                              // 19442\n          descending = predicate.charAt(0) == '-' ? -1 : 1;                                                            // 19443\n          predicate = predicate.substring(1);                                                                          // 19444\n        }                                                                                                              // 19445\n        if (predicate !== '') {                                                                                        // 19446\n          get = $parse(predicate);                                                                                     // 19447\n          if (get.constant) {                                                                                          // 19448\n            var key = get();                                                                                           // 19449\n            get = function(value) { return value[key]; };                                                              // 19450\n          }                                                                                                            // 19451\n        }                                                                                                              // 19452\n      }                                                                                                                // 19453\n      return { get: get, descending: descending * reverseOrder };                                                      // 19454\n    });                                                                                                                // 19455\n  }                                                                                                                    // 19456\n                                                                                                                       // 19457\n  function isPrimitive(value) {                                                                                        // 19458\n    switch (typeof value) {                                                                                            // 19459\n      case 'number': /* falls through */                                                                               // 19460\n      case 'boolean': /* falls through */                                                                              // 19461\n      case 'string':                                                                                                   // 19462\n        return true;                                                                                                   // 19463\n      default:                                                                                                         // 19464\n        return false;                                                                                                  // 19465\n    }                                                                                                                  // 19466\n  }                                                                                                                    // 19467\n                                                                                                                       // 19468\n  function objectValue(value, index) {                                                                                 // 19469\n    // If `valueOf` is a valid function use that                                                                       // 19470\n    if (typeof value.valueOf === 'function') {                                                                         // 19471\n      value = value.valueOf();                                                                                         // 19472\n      if (isPrimitive(value)) return value;                                                                            // 19473\n    }                                                                                                                  // 19474\n    // If `toString` is a valid function and not the one from `Object.prototype` use that                              // 19475\n    if (hasCustomToString(value)) {                                                                                    // 19476\n      value = value.toString();                                                                                        // 19477\n      if (isPrimitive(value)) return value;                                                                            // 19478\n    }                                                                                                                  // 19479\n    // We have a basic object so we use the position of the object in the collection                                   // 19480\n    return index;                                                                                                      // 19481\n  }                                                                                                                    // 19482\n                                                                                                                       // 19483\n  function getPredicateValue(value, index) {                                                                           // 19484\n    var type = typeof value;                                                                                           // 19485\n    if (value === null) {                                                                                              // 19486\n      type = 'string';                                                                                                 // 19487\n      value = 'null';                                                                                                  // 19488\n    } else if (type === 'string') {                                                                                    // 19489\n      value = value.toLowerCase();                                                                                     // 19490\n    } else if (type === 'object') {                                                                                    // 19491\n      value = objectValue(value, index);                                                                               // 19492\n    }                                                                                                                  // 19493\n    return { value: value, type: type };                                                                               // 19494\n  }                                                                                                                    // 19495\n                                                                                                                       // 19496\n  function compare(v1, v2) {                                                                                           // 19497\n    var result = 0;                                                                                                    // 19498\n    if (v1.type === v2.type) {                                                                                         // 19499\n      if (v1.value !== v2.value) {                                                                                     // 19500\n        result = v1.value < v2.value ? -1 : 1;                                                                         // 19501\n      }                                                                                                                // 19502\n    } else {                                                                                                           // 19503\n      result = v1.type < v2.type ? -1 : 1;                                                                             // 19504\n    }                                                                                                                  // 19505\n    return result;                                                                                                     // 19506\n  }                                                                                                                    // 19507\n}                                                                                                                      // 19508\n                                                                                                                       // 19509\nfunction ngDirective(directive) {                                                                                      // 19510\n  if (isFunction(directive)) {                                                                                         // 19511\n    directive = {                                                                                                      // 19512\n      link: directive                                                                                                  // 19513\n    };                                                                                                                 // 19514\n  }                                                                                                                    // 19515\n  directive.restrict = directive.restrict || 'AC';                                                                     // 19516\n  return valueFn(directive);                                                                                           // 19517\n}                                                                                                                      // 19518\n                                                                                                                       // 19519\n/**                                                                                                                    // 19520\n * @ngdoc directive                                                                                                    // 19521\n * @name a                                                                                                             // 19522\n * @restrict E                                                                                                         // 19523\n *                                                                                                                     // 19524\n * @description                                                                                                        // 19525\n * Modifies the default behavior of the html A tag so that the default action is prevented when                        // 19526\n * the href attribute is empty.                                                                                        // 19527\n *                                                                                                                     // 19528\n * This change permits the easy creation of action links with the `ngClick` directive                                  // 19529\n * without changing the location or causing page reloads, e.g.:                                                        // 19530\n * `<a href=\"\" ng-click=\"list.addItem()\">Add Item</a>`                                                                 // 19531\n */                                                                                                                    // 19532\nvar htmlAnchorDirective = valueFn({                                                                                    // 19533\n  restrict: 'E',                                                                                                       // 19534\n  compile: function(element, attr) {                                                                                   // 19535\n    if (!attr.href && !attr.xlinkHref) {                                                                               // 19536\n      return function(scope, element) {                                                                                // 19537\n        // If the linked element is not an anchor tag anymore, do nothing                                              // 19538\n        if (element[0].nodeName.toLowerCase() !== 'a') return;                                                         // 19539\n                                                                                                                       // 19540\n        // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.                          // 19541\n        var href = toString.call(element.prop('href')) === '[object SVGAnimatedString]' ?                              // 19542\n                   'xlink:href' : 'href';                                                                              // 19543\n        element.on('click', function(event) {                                                                          // 19544\n          // if we have no href url, then don't navigate anywhere.                                                     // 19545\n          if (!element.attr(href)) {                                                                                   // 19546\n            event.preventDefault();                                                                                    // 19547\n          }                                                                                                            // 19548\n        });                                                                                                            // 19549\n      };                                                                                                               // 19550\n    }                                                                                                                  // 19551\n  }                                                                                                                    // 19552\n});                                                                                                                    // 19553\n                                                                                                                       // 19554\n/**                                                                                                                    // 19555\n * @ngdoc directive                                                                                                    // 19556\n * @name ngHref                                                                                                        // 19557\n * @restrict A                                                                                                         // 19558\n * @priority 99                                                                                                        // 19559\n *                                                                                                                     // 19560\n * @description                                                                                                        // 19561\n * Using Angular markup like `{{hash}}` in an href attribute will                                                      // 19562\n * make the link go to the wrong URL if the user clicks it before                                                      // 19563\n * Angular has a chance to replace the `{{hash}}` markup with its                                                      // 19564\n * value. Until Angular replaces the markup the link will be broken                                                    // 19565\n * and will most likely return a 404 error. The `ngHref` directive                                                     // 19566\n * solves this problem.                                                                                                // 19567\n *                                                                                                                     // 19568\n * The wrong way to write it:                                                                                          // 19569\n * ```html                                                                                                             // 19570\n * <a href=\"http://www.gravatar.com/avatar/{{hash}}\">link1</a>                                                         // 19571\n * ```                                                                                                                 // 19572\n *                                                                                                                     // 19573\n * The correct way to write it:                                                                                        // 19574\n * ```html                                                                                                             // 19575\n * <a ng-href=\"http://www.gravatar.com/avatar/{{hash}}\">link1</a>                                                      // 19576\n * ```                                                                                                                 // 19577\n *                                                                                                                     // 19578\n * @element A                                                                                                          // 19579\n * @param {template} ngHref any string which can contain `{{}}` markup.                                                // 19580\n *                                                                                                                     // 19581\n * @example                                                                                                            // 19582\n * This example shows various combinations of `href`, `ng-href` and `ng-click` attributes                              // 19583\n * in links and their different behaviors:                                                                             // 19584\n    <example>                                                                                                          // 19585\n      <file name=\"index.html\">                                                                                         // 19586\n        <input ng-model=\"value\" /><br />                                                                               // 19587\n        <a id=\"link-1\" href ng-click=\"value = 1\">link 1</a> (link, don't reload)<br />                                 // 19588\n        <a id=\"link-2\" href=\"\" ng-click=\"value = 2\">link 2</a> (link, don't reload)<br />                              // 19589\n        <a id=\"link-3\" ng-href=\"/{{'123'}}\">link 3</a> (link, reload!)<br />                                           // 19590\n        <a id=\"link-4\" href=\"\" name=\"xx\" ng-click=\"value = 4\">anchor</a> (link, don't reload)<br />                    // 19591\n        <a id=\"link-5\" name=\"xxx\" ng-click=\"value = 5\">anchor</a> (no link)<br />                                      // 19592\n        <a id=\"link-6\" ng-href=\"{{value}}\">link</a> (link, change location)                                            // 19593\n      </file>                                                                                                          // 19594\n      <file name=\"protractor.js\" type=\"protractor\">                                                                    // 19595\n        it('should execute ng-click but not reload when href without value', function() {                              // 19596\n          element(by.id('link-1')).click();                                                                            // 19597\n          expect(element(by.model('value')).getAttribute('value')).toEqual('1');                                       // 19598\n          expect(element(by.id('link-1')).getAttribute('href')).toBe('');                                              // 19599\n        });                                                                                                            // 19600\n                                                                                                                       // 19601\n        it('should execute ng-click but not reload when href empty string', function() {                               // 19602\n          element(by.id('link-2')).click();                                                                            // 19603\n          expect(element(by.model('value')).getAttribute('value')).toEqual('2');                                       // 19604\n          expect(element(by.id('link-2')).getAttribute('href')).toBe('');                                              // 19605\n        });                                                                                                            // 19606\n                                                                                                                       // 19607\n        it('should execute ng-click and change url when ng-href specified', function() {                               // 19608\n          expect(element(by.id('link-3')).getAttribute('href')).toMatch(/\\/123$/);                                     // 19609\n                                                                                                                       // 19610\n          element(by.id('link-3')).click();                                                                            // 19611\n                                                                                                                       // 19612\n          // At this point, we navigate away from an Angular page, so we need                                          // 19613\n          // to use browser.driver to get the base webdriver.                                                          // 19614\n                                                                                                                       // 19615\n          browser.wait(function() {                                                                                    // 19616\n            return browser.driver.getCurrentUrl().then(function(url) {                                                 // 19617\n              return url.match(/\\/123$/);                                                                              // 19618\n            });                                                                                                        // 19619\n          }, 5000, 'page should navigate to /123');                                                                    // 19620\n        });                                                                                                            // 19621\n                                                                                                                       // 19622\n        it('should execute ng-click but not reload when href empty string and name specified', function() {            // 19623\n          element(by.id('link-4')).click();                                                                            // 19624\n          expect(element(by.model('value')).getAttribute('value')).toEqual('4');                                       // 19625\n          expect(element(by.id('link-4')).getAttribute('href')).toBe('');                                              // 19626\n        });                                                                                                            // 19627\n                                                                                                                       // 19628\n        it('should execute ng-click but not reload when no href but name specified', function() {                      // 19629\n          element(by.id('link-5')).click();                                                                            // 19630\n          expect(element(by.model('value')).getAttribute('value')).toEqual('5');                                       // 19631\n          expect(element(by.id('link-5')).getAttribute('href')).toBe(null);                                            // 19632\n        });                                                                                                            // 19633\n                                                                                                                       // 19634\n        it('should only change url when only ng-href', function() {                                                    // 19635\n          element(by.model('value')).clear();                                                                          // 19636\n          element(by.model('value')).sendKeys('6');                                                                    // 19637\n          expect(element(by.id('link-6')).getAttribute('href')).toMatch(/\\/6$/);                                       // 19638\n                                                                                                                       // 19639\n          element(by.id('link-6')).click();                                                                            // 19640\n                                                                                                                       // 19641\n          // At this point, we navigate away from an Angular page, so we need                                          // 19642\n          // to use browser.driver to get the base webdriver.                                                          // 19643\n          browser.wait(function() {                                                                                    // 19644\n            return browser.driver.getCurrentUrl().then(function(url) {                                                 // 19645\n              return url.match(/\\/6$/);                                                                                // 19646\n            });                                                                                                        // 19647\n          }, 5000, 'page should navigate to /6');                                                                      // 19648\n        });                                                                                                            // 19649\n      </file>                                                                                                          // 19650\n    </example>                                                                                                         // 19651\n */                                                                                                                    // 19652\n                                                                                                                       // 19653\n/**                                                                                                                    // 19654\n * @ngdoc directive                                                                                                    // 19655\n * @name ngSrc                                                                                                         // 19656\n * @restrict A                                                                                                         // 19657\n * @priority 99                                                                                                        // 19658\n *                                                                                                                     // 19659\n * @description                                                                                                        // 19660\n * Using Angular markup like `{{hash}}` in a `src` attribute doesn't                                                   // 19661\n * work right: The browser will fetch from the URL with the literal                                                    // 19662\n * text `{{hash}}` until Angular replaces the expression inside                                                        // 19663\n * `{{hash}}`. The `ngSrc` directive solves this problem.                                                              // 19664\n *                                                                                                                     // 19665\n * The buggy way to write it:                                                                                          // 19666\n * ```html                                                                                                             // 19667\n * <img src=\"http://www.gravatar.com/avatar/{{hash}}\" alt=\"Description\"/>                                              // 19668\n * ```                                                                                                                 // 19669\n *                                                                                                                     // 19670\n * The correct way to write it:                                                                                        // 19671\n * ```html                                                                                                             // 19672\n * <img ng-src=\"http://www.gravatar.com/avatar/{{hash}}\" alt=\"Description\" />                                          // 19673\n * ```                                                                                                                 // 19674\n *                                                                                                                     // 19675\n * @element IMG                                                                                                        // 19676\n * @param {template} ngSrc any string which can contain `{{}}` markup.                                                 // 19677\n */                                                                                                                    // 19678\n                                                                                                                       // 19679\n/**                                                                                                                    // 19680\n * @ngdoc directive                                                                                                    // 19681\n * @name ngSrcset                                                                                                      // 19682\n * @restrict A                                                                                                         // 19683\n * @priority 99                                                                                                        // 19684\n *                                                                                                                     // 19685\n * @description                                                                                                        // 19686\n * Using Angular markup like `{{hash}}` in a `srcset` attribute doesn't                                                // 19687\n * work right: The browser will fetch from the URL with the literal                                                    // 19688\n * text `{{hash}}` until Angular replaces the expression inside                                                        // 19689\n * `{{hash}}`. The `ngSrcset` directive solves this problem.                                                           // 19690\n *                                                                                                                     // 19691\n * The buggy way to write it:                                                                                          // 19692\n * ```html                                                                                                             // 19693\n * <img srcset=\"http://www.gravatar.com/avatar/{{hash}} 2x\" alt=\"Description\"/>                                        // 19694\n * ```                                                                                                                 // 19695\n *                                                                                                                     // 19696\n * The correct way to write it:                                                                                        // 19697\n * ```html                                                                                                             // 19698\n * <img ng-srcset=\"http://www.gravatar.com/avatar/{{hash}} 2x\" alt=\"Description\" />                                    // 19699\n * ```                                                                                                                 // 19700\n *                                                                                                                     // 19701\n * @element IMG                                                                                                        // 19702\n * @param {template} ngSrcset any string which can contain `{{}}` markup.                                              // 19703\n */                                                                                                                    // 19704\n                                                                                                                       // 19705\n/**                                                                                                                    // 19706\n * @ngdoc directive                                                                                                    // 19707\n * @name ngDisabled                                                                                                    // 19708\n * @restrict A                                                                                                         // 19709\n * @priority 100                                                                                                       // 19710\n *                                                                                                                     // 19711\n * @description                                                                                                        // 19712\n *                                                                                                                     // 19713\n * This directive sets the `disabled` attribute on the element if the                                                  // 19714\n * {@link guide/expression expression} inside `ngDisabled` evaluates to truthy.                                        // 19715\n *                                                                                                                     // 19716\n * A special directive is necessary because we cannot use interpolation inside the `disabled`                          // 19717\n * attribute.  The following example would make the button enabled on Chrome/Firefox                                   // 19718\n * but not on older IEs:                                                                                               // 19719\n *                                                                                                                     // 19720\n * ```html                                                                                                             // 19721\n * <!-- See below for an example of ng-disabled being used correctly -->                                               // 19722\n * <div ng-init=\"isDisabled = false\">                                                                                  // 19723\n *  <button disabled=\"{{isDisabled}}\">Disabled</button>                                                                // 19724\n * </div>                                                                                                              // 19725\n * ```                                                                                                                 // 19726\n *                                                                                                                     // 19727\n * This is because the HTML specification does not require browsers to preserve the values of                          // 19728\n * boolean attributes such as `disabled` (Their presence means true and their absence means false.)                    // 19729\n * If we put an Angular interpolation expression into such an attribute then the                                       // 19730\n * binding information would be lost when the browser removes the attribute.                                           // 19731\n *                                                                                                                     // 19732\n * @example                                                                                                            // 19733\n    <example>                                                                                                          // 19734\n      <file name=\"index.html\">                                                                                         // 19735\n        <label>Click me to toggle: <input type=\"checkbox\" ng-model=\"checked\"></label><br/>                             // 19736\n        <button ng-model=\"button\" ng-disabled=\"checked\">Button</button>                                                // 19737\n      </file>                                                                                                          // 19738\n      <file name=\"protractor.js\" type=\"protractor\">                                                                    // 19739\n        it('should toggle button', function() {                                                                        // 19740\n          expect(element(by.css('button')).getAttribute('disabled')).toBeFalsy();                                      // 19741\n          element(by.model('checked')).click();                                                                        // 19742\n          expect(element(by.css('button')).getAttribute('disabled')).toBeTruthy();                                     // 19743\n        });                                                                                                            // 19744\n      </file>                                                                                                          // 19745\n    </example>                                                                                                         // 19746\n *                                                                                                                     // 19747\n * @element INPUT                                                                                                      // 19748\n * @param {expression} ngDisabled If the {@link guide/expression expression} is truthy,                                // 19749\n *     then the `disabled` attribute will be set on the element                                                        // 19750\n */                                                                                                                    // 19751\n                                                                                                                       // 19752\n                                                                                                                       // 19753\n/**                                                                                                                    // 19754\n * @ngdoc directive                                                                                                    // 19755\n * @name ngChecked                                                                                                     // 19756\n * @restrict A                                                                                                         // 19757\n * @priority 100                                                                                                       // 19758\n *                                                                                                                     // 19759\n * @description                                                                                                        // 19760\n * Sets the `checked` attribute on the element, if the expression inside `ngChecked` is truthy.                        // 19761\n *                                                                                                                     // 19762\n * Note that this directive should not be used together with {@link ngModel `ngModel`},                                // 19763\n * as this can lead to unexpected behavior.                                                                            // 19764\n *                                                                                                                     // 19765\n * ### Why do we need `ngChecked`?                                                                                     // 19766\n *                                                                                                                     // 19767\n * The HTML specification does not require browsers to preserve the values of boolean attributes                       // 19768\n * such as checked. (Their presence means true and their absence means false.)                                         // 19769\n * If we put an Angular interpolation expression into such an attribute then the                                       // 19770\n * binding information would be lost when the browser removes the attribute.                                           // 19771\n * The `ngChecked` directive solves this problem for the `checked` attribute.                                          // 19772\n * This complementary directive is not removed by the browser and so provides                                          // 19773\n * a permanent reliable place to store the binding information.                                                        // 19774\n * @example                                                                                                            // 19775\n    <example>                                                                                                          // 19776\n      <file name=\"index.html\">                                                                                         // 19777\n        <label>Check me to check both: <input type=\"checkbox\" ng-model=\"master\"></label><br/>                          // 19778\n        <input id=\"checkSlave\" type=\"checkbox\" ng-checked=\"master\" aria-label=\"Slave input\">                           // 19779\n      </file>                                                                                                          // 19780\n      <file name=\"protractor.js\" type=\"protractor\">                                                                    // 19781\n        it('should check both checkBoxes', function() {                                                                // 19782\n          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeFalsy();                                    // 19783\n          element(by.model('master')).click();                                                                         // 19784\n          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeTruthy();                                   // 19785\n        });                                                                                                            // 19786\n      </file>                                                                                                          // 19787\n    </example>                                                                                                         // 19788\n *                                                                                                                     // 19789\n * @element INPUT                                                                                                      // 19790\n * @param {expression} ngChecked If the {@link guide/expression expression} is truthy,                                 // 19791\n *     then the `checked` attribute will be set on the element                                                         // 19792\n */                                                                                                                    // 19793\n                                                                                                                       // 19794\n                                                                                                                       // 19795\n/**                                                                                                                    // 19796\n * @ngdoc directive                                                                                                    // 19797\n * @name ngReadonly                                                                                                    // 19798\n * @restrict A                                                                                                         // 19799\n * @priority 100                                                                                                       // 19800\n *                                                                                                                     // 19801\n * @description                                                                                                        // 19802\n * The HTML specification does not require browsers to preserve the values of boolean attributes                       // 19803\n * such as readonly. (Their presence means true and their absence means false.)                                        // 19804\n * If we put an Angular interpolation expression into such an attribute then the                                       // 19805\n * binding information would be lost when the browser removes the attribute.                                           // 19806\n * The `ngReadonly` directive solves this problem for the `readonly` attribute.                                        // 19807\n * This complementary directive is not removed by the browser and so provides                                          // 19808\n * a permanent reliable place to store the binding information.                                                        // 19809\n * @example                                                                                                            // 19810\n    <example>                                                                                                          // 19811\n      <file name=\"index.html\">                                                                                         // 19812\n        <label>Check me to make text readonly: <input type=\"checkbox\" ng-model=\"checked\"></label><br/>                 // 19813\n        <input type=\"text\" ng-readonly=\"checked\" value=\"I'm Angular\" aria-label=\"Readonly field\" />                    // 19814\n      </file>                                                                                                          // 19815\n      <file name=\"protractor.js\" type=\"protractor\">                                                                    // 19816\n        it('should toggle readonly attr', function() {                                                                 // 19817\n          expect(element(by.css('[type=\"text\"]')).getAttribute('readonly')).toBeFalsy();                               // 19818\n          element(by.model('checked')).click();                                                                        // 19819\n          expect(element(by.css('[type=\"text\"]')).getAttribute('readonly')).toBeTruthy();                              // 19820\n        });                                                                                                            // 19821\n      </file>                                                                                                          // 19822\n    </example>                                                                                                         // 19823\n *                                                                                                                     // 19824\n * @element INPUT                                                                                                      // 19825\n * @param {expression} ngReadonly If the {@link guide/expression expression} is truthy,                                // 19826\n *     then special attribute \"readonly\" will be set on the element                                                    // 19827\n */                                                                                                                    // 19828\n                                                                                                                       // 19829\n                                                                                                                       // 19830\n/**                                                                                                                    // 19831\n * @ngdoc directive                                                                                                    // 19832\n * @name ngSelected                                                                                                    // 19833\n * @restrict A                                                                                                         // 19834\n * @priority 100                                                                                                       // 19835\n *                                                                                                                     // 19836\n * @description                                                                                                        // 19837\n * The HTML specification does not require browsers to preserve the values of boolean attributes                       // 19838\n * such as selected. (Their presence means true and their absence means false.)                                        // 19839\n * If we put an Angular interpolation expression into such an attribute then the                                       // 19840\n * binding information would be lost when the browser removes the attribute.                                           // 19841\n * The `ngSelected` directive solves this problem for the `selected` attribute.                                        // 19842\n * This complementary directive is not removed by the browser and so provides                                          // 19843\n * a permanent reliable place to store the binding information.                                                        // 19844\n *                                                                                                                     // 19845\n * @example                                                                                                            // 19846\n    <example>                                                                                                          // 19847\n      <file name=\"index.html\">                                                                                         // 19848\n        <label>Check me to select: <input type=\"checkbox\" ng-model=\"selected\"></label><br/>                            // 19849\n        <select aria-label=\"ngSelected demo\">                                                                          // 19850\n          <option>Hello!</option>                                                                                      // 19851\n          <option id=\"greet\" ng-selected=\"selected\">Greetings!</option>                                                // 19852\n        </select>                                                                                                      // 19853\n      </file>                                                                                                          // 19854\n      <file name=\"protractor.js\" type=\"protractor\">                                                                    // 19855\n        it('should select Greetings!', function() {                                                                    // 19856\n          expect(element(by.id('greet')).getAttribute('selected')).toBeFalsy();                                        // 19857\n          element(by.model('selected')).click();                                                                       // 19858\n          expect(element(by.id('greet')).getAttribute('selected')).toBeTruthy();                                       // 19859\n        });                                                                                                            // 19860\n      </file>                                                                                                          // 19861\n    </example>                                                                                                         // 19862\n *                                                                                                                     // 19863\n * @element OPTION                                                                                                     // 19864\n * @param {expression} ngSelected If the {@link guide/expression expression} is truthy,                                // 19865\n *     then special attribute \"selected\" will be set on the element                                                    // 19866\n */                                                                                                                    // 19867\n                                                                                                                       // 19868\n/**                                                                                                                    // 19869\n * @ngdoc directive                                                                                                    // 19870\n * @name ngOpen                                                                                                        // 19871\n * @restrict A                                                                                                         // 19872\n * @priority 100                                                                                                       // 19873\n *                                                                                                                     // 19874\n * @description                                                                                                        // 19875\n * The HTML specification does not require browsers to preserve the values of boolean attributes                       // 19876\n * such as open. (Their presence means true and their absence means false.)                                            // 19877\n * If we put an Angular interpolation expression into such an attribute then the                                       // 19878\n * binding information would be lost when the browser removes the attribute.                                           // 19879\n * The `ngOpen` directive solves this problem for the `open` attribute.                                                // 19880\n * This complementary directive is not removed by the browser and so provides                                          // 19881\n * a permanent reliable place to store the binding information.                                                        // 19882\n * @example                                                                                                            // 19883\n     <example>                                                                                                         // 19884\n       <file name=\"index.html\">                                                                                        // 19885\n         <label>Check me check multiple: <input type=\"checkbox\" ng-model=\"open\"></label><br/>                          // 19886\n         <details id=\"details\" ng-open=\"open\">                                                                         // 19887\n            <summary>Show/Hide me</summary>                                                                            // 19888\n         </details>                                                                                                    // 19889\n       </file>                                                                                                         // 19890\n       <file name=\"protractor.js\" type=\"protractor\">                                                                   // 19891\n         it('should toggle open', function() {                                                                         // 19892\n           expect(element(by.id('details')).getAttribute('open')).toBeFalsy();                                         // 19893\n           element(by.model('open')).click();                                                                          // 19894\n           expect(element(by.id('details')).getAttribute('open')).toBeTruthy();                                        // 19895\n         });                                                                                                           // 19896\n       </file>                                                                                                         // 19897\n     </example>                                                                                                        // 19898\n *                                                                                                                     // 19899\n * @element DETAILS                                                                                                    // 19900\n * @param {expression} ngOpen If the {@link guide/expression expression} is truthy,                                    // 19901\n *     then special attribute \"open\" will be set on the element                                                        // 19902\n */                                                                                                                    // 19903\n                                                                                                                       // 19904\nvar ngAttributeAliasDirectives = {};                                                                                   // 19905\n                                                                                                                       // 19906\n// boolean attrs are evaluated                                                                                         // 19907\nforEach(BOOLEAN_ATTR, function(propName, attrName) {                                                                   // 19908\n  // binding to multiple is not supported                                                                              // 19909\n  if (propName == \"multiple\") return;                                                                                  // 19910\n                                                                                                                       // 19911\n  function defaultLinkFn(scope, element, attr) {                                                                       // 19912\n    scope.$watch(attr[normalized], function ngBooleanAttrWatchAction(value) {                                          // 19913\n      attr.$set(attrName, !!value);                                                                                    // 19914\n    });                                                                                                                // 19915\n  }                                                                                                                    // 19916\n                                                                                                                       // 19917\n  var normalized = directiveNormalize('ng-' + attrName);                                                               // 19918\n  var linkFn = defaultLinkFn;                                                                                          // 19919\n                                                                                                                       // 19920\n  if (propName === 'checked') {                                                                                        // 19921\n    linkFn = function(scope, element, attr) {                                                                          // 19922\n      // ensuring ngChecked doesn't interfere with ngModel when both are set on the same input                         // 19923\n      if (attr.ngModel !== attr[normalized]) {                                                                         // 19924\n        defaultLinkFn(scope, element, attr);                                                                           // 19925\n      }                                                                                                                // 19926\n    };                                                                                                                 // 19927\n  }                                                                                                                    // 19928\n                                                                                                                       // 19929\n  ngAttributeAliasDirectives[normalized] = function() {                                                                // 19930\n    return {                                                                                                           // 19931\n      restrict: 'A',                                                                                                   // 19932\n      priority: 100,                                                                                                   // 19933\n      link: linkFn                                                                                                     // 19934\n    };                                                                                                                 // 19935\n  };                                                                                                                   // 19936\n});                                                                                                                    // 19937\n                                                                                                                       // 19938\n// aliased input attrs are evaluated                                                                                   // 19939\nforEach(ALIASED_ATTR, function(htmlAttr, ngAttr) {                                                                     // 19940\n  ngAttributeAliasDirectives[ngAttr] = function() {                                                                    // 19941\n    return {                                                                                                           // 19942\n      priority: 100,                                                                                                   // 19943\n      link: function(scope, element, attr) {                                                                           // 19944\n        //special case ngPattern when a literal regular expression value                                               // 19945\n        //is used as the expression (this way we don't have to watch anything).                                        // 19946\n        if (ngAttr === \"ngPattern\" && attr.ngPattern.charAt(0) == \"/\") {                                               // 19947\n          var match = attr.ngPattern.match(REGEX_STRING_REGEXP);                                                       // 19948\n          if (match) {                                                                                                 // 19949\n            attr.$set(\"ngPattern\", new RegExp(match[1], match[2]));                                                    // 19950\n            return;                                                                                                    // 19951\n          }                                                                                                            // 19952\n        }                                                                                                              // 19953\n                                                                                                                       // 19954\n        scope.$watch(attr[ngAttr], function ngAttrAliasWatchAction(value) {                                            // 19955\n          attr.$set(ngAttr, value);                                                                                    // 19956\n        });                                                                                                            // 19957\n      }                                                                                                                // 19958\n    };                                                                                                                 // 19959\n  };                                                                                                                   // 19960\n});                                                                                                                    // 19961\n                                                                                                                       // 19962\n// ng-src, ng-srcset, ng-href are interpolated                                                                         // 19963\nforEach(['src', 'srcset', 'href'], function(attrName) {                                                                // 19964\n  var normalized = directiveNormalize('ng-' + attrName);                                                               // 19965\n  ngAttributeAliasDirectives[normalized] = function() {                                                                // 19966\n    return {                                                                                                           // 19967\n      priority: 99, // it needs to run after the attributes are interpolated                                           // 19968\n      link: function(scope, element, attr) {                                                                           // 19969\n        var propName = attrName,                                                                                       // 19970\n            name = attrName;                                                                                           // 19971\n                                                                                                                       // 19972\n        if (attrName === 'href' &&                                                                                     // 19973\n            toString.call(element.prop('href')) === '[object SVGAnimatedString]') {                                    // 19974\n          name = 'xlinkHref';                                                                                          // 19975\n          attr.$attr[name] = 'xlink:href';                                                                             // 19976\n          propName = null;                                                                                             // 19977\n        }                                                                                                              // 19978\n                                                                                                                       // 19979\n        attr.$observe(normalized, function(value) {                                                                    // 19980\n          if (!value) {                                                                                                // 19981\n            if (attrName === 'href') {                                                                                 // 19982\n              attr.$set(name, null);                                                                                   // 19983\n            }                                                                                                          // 19984\n            return;                                                                                                    // 19985\n          }                                                                                                            // 19986\n                                                                                                                       // 19987\n          attr.$set(name, value);                                                                                      // 19988\n                                                                                                                       // 19989\n          // on IE, if \"ng:src\" directive declaration is used and \"src\" attribute doesn't exist                        // 19990\n          // then calling element.setAttribute('src', 'foo') doesn't do anything, so we need                           // 19991\n          // to set the property as well to achieve the desired effect.                                                // 19992\n          // we use attr[attrName] value since $set can sanitize the url.                                              // 19993\n          if (msie && propName) element.prop(propName, attr[name]);                                                    // 19994\n        });                                                                                                            // 19995\n      }                                                                                                                // 19996\n    };                                                                                                                 // 19997\n  };                                                                                                                   // 19998\n});                                                                                                                    // 19999\n                                                                                                                       // 20000\n/* global -nullFormCtrl, -SUBMITTED_CLASS, addSetValidityMethod: true                                                  // 20001\n */                                                                                                                    // 20002\nvar nullFormCtrl = {                                                                                                   // 20003\n  $addControl: noop,                                                                                                   // 20004\n  $$renameControl: nullFormRenameControl,                                                                              // 20005\n  $removeControl: noop,                                                                                                // 20006\n  $setValidity: noop,                                                                                                  // 20007\n  $setDirty: noop,                                                                                                     // 20008\n  $setPristine: noop,                                                                                                  // 20009\n  $setSubmitted: noop                                                                                                  // 20010\n},                                                                                                                     // 20011\nSUBMITTED_CLASS = 'ng-submitted';                                                                                      // 20012\n                                                                                                                       // 20013\nfunction nullFormRenameControl(control, name) {                                                                        // 20014\n  control.$name = name;                                                                                                // 20015\n}                                                                                                                      // 20016\n                                                                                                                       // 20017\n/**                                                                                                                    // 20018\n * @ngdoc type                                                                                                         // 20019\n * @name form.FormController                                                                                           // 20020\n *                                                                                                                     // 20021\n * @property {boolean} $pristine True if user has not interacted with the form yet.                                    // 20022\n * @property {boolean} $dirty True if user has already interacted with the form.                                       // 20023\n * @property {boolean} $valid True if all of the containing forms and controls are valid.                              // 20024\n * @property {boolean} $invalid True if at least one containing control or form is invalid.                            // 20025\n * @property {boolean} $pending True if at least one containing control or form is pending.                            // 20026\n * @property {boolean} $submitted True if user has submitted the form even if its invalid.                             // 20027\n *                                                                                                                     // 20028\n * @property {Object} $error Is an object hash, containing references to controls or                                   // 20029\n *  forms with failing validators, where:                                                                              // 20030\n *                                                                                                                     // 20031\n *  - keys are validation tokens (error names),                                                                        // 20032\n *  - values are arrays of controls or forms that have a failing validator for given error name.                       // 20033\n *                                                                                                                     // 20034\n *  Built-in validation tokens:                                                                                        // 20035\n *                                                                                                                     // 20036\n *  - `email`                                                                                                          // 20037\n *  - `max`                                                                                                            // 20038\n *  - `maxlength`                                                                                                      // 20039\n *  - `min`                                                                                                            // 20040\n *  - `minlength`                                                                                                      // 20041\n *  - `number`                                                                                                         // 20042\n *  - `pattern`                                                                                                        // 20043\n *  - `required`                                                                                                       // 20044\n *  - `url`                                                                                                            // 20045\n *  - `date`                                                                                                           // 20046\n *  - `datetimelocal`                                                                                                  // 20047\n *  - `time`                                                                                                           // 20048\n *  - `week`                                                                                                           // 20049\n *  - `month`                                                                                                          // 20050\n *                                                                                                                     // 20051\n * @description                                                                                                        // 20052\n * `FormController` keeps track of all its controls and nested forms as well as the state of them,                     // 20053\n * such as being valid/invalid or dirty/pristine.                                                                      // 20054\n *                                                                                                                     // 20055\n * Each {@link ng.directive:form form} directive creates an instance                                                   // 20056\n * of `FormController`.                                                                                                // 20057\n *                                                                                                                     // 20058\n */                                                                                                                    // 20059\n//asks for $scope to fool the BC controller module                                                                     // 20060\nFormController.$inject = ['$element', '$attrs', '$scope', '$animate', '$interpolate'];                                 // 20061\nfunction FormController(element, attrs, $scope, $animate, $interpolate) {                                              // 20062\n  var form = this,                                                                                                     // 20063\n      controls = [];                                                                                                   // 20064\n                                                                                                                       // 20065\n  // init state                                                                                                        // 20066\n  form.$error = {};                                                                                                    // 20067\n  form.$$success = {};                                                                                                 // 20068\n  form.$pending = undefined;                                                                                           // 20069\n  form.$name = $interpolate(attrs.name || attrs.ngForm || '')($scope);                                                 // 20070\n  form.$dirty = false;                                                                                                 // 20071\n  form.$pristine = true;                                                                                               // 20072\n  form.$valid = true;                                                                                                  // 20073\n  form.$invalid = false;                                                                                               // 20074\n  form.$submitted = false;                                                                                             // 20075\n  form.$$parentForm = nullFormCtrl;                                                                                    // 20076\n                                                                                                                       // 20077\n  /**                                                                                                                  // 20078\n   * @ngdoc method                                                                                                     // 20079\n   * @name form.FormController#$rollbackViewValue                                                                      // 20080\n   *                                                                                                                   // 20081\n   * @description                                                                                                      // 20082\n   * Rollback all form controls pending updates to the `$modelValue`.                                                  // 20083\n   *                                                                                                                   // 20084\n   * Updates may be pending by a debounced event or because the input is waiting for a some future                     // 20085\n   * event defined in `ng-model-options`. This method is typically needed by the reset button of                       // 20086\n   * a form that uses `ng-model-options` to pend updates.                                                              // 20087\n   */                                                                                                                  // 20088\n  form.$rollbackViewValue = function() {                                                                               // 20089\n    forEach(controls, function(control) {                                                                              // 20090\n      control.$rollbackViewValue();                                                                                    // 20091\n    });                                                                                                                // 20092\n  };                                                                                                                   // 20093\n                                                                                                                       // 20094\n  /**                                                                                                                  // 20095\n   * @ngdoc method                                                                                                     // 20096\n   * @name form.FormController#$commitViewValue                                                                        // 20097\n   *                                                                                                                   // 20098\n   * @description                                                                                                      // 20099\n   * Commit all form controls pending updates to the `$modelValue`.                                                    // 20100\n   *                                                                                                                   // 20101\n   * Updates may be pending by a debounced event or because the input is waiting for a some future                     // 20102\n   * event defined in `ng-model-options`. This method is rarely needed as `NgModelController`                          // 20103\n   * usually handles calling this in response to input events.                                                         // 20104\n   */                                                                                                                  // 20105\n  form.$commitViewValue = function() {                                                                                 // 20106\n    forEach(controls, function(control) {                                                                              // 20107\n      control.$commitViewValue();                                                                                      // 20108\n    });                                                                                                                // 20109\n  };                                                                                                                   // 20110\n                                                                                                                       // 20111\n  /**                                                                                                                  // 20112\n   * @ngdoc method                                                                                                     // 20113\n   * @name form.FormController#$addControl                                                                             // 20114\n   * @param {object} control control object, either a {@link form.FormController} or an                                // 20115\n   * {@link ngModel.NgModelController}                                                                                 // 20116\n   *                                                                                                                   // 20117\n   * @description                                                                                                      // 20118\n   * Register a control with the form. Input elements using ngModelController do this automatically                    // 20119\n   * when they are linked.                                                                                             // 20120\n   *                                                                                                                   // 20121\n   * Note that the current state of the control will not be reflected on the new parent form. This                     // 20122\n   * is not an issue with normal use, as freshly compiled and linked controls are in a `$pristine`                     // 20123\n   * state.                                                                                                            // 20124\n   *                                                                                                                   // 20125\n   * However, if the method is used programmatically, for example by adding dynamically created controls,              // 20126\n   * or controls that have been previously removed without destroying their corresponding DOM element,                 // 20127\n   * it's the developers responsiblity to make sure the current state propagates to the parent form.                   // 20128\n   *                                                                                                                   // 20129\n   * For example, if an input control is added that is already `$dirty` and has `$error` properties,                   // 20130\n   * calling `$setDirty()` and `$validate()` afterwards will propagate the state to the parent form.                   // 20131\n   */                                                                                                                  // 20132\n  form.$addControl = function(control) {                                                                               // 20133\n    // Breaking change - before, inputs whose name was \"hasOwnProperty\" were quietly ignored                           // 20134\n    // and not added to the scope.  Now we throw an error.                                                             // 20135\n    assertNotHasOwnProperty(control.$name, 'input');                                                                   // 20136\n    controls.push(control);                                                                                            // 20137\n                                                                                                                       // 20138\n    if (control.$name) {                                                                                               // 20139\n      form[control.$name] = control;                                                                                   // 20140\n    }                                                                                                                  // 20141\n                                                                                                                       // 20142\n    control.$$parentForm = form;                                                                                       // 20143\n  };                                                                                                                   // 20144\n                                                                                                                       // 20145\n  // Private API: rename a form control                                                                                // 20146\n  form.$$renameControl = function(control, newName) {                                                                  // 20147\n    var oldName = control.$name;                                                                                       // 20148\n                                                                                                                       // 20149\n    if (form[oldName] === control) {                                                                                   // 20150\n      delete form[oldName];                                                                                            // 20151\n    }                                                                                                                  // 20152\n    form[newName] = control;                                                                                           // 20153\n    control.$name = newName;                                                                                           // 20154\n  };                                                                                                                   // 20155\n                                                                                                                       // 20156\n  /**                                                                                                                  // 20157\n   * @ngdoc method                                                                                                     // 20158\n   * @name form.FormController#$removeControl                                                                          // 20159\n   * @param {object} control control object, either a {@link form.FormController} or an                                // 20160\n   * {@link ngModel.NgModelController}                                                                                 // 20161\n   *                                                                                                                   // 20162\n   * @description                                                                                                      // 20163\n   * Deregister a control from the form.                                                                               // 20164\n   *                                                                                                                   // 20165\n   * Input elements using ngModelController do this automatically when they are destroyed.                             // 20166\n   *                                                                                                                   // 20167\n   * Note that only the removed control's validation state (`$errors`etc.) will be removed from the                    // 20168\n   * form. `$dirty`, `$submitted` states will not be changed, because the expected behavior can be                     // 20169\n   * different from case to case. For example, removing the only `$dirty` control from a form may or                   // 20170\n   * may not mean that the form is still `$dirty`.                                                                     // 20171\n   */                                                                                                                  // 20172\n  form.$removeControl = function(control) {                                                                            // 20173\n    if (control.$name && form[control.$name] === control) {                                                            // 20174\n      delete form[control.$name];                                                                                      // 20175\n    }                                                                                                                  // 20176\n    forEach(form.$pending, function(value, name) {                                                                     // 20177\n      form.$setValidity(name, null, control);                                                                          // 20178\n    });                                                                                                                // 20179\n    forEach(form.$error, function(value, name) {                                                                       // 20180\n      form.$setValidity(name, null, control);                                                                          // 20181\n    });                                                                                                                // 20182\n    forEach(form.$$success, function(value, name) {                                                                    // 20183\n      form.$setValidity(name, null, control);                                                                          // 20184\n    });                                                                                                                // 20185\n                                                                                                                       // 20186\n    arrayRemove(controls, control);                                                                                    // 20187\n    control.$$parentForm = nullFormCtrl;                                                                               // 20188\n  };                                                                                                                   // 20189\n                                                                                                                       // 20190\n                                                                                                                       // 20191\n  /**                                                                                                                  // 20192\n   * @ngdoc method                                                                                                     // 20193\n   * @name form.FormController#$setValidity                                                                            // 20194\n   *                                                                                                                   // 20195\n   * @description                                                                                                      // 20196\n   * Sets the validity of a form control.                                                                              // 20197\n   *                                                                                                                   // 20198\n   * This method will also propagate to parent forms.                                                                  // 20199\n   */                                                                                                                  // 20200\n  addSetValidityMethod({                                                                                               // 20201\n    ctrl: this,                                                                                                        // 20202\n    $element: element,                                                                                                 // 20203\n    set: function(object, property, controller) {                                                                      // 20204\n      var list = object[property];                                                                                     // 20205\n      if (!list) {                                                                                                     // 20206\n        object[property] = [controller];                                                                               // 20207\n      } else {                                                                                                         // 20208\n        var index = list.indexOf(controller);                                                                          // 20209\n        if (index === -1) {                                                                                            // 20210\n          list.push(controller);                                                                                       // 20211\n        }                                                                                                              // 20212\n      }                                                                                                                // 20213\n    },                                                                                                                 // 20214\n    unset: function(object, property, controller) {                                                                    // 20215\n      var list = object[property];                                                                                     // 20216\n      if (!list) {                                                                                                     // 20217\n        return;                                                                                                        // 20218\n      }                                                                                                                // 20219\n      arrayRemove(list, controller);                                                                                   // 20220\n      if (list.length === 0) {                                                                                         // 20221\n        delete object[property];                                                                                       // 20222\n      }                                                                                                                // 20223\n    },                                                                                                                 // 20224\n    $animate: $animate                                                                                                 // 20225\n  });                                                                                                                  // 20226\n                                                                                                                       // 20227\n  /**                                                                                                                  // 20228\n   * @ngdoc method                                                                                                     // 20229\n   * @name form.FormController#$setDirty                                                                               // 20230\n   *                                                                                                                   // 20231\n   * @description                                                                                                      // 20232\n   * Sets the form to a dirty state.                                                                                   // 20233\n   *                                                                                                                   // 20234\n   * This method can be called to add the 'ng-dirty' class and set the form to a dirty                                 // 20235\n   * state (ng-dirty class). This method will also propagate to parent forms.                                          // 20236\n   */                                                                                                                  // 20237\n  form.$setDirty = function() {                                                                                        // 20238\n    $animate.removeClass(element, PRISTINE_CLASS);                                                                     // 20239\n    $animate.addClass(element, DIRTY_CLASS);                                                                           // 20240\n    form.$dirty = true;                                                                                                // 20241\n    form.$pristine = false;                                                                                            // 20242\n    form.$$parentForm.$setDirty();                                                                                     // 20243\n  };                                                                                                                   // 20244\n                                                                                                                       // 20245\n  /**                                                                                                                  // 20246\n   * @ngdoc method                                                                                                     // 20247\n   * @name form.FormController#$setPristine                                                                            // 20248\n   *                                                                                                                   // 20249\n   * @description                                                                                                      // 20250\n   * Sets the form to its pristine state.                                                                              // 20251\n   *                                                                                                                   // 20252\n   * This method can be called to remove the 'ng-dirty' class and set the form to its pristine                         // 20253\n   * state (ng-pristine class). This method will also propagate to all the controls contained                          // 20254\n   * in this form.                                                                                                     // 20255\n   *                                                                                                                   // 20256\n   * Setting a form back to a pristine state is often useful when we want to 'reuse' a form after                      // 20257\n   * saving or resetting it.                                                                                           // 20258\n   */                                                                                                                  // 20259\n  form.$setPristine = function() {                                                                                     // 20260\n    $animate.setClass(element, PRISTINE_CLASS, DIRTY_CLASS + ' ' + SUBMITTED_CLASS);                                   // 20261\n    form.$dirty = false;                                                                                               // 20262\n    form.$pristine = true;                                                                                             // 20263\n    form.$submitted = false;                                                                                           // 20264\n    forEach(controls, function(control) {                                                                              // 20265\n      control.$setPristine();                                                                                          // 20266\n    });                                                                                                                // 20267\n  };                                                                                                                   // 20268\n                                                                                                                       // 20269\n  /**                                                                                                                  // 20270\n   * @ngdoc method                                                                                                     // 20271\n   * @name form.FormController#$setUntouched                                                                           // 20272\n   *                                                                                                                   // 20273\n   * @description                                                                                                      // 20274\n   * Sets the form to its untouched state.                                                                             // 20275\n   *                                                                                                                   // 20276\n   * This method can be called to remove the 'ng-touched' class and set the form controls to their                     // 20277\n   * untouched state (ng-untouched class).                                                                             // 20278\n   *                                                                                                                   // 20279\n   * Setting a form controls back to their untouched state is often useful when setting the form                       // 20280\n   * back to its pristine state.                                                                                       // 20281\n   */                                                                                                                  // 20282\n  form.$setUntouched = function() {                                                                                    // 20283\n    forEach(controls, function(control) {                                                                              // 20284\n      control.$setUntouched();                                                                                         // 20285\n    });                                                                                                                // 20286\n  };                                                                                                                   // 20287\n                                                                                                                       // 20288\n  /**                                                                                                                  // 20289\n   * @ngdoc method                                                                                                     // 20290\n   * @name form.FormController#$setSubmitted                                                                           // 20291\n   *                                                                                                                   // 20292\n   * @description                                                                                                      // 20293\n   * Sets the form to its submitted state.                                                                             // 20294\n   */                                                                                                                  // 20295\n  form.$setSubmitted = function() {                                                                                    // 20296\n    $animate.addClass(element, SUBMITTED_CLASS);                                                                       // 20297\n    form.$submitted = true;                                                                                            // 20298\n    form.$$parentForm.$setSubmitted();                                                                                 // 20299\n  };                                                                                                                   // 20300\n}                                                                                                                      // 20301\n                                                                                                                       // 20302\n/**                                                                                                                    // 20303\n * @ngdoc directive                                                                                                    // 20304\n * @name ngForm                                                                                                        // 20305\n * @restrict EAC                                                                                                       // 20306\n *                                                                                                                     // 20307\n * @description                                                                                                        // 20308\n * Nestable alias of {@link ng.directive:form `form`} directive. HTML                                                  // 20309\n * does not allow nesting of form elements. It is useful to nest forms, for example if the validity of a               // 20310\n * sub-group of controls needs to be determined.                                                                       // 20311\n *                                                                                                                     // 20312\n * Note: the purpose of `ngForm` is to group controls,                                                                 // 20313\n * but not to be a replacement for the `<form>` tag with all of its capabilities                                       // 20314\n * (e.g. posting to the server, ...).                                                                                  // 20315\n *                                                                                                                     // 20316\n * @param {string=} ngForm|name Name of the form. If specified, the form controller will be published into             // 20317\n *                       related scope, under this name.                                                               // 20318\n *                                                                                                                     // 20319\n */                                                                                                                    // 20320\n                                                                                                                       // 20321\n /**                                                                                                                   // 20322\n * @ngdoc directive                                                                                                    // 20323\n * @name form                                                                                                          // 20324\n * @restrict E                                                                                                         // 20325\n *                                                                                                                     // 20326\n * @description                                                                                                        // 20327\n * Directive that instantiates                                                                                         // 20328\n * {@link form.FormController FormController}.                                                                         // 20329\n *                                                                                                                     // 20330\n * If the `name` attribute is specified, the form controller is published onto the current scope under                 // 20331\n * this name.                                                                                                          // 20332\n *                                                                                                                     // 20333\n * # Alias: {@link ng.directive:ngForm `ngForm`}                                                                       // 20334\n *                                                                                                                     // 20335\n * In Angular, forms can be nested. This means that the outer form is valid when all of the child                      // 20336\n * forms are valid as well. However, browsers do not allow nesting of `<form>` elements, so                            // 20337\n * Angular provides the {@link ng.directive:ngForm `ngForm`} directive which behaves identically to                    // 20338\n * `<form>` but can be nested.  This allows you to have nested forms, which is very useful when                        // 20339\n * using Angular validation directives in forms that are dynamically generated using the                               // 20340\n * {@link ng.directive:ngRepeat `ngRepeat`} directive. Since you cannot dynamically generate the `name`                // 20341\n * attribute of input elements using interpolation, you have to wrap each set of repeated inputs in an                 // 20342\n * `ngForm` directive and nest these in an outer `form` element.                                                       // 20343\n *                                                                                                                     // 20344\n *                                                                                                                     // 20345\n * # CSS classes                                                                                                       // 20346\n *  - `ng-valid` is set if the form is valid.                                                                          // 20347\n *  - `ng-invalid` is set if the form is invalid.                                                                      // 20348\n *  - `ng-pending` is set if the form is pending.                                                                      // 20349\n *  - `ng-pristine` is set if the form is pristine.                                                                    // 20350\n *  - `ng-dirty` is set if the form is dirty.                                                                          // 20351\n *  - `ng-submitted` is set if the form was submitted.                                                                 // 20352\n *                                                                                                                     // 20353\n * Keep in mind that ngAnimate can detect each of these classes when added and removed.                                // 20354\n *                                                                                                                     // 20355\n *                                                                                                                     // 20356\n * # Submitting a form and preventing the default action                                                               // 20357\n *                                                                                                                     // 20358\n * Since the role of forms in client-side Angular applications is different than in classical                          // 20359\n * roundtrip apps, it is desirable for the browser not to translate the form submission into a full                    // 20360\n * page reload that sends the data to the server. Instead some javascript logic should be triggered                    // 20361\n * to handle the form submission in an application-specific way.                                                       // 20362\n *                                                                                                                     // 20363\n * For this reason, Angular prevents the default action (form submission to the server) unless the                     // 20364\n * `<form>` element has an `action` attribute specified.                                                               // 20365\n *                                                                                                                     // 20366\n * You can use one of the following two ways to specify what javascript method should be called when                   // 20367\n * a form is submitted:                                                                                                // 20368\n *                                                                                                                     // 20369\n * - {@link ng.directive:ngSubmit ngSubmit} directive on the form element                                              // 20370\n * - {@link ng.directive:ngClick ngClick} directive on the first                                                       // 20371\n  *  button or input field of type submit (input[type=submit])                                                         // 20372\n *                                                                                                                     // 20373\n * To prevent double execution of the handler, use only one of the {@link ng.directive:ngSubmit ngSubmit}              // 20374\n * or {@link ng.directive:ngClick ngClick} directives.                                                                 // 20375\n * This is because of the following form submission rules in the HTML specification:                                   // 20376\n *                                                                                                                     // 20377\n * - If a form has only one input field then hitting enter in this field triggers form submit                          // 20378\n * (`ngSubmit`)                                                                                                        // 20379\n * - if a form has 2+ input fields and no buttons or input[type=submit] then hitting enter                             // 20380\n * doesn't trigger submit                                                                                              // 20381\n * - if a form has one or more input fields and one or more buttons or input[type=submit] then                         // 20382\n * hitting enter in any of the input fields will trigger the click handler on the *first* button or                    // 20383\n * input[type=submit] (`ngClick`) *and* a submit handler on the enclosing form (`ngSubmit`)                            // 20384\n *                                                                                                                     // 20385\n * Any pending `ngModelOptions` changes will take place immediately when an enclosing form is                          // 20386\n * submitted. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`                        // 20387\n * to have access to the updated model.                                                                                // 20388\n *                                                                                                                     // 20389\n * ## Animation Hooks                                                                                                  // 20390\n *                                                                                                                     // 20391\n * Animations in ngForm are triggered when any of the associated CSS classes are added and removed.                    // 20392\n * These classes are: `.ng-pristine`, `.ng-dirty`, `.ng-invalid` and `.ng-valid` as well as any                        // 20393\n * other validations that are performed within the form. Animations in ngForm are similar to how                       // 20394\n * they work in ngClass and animations can be hooked into using CSS transitions, keyframes as well                     // 20395\n * as JS animations.                                                                                                   // 20396\n *                                                                                                                     // 20397\n * The following example shows a simple way to utilize CSS transitions to style a form element                         // 20398\n * that has been rendered as invalid after it has been validated:                                                      // 20399\n *                                                                                                                     // 20400\n * <pre>                                                                                                               // 20401\n * //be sure to include ngAnimate as a module to hook into more                                                        // 20402\n * //advanced animations                                                                                               // 20403\n * .my-form {                                                                                                          // 20404\n *   transition:0.5s linear all;                                                                                       // 20405\n *   background: white;                                                                                                // 20406\n * }                                                                                                                   // 20407\n * .my-form.ng-invalid {                                                                                               // 20408\n *   background: red;                                                                                                  // 20409\n *   color:white;                                                                                                      // 20410\n * }                                                                                                                   // 20411\n * </pre>                                                                                                              // 20412\n *                                                                                                                     // 20413\n * @example                                                                                                            // 20414\n    <example deps=\"angular-animate.js\" animations=\"true\" fixBase=\"true\" module=\"formExample\">                          // 20415\n      <file name=\"index.html\">                                                                                         // 20416\n       <script>                                                                                                        // 20417\n         angular.module('formExample', [])                                                                             // 20418\n           .controller('FormController', ['$scope', function($scope) {                                                 // 20419\n             $scope.userType = 'guest';                                                                                // 20420\n           }]);                                                                                                        // 20421\n       </script>                                                                                                       // 20422\n       <style>                                                                                                         // 20423\n        .my-form {                                                                                                     // 20424\n          transition:all linear 0.5s;                                                                                  // 20425\n          background: transparent;                                                                                     // 20426\n        }                                                                                                              // 20427\n        .my-form.ng-invalid {                                                                                          // 20428\n          background: red;                                                                                             // 20429\n        }                                                                                                              // 20430\n       </style>                                                                                                        // 20431\n       <form name=\"myForm\" ng-controller=\"FormController\" class=\"my-form\">                                             // 20432\n         userType: <input name=\"input\" ng-model=\"userType\" required>                                                   // 20433\n         <span class=\"error\" ng-show=\"myForm.input.$error.required\">Required!</span><br>                               // 20434\n         <code>userType = {{userType}}</code><br>                                                                      // 20435\n         <code>myForm.input.$valid = {{myForm.input.$valid}}</code><br>                                                // 20436\n         <code>myForm.input.$error = {{myForm.input.$error}}</code><br>                                                // 20437\n         <code>myForm.$valid = {{myForm.$valid}}</code><br>                                                            // 20438\n         <code>myForm.$error.required = {{!!myForm.$error.required}}</code><br>                                        // 20439\n        </form>                                                                                                        // 20440\n      </file>                                                                                                          // 20441\n      <file name=\"protractor.js\" type=\"protractor\">                                                                    // 20442\n        it('should initialize to model', function() {                                                                  // 20443\n          var userType = element(by.binding('userType'));                                                              // 20444\n          var valid = element(by.binding('myForm.input.$valid'));                                                      // 20445\n                                                                                                                       // 20446\n          expect(userType.getText()).toContain('guest');                                                               // 20447\n          expect(valid.getText()).toContain('true');                                                                   // 20448\n        });                                                                                                            // 20449\n                                                                                                                       // 20450\n        it('should be invalid if empty', function() {                                                                  // 20451\n          var userType = element(by.binding('userType'));                                                              // 20452\n          var valid = element(by.binding('myForm.input.$valid'));                                                      // 20453\n          var userInput = element(by.model('userType'));                                                               // 20454\n                                                                                                                       // 20455\n          userInput.clear();                                                                                           // 20456\n          userInput.sendKeys('');                                                                                      // 20457\n                                                                                                                       // 20458\n          expect(userType.getText()).toEqual('userType =');                                                            // 20459\n          expect(valid.getText()).toContain('false');                                                                  // 20460\n        });                                                                                                            // 20461\n      </file>                                                                                                          // 20462\n    </example>                                                                                                         // 20463\n *                                                                                                                     // 20464\n * @param {string=} name Name of the form. If specified, the form controller will be published into                    // 20465\n *                       related scope, under this name.                                                               // 20466\n */                                                                                                                    // 20467\nvar formDirectiveFactory = function(isNgForm) {                                                                        // 20468\n  return ['$timeout', '$parse', function($timeout, $parse) {                                                           // 20469\n    var formDirective = {                                                                                              // 20470\n      name: 'form',                                                                                                    // 20471\n      restrict: isNgForm ? 'EAC' : 'E',                                                                                // 20472\n      require: ['form', '^^?form'], //first is the form's own ctrl, second is an optional parent form                  // 20473\n      controller: FormController,                                                                                      // 20474\n      compile: function ngFormCompile(formElement, attr) {                                                             // 20475\n        // Setup initial state of the control                                                                          // 20476\n        formElement.addClass(PRISTINE_CLASS).addClass(VALID_CLASS);                                                    // 20477\n                                                                                                                       // 20478\n        var nameAttr = attr.name ? 'name' : (isNgForm && attr.ngForm ? 'ngForm' : false);                              // 20479\n                                                                                                                       // 20480\n        return {                                                                                                       // 20481\n          pre: function ngFormPreLink(scope, formElement, attr, ctrls) {                                               // 20482\n            var controller = ctrls[0];                                                                                 // 20483\n                                                                                                                       // 20484\n            // if `action` attr is not present on the form, prevent the default action (submission)                    // 20485\n            if (!('action' in attr)) {                                                                                 // 20486\n              // we can't use jq events because if a form is destroyed during submission the default                   // 20487\n              // action is not prevented. see #1238                                                                    // 20488\n              //                                                                                                       // 20489\n              // IE 9 is not affected because it doesn't fire a submit event and try to do a full                      // 20490\n              // page reload if the form was destroyed by submission of the form via a click handler                   // 20491\n              // on a button in the form. Looks like an IE9 specific bug.                                              // 20492\n              var handleFormSubmission = function(event) {                                                             // 20493\n                scope.$apply(function() {                                                                              // 20494\n                  controller.$commitViewValue();                                                                       // 20495\n                  controller.$setSubmitted();                                                                          // 20496\n                });                                                                                                    // 20497\n                                                                                                                       // 20498\n                event.preventDefault();                                                                                // 20499\n              };                                                                                                       // 20500\n                                                                                                                       // 20501\n              addEventListenerFn(formElement[0], 'submit', handleFormSubmission);                                      // 20502\n                                                                                                                       // 20503\n              // unregister the preventDefault listener so that we don't not leak memory but in a                      // 20504\n              // way that will achieve the prevention of the default action.                                           // 20505\n              formElement.on('$destroy', function() {                                                                  // 20506\n                $timeout(function() {                                                                                  // 20507\n                  removeEventListenerFn(formElement[0], 'submit', handleFormSubmission);                               // 20508\n                }, 0, false);                                                                                          // 20509\n              });                                                                                                      // 20510\n            }                                                                                                          // 20511\n                                                                                                                       // 20512\n            var parentFormCtrl = ctrls[1] || controller.$$parentForm;                                                  // 20513\n            parentFormCtrl.$addControl(controller);                                                                    // 20514\n                                                                                                                       // 20515\n            var setter = nameAttr ? getSetter(controller.$name) : noop;                                                // 20516\n                                                                                                                       // 20517\n            if (nameAttr) {                                                                                            // 20518\n              setter(scope, controller);                                                                               // 20519\n              attr.$observe(nameAttr, function(newValue) {                                                             // 20520\n                if (controller.$name === newValue) return;                                                             // 20521\n                setter(scope, undefined);                                                                              // 20522\n                controller.$$parentForm.$$renameControl(controller, newValue);                                         // 20523\n                setter = getSetter(controller.$name);                                                                  // 20524\n                setter(scope, controller);                                                                             // 20525\n              });                                                                                                      // 20526\n            }                                                                                                          // 20527\n            formElement.on('$destroy', function() {                                                                    // 20528\n              controller.$$parentForm.$removeControl(controller);                                                      // 20529\n              setter(scope, undefined);                                                                                // 20530\n              extend(controller, nullFormCtrl); //stop propagating child destruction handlers upwards                  // 20531\n            });                                                                                                        // 20532\n          }                                                                                                            // 20533\n        };                                                                                                             // 20534\n      }                                                                                                                // 20535\n    };                                                                                                                 // 20536\n                                                                                                                       // 20537\n    return formDirective;                                                                                              // 20538\n                                                                                                                       // 20539\n    function getSetter(expression) {                                                                                   // 20540\n      if (expression === '') {                                                                                         // 20541\n        //create an assignable expression, so forms with an empty name can be renamed later                            // 20542\n        return $parse('this[\"\"]').assign;                                                                              // 20543\n      }                                                                                                                // 20544\n      return $parse(expression).assign || noop;                                                                        // 20545\n    }                                                                                                                  // 20546\n  }];                                                                                                                  // 20547\n};                                                                                                                     // 20548\n                                                                                                                       // 20549\nvar formDirective = formDirectiveFactory();                                                                            // 20550\nvar ngFormDirective = formDirectiveFactory(true);                                                                      // 20551\n                                                                                                                       // 20552\n/* global VALID_CLASS: false,                                                                                          // 20553\n  INVALID_CLASS: false,                                                                                                // 20554\n  PRISTINE_CLASS: false,                                                                                               // 20555\n  DIRTY_CLASS: false,                                                                                                  // 20556\n  UNTOUCHED_CLASS: false,                                                                                              // 20557\n  TOUCHED_CLASS: false,                                                                                                // 20558\n  ngModelMinErr: false,                                                                                                // 20559\n*/                                                                                                                     // 20560\n                                                                                                                       // 20561\n// Regex code is obtained from SO: https://stackoverflow.com/questions/3143070/javascript-regex-iso-datetime#answer-3143231\nvar ISO_DATE_REGEXP = /\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/;                      // 20563\nvar URL_REGEXP = /^(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?$/;                // 20564\nvar EMAIL_REGEXP = /^[a-z0-9!#$%&'*+\\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i;\nvar NUMBER_REGEXP = /^\\s*(\\-|\\+)?(\\d+|(\\d*(\\.\\d*)))([eE][+-]?\\d+)?\\s*$/;                                               // 20566\nvar DATE_REGEXP = /^(\\d{4})-(\\d{2})-(\\d{2})$/;                                                                         // 20567\nvar DATETIMELOCAL_REGEXP = /^(\\d{4})-(\\d\\d)-(\\d\\d)T(\\d\\d):(\\d\\d)(?::(\\d\\d)(\\.\\d{1,3})?)?$/;                            // 20568\nvar WEEK_REGEXP = /^(\\d{4})-W(\\d\\d)$/;                                                                                 // 20569\nvar MONTH_REGEXP = /^(\\d{4})-(\\d\\d)$/;                                                                                 // 20570\nvar TIME_REGEXP = /^(\\d\\d):(\\d\\d)(?::(\\d\\d)(\\.\\d{1,3})?)?$/;                                                           // 20571\n                                                                                                                       // 20572\nvar inputType = {                                                                                                      // 20573\n                                                                                                                       // 20574\n  /**                                                                                                                  // 20575\n   * @ngdoc input                                                                                                      // 20576\n   * @name input[text]                                                                                                 // 20577\n   *                                                                                                                   // 20578\n   * @description                                                                                                      // 20579\n   * Standard HTML text input with angular data binding, inherited by most of the `input` elements.                    // 20580\n   *                                                                                                                   // 20581\n   *                                                                                                                   // 20582\n   * @param {string} ngModel Assignable angular expression to data-bind to.                                            // 20583\n   * @param {string=} name Property name of the form under which the control is published.                             // 20584\n   * @param {string=} required Adds `required` validation error key if the value is not entered.                       // 20585\n   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                     // 20586\n   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                      // 20587\n   *    `required` when you want to data-bind to the `required` attribute.                                             // 20588\n   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than                   // 20589\n   *    minlength.                                                                                                     // 20590\n   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than                    // 20591\n   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of                     // 20592\n   *    any length.                                                                                                    // 20593\n   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string              // 20594\n   *    that contains the regular expression body that will be converted to a regular expression                       // 20595\n   *    as in the ngPattern directive.                                                                                 // 20596\n   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match                // 20597\n   *    a RegExp found by evaluating the Angular expression given in the attribute value.                              // 20598\n   *    If the expression evaluates to a RegExp object, then this is used directly.                                    // 20599\n   *    If the expression evaluates to a string, then it will be converted to a RegExp                                 // 20600\n   *    after wrapping it in `^` and `$` characters. For instance, `\"abc\"` will be converted to                        // 20601\n   *    `new RegExp('^abc$')`.<br />                                                                                   // 20602\n   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to                   // 20603\n   *    start at the index of the last search's match, thus not taking the whole input value into                      // 20604\n   *    account.                                                                                                       // 20605\n   * @param {string=} ngChange Angular expression to be executed when input changes due to user                        // 20606\n   *    interaction with the input element.                                                                            // 20607\n   * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.                    // 20608\n   *    This parameter is ignored for input[type=password] controls, which will never trim the                         // 20609\n   *    input.                                                                                                         // 20610\n   *                                                                                                                   // 20611\n   * @example                                                                                                          // 20612\n      <example name=\"text-input-directive\" module=\"textInputExample\">                                                  // 20613\n        <file name=\"index.html\">                                                                                       // 20614\n         <script>                                                                                                      // 20615\n           angular.module('textInputExample', [])                                                                      // 20616\n             .controller('ExampleController', ['$scope', function($scope) {                                            // 20617\n               $scope.example = {                                                                                      // 20618\n                 text: 'guest',                                                                                        // 20619\n                 word: /^\\s*\\w*\\s*$/                                                                                   // 20620\n               };                                                                                                      // 20621\n             }]);                                                                                                      // 20622\n         </script>                                                                                                     // 20623\n         <form name=\"myForm\" ng-controller=\"ExampleController\">                                                        // 20624\n           <label>Single word:                                                                                         // 20625\n             <input type=\"text\" name=\"input\" ng-model=\"example.text\"                                                   // 20626\n                    ng-pattern=\"example.word\" required ng-trim=\"false\">                                                // 20627\n           </label>                                                                                                    // 20628\n           <div role=\"alert\">                                                                                          // 20629\n             <span class=\"error\" ng-show=\"myForm.input.$error.required\">                                               // 20630\n               Required!</span>                                                                                        // 20631\n             <span class=\"error\" ng-show=\"myForm.input.$error.pattern\">                                                // 20632\n               Single word only!</span>                                                                                // 20633\n           </div>                                                                                                      // 20634\n           <tt>text = {{example.text}}</tt><br/>                                                                       // 20635\n           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                                 // 20636\n           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                                 // 20637\n           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                             // 20638\n           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                         // 20639\n          </form>                                                                                                      // 20640\n        </file>                                                                                                        // 20641\n        <file name=\"protractor.js\" type=\"protractor\">                                                                  // 20642\n          var text = element(by.binding('example.text'));                                                              // 20643\n          var valid = element(by.binding('myForm.input.$valid'));                                                      // 20644\n          var input = element(by.model('example.text'));                                                               // 20645\n                                                                                                                       // 20646\n          it('should initialize to model', function() {                                                                // 20647\n            expect(text.getText()).toContain('guest');                                                                 // 20648\n            expect(valid.getText()).toContain('true');                                                                 // 20649\n          });                                                                                                          // 20650\n                                                                                                                       // 20651\n          it('should be invalid if empty', function() {                                                                // 20652\n            input.clear();                                                                                             // 20653\n            input.sendKeys('');                                                                                        // 20654\n                                                                                                                       // 20655\n            expect(text.getText()).toEqual('text =');                                                                  // 20656\n            expect(valid.getText()).toContain('false');                                                                // 20657\n          });                                                                                                          // 20658\n                                                                                                                       // 20659\n          it('should be invalid if multi word', function() {                                                           // 20660\n            input.clear();                                                                                             // 20661\n            input.sendKeys('hello world');                                                                             // 20662\n                                                                                                                       // 20663\n            expect(valid.getText()).toContain('false');                                                                // 20664\n          });                                                                                                          // 20665\n        </file>                                                                                                        // 20666\n      </example>                                                                                                       // 20667\n   */                                                                                                                  // 20668\n  'text': textInputType,                                                                                               // 20669\n                                                                                                                       // 20670\n    /**                                                                                                                // 20671\n     * @ngdoc input                                                                                                    // 20672\n     * @name input[date]                                                                                               // 20673\n     *                                                                                                                 // 20674\n     * @description                                                                                                    // 20675\n     * Input with date validation and transformation. In browsers that do not yet support                              // 20676\n     * the HTML5 date input, a text element will be used. In that case, text must be entered in a valid ISO-8601       // 20677\n     * date format (yyyy-MM-dd), for example: `2009-01-06`. Since many                                                 // 20678\n     * modern browsers do not yet support this input type, it is important to provide cues to users on the             // 20679\n     * expected input format via a placeholder or label.                                                               // 20680\n     *                                                                                                                 // 20681\n     * The model must always be a Date object, otherwise Angular will throw an error.                                  // 20682\n     * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.                  // 20683\n     *                                                                                                                 // 20684\n     * The timezone to be used to read/write the `Date` instance in the model can be defined using                     // 20685\n     * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.            // 20686\n     *                                                                                                                 // 20687\n     * @param {string} ngModel Assignable angular expression to data-bind to.                                          // 20688\n     * @param {string=} name Property name of the form under which the control is published.                           // 20689\n     * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a\n     *   valid ISO date string (yyyy-MM-dd). You can also use interpolation inside this attribute                      // 20691\n     *   (e.g. `min=\"{{minDate | date:'yyyy-MM-dd'}}\"`). Note that `min` will also add native HTML5                    // 20692\n     *   constraint validation.                                                                                        // 20693\n     * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be\n     *   a valid ISO date string (yyyy-MM-dd). You can also use interpolation inside this attribute                    // 20695\n     *   (e.g. `max=\"{{maxDate | date:'yyyy-MM-dd'}}\"`). Note that `max` will also add native HTML5                    // 20696\n     *   constraint validation.                                                                                        // 20697\n     * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO date string                // 20698\n     *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.                           // 20699\n     * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO date string                // 20700\n     *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.                           // 20701\n     * @param {string=} required Sets `required` validation error key if the value is not entered.                     // 20702\n     * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                   // 20703\n     *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                    // 20704\n     *    `required` when you want to data-bind to the `required` attribute.                                           // 20705\n     * @param {string=} ngChange Angular expression to be executed when input changes due to user                      // 20706\n     *    interaction with the input element.                                                                          // 20707\n     *                                                                                                                 // 20708\n     * @example                                                                                                        // 20709\n     <example name=\"date-input-directive\" module=\"dateInputExample\">                                                   // 20710\n     <file name=\"index.html\">                                                                                          // 20711\n       <script>                                                                                                        // 20712\n          angular.module('dateInputExample', [])                                                                       // 20713\n            .controller('DateController', ['$scope', function($scope) {                                                // 20714\n              $scope.example = {                                                                                       // 20715\n                value: new Date(2013, 9, 22)                                                                           // 20716\n              };                                                                                                       // 20717\n            }]);                                                                                                       // 20718\n       </script>                                                                                                       // 20719\n       <form name=\"myForm\" ng-controller=\"DateController as dateCtrl\">                                                 // 20720\n          <label for=\"exampleInput\">Pick a date in 2013:</label>                                                       // 20721\n          <input type=\"date\" id=\"exampleInput\" name=\"input\" ng-model=\"example.value\"                                   // 20722\n              placeholder=\"yyyy-MM-dd\" min=\"2013-01-01\" max=\"2013-12-31\" required />                                   // 20723\n          <div role=\"alert\">                                                                                           // 20724\n            <span class=\"error\" ng-show=\"myForm.input.$error.required\">                                                // 20725\n                Required!</span>                                                                                       // 20726\n            <span class=\"error\" ng-show=\"myForm.input.$error.date\">                                                    // 20727\n                Not a valid date!</span>                                                                               // 20728\n           </div>                                                                                                      // 20729\n           <tt>value = {{example.value | date: \"yyyy-MM-dd\"}}</tt><br/>                                                // 20730\n           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                                 // 20731\n           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                                 // 20732\n           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                             // 20733\n           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                         // 20734\n       </form>                                                                                                         // 20735\n     </file>                                                                                                           // 20736\n     <file name=\"protractor.js\" type=\"protractor\">                                                                     // 20737\n        var value = element(by.binding('example.value | date: \"yyyy-MM-dd\"'));                                         // 20738\n        var valid = element(by.binding('myForm.input.$valid'));                                                        // 20739\n        var input = element(by.model('example.value'));                                                                // 20740\n                                                                                                                       // 20741\n        // currently protractor/webdriver does not support                                                             // 20742\n        // sending keys to all known HTML5 input controls                                                              // 20743\n        // for various browsers (see https://github.com/angular/protractor/issues/562).                                // 20744\n        function setInput(val) {                                                                                       // 20745\n          // set the value of the element and force validation.                                                        // 20746\n          var scr = \"var ipt = document.getElementById('exampleInput'); \" +                                            // 20747\n          \"ipt.value = '\" + val + \"';\" +                                                                               // 20748\n          \"angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('\" + val + \"'); });\";    // 20749\n          browser.executeScript(scr);                                                                                  // 20750\n        }                                                                                                              // 20751\n                                                                                                                       // 20752\n        it('should initialize to model', function() {                                                                  // 20753\n          expect(value.getText()).toContain('2013-10-22');                                                             // 20754\n          expect(valid.getText()).toContain('myForm.input.$valid = true');                                             // 20755\n        });                                                                                                            // 20756\n                                                                                                                       // 20757\n        it('should be invalid if empty', function() {                                                                  // 20758\n          setInput('');                                                                                                // 20759\n          expect(value.getText()).toEqual('value =');                                                                  // 20760\n          expect(valid.getText()).toContain('myForm.input.$valid = false');                                            // 20761\n        });                                                                                                            // 20762\n                                                                                                                       // 20763\n        it('should be invalid if over max', function() {                                                               // 20764\n          setInput('2015-01-01');                                                                                      // 20765\n          expect(value.getText()).toContain('');                                                                       // 20766\n          expect(valid.getText()).toContain('myForm.input.$valid = false');                                            // 20767\n        });                                                                                                            // 20768\n     </file>                                                                                                           // 20769\n     </example>                                                                                                        // 20770\n     */                                                                                                                // 20771\n  'date': createDateInputType('date', DATE_REGEXP,                                                                     // 20772\n         createDateParser(DATE_REGEXP, ['yyyy', 'MM', 'dd']),                                                          // 20773\n         'yyyy-MM-dd'),                                                                                                // 20774\n                                                                                                                       // 20775\n   /**                                                                                                                 // 20776\n    * @ngdoc input                                                                                                     // 20777\n    * @name input[datetime-local]                                                                                      // 20778\n    *                                                                                                                  // 20779\n    * @description                                                                                                     // 20780\n    * Input with datetime validation and transformation. In browsers that do not yet support                           // 20781\n    * the HTML5 date input, a text element will be used. In that case, the text must be entered in a valid ISO-8601    // 20782\n    * local datetime format (yyyy-MM-ddTHH:mm:ss), for example: `2010-12-28T14:57:00`.                                 // 20783\n    *                                                                                                                  // 20784\n    * The model must always be a Date object, otherwise Angular will throw an error.                                   // 20785\n    * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.                   // 20786\n    *                                                                                                                  // 20787\n    * The timezone to be used to read/write the `Date` instance in the model can be defined using                      // 20788\n    * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.             // 20789\n    *                                                                                                                  // 20790\n    * @param {string} ngModel Assignable angular expression to data-bind to.                                           // 20791\n    * @param {string=} name Property name of the form under which the control is published.                            // 20792\n    * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.                // 20793\n    *   This must be a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss). You can also use interpolation                 // 20794\n    *   inside this attribute (e.g. `min=\"{{minDatetimeLocal | date:'yyyy-MM-ddTHH:mm:ss'}}\"`).                        // 20795\n    *   Note that `min` will also add native HTML5 constraint validation.                                              // 20796\n    * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.             // 20797\n    *   This must be a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss). You can also use interpolation                 // 20798\n    *   inside this attribute (e.g. `max=\"{{maxDatetimeLocal | date:'yyyy-MM-ddTHH:mm:ss'}}\"`).                        // 20799\n    *   Note that `max` will also add native HTML5 constraint validation.                                              // 20800\n    * @param {(date|string)=} ngMin Sets the `min` validation error key to the Date / ISO datetime string              // 20801\n    *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.                            // 20802\n    * @param {(date|string)=} ngMax Sets the `max` validation error key to the Date / ISO datetime string              // 20803\n    *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.                            // 20804\n    * @param {string=} required Sets `required` validation error key if the value is not entered.                      // 20805\n    * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                    // 20806\n    *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                     // 20807\n    *    `required` when you want to data-bind to the `required` attribute.                                            // 20808\n    * @param {string=} ngChange Angular expression to be executed when input changes due to user                       // 20809\n    *    interaction with the input element.                                                                           // 20810\n    *                                                                                                                  // 20811\n    * @example                                                                                                         // 20812\n    <example name=\"datetimelocal-input-directive\" module=\"dateExample\">                                                // 20813\n    <file name=\"index.html\">                                                                                           // 20814\n      <script>                                                                                                         // 20815\n        angular.module('dateExample', [])                                                                              // 20816\n          .controller('DateController', ['$scope', function($scope) {                                                  // 20817\n            $scope.example = {                                                                                         // 20818\n              value: new Date(2010, 11, 28, 14, 57)                                                                    // 20819\n            };                                                                                                         // 20820\n          }]);                                                                                                         // 20821\n      </script>                                                                                                        // 20822\n      <form name=\"myForm\" ng-controller=\"DateController as dateCtrl\">                                                  // 20823\n        <label for=\"exampleInput\">Pick a date between in 2013:</label>                                                 // 20824\n        <input type=\"datetime-local\" id=\"exampleInput\" name=\"input\" ng-model=\"example.value\"                           // 20825\n            placeholder=\"yyyy-MM-ddTHH:mm:ss\" min=\"2001-01-01T00:00:00\" max=\"2013-12-31T00:00:00\" required />          // 20826\n        <div role=\"alert\">                                                                                             // 20827\n          <span class=\"error\" ng-show=\"myForm.input.$error.required\">                                                  // 20828\n              Required!</span>                                                                                         // 20829\n          <span class=\"error\" ng-show=\"myForm.input.$error.datetimelocal\">                                             // 20830\n              Not a valid date!</span>                                                                                 // 20831\n        </div>                                                                                                         // 20832\n        <tt>value = {{example.value | date: \"yyyy-MM-ddTHH:mm:ss\"}}</tt><br/>                                          // 20833\n        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                                    // 20834\n        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                                    // 20835\n        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                                // 20836\n        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                            // 20837\n      </form>                                                                                                          // 20838\n    </file>                                                                                                            // 20839\n    <file name=\"protractor.js\" type=\"protractor\">                                                                      // 20840\n      var value = element(by.binding('example.value | date: \"yyyy-MM-ddTHH:mm:ss\"'));                                  // 20841\n      var valid = element(by.binding('myForm.input.$valid'));                                                          // 20842\n      var input = element(by.model('example.value'));                                                                  // 20843\n                                                                                                                       // 20844\n      // currently protractor/webdriver does not support                                                               // 20845\n      // sending keys to all known HTML5 input controls                                                                // 20846\n      // for various browsers (https://github.com/angular/protractor/issues/562).                                      // 20847\n      function setInput(val) {                                                                                         // 20848\n        // set the value of the element and force validation.                                                          // 20849\n        var scr = \"var ipt = document.getElementById('exampleInput'); \" +                                              // 20850\n        \"ipt.value = '\" + val + \"';\" +                                                                                 // 20851\n        \"angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('\" + val + \"'); });\";      // 20852\n        browser.executeScript(scr);                                                                                    // 20853\n      }                                                                                                                // 20854\n                                                                                                                       // 20855\n      it('should initialize to model', function() {                                                                    // 20856\n        expect(value.getText()).toContain('2010-12-28T14:57:00');                                                      // 20857\n        expect(valid.getText()).toContain('myForm.input.$valid = true');                                               // 20858\n      });                                                                                                              // 20859\n                                                                                                                       // 20860\n      it('should be invalid if empty', function() {                                                                    // 20861\n        setInput('');                                                                                                  // 20862\n        expect(value.getText()).toEqual('value =');                                                                    // 20863\n        expect(valid.getText()).toContain('myForm.input.$valid = false');                                              // 20864\n      });                                                                                                              // 20865\n                                                                                                                       // 20866\n      it('should be invalid if over max', function() {                                                                 // 20867\n        setInput('2015-01-01T23:59:00');                                                                               // 20868\n        expect(value.getText()).toContain('');                                                                         // 20869\n        expect(valid.getText()).toContain('myForm.input.$valid = false');                                              // 20870\n      });                                                                                                              // 20871\n    </file>                                                                                                            // 20872\n    </example>                                                                                                         // 20873\n    */                                                                                                                 // 20874\n  'datetime-local': createDateInputType('datetimelocal', DATETIMELOCAL_REGEXP,                                         // 20875\n      createDateParser(DATETIMELOCAL_REGEXP, ['yyyy', 'MM', 'dd', 'HH', 'mm', 'ss', 'sss']),                           // 20876\n      'yyyy-MM-ddTHH:mm:ss.sss'),                                                                                      // 20877\n                                                                                                                       // 20878\n  /**                                                                                                                  // 20879\n   * @ngdoc input                                                                                                      // 20880\n   * @name input[time]                                                                                                 // 20881\n   *                                                                                                                   // 20882\n   * @description                                                                                                      // 20883\n   * Input with time validation and transformation. In browsers that do not yet support                                // 20884\n   * the HTML5 date input, a text element will be used. In that case, the text must be entered in a valid ISO-8601     // 20885\n   * local time format (HH:mm:ss), for example: `14:57:00`. Model must be a Date object. This binding will always output a\n   * Date object to the model of January 1, 1970, or local date `new Date(1970, 0, 1, HH, mm, ss)`.                    // 20887\n   *                                                                                                                   // 20888\n   * The model must always be a Date object, otherwise Angular will throw an error.                                    // 20889\n   * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.                    // 20890\n   *                                                                                                                   // 20891\n   * The timezone to be used to read/write the `Date` instance in the model can be defined using                       // 20892\n   * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.              // 20893\n   *                                                                                                                   // 20894\n   * @param {string} ngModel Assignable angular expression to data-bind to.                                            // 20895\n   * @param {string=} name Property name of the form under which the control is published.                             // 20896\n   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.                 // 20897\n   *   This must be a valid ISO time format (HH:mm:ss). You can also use interpolation inside this                     // 20898\n   *   attribute (e.g. `min=\"{{minTime | date:'HH:mm:ss'}}\"`). Note that `min` will also add                           // 20899\n   *   native HTML5 constraint validation.                                                                             // 20900\n   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.              // 20901\n   *   This must be a valid ISO time format (HH:mm:ss). You can also use interpolation inside this                     // 20902\n   *   attribute (e.g. `max=\"{{maxTime | date:'HH:mm:ss'}}\"`). Note that `max` will also add                           // 20903\n   *   native HTML5 constraint validation.                                                                             // 20904\n   * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO time string the              // 20905\n   *   `ngMin` expression evaluates to. Note that it does not set the `min` attribute.                                 // 20906\n   * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO time string the              // 20907\n   *   `ngMax` expression evaluates to. Note that it does not set the `max` attribute.                                 // 20908\n   * @param {string=} required Sets `required` validation error key if the value is not entered.                       // 20909\n   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                     // 20910\n   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                      // 20911\n   *    `required` when you want to data-bind to the `required` attribute.                                             // 20912\n   * @param {string=} ngChange Angular expression to be executed when input changes due to user                        // 20913\n   *    interaction with the input element.                                                                            // 20914\n   *                                                                                                                   // 20915\n   * @example                                                                                                          // 20916\n   <example name=\"time-input-directive\" module=\"timeExample\">                                                          // 20917\n   <file name=\"index.html\">                                                                                            // 20918\n     <script>                                                                                                          // 20919\n      angular.module('timeExample', [])                                                                                // 20920\n        .controller('DateController', ['$scope', function($scope) {                                                    // 20921\n          $scope.example = {                                                                                           // 20922\n            value: new Date(1970, 0, 1, 14, 57, 0)                                                                     // 20923\n          };                                                                                                           // 20924\n        }]);                                                                                                           // 20925\n     </script>                                                                                                         // 20926\n     <form name=\"myForm\" ng-controller=\"DateController as dateCtrl\">                                                   // 20927\n        <label for=\"exampleInput\">Pick a between 8am and 5pm:</label>                                                  // 20928\n        <input type=\"time\" id=\"exampleInput\" name=\"input\" ng-model=\"example.value\"                                     // 20929\n            placeholder=\"HH:mm:ss\" min=\"08:00:00\" max=\"17:00:00\" required />                                           // 20930\n        <div role=\"alert\">                                                                                             // 20931\n          <span class=\"error\" ng-show=\"myForm.input.$error.required\">                                                  // 20932\n              Required!</span>                                                                                         // 20933\n          <span class=\"error\" ng-show=\"myForm.input.$error.time\">                                                      // 20934\n              Not a valid date!</span>                                                                                 // 20935\n        </div>                                                                                                         // 20936\n        <tt>value = {{example.value | date: \"HH:mm:ss\"}}</tt><br/>                                                     // 20937\n        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                                    // 20938\n        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                                    // 20939\n        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                                // 20940\n        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                            // 20941\n     </form>                                                                                                           // 20942\n   </file>                                                                                                             // 20943\n   <file name=\"protractor.js\" type=\"protractor\">                                                                       // 20944\n      var value = element(by.binding('example.value | date: \"HH:mm:ss\"'));                                             // 20945\n      var valid = element(by.binding('myForm.input.$valid'));                                                          // 20946\n      var input = element(by.model('example.value'));                                                                  // 20947\n                                                                                                                       // 20948\n      // currently protractor/webdriver does not support                                                               // 20949\n      // sending keys to all known HTML5 input controls                                                                // 20950\n      // for various browsers (https://github.com/angular/protractor/issues/562).                                      // 20951\n      function setInput(val) {                                                                                         // 20952\n        // set the value of the element and force validation.                                                          // 20953\n        var scr = \"var ipt = document.getElementById('exampleInput'); \" +                                              // 20954\n        \"ipt.value = '\" + val + \"';\" +                                                                                 // 20955\n        \"angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('\" + val + \"'); });\";      // 20956\n        browser.executeScript(scr);                                                                                    // 20957\n      }                                                                                                                // 20958\n                                                                                                                       // 20959\n      it('should initialize to model', function() {                                                                    // 20960\n        expect(value.getText()).toContain('14:57:00');                                                                 // 20961\n        expect(valid.getText()).toContain('myForm.input.$valid = true');                                               // 20962\n      });                                                                                                              // 20963\n                                                                                                                       // 20964\n      it('should be invalid if empty', function() {                                                                    // 20965\n        setInput('');                                                                                                  // 20966\n        expect(value.getText()).toEqual('value =');                                                                    // 20967\n        expect(valid.getText()).toContain('myForm.input.$valid = false');                                              // 20968\n      });                                                                                                              // 20969\n                                                                                                                       // 20970\n      it('should be invalid if over max', function() {                                                                 // 20971\n        setInput('23:59:00');                                                                                          // 20972\n        expect(value.getText()).toContain('');                                                                         // 20973\n        expect(valid.getText()).toContain('myForm.input.$valid = false');                                              // 20974\n      });                                                                                                              // 20975\n   </file>                                                                                                             // 20976\n   </example>                                                                                                          // 20977\n   */                                                                                                                  // 20978\n  'time': createDateInputType('time', TIME_REGEXP,                                                                     // 20979\n      createDateParser(TIME_REGEXP, ['HH', 'mm', 'ss', 'sss']),                                                        // 20980\n     'HH:mm:ss.sss'),                                                                                                  // 20981\n                                                                                                                       // 20982\n   /**                                                                                                                 // 20983\n    * @ngdoc input                                                                                                     // 20984\n    * @name input[week]                                                                                                // 20985\n    *                                                                                                                  // 20986\n    * @description                                                                                                     // 20987\n    * Input with week-of-the-year validation and transformation to Date. In browsers that do not yet support           // 20988\n    * the HTML5 week input, a text element will be used. In that case, the text must be entered in a valid ISO-8601    // 20989\n    * week format (yyyy-W##), for example: `2013-W02`.                                                                 // 20990\n    *                                                                                                                  // 20991\n    * The model must always be a Date object, otherwise Angular will throw an error.                                   // 20992\n    * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.                   // 20993\n    *                                                                                                                  // 20994\n    * The timezone to be used to read/write the `Date` instance in the model can be defined using                      // 20995\n    * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.             // 20996\n    *                                                                                                                  // 20997\n    * @param {string} ngModel Assignable angular expression to data-bind to.                                           // 20998\n    * @param {string=} name Property name of the form under which the control is published.                            // 20999\n    * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.                // 21000\n    *   This must be a valid ISO week format (yyyy-W##). You can also use interpolation inside this                    // 21001\n    *   attribute (e.g. `min=\"{{minWeek | date:'yyyy-Www'}}\"`). Note that `min` will also add                          // 21002\n    *   native HTML5 constraint validation.                                                                            // 21003\n    * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.             // 21004\n    *   This must be a valid ISO week format (yyyy-W##). You can also use interpolation inside this                    // 21005\n    *   attribute (e.g. `max=\"{{maxWeek | date:'yyyy-Www'}}\"`). Note that `max` will also add                          // 21006\n    *   native HTML5 constraint validation.                                                                            // 21007\n    * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO week string                 // 21008\n    *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.                            // 21009\n    * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO week string                 // 21010\n    *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.                            // 21011\n    * @param {string=} required Sets `required` validation error key if the value is not entered.                      // 21012\n    * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                    // 21013\n    *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                     // 21014\n    *    `required` when you want to data-bind to the `required` attribute.                                            // 21015\n    * @param {string=} ngChange Angular expression to be executed when input changes due to user                       // 21016\n    *    interaction with the input element.                                                                           // 21017\n    *                                                                                                                  // 21018\n    * @example                                                                                                         // 21019\n    <example name=\"week-input-directive\" module=\"weekExample\">                                                         // 21020\n    <file name=\"index.html\">                                                                                           // 21021\n      <script>                                                                                                         // 21022\n      angular.module('weekExample', [])                                                                                // 21023\n        .controller('DateController', ['$scope', function($scope) {                                                    // 21024\n          $scope.example = {                                                                                           // 21025\n            value: new Date(2013, 0, 3)                                                                                // 21026\n          };                                                                                                           // 21027\n        }]);                                                                                                           // 21028\n      </script>                                                                                                        // 21029\n      <form name=\"myForm\" ng-controller=\"DateController as dateCtrl\">                                                  // 21030\n        <label>Pick a date between in 2013:                                                                            // 21031\n          <input id=\"exampleInput\" type=\"week\" name=\"input\" ng-model=\"example.value\"                                   // 21032\n                 placeholder=\"YYYY-W##\" min=\"2012-W32\"                                                                 // 21033\n                 max=\"2013-W52\" required />                                                                            // 21034\n        </label>                                                                                                       // 21035\n        <div role=\"alert\">                                                                                             // 21036\n          <span class=\"error\" ng-show=\"myForm.input.$error.required\">                                                  // 21037\n              Required!</span>                                                                                         // 21038\n          <span class=\"error\" ng-show=\"myForm.input.$error.week\">                                                      // 21039\n              Not a valid date!</span>                                                                                 // 21040\n        </div>                                                                                                         // 21041\n        <tt>value = {{example.value | date: \"yyyy-Www\"}}</tt><br/>                                                     // 21042\n        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                                    // 21043\n        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                                    // 21044\n        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                                // 21045\n        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                            // 21046\n      </form>                                                                                                          // 21047\n    </file>                                                                                                            // 21048\n    <file name=\"protractor.js\" type=\"protractor\">                                                                      // 21049\n      var value = element(by.binding('example.value | date: \"yyyy-Www\"'));                                             // 21050\n      var valid = element(by.binding('myForm.input.$valid'));                                                          // 21051\n      var input = element(by.model('example.value'));                                                                  // 21052\n                                                                                                                       // 21053\n      // currently protractor/webdriver does not support                                                               // 21054\n      // sending keys to all known HTML5 input controls                                                                // 21055\n      // for various browsers (https://github.com/angular/protractor/issues/562).                                      // 21056\n      function setInput(val) {                                                                                         // 21057\n        // set the value of the element and force validation.                                                          // 21058\n        var scr = \"var ipt = document.getElementById('exampleInput'); \" +                                              // 21059\n        \"ipt.value = '\" + val + \"';\" +                                                                                 // 21060\n        \"angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('\" + val + \"'); });\";      // 21061\n        browser.executeScript(scr);                                                                                    // 21062\n      }                                                                                                                // 21063\n                                                                                                                       // 21064\n      it('should initialize to model', function() {                                                                    // 21065\n        expect(value.getText()).toContain('2013-W01');                                                                 // 21066\n        expect(valid.getText()).toContain('myForm.input.$valid = true');                                               // 21067\n      });                                                                                                              // 21068\n                                                                                                                       // 21069\n      it('should be invalid if empty', function() {                                                                    // 21070\n        setInput('');                                                                                                  // 21071\n        expect(value.getText()).toEqual('value =');                                                                    // 21072\n        expect(valid.getText()).toContain('myForm.input.$valid = false');                                              // 21073\n      });                                                                                                              // 21074\n                                                                                                                       // 21075\n      it('should be invalid if over max', function() {                                                                 // 21076\n        setInput('2015-W01');                                                                                          // 21077\n        expect(value.getText()).toContain('');                                                                         // 21078\n        expect(valid.getText()).toContain('myForm.input.$valid = false');                                              // 21079\n      });                                                                                                              // 21080\n    </file>                                                                                                            // 21081\n    </example>                                                                                                         // 21082\n    */                                                                                                                 // 21083\n  'week': createDateInputType('week', WEEK_REGEXP, weekParser, 'yyyy-Www'),                                            // 21084\n                                                                                                                       // 21085\n  /**                                                                                                                  // 21086\n   * @ngdoc input                                                                                                      // 21087\n   * @name input[month]                                                                                                // 21088\n   *                                                                                                                   // 21089\n   * @description                                                                                                      // 21090\n   * Input with month validation and transformation. In browsers that do not yet support                               // 21091\n   * the HTML5 month input, a text element will be used. In that case, the text must be entered in a valid ISO-8601    // 21092\n   * month format (yyyy-MM), for example: `2009-01`.                                                                   // 21093\n   *                                                                                                                   // 21094\n   * The model must always be a Date object, otherwise Angular will throw an error.                                    // 21095\n   * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.                    // 21096\n   * If the model is not set to the first of the month, the next view to model update will set it                      // 21097\n   * to the first of the month.                                                                                        // 21098\n   *                                                                                                                   // 21099\n   * The timezone to be used to read/write the `Date` instance in the model can be defined using                       // 21100\n   * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.              // 21101\n   *                                                                                                                   // 21102\n   * @param {string} ngModel Assignable angular expression to data-bind to.                                            // 21103\n   * @param {string=} name Property name of the form under which the control is published.                             // 21104\n   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.                 // 21105\n   *   This must be a valid ISO month format (yyyy-MM). You can also use interpolation inside this                     // 21106\n   *   attribute (e.g. `min=\"{{minMonth | date:'yyyy-MM'}}\"`). Note that `min` will also add                           // 21107\n   *   native HTML5 constraint validation.                                                                             // 21108\n   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.              // 21109\n   *   This must be a valid ISO month format (yyyy-MM). You can also use interpolation inside this                     // 21110\n   *   attribute (e.g. `max=\"{{maxMonth | date:'yyyy-MM'}}\"`). Note that `max` will also add                           // 21111\n   *   native HTML5 constraint validation.                                                                             // 21112\n   * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO week string                  // 21113\n   *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.                             // 21114\n   * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO week string                  // 21115\n   *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.                             // 21116\n                                                                                                                       // 21117\n   * @param {string=} required Sets `required` validation error key if the value is not entered.                       // 21118\n   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                     // 21119\n   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                      // 21120\n   *    `required` when you want to data-bind to the `required` attribute.                                             // 21121\n   * @param {string=} ngChange Angular expression to be executed when input changes due to user                        // 21122\n   *    interaction with the input element.                                                                            // 21123\n   *                                                                                                                   // 21124\n   * @example                                                                                                          // 21125\n   <example name=\"month-input-directive\" module=\"monthExample\">                                                        // 21126\n   <file name=\"index.html\">                                                                                            // 21127\n     <script>                                                                                                          // 21128\n      angular.module('monthExample', [])                                                                               // 21129\n        .controller('DateController', ['$scope', function($scope) {                                                    // 21130\n          $scope.example = {                                                                                           // 21131\n            value: new Date(2013, 9, 1)                                                                                // 21132\n          };                                                                                                           // 21133\n        }]);                                                                                                           // 21134\n     </script>                                                                                                         // 21135\n     <form name=\"myForm\" ng-controller=\"DateController as dateCtrl\">                                                   // 21136\n       <label for=\"exampleInput\">Pick a month in 2013:</label>                                                         // 21137\n       <input id=\"exampleInput\" type=\"month\" name=\"input\" ng-model=\"example.value\"                                     // 21138\n          placeholder=\"yyyy-MM\" min=\"2013-01\" max=\"2013-12\" required />                                                // 21139\n       <div role=\"alert\">                                                                                              // 21140\n         <span class=\"error\" ng-show=\"myForm.input.$error.required\">                                                   // 21141\n            Required!</span>                                                                                           // 21142\n         <span class=\"error\" ng-show=\"myForm.input.$error.month\">                                                      // 21143\n            Not a valid month!</span>                                                                                  // 21144\n       </div>                                                                                                          // 21145\n       <tt>value = {{example.value | date: \"yyyy-MM\"}}</tt><br/>                                                       // 21146\n       <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                                     // 21147\n       <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                                     // 21148\n       <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                                 // 21149\n       <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                             // 21150\n     </form>                                                                                                           // 21151\n   </file>                                                                                                             // 21152\n   <file name=\"protractor.js\" type=\"protractor\">                                                                       // 21153\n      var value = element(by.binding('example.value | date: \"yyyy-MM\"'));                                              // 21154\n      var valid = element(by.binding('myForm.input.$valid'));                                                          // 21155\n      var input = element(by.model('example.value'));                                                                  // 21156\n                                                                                                                       // 21157\n      // currently protractor/webdriver does not support                                                               // 21158\n      // sending keys to all known HTML5 input controls                                                                // 21159\n      // for various browsers (https://github.com/angular/protractor/issues/562).                                      // 21160\n      function setInput(val) {                                                                                         // 21161\n        // set the value of the element and force validation.                                                          // 21162\n        var scr = \"var ipt = document.getElementById('exampleInput'); \" +                                              // 21163\n        \"ipt.value = '\" + val + \"';\" +                                                                                 // 21164\n        \"angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('\" + val + \"'); });\";      // 21165\n        browser.executeScript(scr);                                                                                    // 21166\n      }                                                                                                                // 21167\n                                                                                                                       // 21168\n      it('should initialize to model', function() {                                                                    // 21169\n        expect(value.getText()).toContain('2013-10');                                                                  // 21170\n        expect(valid.getText()).toContain('myForm.input.$valid = true');                                               // 21171\n      });                                                                                                              // 21172\n                                                                                                                       // 21173\n      it('should be invalid if empty', function() {                                                                    // 21174\n        setInput('');                                                                                                  // 21175\n        expect(value.getText()).toEqual('value =');                                                                    // 21176\n        expect(valid.getText()).toContain('myForm.input.$valid = false');                                              // 21177\n      });                                                                                                              // 21178\n                                                                                                                       // 21179\n      it('should be invalid if over max', function() {                                                                 // 21180\n        setInput('2015-01');                                                                                           // 21181\n        expect(value.getText()).toContain('');                                                                         // 21182\n        expect(valid.getText()).toContain('myForm.input.$valid = false');                                              // 21183\n      });                                                                                                              // 21184\n   </file>                                                                                                             // 21185\n   </example>                                                                                                          // 21186\n   */                                                                                                                  // 21187\n  'month': createDateInputType('month', MONTH_REGEXP,                                                                  // 21188\n     createDateParser(MONTH_REGEXP, ['yyyy', 'MM']),                                                                   // 21189\n     'yyyy-MM'),                                                                                                       // 21190\n                                                                                                                       // 21191\n  /**                                                                                                                  // 21192\n   * @ngdoc input                                                                                                      // 21193\n   * @name input[number]                                                                                               // 21194\n   *                                                                                                                   // 21195\n   * @description                                                                                                      // 21196\n   * Text input with number validation and transformation. Sets the `number` validation                                // 21197\n   * error if not a valid number.                                                                                      // 21198\n   *                                                                                                                   // 21199\n   * <div class=\"alert alert-warning\">                                                                                 // 21200\n   * The model must always be of type `number` otherwise Angular will throw an error.                                  // 21201\n   * Be aware that a string containing a number is not enough. See the {@link ngModel:numfmt}                          // 21202\n   * error docs for more information and an example of how to convert your model if necessary.                         // 21203\n   * </div>                                                                                                            // 21204\n   *                                                                                                                   // 21205\n   * ## Issues with HTML5 constraint validation                                                                        // 21206\n   *                                                                                                                   // 21207\n   * In browsers that follow the                                                                                       // 21208\n   * [HTML5 specification](https://html.spec.whatwg.org/multipage/forms.html#number-state-%28type=number%29),          // 21209\n   * `input[number]` does not work as expected with {@link ngModelOptions `ngModelOptions.allowInvalid`}.              // 21210\n   * If a non-number is entered in the input, the browser will report the value as an empty string,                    // 21211\n   * which means the view / model values in `ngModel` and subsequently the scope value                                 // 21212\n   * will also be an empty string.                                                                                     // 21213\n   *                                                                                                                   // 21214\n   *                                                                                                                   // 21215\n   * @param {string} ngModel Assignable angular expression to data-bind to.                                            // 21216\n   * @param {string=} name Property name of the form under which the control is published.                             // 21217\n   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.                 // 21218\n   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.              // 21219\n   * @param {string=} required Sets `required` validation error key if the value is not entered.                       // 21220\n   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                     // 21221\n   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                      // 21222\n   *    `required` when you want to data-bind to the `required` attribute.                                             // 21223\n   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than                   // 21224\n   *    minlength.                                                                                                     // 21225\n   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than                    // 21226\n   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of                     // 21227\n   *    any length.                                                                                                    // 21228\n   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string              // 21229\n   *    that contains the regular expression body that will be converted to a regular expression                       // 21230\n   *    as in the ngPattern directive.                                                                                 // 21231\n   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match                // 21232\n   *    a RegExp found by evaluating the Angular expression given in the attribute value.                              // 21233\n   *    If the expression evaluates to a RegExp object, then this is used directly.                                    // 21234\n   *    If the expression evaluates to a string, then it will be converted to a RegExp                                 // 21235\n   *    after wrapping it in `^` and `$` characters. For instance, `\"abc\"` will be converted to                        // 21236\n   *    `new RegExp('^abc$')`.<br />                                                                                   // 21237\n   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to                   // 21238\n   *    start at the index of the last search's match, thus not taking the whole input value into                      // 21239\n   *    account.                                                                                                       // 21240\n   * @param {string=} ngChange Angular expression to be executed when input changes due to user                        // 21241\n   *    interaction with the input element.                                                                            // 21242\n   *                                                                                                                   // 21243\n   * @example                                                                                                          // 21244\n      <example name=\"number-input-directive\" module=\"numberExample\">                                                   // 21245\n        <file name=\"index.html\">                                                                                       // 21246\n         <script>                                                                                                      // 21247\n           angular.module('numberExample', [])                                                                         // 21248\n             .controller('ExampleController', ['$scope', function($scope) {                                            // 21249\n               $scope.example = {                                                                                      // 21250\n                 value: 12                                                                                             // 21251\n               };                                                                                                      // 21252\n             }]);                                                                                                      // 21253\n         </script>                                                                                                     // 21254\n         <form name=\"myForm\" ng-controller=\"ExampleController\">                                                        // 21255\n           <label>Number:                                                                                              // 21256\n             <input type=\"number\" name=\"input\" ng-model=\"example.value\"                                                // 21257\n                    min=\"0\" max=\"99\" required>                                                                         // 21258\n          </label>                                                                                                     // 21259\n           <div role=\"alert\">                                                                                          // 21260\n             <span class=\"error\" ng-show=\"myForm.input.$error.required\">                                               // 21261\n               Required!</span>                                                                                        // 21262\n             <span class=\"error\" ng-show=\"myForm.input.$error.number\">                                                 // 21263\n               Not valid number!</span>                                                                                // 21264\n           </div>                                                                                                      // 21265\n           <tt>value = {{example.value}}</tt><br/>                                                                     // 21266\n           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                                 // 21267\n           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                                 // 21268\n           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                             // 21269\n           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                         // 21270\n          </form>                                                                                                      // 21271\n        </file>                                                                                                        // 21272\n        <file name=\"protractor.js\" type=\"protractor\">                                                                  // 21273\n          var value = element(by.binding('example.value'));                                                            // 21274\n          var valid = element(by.binding('myForm.input.$valid'));                                                      // 21275\n          var input = element(by.model('example.value'));                                                              // 21276\n                                                                                                                       // 21277\n          it('should initialize to model', function() {                                                                // 21278\n            expect(value.getText()).toContain('12');                                                                   // 21279\n            expect(valid.getText()).toContain('true');                                                                 // 21280\n          });                                                                                                          // 21281\n                                                                                                                       // 21282\n          it('should be invalid if empty', function() {                                                                // 21283\n            input.clear();                                                                                             // 21284\n            input.sendKeys('');                                                                                        // 21285\n            expect(value.getText()).toEqual('value =');                                                                // 21286\n            expect(valid.getText()).toContain('false');                                                                // 21287\n          });                                                                                                          // 21288\n                                                                                                                       // 21289\n          it('should be invalid if over max', function() {                                                             // 21290\n            input.clear();                                                                                             // 21291\n            input.sendKeys('123');                                                                                     // 21292\n            expect(value.getText()).toEqual('value =');                                                                // 21293\n            expect(valid.getText()).toContain('false');                                                                // 21294\n          });                                                                                                          // 21295\n        </file>                                                                                                        // 21296\n      </example>                                                                                                       // 21297\n   */                                                                                                                  // 21298\n  'number': numberInputType,                                                                                           // 21299\n                                                                                                                       // 21300\n                                                                                                                       // 21301\n  /**                                                                                                                  // 21302\n   * @ngdoc input                                                                                                      // 21303\n   * @name input[url]                                                                                                  // 21304\n   *                                                                                                                   // 21305\n   * @description                                                                                                      // 21306\n   * Text input with URL validation. Sets the `url` validation error key if the content is not a                       // 21307\n   * valid URL.                                                                                                        // 21308\n   *                                                                                                                   // 21309\n   * <div class=\"alert alert-warning\">                                                                                 // 21310\n   * **Note:** `input[url]` uses a regex to validate urls that is derived from the regex                               // 21311\n   * used in Chromium. If you need stricter validation, you can use `ng-pattern` or modify                             // 21312\n   * the built-in validators (see the {@link guide/forms Forms guide})                                                 // 21313\n   * </div>                                                                                                            // 21314\n   *                                                                                                                   // 21315\n   * @param {string} ngModel Assignable angular expression to data-bind to.                                            // 21316\n   * @param {string=} name Property name of the form under which the control is published.                             // 21317\n   * @param {string=} required Sets `required` validation error key if the value is not entered.                       // 21318\n   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                     // 21319\n   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                      // 21320\n   *    `required` when you want to data-bind to the `required` attribute.                                             // 21321\n   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than                   // 21322\n   *    minlength.                                                                                                     // 21323\n   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than                    // 21324\n   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of                     // 21325\n   *    any length.                                                                                                    // 21326\n   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string              // 21327\n   *    that contains the regular expression body that will be converted to a regular expression                       // 21328\n   *    as in the ngPattern directive.                                                                                 // 21329\n   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match                // 21330\n   *    a RegExp found by evaluating the Angular expression given in the attribute value.                              // 21331\n   *    If the expression evaluates to a RegExp object, then this is used directly.                                    // 21332\n   *    If the expression evaluates to a string, then it will be converted to a RegExp                                 // 21333\n   *    after wrapping it in `^` and `$` characters. For instance, `\"abc\"` will be converted to                        // 21334\n   *    `new RegExp('^abc$')`.<br />                                                                                   // 21335\n   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to                   // 21336\n   *    start at the index of the last search's match, thus not taking the whole input value into                      // 21337\n   *    account.                                                                                                       // 21338\n   * @param {string=} ngChange Angular expression to be executed when input changes due to user                        // 21339\n   *    interaction with the input element.                                                                            // 21340\n   *                                                                                                                   // 21341\n   * @example                                                                                                          // 21342\n      <example name=\"url-input-directive\" module=\"urlExample\">                                                         // 21343\n        <file name=\"index.html\">                                                                                       // 21344\n         <script>                                                                                                      // 21345\n           angular.module('urlExample', [])                                                                            // 21346\n             .controller('ExampleController', ['$scope', function($scope) {                                            // 21347\n               $scope.url = {                                                                                          // 21348\n                 text: 'http://google.com'                                                                             // 21349\n               };                                                                                                      // 21350\n             }]);                                                                                                      // 21351\n         </script>                                                                                                     // 21352\n         <form name=\"myForm\" ng-controller=\"ExampleController\">                                                        // 21353\n           <label>URL:                                                                                                 // 21354\n             <input type=\"url\" name=\"input\" ng-model=\"url.text\" required>                                              // 21355\n           <label>                                                                                                     // 21356\n           <div role=\"alert\">                                                                                          // 21357\n             <span class=\"error\" ng-show=\"myForm.input.$error.required\">                                               // 21358\n               Required!</span>                                                                                        // 21359\n             <span class=\"error\" ng-show=\"myForm.input.$error.url\">                                                    // 21360\n               Not valid url!</span>                                                                                   // 21361\n           </div>                                                                                                      // 21362\n           <tt>text = {{url.text}}</tt><br/>                                                                           // 21363\n           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                                 // 21364\n           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                                 // 21365\n           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                             // 21366\n           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                         // 21367\n           <tt>myForm.$error.url = {{!!myForm.$error.url}}</tt><br/>                                                   // 21368\n          </form>                                                                                                      // 21369\n        </file>                                                                                                        // 21370\n        <file name=\"protractor.js\" type=\"protractor\">                                                                  // 21371\n          var text = element(by.binding('url.text'));                                                                  // 21372\n          var valid = element(by.binding('myForm.input.$valid'));                                                      // 21373\n          var input = element(by.model('url.text'));                                                                   // 21374\n                                                                                                                       // 21375\n          it('should initialize to model', function() {                                                                // 21376\n            expect(text.getText()).toContain('http://google.com');                                                     // 21377\n            expect(valid.getText()).toContain('true');                                                                 // 21378\n          });                                                                                                          // 21379\n                                                                                                                       // 21380\n          it('should be invalid if empty', function() {                                                                // 21381\n            input.clear();                                                                                             // 21382\n            input.sendKeys('');                                                                                        // 21383\n                                                                                                                       // 21384\n            expect(text.getText()).toEqual('text =');                                                                  // 21385\n            expect(valid.getText()).toContain('false');                                                                // 21386\n          });                                                                                                          // 21387\n                                                                                                                       // 21388\n          it('should be invalid if not url', function() {                                                              // 21389\n            input.clear();                                                                                             // 21390\n            input.sendKeys('box');                                                                                     // 21391\n                                                                                                                       // 21392\n            expect(valid.getText()).toContain('false');                                                                // 21393\n          });                                                                                                          // 21394\n        </file>                                                                                                        // 21395\n      </example>                                                                                                       // 21396\n   */                                                                                                                  // 21397\n  'url': urlInputType,                                                                                                 // 21398\n                                                                                                                       // 21399\n                                                                                                                       // 21400\n  /**                                                                                                                  // 21401\n   * @ngdoc input                                                                                                      // 21402\n   * @name input[email]                                                                                                // 21403\n   *                                                                                                                   // 21404\n   * @description                                                                                                      // 21405\n   * Text input with email validation. Sets the `email` validation error key if not a valid email                      // 21406\n   * address.                                                                                                          // 21407\n   *                                                                                                                   // 21408\n   * <div class=\"alert alert-warning\">                                                                                 // 21409\n   * **Note:** `input[email]` uses a regex to validate email addresses that is derived from the regex                  // 21410\n   * used in Chromium. If you need stricter validation (e.g. requiring a top-level domain), you can                    // 21411\n   * use `ng-pattern` or modify the built-in validators (see the {@link guide/forms Forms guide})                      // 21412\n   * </div>                                                                                                            // 21413\n   *                                                                                                                   // 21414\n   * @param {string} ngModel Assignable angular expression to data-bind to.                                            // 21415\n   * @param {string=} name Property name of the form under which the control is published.                             // 21416\n   * @param {string=} required Sets `required` validation error key if the value is not entered.                       // 21417\n   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                     // 21418\n   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                      // 21419\n   *    `required` when you want to data-bind to the `required` attribute.                                             // 21420\n   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than                   // 21421\n   *    minlength.                                                                                                     // 21422\n   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than                    // 21423\n   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of                     // 21424\n   *    any length.                                                                                                    // 21425\n   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string              // 21426\n   *    that contains the regular expression body that will be converted to a regular expression                       // 21427\n   *    as in the ngPattern directive.                                                                                 // 21428\n   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match                // 21429\n   *    a RegExp found by evaluating the Angular expression given in the attribute value.                              // 21430\n   *    If the expression evaluates to a RegExp object, then this is used directly.                                    // 21431\n   *    If the expression evaluates to a string, then it will be converted to a RegExp                                 // 21432\n   *    after wrapping it in `^` and `$` characters. For instance, `\"abc\"` will be converted to                        // 21433\n   *    `new RegExp('^abc$')`.<br />                                                                                   // 21434\n   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to                   // 21435\n   *    start at the index of the last search's match, thus not taking the whole input value into                      // 21436\n   *    account.                                                                                                       // 21437\n   * @param {string=} ngChange Angular expression to be executed when input changes due to user                        // 21438\n   *    interaction with the input element.                                                                            // 21439\n   *                                                                                                                   // 21440\n   * @example                                                                                                          // 21441\n      <example name=\"email-input-directive\" module=\"emailExample\">                                                     // 21442\n        <file name=\"index.html\">                                                                                       // 21443\n         <script>                                                                                                      // 21444\n           angular.module('emailExample', [])                                                                          // 21445\n             .controller('ExampleController', ['$scope', function($scope) {                                            // 21446\n               $scope.email = {                                                                                        // 21447\n                 text: 'me@example.com'                                                                                // 21448\n               };                                                                                                      // 21449\n             }]);                                                                                                      // 21450\n         </script>                                                                                                     // 21451\n           <form name=\"myForm\" ng-controller=\"ExampleController\">                                                      // 21452\n             <label>Email:                                                                                             // 21453\n               <input type=\"email\" name=\"input\" ng-model=\"email.text\" required>                                        // 21454\n             </label>                                                                                                  // 21455\n             <div role=\"alert\">                                                                                        // 21456\n               <span class=\"error\" ng-show=\"myForm.input.$error.required\">                                             // 21457\n                 Required!</span>                                                                                      // 21458\n               <span class=\"error\" ng-show=\"myForm.input.$error.email\">                                                // 21459\n                 Not valid email!</span>                                                                               // 21460\n             </div>                                                                                                    // 21461\n             <tt>text = {{email.text}}</tt><br/>                                                                       // 21462\n             <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                               // 21463\n             <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                               // 21464\n             <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                           // 21465\n             <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                       // 21466\n             <tt>myForm.$error.email = {{!!myForm.$error.email}}</tt><br/>                                             // 21467\n           </form>                                                                                                     // 21468\n         </file>                                                                                                       // 21469\n        <file name=\"protractor.js\" type=\"protractor\">                                                                  // 21470\n          var text = element(by.binding('email.text'));                                                                // 21471\n          var valid = element(by.binding('myForm.input.$valid'));                                                      // 21472\n          var input = element(by.model('email.text'));                                                                 // 21473\n                                                                                                                       // 21474\n          it('should initialize to model', function() {                                                                // 21475\n            expect(text.getText()).toContain('me@example.com');                                                        // 21476\n            expect(valid.getText()).toContain('true');                                                                 // 21477\n          });                                                                                                          // 21478\n                                                                                                                       // 21479\n          it('should be invalid if empty', function() {                                                                // 21480\n            input.clear();                                                                                             // 21481\n            input.sendKeys('');                                                                                        // 21482\n            expect(text.getText()).toEqual('text =');                                                                  // 21483\n            expect(valid.getText()).toContain('false');                                                                // 21484\n          });                                                                                                          // 21485\n                                                                                                                       // 21486\n          it('should be invalid if not email', function() {                                                            // 21487\n            input.clear();                                                                                             // 21488\n            input.sendKeys('xxx');                                                                                     // 21489\n                                                                                                                       // 21490\n            expect(valid.getText()).toContain('false');                                                                // 21491\n          });                                                                                                          // 21492\n        </file>                                                                                                        // 21493\n      </example>                                                                                                       // 21494\n   */                                                                                                                  // 21495\n  'email': emailInputType,                                                                                             // 21496\n                                                                                                                       // 21497\n                                                                                                                       // 21498\n  /**                                                                                                                  // 21499\n   * @ngdoc input                                                                                                      // 21500\n   * @name input[radio]                                                                                                // 21501\n   *                                                                                                                   // 21502\n   * @description                                                                                                      // 21503\n   * HTML radio button.                                                                                                // 21504\n   *                                                                                                                   // 21505\n   * @param {string} ngModel Assignable angular expression to data-bind to.                                            // 21506\n   * @param {string} value The value to which the `ngModel` expression should be set when selected.                    // 21507\n   *    Note that `value` only supports `string` values, i.e. the scope model needs to be a string,                    // 21508\n   *    too. Use `ngValue` if you need complex models (`number`, `object`, ...).                                       // 21509\n   * @param {string=} name Property name of the form under which the control is published.                             // 21510\n   * @param {string=} ngChange Angular expression to be executed when input changes due to user                        // 21511\n   *    interaction with the input element.                                                                            // 21512\n   * @param {string} ngValue Angular expression to which `ngModel` will be be set when the radio                       // 21513\n   *    is selected. Should be used instead of the `value` attribute if you need                                       // 21514\n   *    a non-string `ngModel` (`boolean`, `array`, ...).                                                              // 21515\n   *                                                                                                                   // 21516\n   * @example                                                                                                          // 21517\n      <example name=\"radio-input-directive\" module=\"radioExample\">                                                     // 21518\n        <file name=\"index.html\">                                                                                       // 21519\n         <script>                                                                                                      // 21520\n           angular.module('radioExample', [])                                                                          // 21521\n             .controller('ExampleController', ['$scope', function($scope) {                                            // 21522\n               $scope.color = {                                                                                        // 21523\n                 name: 'blue'                                                                                          // 21524\n               };                                                                                                      // 21525\n               $scope.specialValue = {                                                                                 // 21526\n                 \"id\": \"12345\",                                                                                        // 21527\n                 \"value\": \"green\"                                                                                      // 21528\n               };                                                                                                      // 21529\n             }]);                                                                                                      // 21530\n         </script>                                                                                                     // 21531\n         <form name=\"myForm\" ng-controller=\"ExampleController\">                                                        // 21532\n           <label>                                                                                                     // 21533\n             <input type=\"radio\" ng-model=\"color.name\" value=\"red\">                                                    // 21534\n             Red                                                                                                       // 21535\n           </label><br/>                                                                                               // 21536\n           <label>                                                                                                     // 21537\n             <input type=\"radio\" ng-model=\"color.name\" ng-value=\"specialValue\">                                        // 21538\n             Green                                                                                                     // 21539\n           </label><br/>                                                                                               // 21540\n           <label>                                                                                                     // 21541\n             <input type=\"radio\" ng-model=\"color.name\" value=\"blue\">                                                   // 21542\n             Blue                                                                                                      // 21543\n           </label><br/>                                                                                               // 21544\n           <tt>color = {{color.name | json}}</tt><br/>                                                                 // 21545\n          </form>                                                                                                      // 21546\n          Note that `ng-value=\"specialValue\"` sets radio item's value to be the value of `$scope.specialValue`.        // 21547\n        </file>                                                                                                        // 21548\n        <file name=\"protractor.js\" type=\"protractor\">                                                                  // 21549\n          it('should change state', function() {                                                                       // 21550\n            var color = element(by.binding('color.name'));                                                             // 21551\n                                                                                                                       // 21552\n            expect(color.getText()).toContain('blue');                                                                 // 21553\n                                                                                                                       // 21554\n            element.all(by.model('color.name')).get(0).click();                                                        // 21555\n                                                                                                                       // 21556\n            expect(color.getText()).toContain('red');                                                                  // 21557\n          });                                                                                                          // 21558\n        </file>                                                                                                        // 21559\n      </example>                                                                                                       // 21560\n   */                                                                                                                  // 21561\n  'radio': radioInputType,                                                                                             // 21562\n                                                                                                                       // 21563\n                                                                                                                       // 21564\n  /**                                                                                                                  // 21565\n   * @ngdoc input                                                                                                      // 21566\n   * @name input[checkbox]                                                                                             // 21567\n   *                                                                                                                   // 21568\n   * @description                                                                                                      // 21569\n   * HTML checkbox.                                                                                                    // 21570\n   *                                                                                                                   // 21571\n   * @param {string} ngModel Assignable angular expression to data-bind to.                                            // 21572\n   * @param {string=} name Property name of the form under which the control is published.                             // 21573\n   * @param {expression=} ngTrueValue The value to which the expression should be set when selected.                   // 21574\n   * @param {expression=} ngFalseValue The value to which the expression should be set when not selected.              // 21575\n   * @param {string=} ngChange Angular expression to be executed when input changes due to user                        // 21576\n   *    interaction with the input element.                                                                            // 21577\n   *                                                                                                                   // 21578\n   * @example                                                                                                          // 21579\n      <example name=\"checkbox-input-directive\" module=\"checkboxExample\">                                               // 21580\n        <file name=\"index.html\">                                                                                       // 21581\n         <script>                                                                                                      // 21582\n           angular.module('checkboxExample', [])                                                                       // 21583\n             .controller('ExampleController', ['$scope', function($scope) {                                            // 21584\n               $scope.checkboxModel = {                                                                                // 21585\n                value1 : true,                                                                                         // 21586\n                value2 : 'YES'                                                                                         // 21587\n              };                                                                                                       // 21588\n             }]);                                                                                                      // 21589\n         </script>                                                                                                     // 21590\n         <form name=\"myForm\" ng-controller=\"ExampleController\">                                                        // 21591\n           <label>Value1:                                                                                              // 21592\n             <input type=\"checkbox\" ng-model=\"checkboxModel.value1\">                                                   // 21593\n           </label><br/>                                                                                               // 21594\n           <label>Value2:                                                                                              // 21595\n             <input type=\"checkbox\" ng-model=\"checkboxModel.value2\"                                                    // 21596\n                    ng-true-value=\"'YES'\" ng-false-value=\"'NO'\">                                                       // 21597\n            </label><br/>                                                                                              // 21598\n           <tt>value1 = {{checkboxModel.value1}}</tt><br/>                                                             // 21599\n           <tt>value2 = {{checkboxModel.value2}}</tt><br/>                                                             // 21600\n          </form>                                                                                                      // 21601\n        </file>                                                                                                        // 21602\n        <file name=\"protractor.js\" type=\"protractor\">                                                                  // 21603\n          it('should change state', function() {                                                                       // 21604\n            var value1 = element(by.binding('checkboxModel.value1'));                                                  // 21605\n            var value2 = element(by.binding('checkboxModel.value2'));                                                  // 21606\n                                                                                                                       // 21607\n            expect(value1.getText()).toContain('true');                                                                // 21608\n            expect(value2.getText()).toContain('YES');                                                                 // 21609\n                                                                                                                       // 21610\n            element(by.model('checkboxModel.value1')).click();                                                         // 21611\n            element(by.model('checkboxModel.value2')).click();                                                         // 21612\n                                                                                                                       // 21613\n            expect(value1.getText()).toContain('false');                                                               // 21614\n            expect(value2.getText()).toContain('NO');                                                                  // 21615\n          });                                                                                                          // 21616\n        </file>                                                                                                        // 21617\n      </example>                                                                                                       // 21618\n   */                                                                                                                  // 21619\n  'checkbox': checkboxInputType,                                                                                       // 21620\n                                                                                                                       // 21621\n  'hidden': noop,                                                                                                      // 21622\n  'button': noop,                                                                                                      // 21623\n  'submit': noop,                                                                                                      // 21624\n  'reset': noop,                                                                                                       // 21625\n  'file': noop                                                                                                         // 21626\n};                                                                                                                     // 21627\n                                                                                                                       // 21628\nfunction stringBasedInputType(ctrl) {                                                                                  // 21629\n  ctrl.$formatters.push(function(value) {                                                                              // 21630\n    return ctrl.$isEmpty(value) ? value : value.toString();                                                            // 21631\n  });                                                                                                                  // 21632\n}                                                                                                                      // 21633\n                                                                                                                       // 21634\nfunction textInputType(scope, element, attr, ctrl, $sniffer, $browser) {                                               // 21635\n  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);                                                       // 21636\n  stringBasedInputType(ctrl);                                                                                          // 21637\n}                                                                                                                      // 21638\n                                                                                                                       // 21639\nfunction baseInputType(scope, element, attr, ctrl, $sniffer, $browser) {                                               // 21640\n  var type = lowercase(element[0].type);                                                                               // 21641\n                                                                                                                       // 21642\n  // In composition mode, users are still inputing intermediate text buffer,                                           // 21643\n  // hold the listener until composition is done.                                                                      // 21644\n  // More about composition events: https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent                  // 21645\n  if (!$sniffer.android) {                                                                                             // 21646\n    var composing = false;                                                                                             // 21647\n                                                                                                                       // 21648\n    element.on('compositionstart', function(data) {                                                                    // 21649\n      composing = true;                                                                                                // 21650\n    });                                                                                                                // 21651\n                                                                                                                       // 21652\n    element.on('compositionend', function() {                                                                          // 21653\n      composing = false;                                                                                               // 21654\n      listener();                                                                                                      // 21655\n    });                                                                                                                // 21656\n  }                                                                                                                    // 21657\n                                                                                                                       // 21658\n  var listener = function(ev) {                                                                                        // 21659\n    if (timeout) {                                                                                                     // 21660\n      $browser.defer.cancel(timeout);                                                                                  // 21661\n      timeout = null;                                                                                                  // 21662\n    }                                                                                                                  // 21663\n    if (composing) return;                                                                                             // 21664\n    var value = element.val(),                                                                                         // 21665\n        event = ev && ev.type;                                                                                         // 21666\n                                                                                                                       // 21667\n    // By default we will trim the value                                                                               // 21668\n    // If the attribute ng-trim exists we will avoid trimming                                                          // 21669\n    // If input type is 'password', the value is never trimmed                                                         // 21670\n    if (type !== 'password' && (!attr.ngTrim || attr.ngTrim !== 'false')) {                                            // 21671\n      value = trim(value);                                                                                             // 21672\n    }                                                                                                                  // 21673\n                                                                                                                       // 21674\n    // If a control is suffering from bad input (due to native validators), browsers discard its                       // 21675\n    // value, so it may be necessary to revalidate (by calling $setViewValue again) even if the                        // 21676\n    // control's value is the same empty value twice in a row.                                                         // 21677\n    if (ctrl.$viewValue !== value || (value === '' && ctrl.$$hasNativeValidators)) {                                   // 21678\n      ctrl.$setViewValue(value, event);                                                                                // 21679\n    }                                                                                                                  // 21680\n  };                                                                                                                   // 21681\n                                                                                                                       // 21682\n  // if the browser does support \"input\" event, we are fine - except on IE9 which doesn't fire the                     // 21683\n  // input event on backspace, delete or cut                                                                           // 21684\n  if ($sniffer.hasEvent('input')) {                                                                                    // 21685\n    element.on('input', listener);                                                                                     // 21686\n  } else {                                                                                                             // 21687\n    var timeout;                                                                                                       // 21688\n                                                                                                                       // 21689\n    var deferListener = function(ev, input, origValue) {                                                               // 21690\n      if (!timeout) {                                                                                                  // 21691\n        timeout = $browser.defer(function() {                                                                          // 21692\n          timeout = null;                                                                                              // 21693\n          if (!input || input.value !== origValue) {                                                                   // 21694\n            listener(ev);                                                                                              // 21695\n          }                                                                                                            // 21696\n        });                                                                                                            // 21697\n      }                                                                                                                // 21698\n    };                                                                                                                 // 21699\n                                                                                                                       // 21700\n    element.on('keydown', function(event) {                                                                            // 21701\n      var key = event.keyCode;                                                                                         // 21702\n                                                                                                                       // 21703\n      // ignore                                                                                                        // 21704\n      //    command            modifiers                   arrows                                                      // 21705\n      if (key === 91 || (15 < key && key < 19) || (37 <= key && key <= 40)) return;                                    // 21706\n                                                                                                                       // 21707\n      deferListener(event, this, this.value);                                                                          // 21708\n    });                                                                                                                // 21709\n                                                                                                                       // 21710\n    // if user modifies input value using context menu in IE, we need \"paste\" and \"cut\" events to catch it             // 21711\n    if ($sniffer.hasEvent('paste')) {                                                                                  // 21712\n      element.on('paste cut', deferListener);                                                                          // 21713\n    }                                                                                                                  // 21714\n  }                                                                                                                    // 21715\n                                                                                                                       // 21716\n  // if user paste into input using mouse on older browser                                                             // 21717\n  // or form autocomplete on newer browser, we need \"change\" event to catch it                                         // 21718\n  element.on('change', listener);                                                                                      // 21719\n                                                                                                                       // 21720\n  ctrl.$render = function() {                                                                                          // 21721\n    // Workaround for Firefox validation #12102.                                                                       // 21722\n    var value = ctrl.$isEmpty(ctrl.$viewValue) ? '' : ctrl.$viewValue;                                                 // 21723\n    if (element.val() !== value) {                                                                                     // 21724\n      element.val(value);                                                                                              // 21725\n    }                                                                                                                  // 21726\n  };                                                                                                                   // 21727\n}                                                                                                                      // 21728\n                                                                                                                       // 21729\nfunction weekParser(isoWeek, existingDate) {                                                                           // 21730\n  if (isDate(isoWeek)) {                                                                                               // 21731\n    return isoWeek;                                                                                                    // 21732\n  }                                                                                                                    // 21733\n                                                                                                                       // 21734\n  if (isString(isoWeek)) {                                                                                             // 21735\n    WEEK_REGEXP.lastIndex = 0;                                                                                         // 21736\n    var parts = WEEK_REGEXP.exec(isoWeek);                                                                             // 21737\n    if (parts) {                                                                                                       // 21738\n      var year = +parts[1],                                                                                            // 21739\n          week = +parts[2],                                                                                            // 21740\n          hours = 0,                                                                                                   // 21741\n          minutes = 0,                                                                                                 // 21742\n          seconds = 0,                                                                                                 // 21743\n          milliseconds = 0,                                                                                            // 21744\n          firstThurs = getFirstThursdayOfYear(year),                                                                   // 21745\n          addDays = (week - 1) * 7;                                                                                    // 21746\n                                                                                                                       // 21747\n      if (existingDate) {                                                                                              // 21748\n        hours = existingDate.getHours();                                                                               // 21749\n        minutes = existingDate.getMinutes();                                                                           // 21750\n        seconds = existingDate.getSeconds();                                                                           // 21751\n        milliseconds = existingDate.getMilliseconds();                                                                 // 21752\n      }                                                                                                                // 21753\n                                                                                                                       // 21754\n      return new Date(year, 0, firstThurs.getDate() + addDays, hours, minutes, seconds, milliseconds);                 // 21755\n    }                                                                                                                  // 21756\n  }                                                                                                                    // 21757\n                                                                                                                       // 21758\n  return NaN;                                                                                                          // 21759\n}                                                                                                                      // 21760\n                                                                                                                       // 21761\nfunction createDateParser(regexp, mapping) {                                                                           // 21762\n  return function(iso, date) {                                                                                         // 21763\n    var parts, map;                                                                                                    // 21764\n                                                                                                                       // 21765\n    if (isDate(iso)) {                                                                                                 // 21766\n      return iso;                                                                                                      // 21767\n    }                                                                                                                  // 21768\n                                                                                                                       // 21769\n    if (isString(iso)) {                                                                                               // 21770\n      // When a date is JSON'ified to wraps itself inside of an extra                                                  // 21771\n      // set of double quotes. This makes the date parsing code unable                                                 // 21772\n      // to match the date string and parse it as a date.                                                              // 21773\n      if (iso.charAt(0) == '\"' && iso.charAt(iso.length - 1) == '\"') {                                                 // 21774\n        iso = iso.substring(1, iso.length - 1);                                                                        // 21775\n      }                                                                                                                // 21776\n      if (ISO_DATE_REGEXP.test(iso)) {                                                                                 // 21777\n        return new Date(iso);                                                                                          // 21778\n      }                                                                                                                // 21779\n      regexp.lastIndex = 0;                                                                                            // 21780\n      parts = regexp.exec(iso);                                                                                        // 21781\n                                                                                                                       // 21782\n      if (parts) {                                                                                                     // 21783\n        parts.shift();                                                                                                 // 21784\n        if (date) {                                                                                                    // 21785\n          map = {                                                                                                      // 21786\n            yyyy: date.getFullYear(),                                                                                  // 21787\n            MM: date.getMonth() + 1,                                                                                   // 21788\n            dd: date.getDate(),                                                                                        // 21789\n            HH: date.getHours(),                                                                                       // 21790\n            mm: date.getMinutes(),                                                                                     // 21791\n            ss: date.getSeconds(),                                                                                     // 21792\n            sss: date.getMilliseconds() / 1000                                                                         // 21793\n          };                                                                                                           // 21794\n        } else {                                                                                                       // 21795\n          map = { yyyy: 1970, MM: 1, dd: 1, HH: 0, mm: 0, ss: 0, sss: 0 };                                             // 21796\n        }                                                                                                              // 21797\n                                                                                                                       // 21798\n        forEach(parts, function(part, index) {                                                                         // 21799\n          if (index < mapping.length) {                                                                                // 21800\n            map[mapping[index]] = +part;                                                                               // 21801\n          }                                                                                                            // 21802\n        });                                                                                                            // 21803\n        return new Date(map.yyyy, map.MM - 1, map.dd, map.HH, map.mm, map.ss || 0, map.sss * 1000 || 0);               // 21804\n      }                                                                                                                // 21805\n    }                                                                                                                  // 21806\n                                                                                                                       // 21807\n    return NaN;                                                                                                        // 21808\n  };                                                                                                                   // 21809\n}                                                                                                                      // 21810\n                                                                                                                       // 21811\nfunction createDateInputType(type, regexp, parseDate, format) {                                                        // 21812\n  return function dynamicDateInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter) {                      // 21813\n    badInputChecker(scope, element, attr, ctrl);                                                                       // 21814\n    baseInputType(scope, element, attr, ctrl, $sniffer, $browser);                                                     // 21815\n    var timezone = ctrl && ctrl.$options && ctrl.$options.timezone;                                                    // 21816\n    var previousDate;                                                                                                  // 21817\n                                                                                                                       // 21818\n    ctrl.$$parserName = type;                                                                                          // 21819\n    ctrl.$parsers.push(function(value) {                                                                               // 21820\n      if (ctrl.$isEmpty(value)) return null;                                                                           // 21821\n      if (regexp.test(value)) {                                                                                        // 21822\n        // Note: We cannot read ctrl.$modelValue, as there might be a different                                        // 21823\n        // parser/formatter in the processing chain so that the model                                                  // 21824\n        // contains some different data format!                                                                        // 21825\n        var parsedDate = parseDate(value, previousDate);                                                               // 21826\n        if (timezone) {                                                                                                // 21827\n          parsedDate = convertTimezoneToLocal(parsedDate, timezone);                                                   // 21828\n        }                                                                                                              // 21829\n        return parsedDate;                                                                                             // 21830\n      }                                                                                                                // 21831\n      return undefined;                                                                                                // 21832\n    });                                                                                                                // 21833\n                                                                                                                       // 21834\n    ctrl.$formatters.push(function(value) {                                                                            // 21835\n      if (value && !isDate(value)) {                                                                                   // 21836\n        throw ngModelMinErr('datefmt', 'Expected `{0}` to be a date', value);                                          // 21837\n      }                                                                                                                // 21838\n      if (isValidDate(value)) {                                                                                        // 21839\n        previousDate = value;                                                                                          // 21840\n        if (previousDate && timezone) {                                                                                // 21841\n          previousDate = convertTimezoneToLocal(previousDate, timezone, true);                                         // 21842\n        }                                                                                                              // 21843\n        return $filter('date')(value, format, timezone);                                                               // 21844\n      } else {                                                                                                         // 21845\n        previousDate = null;                                                                                           // 21846\n        return '';                                                                                                     // 21847\n      }                                                                                                                // 21848\n    });                                                                                                                // 21849\n                                                                                                                       // 21850\n    if (isDefined(attr.min) || attr.ngMin) {                                                                           // 21851\n      var minVal;                                                                                                      // 21852\n      ctrl.$validators.min = function(value) {                                                                         // 21853\n        return !isValidDate(value) || isUndefined(minVal) || parseDate(value) >= minVal;                               // 21854\n      };                                                                                                               // 21855\n      attr.$observe('min', function(val) {                                                                             // 21856\n        minVal = parseObservedDateValue(val);                                                                          // 21857\n        ctrl.$validate();                                                                                              // 21858\n      });                                                                                                              // 21859\n    }                                                                                                                  // 21860\n                                                                                                                       // 21861\n    if (isDefined(attr.max) || attr.ngMax) {                                                                           // 21862\n      var maxVal;                                                                                                      // 21863\n      ctrl.$validators.max = function(value) {                                                                         // 21864\n        return !isValidDate(value) || isUndefined(maxVal) || parseDate(value) <= maxVal;                               // 21865\n      };                                                                                                               // 21866\n      attr.$observe('max', function(val) {                                                                             // 21867\n        maxVal = parseObservedDateValue(val);                                                                          // 21868\n        ctrl.$validate();                                                                                              // 21869\n      });                                                                                                              // 21870\n    }                                                                                                                  // 21871\n                                                                                                                       // 21872\n    function isValidDate(value) {                                                                                      // 21873\n      // Invalid Date: getTime() returns NaN                                                                           // 21874\n      return value && !(value.getTime && value.getTime() !== value.getTime());                                         // 21875\n    }                                                                                                                  // 21876\n                                                                                                                       // 21877\n    function parseObservedDateValue(val) {                                                                             // 21878\n      return isDefined(val) && !isDate(val) ? parseDate(val) || undefined : val;                                       // 21879\n    }                                                                                                                  // 21880\n  };                                                                                                                   // 21881\n}                                                                                                                      // 21882\n                                                                                                                       // 21883\nfunction badInputChecker(scope, element, attr, ctrl) {                                                                 // 21884\n  var node = element[0];                                                                                               // 21885\n  var nativeValidation = ctrl.$$hasNativeValidators = isObject(node.validity);                                         // 21886\n  if (nativeValidation) {                                                                                              // 21887\n    ctrl.$parsers.push(function(value) {                                                                               // 21888\n      var validity = element.prop(VALIDITY_STATE_PROPERTY) || {};                                                      // 21889\n      // Detect bug in FF35 for input[email] (https://bugzilla.mozilla.org/show_bug.cgi?id=1064430):                   // 21890\n      // - also sets validity.badInput (should only be validity.typeMismatch).                                         // 21891\n      // - see http://www.whatwg.org/specs/web-apps/current-work/multipage/forms.html#e-mail-state-(type=email)        // 21892\n      // - can ignore this case as we can still read out the erroneous email...                                        // 21893\n      return validity.badInput && !validity.typeMismatch ? undefined : value;                                          // 21894\n    });                                                                                                                // 21895\n  }                                                                                                                    // 21896\n}                                                                                                                      // 21897\n                                                                                                                       // 21898\nfunction numberInputType(scope, element, attr, ctrl, $sniffer, $browser) {                                             // 21899\n  badInputChecker(scope, element, attr, ctrl);                                                                         // 21900\n  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);                                                       // 21901\n                                                                                                                       // 21902\n  ctrl.$$parserName = 'number';                                                                                        // 21903\n  ctrl.$parsers.push(function(value) {                                                                                 // 21904\n    if (ctrl.$isEmpty(value))      return null;                                                                        // 21905\n    if (NUMBER_REGEXP.test(value)) return parseFloat(value);                                                           // 21906\n    return undefined;                                                                                                  // 21907\n  });                                                                                                                  // 21908\n                                                                                                                       // 21909\n  ctrl.$formatters.push(function(value) {                                                                              // 21910\n    if (!ctrl.$isEmpty(value)) {                                                                                       // 21911\n      if (!isNumber(value)) {                                                                                          // 21912\n        throw ngModelMinErr('numfmt', 'Expected `{0}` to be a number', value);                                         // 21913\n      }                                                                                                                // 21914\n      value = value.toString();                                                                                        // 21915\n    }                                                                                                                  // 21916\n    return value;                                                                                                      // 21917\n  });                                                                                                                  // 21918\n                                                                                                                       // 21919\n  if (isDefined(attr.min) || attr.ngMin) {                                                                             // 21920\n    var minVal;                                                                                                        // 21921\n    ctrl.$validators.min = function(value) {                                                                           // 21922\n      return ctrl.$isEmpty(value) || isUndefined(minVal) || value >= minVal;                                           // 21923\n    };                                                                                                                 // 21924\n                                                                                                                       // 21925\n    attr.$observe('min', function(val) {                                                                               // 21926\n      if (isDefined(val) && !isNumber(val)) {                                                                          // 21927\n        val = parseFloat(val, 10);                                                                                     // 21928\n      }                                                                                                                // 21929\n      minVal = isNumber(val) && !isNaN(val) ? val : undefined;                                                         // 21930\n      // TODO(matsko): implement validateLater to reduce number of validations                                         // 21931\n      ctrl.$validate();                                                                                                // 21932\n    });                                                                                                                // 21933\n  }                                                                                                                    // 21934\n                                                                                                                       // 21935\n  if (isDefined(attr.max) || attr.ngMax) {                                                                             // 21936\n    var maxVal;                                                                                                        // 21937\n    ctrl.$validators.max = function(value) {                                                                           // 21938\n      return ctrl.$isEmpty(value) || isUndefined(maxVal) || value <= maxVal;                                           // 21939\n    };                                                                                                                 // 21940\n                                                                                                                       // 21941\n    attr.$observe('max', function(val) {                                                                               // 21942\n      if (isDefined(val) && !isNumber(val)) {                                                                          // 21943\n        val = parseFloat(val, 10);                                                                                     // 21944\n      }                                                                                                                // 21945\n      maxVal = isNumber(val) && !isNaN(val) ? val : undefined;                                                         // 21946\n      // TODO(matsko): implement validateLater to reduce number of validations                                         // 21947\n      ctrl.$validate();                                                                                                // 21948\n    });                                                                                                                // 21949\n  }                                                                                                                    // 21950\n}                                                                                                                      // 21951\n                                                                                                                       // 21952\nfunction urlInputType(scope, element, attr, ctrl, $sniffer, $browser) {                                                // 21953\n  // Note: no badInputChecker here by purpose as `url` is only a validation                                            // 21954\n  // in browsers, i.e. we can always read out input.value even if it is not valid!                                     // 21955\n  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);                                                       // 21956\n  stringBasedInputType(ctrl);                                                                                          // 21957\n                                                                                                                       // 21958\n  ctrl.$$parserName = 'url';                                                                                           // 21959\n  ctrl.$validators.url = function(modelValue, viewValue) {                                                             // 21960\n    var value = modelValue || viewValue;                                                                               // 21961\n    return ctrl.$isEmpty(value) || URL_REGEXP.test(value);                                                             // 21962\n  };                                                                                                                   // 21963\n}                                                                                                                      // 21964\n                                                                                                                       // 21965\nfunction emailInputType(scope, element, attr, ctrl, $sniffer, $browser) {                                              // 21966\n  // Note: no badInputChecker here by purpose as `url` is only a validation                                            // 21967\n  // in browsers, i.e. we can always read out input.value even if it is not valid!                                     // 21968\n  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);                                                       // 21969\n  stringBasedInputType(ctrl);                                                                                          // 21970\n                                                                                                                       // 21971\n  ctrl.$$parserName = 'email';                                                                                         // 21972\n  ctrl.$validators.email = function(modelValue, viewValue) {                                                           // 21973\n    var value = modelValue || viewValue;                                                                               // 21974\n    return ctrl.$isEmpty(value) || EMAIL_REGEXP.test(value);                                                           // 21975\n  };                                                                                                                   // 21976\n}                                                                                                                      // 21977\n                                                                                                                       // 21978\nfunction radioInputType(scope, element, attr, ctrl) {                                                                  // 21979\n  // make the name unique, if not defined                                                                              // 21980\n  if (isUndefined(attr.name)) {                                                                                        // 21981\n    element.attr('name', nextUid());                                                                                   // 21982\n  }                                                                                                                    // 21983\n                                                                                                                       // 21984\n  var listener = function(ev) {                                                                                        // 21985\n    if (element[0].checked) {                                                                                          // 21986\n      ctrl.$setViewValue(attr.value, ev && ev.type);                                                                   // 21987\n    }                                                                                                                  // 21988\n  };                                                                                                                   // 21989\n                                                                                                                       // 21990\n  element.on('click', listener);                                                                                       // 21991\n                                                                                                                       // 21992\n  ctrl.$render = function() {                                                                                          // 21993\n    var value = attr.value;                                                                                            // 21994\n    element[0].checked = (value == ctrl.$viewValue);                                                                   // 21995\n  };                                                                                                                   // 21996\n                                                                                                                       // 21997\n  attr.$observe('value', ctrl.$render);                                                                                // 21998\n}                                                                                                                      // 21999\n                                                                                                                       // 22000\nfunction parseConstantExpr($parse, context, name, expression, fallback) {                                              // 22001\n  var parseFn;                                                                                                         // 22002\n  if (isDefined(expression)) {                                                                                         // 22003\n    parseFn = $parse(expression);                                                                                      // 22004\n    if (!parseFn.constant) {                                                                                           // 22005\n      throw ngModelMinErr('constexpr', 'Expected constant expression for `{0}`, but saw ' +                            // 22006\n                                   '`{1}`.', name, expression);                                                        // 22007\n    }                                                                                                                  // 22008\n    return parseFn(context);                                                                                           // 22009\n  }                                                                                                                    // 22010\n  return fallback;                                                                                                     // 22011\n}                                                                                                                      // 22012\n                                                                                                                       // 22013\nfunction checkboxInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter, $parse) {                          // 22014\n  var trueValue = parseConstantExpr($parse, scope, 'ngTrueValue', attr.ngTrueValue, true);                             // 22015\n  var falseValue = parseConstantExpr($parse, scope, 'ngFalseValue', attr.ngFalseValue, false);                         // 22016\n                                                                                                                       // 22017\n  var listener = function(ev) {                                                                                        // 22018\n    ctrl.$setViewValue(element[0].checked, ev && ev.type);                                                             // 22019\n  };                                                                                                                   // 22020\n                                                                                                                       // 22021\n  element.on('click', listener);                                                                                       // 22022\n                                                                                                                       // 22023\n  ctrl.$render = function() {                                                                                          // 22024\n    element[0].checked = ctrl.$viewValue;                                                                              // 22025\n  };                                                                                                                   // 22026\n                                                                                                                       // 22027\n  // Override the standard `$isEmpty` because the $viewValue of an empty checkbox is always set to `false`             // 22028\n  // This is because of the parser below, which compares the `$modelValue` with `trueValue` to convert                 // 22029\n  // it to a boolean.                                                                                                  // 22030\n  ctrl.$isEmpty = function(value) {                                                                                    // 22031\n    return value === false;                                                                                            // 22032\n  };                                                                                                                   // 22033\n                                                                                                                       // 22034\n  ctrl.$formatters.push(function(value) {                                                                              // 22035\n    return equals(value, trueValue);                                                                                   // 22036\n  });                                                                                                                  // 22037\n                                                                                                                       // 22038\n  ctrl.$parsers.push(function(value) {                                                                                 // 22039\n    return value ? trueValue : falseValue;                                                                             // 22040\n  });                                                                                                                  // 22041\n}                                                                                                                      // 22042\n                                                                                                                       // 22043\n                                                                                                                       // 22044\n/**                                                                                                                    // 22045\n * @ngdoc directive                                                                                                    // 22046\n * @name textarea                                                                                                      // 22047\n * @restrict E                                                                                                         // 22048\n *                                                                                                                     // 22049\n * @description                                                                                                        // 22050\n * HTML textarea element control with angular data-binding. The data-binding and validation                            // 22051\n * properties of this element are exactly the same as those of the                                                     // 22052\n * {@link ng.directive:input input element}.                                                                           // 22053\n *                                                                                                                     // 22054\n * @param {string} ngModel Assignable angular expression to data-bind to.                                              // 22055\n * @param {string=} name Property name of the form under which the control is published.                               // 22056\n * @param {string=} required Sets `required` validation error key if the value is not entered.                         // 22057\n * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                       // 22058\n *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                        // 22059\n *    `required` when you want to data-bind to the `required` attribute.                                               // 22060\n * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than                     // 22061\n *    minlength.                                                                                                       // 22062\n * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than                      // 22063\n *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any                   // 22064\n *    length.                                                                                                          // 22065\n * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match                  // 22066\n *    a RegExp found by evaluating the Angular expression given in the attribute value.                                // 22067\n *    If the expression evaluates to a RegExp object, then this is used directly.                                      // 22068\n *    If the expression evaluates to a string, then it will be converted to a RegExp                                   // 22069\n *    after wrapping it in `^` and `$` characters. For instance, `\"abc\"` will be converted to                          // 22070\n *    `new RegExp('^abc$')`.<br />                                                                                     // 22071\n *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to                     // 22072\n *    start at the index of the last search's match, thus not taking the whole input value into                        // 22073\n *    account.                                                                                                         // 22074\n * @param {string=} ngChange Angular expression to be executed when input changes due to user                          // 22075\n *    interaction with the input element.                                                                              // 22076\n * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.                      // 22077\n */                                                                                                                    // 22078\n                                                                                                                       // 22079\n                                                                                                                       // 22080\n/**                                                                                                                    // 22081\n * @ngdoc directive                                                                                                    // 22082\n * @name input                                                                                                         // 22083\n * @restrict E                                                                                                         // 22084\n *                                                                                                                     // 22085\n * @description                                                                                                        // 22086\n * HTML input element control. When used together with {@link ngModel `ngModel`}, it provides data-binding,            // 22087\n * input state control, and validation.                                                                                // 22088\n * Input control follows HTML5 input types and polyfills the HTML5 validation behavior for older browsers.             // 22089\n *                                                                                                                     // 22090\n * <div class=\"alert alert-warning\">                                                                                   // 22091\n * **Note:** Not every feature offered is available for all input types.                                               // 22092\n * Specifically, data binding and event handling via `ng-model` is unsupported for `input[file]`.                      // 22093\n * </div>                                                                                                              // 22094\n *                                                                                                                     // 22095\n * @param {string} ngModel Assignable angular expression to data-bind to.                                              // 22096\n * @param {string=} name Property name of the form under which the control is published.                               // 22097\n * @param {string=} required Sets `required` validation error key if the value is not entered.                         // 22098\n * @param {boolean=} ngRequired Sets `required` attribute if set to true                                               // 22099\n * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than                     // 22100\n *    minlength.                                                                                                       // 22101\n * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than                      // 22102\n *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any                   // 22103\n *    length.                                                                                                          // 22104\n * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match                  // 22105\n *    a RegExp found by evaluating the Angular expression given in the attribute value.                                // 22106\n *    If the expression evaluates to a RegExp object, then this is used directly.                                      // 22107\n *    If the expression evaluates to a string, then it will be converted to a RegExp                                   // 22108\n *    after wrapping it in `^` and `$` characters. For instance, `\"abc\"` will be converted to                          // 22109\n *    `new RegExp('^abc$')`.<br />                                                                                     // 22110\n *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to                     // 22111\n *    start at the index of the last search's match, thus not taking the whole input value into                        // 22112\n *    account.                                                                                                         // 22113\n * @param {string=} ngChange Angular expression to be executed when input changes due to user                          // 22114\n *    interaction with the input element.                                                                              // 22115\n * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.                      // 22116\n *    This parameter is ignored for input[type=password] controls, which will never trim the                           // 22117\n *    input.                                                                                                           // 22118\n *                                                                                                                     // 22119\n * @example                                                                                                            // 22120\n    <example name=\"input-directive\" module=\"inputExample\">                                                             // 22121\n      <file name=\"index.html\">                                                                                         // 22122\n       <script>                                                                                                        // 22123\n          angular.module('inputExample', [])                                                                           // 22124\n            .controller('ExampleController', ['$scope', function($scope) {                                             // 22125\n              $scope.user = {name: 'guest', last: 'visitor'};                                                          // 22126\n            }]);                                                                                                       // 22127\n       </script>                                                                                                       // 22128\n       <div ng-controller=\"ExampleController\">                                                                         // 22129\n         <form name=\"myForm\">                                                                                          // 22130\n           <label>                                                                                                     // 22131\n              User name:                                                                                               // 22132\n              <input type=\"text\" name=\"userName\" ng-model=\"user.name\" required>                                        // 22133\n           </label>                                                                                                    // 22134\n           <div role=\"alert\">                                                                                          // 22135\n             <span class=\"error\" ng-show=\"myForm.userName.$error.required\">                                            // 22136\n              Required!</span>                                                                                         // 22137\n           </div>                                                                                                      // 22138\n           <label>                                                                                                     // 22139\n              Last name:                                                                                               // 22140\n              <input type=\"text\" name=\"lastName\" ng-model=\"user.last\"                                                  // 22141\n              ng-minlength=\"3\" ng-maxlength=\"10\">                                                                      // 22142\n           </label>                                                                                                    // 22143\n           <div role=\"alert\">                                                                                          // 22144\n             <span class=\"error\" ng-show=\"myForm.lastName.$error.minlength\">                                           // 22145\n               Too short!</span>                                                                                       // 22146\n             <span class=\"error\" ng-show=\"myForm.lastName.$error.maxlength\">                                           // 22147\n               Too long!</span>                                                                                        // 22148\n           </div>                                                                                                      // 22149\n         </form>                                                                                                       // 22150\n         <hr>                                                                                                          // 22151\n         <tt>user = {{user}}</tt><br/>                                                                                 // 22152\n         <tt>myForm.userName.$valid = {{myForm.userName.$valid}}</tt><br/>                                             // 22153\n         <tt>myForm.userName.$error = {{myForm.userName.$error}}</tt><br/>                                             // 22154\n         <tt>myForm.lastName.$valid = {{myForm.lastName.$valid}}</tt><br/>                                             // 22155\n         <tt>myForm.lastName.$error = {{myForm.lastName.$error}}</tt><br/>                                             // 22156\n         <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                               // 22157\n         <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                           // 22158\n         <tt>myForm.$error.minlength = {{!!myForm.$error.minlength}}</tt><br/>                                         // 22159\n         <tt>myForm.$error.maxlength = {{!!myForm.$error.maxlength}}</tt><br/>                                         // 22160\n       </div>                                                                                                          // 22161\n      </file>                                                                                                          // 22162\n      <file name=\"protractor.js\" type=\"protractor\">                                                                    // 22163\n        var user = element(by.exactBinding('user'));                                                                   // 22164\n        var userNameValid = element(by.binding('myForm.userName.$valid'));                                             // 22165\n        var lastNameValid = element(by.binding('myForm.lastName.$valid'));                                             // 22166\n        var lastNameError = element(by.binding('myForm.lastName.$error'));                                             // 22167\n        var formValid = element(by.binding('myForm.$valid'));                                                          // 22168\n        var userNameInput = element(by.model('user.name'));                                                            // 22169\n        var userLastInput = element(by.model('user.last'));                                                            // 22170\n                                                                                                                       // 22171\n        it('should initialize to model', function() {                                                                  // 22172\n          expect(user.getText()).toContain('{\"name\":\"guest\",\"last\":\"visitor\"}');                                       // 22173\n          expect(userNameValid.getText()).toContain('true');                                                           // 22174\n          expect(formValid.getText()).toContain('true');                                                               // 22175\n        });                                                                                                            // 22176\n                                                                                                                       // 22177\n        it('should be invalid if empty when required', function() {                                                    // 22178\n          userNameInput.clear();                                                                                       // 22179\n          userNameInput.sendKeys('');                                                                                  // 22180\n                                                                                                                       // 22181\n          expect(user.getText()).toContain('{\"last\":\"visitor\"}');                                                      // 22182\n          expect(userNameValid.getText()).toContain('false');                                                          // 22183\n          expect(formValid.getText()).toContain('false');                                                              // 22184\n        });                                                                                                            // 22185\n                                                                                                                       // 22186\n        it('should be valid if empty when min length is set', function() {                                             // 22187\n          userLastInput.clear();                                                                                       // 22188\n          userLastInput.sendKeys('');                                                                                  // 22189\n                                                                                                                       // 22190\n          expect(user.getText()).toContain('{\"name\":\"guest\",\"last\":\"\"}');                                              // 22191\n          expect(lastNameValid.getText()).toContain('true');                                                           // 22192\n          expect(formValid.getText()).toContain('true');                                                               // 22193\n        });                                                                                                            // 22194\n                                                                                                                       // 22195\n        it('should be invalid if less than required min length', function() {                                          // 22196\n          userLastInput.clear();                                                                                       // 22197\n          userLastInput.sendKeys('xx');                                                                                // 22198\n                                                                                                                       // 22199\n          expect(user.getText()).toContain('{\"name\":\"guest\"}');                                                        // 22200\n          expect(lastNameValid.getText()).toContain('false');                                                          // 22201\n          expect(lastNameError.getText()).toContain('minlength');                                                      // 22202\n          expect(formValid.getText()).toContain('false');                                                              // 22203\n        });                                                                                                            // 22204\n                                                                                                                       // 22205\n        it('should be invalid if longer than max length', function() {                                                 // 22206\n          userLastInput.clear();                                                                                       // 22207\n          userLastInput.sendKeys('some ridiculously long name');                                                       // 22208\n                                                                                                                       // 22209\n          expect(user.getText()).toContain('{\"name\":\"guest\"}');                                                        // 22210\n          expect(lastNameValid.getText()).toContain('false');                                                          // 22211\n          expect(lastNameError.getText()).toContain('maxlength');                                                      // 22212\n          expect(formValid.getText()).toContain('false');                                                              // 22213\n        });                                                                                                            // 22214\n      </file>                                                                                                          // 22215\n    </example>                                                                                                         // 22216\n */                                                                                                                    // 22217\nvar inputDirective = ['$browser', '$sniffer', '$filter', '$parse',                                                     // 22218\n    function($browser, $sniffer, $filter, $parse) {                                                                    // 22219\n  return {                                                                                                             // 22220\n    restrict: 'E',                                                                                                     // 22221\n    require: ['?ngModel'],                                                                                             // 22222\n    link: {                                                                                                            // 22223\n      pre: function(scope, element, attr, ctrls) {                                                                     // 22224\n        if (ctrls[0]) {                                                                                                // 22225\n          (inputType[lowercase(attr.type)] || inputType.text)(scope, element, attr, ctrls[0], $sniffer,                // 22226\n                                                              $browser, $filter, $parse);                              // 22227\n        }                                                                                                              // 22228\n      }                                                                                                                // 22229\n    }                                                                                                                  // 22230\n  };                                                                                                                   // 22231\n}];                                                                                                                    // 22232\n                                                                                                                       // 22233\n                                                                                                                       // 22234\n                                                                                                                       // 22235\nvar CONSTANT_VALUE_REGEXP = /^(true|false|\\d+)$/;                                                                      // 22236\n/**                                                                                                                    // 22237\n * @ngdoc directive                                                                                                    // 22238\n * @name ngValue                                                                                                       // 22239\n *                                                                                                                     // 22240\n * @description                                                                                                        // 22241\n * Binds the given expression to the value of `<option>` or {@link input[radio] `input[radio]`},                       // 22242\n * so that when the element is selected, the {@link ngModel `ngModel`} of that element is set to                       // 22243\n * the bound value.                                                                                                    // 22244\n *                                                                                                                     // 22245\n * `ngValue` is useful when dynamically generating lists of radio buttons using                                        // 22246\n * {@link ngRepeat `ngRepeat`}, as shown below.                                                                        // 22247\n *                                                                                                                     // 22248\n * Likewise, `ngValue` can be used to generate `<option>` elements for                                                 // 22249\n * the {@link select `select`} element. In that case however, only strings are supported                               // 22250\n * for the `value `attribute, so the resulting `ngModel` will always be a string.                                      // 22251\n * Support for `select` models with non-string values is available via `ngOptions`.                                    // 22252\n *                                                                                                                     // 22253\n * @element input                                                                                                      // 22254\n * @param {string=} ngValue angular expression, whose value will be bound to the `value` attribute                     // 22255\n *   of the `input` element                                                                                            // 22256\n *                                                                                                                     // 22257\n * @example                                                                                                            // 22258\n    <example name=\"ngValue-directive\" module=\"valueExample\">                                                           // 22259\n      <file name=\"index.html\">                                                                                         // 22260\n       <script>                                                                                                        // 22261\n          angular.module('valueExample', [])                                                                           // 22262\n            .controller('ExampleController', ['$scope', function($scope) {                                             // 22263\n              $scope.names = ['pizza', 'unicorns', 'robots'];                                                          // 22264\n              $scope.my = { favorite: 'unicorns' };                                                                    // 22265\n            }]);                                                                                                       // 22266\n       </script>                                                                                                       // 22267\n        <form ng-controller=\"ExampleController\">                                                                       // 22268\n          <h2>Which is your favorite?</h2>                                                                             // 22269\n            <label ng-repeat=\"name in names\" for=\"{{name}}\">                                                           // 22270\n              {{name}}                                                                                                 // 22271\n              <input type=\"radio\"                                                                                      // 22272\n                     ng-model=\"my.favorite\"                                                                            // 22273\n                     ng-value=\"name\"                                                                                   // 22274\n                     id=\"{{name}}\"                                                                                     // 22275\n                     name=\"favorite\">                                                                                  // 22276\n            </label>                                                                                                   // 22277\n          <div>You chose {{my.favorite}}</div>                                                                         // 22278\n        </form>                                                                                                        // 22279\n      </file>                                                                                                          // 22280\n      <file name=\"protractor.js\" type=\"protractor\">                                                                    // 22281\n        var favorite = element(by.binding('my.favorite'));                                                             // 22282\n                                                                                                                       // 22283\n        it('should initialize to model', function() {                                                                  // 22284\n          expect(favorite.getText()).toContain('unicorns');                                                            // 22285\n        });                                                                                                            // 22286\n        it('should bind the values to the inputs', function() {                                                        // 22287\n          element.all(by.model('my.favorite')).get(0).click();                                                         // 22288\n          expect(favorite.getText()).toContain('pizza');                                                               // 22289\n        });                                                                                                            // 22290\n      </file>                                                                                                          // 22291\n    </example>                                                                                                         // 22292\n */                                                                                                                    // 22293\nvar ngValueDirective = function() {                                                                                    // 22294\n  return {                                                                                                             // 22295\n    restrict: 'A',                                                                                                     // 22296\n    priority: 100,                                                                                                     // 22297\n    compile: function(tpl, tplAttr) {                                                                                  // 22298\n      if (CONSTANT_VALUE_REGEXP.test(tplAttr.ngValue)) {                                                               // 22299\n        return function ngValueConstantLink(scope, elm, attr) {                                                        // 22300\n          attr.$set('value', scope.$eval(attr.ngValue));                                                               // 22301\n        };                                                                                                             // 22302\n      } else {                                                                                                         // 22303\n        return function ngValueLink(scope, elm, attr) {                                                                // 22304\n          scope.$watch(attr.ngValue, function valueWatchAction(value) {                                                // 22305\n            attr.$set('value', value);                                                                                 // 22306\n          });                                                                                                          // 22307\n        };                                                                                                             // 22308\n      }                                                                                                                // 22309\n    }                                                                                                                  // 22310\n  };                                                                                                                   // 22311\n};                                                                                                                     // 22312\n                                                                                                                       // 22313\n/**                                                                                                                    // 22314\n * @ngdoc directive                                                                                                    // 22315\n * @name ngBind                                                                                                        // 22316\n * @restrict AC                                                                                                        // 22317\n *                                                                                                                     // 22318\n * @description                                                                                                        // 22319\n * The `ngBind` attribute tells Angular to replace the text content of the specified HTML element                      // 22320\n * with the value of a given expression, and to update the text content when the value of that                         // 22321\n * expression changes.                                                                                                 // 22322\n *                                                                                                                     // 22323\n * Typically, you don't use `ngBind` directly, but instead you use the double curly markup like                        // 22324\n * `{{ expression }}` which is similar but less verbose.                                                               // 22325\n *                                                                                                                     // 22326\n * It is preferable to use `ngBind` instead of `{{ expression }}` if a template is momentarily                         // 22327\n * displayed by the browser in its raw state before Angular compiles it. Since `ngBind` is an                          // 22328\n * element attribute, it makes the bindings invisible to the user while the page is loading.                           // 22329\n *                                                                                                                     // 22330\n * An alternative solution to this problem would be using the                                                          // 22331\n * {@link ng.directive:ngCloak ngCloak} directive.                                                                     // 22332\n *                                                                                                                     // 22333\n *                                                                                                                     // 22334\n * @element ANY                                                                                                        // 22335\n * @param {expression} ngBind {@link guide/expression Expression} to evaluate.                                         // 22336\n *                                                                                                                     // 22337\n * @example                                                                                                            // 22338\n * Enter a name in the Live Preview text box; the greeting below the text box changes instantly.                       // 22339\n   <example module=\"bindExample\">                                                                                      // 22340\n     <file name=\"index.html\">                                                                                          // 22341\n       <script>                                                                                                        // 22342\n         angular.module('bindExample', [])                                                                             // 22343\n           .controller('ExampleController', ['$scope', function($scope) {                                              // 22344\n             $scope.name = 'Whirled';                                                                                  // 22345\n           }]);                                                                                                        // 22346\n       </script>                                                                                                       // 22347\n       <div ng-controller=\"ExampleController\">                                                                         // 22348\n         <label>Enter name: <input type=\"text\" ng-model=\"name\"></label><br>                                            // 22349\n         Hello <span ng-bind=\"name\"></span>!                                                                           // 22350\n       </div>                                                                                                          // 22351\n     </file>                                                                                                           // 22352\n     <file name=\"protractor.js\" type=\"protractor\">                                                                     // 22353\n       it('should check ng-bind', function() {                                                                         // 22354\n         var nameInput = element(by.model('name'));                                                                    // 22355\n                                                                                                                       // 22356\n         expect(element(by.binding('name')).getText()).toBe('Whirled');                                                // 22357\n         nameInput.clear();                                                                                            // 22358\n         nameInput.sendKeys('world');                                                                                  // 22359\n         expect(element(by.binding('name')).getText()).toBe('world');                                                  // 22360\n       });                                                                                                             // 22361\n     </file>                                                                                                           // 22362\n   </example>                                                                                                          // 22363\n */                                                                                                                    // 22364\nvar ngBindDirective = ['$compile', function($compile) {                                                                // 22365\n  return {                                                                                                             // 22366\n    restrict: 'AC',                                                                                                    // 22367\n    compile: function ngBindCompile(templateElement) {                                                                 // 22368\n      $compile.$$addBindingClass(templateElement);                                                                     // 22369\n      return function ngBindLink(scope, element, attr) {                                                               // 22370\n        $compile.$$addBindingInfo(element, attr.ngBind);                                                               // 22371\n        element = element[0];                                                                                          // 22372\n        scope.$watch(attr.ngBind, function ngBindWatchAction(value) {                                                  // 22373\n          element.textContent = isUndefined(value) ? '' : value;                                                       // 22374\n        });                                                                                                            // 22375\n      };                                                                                                               // 22376\n    }                                                                                                                  // 22377\n  };                                                                                                                   // 22378\n}];                                                                                                                    // 22379\n                                                                                                                       // 22380\n                                                                                                                       // 22381\n/**                                                                                                                    // 22382\n * @ngdoc directive                                                                                                    // 22383\n * @name ngBindTemplate                                                                                                // 22384\n *                                                                                                                     // 22385\n * @description                                                                                                        // 22386\n * The `ngBindTemplate` directive specifies that the element                                                           // 22387\n * text content should be replaced with the interpolation of the template                                              // 22388\n * in the `ngBindTemplate` attribute.                                                                                  // 22389\n * Unlike `ngBind`, the `ngBindTemplate` can contain multiple `{{` `}}`                                                // 22390\n * expressions. This directive is needed since some HTML elements                                                      // 22391\n * (such as TITLE and OPTION) cannot contain SPAN elements.                                                            // 22392\n *                                                                                                                     // 22393\n * @element ANY                                                                                                        // 22394\n * @param {string} ngBindTemplate template of form                                                                     // 22395\n *   <tt>{{</tt> <tt>expression</tt> <tt>}}</tt> to eval.                                                              // 22396\n *                                                                                                                     // 22397\n * @example                                                                                                            // 22398\n * Try it here: enter text in text box and watch the greeting change.                                                  // 22399\n   <example module=\"bindExample\">                                                                                      // 22400\n     <file name=\"index.html\">                                                                                          // 22401\n       <script>                                                                                                        // 22402\n         angular.module('bindExample', [])                                                                             // 22403\n           .controller('ExampleController', ['$scope', function($scope) {                                              // 22404\n             $scope.salutation = 'Hello';                                                                              // 22405\n             $scope.name = 'World';                                                                                    // 22406\n           }]);                                                                                                        // 22407\n       </script>                                                                                                       // 22408\n       <div ng-controller=\"ExampleController\">                                                                         // 22409\n        <label>Salutation: <input type=\"text\" ng-model=\"salutation\"></label><br>                                       // 22410\n        <label>Name: <input type=\"text\" ng-model=\"name\"></label><br>                                                   // 22411\n        <pre ng-bind-template=\"{{salutation}} {{name}}!\"></pre>                                                        // 22412\n       </div>                                                                                                          // 22413\n     </file>                                                                                                           // 22414\n     <file name=\"protractor.js\" type=\"protractor\">                                                                     // 22415\n       it('should check ng-bind', function() {                                                                         // 22416\n         var salutationElem = element(by.binding('salutation'));                                                       // 22417\n         var salutationInput = element(by.model('salutation'));                                                        // 22418\n         var nameInput = element(by.model('name'));                                                                    // 22419\n                                                                                                                       // 22420\n         expect(salutationElem.getText()).toBe('Hello World!');                                                        // 22421\n                                                                                                                       // 22422\n         salutationInput.clear();                                                                                      // 22423\n         salutationInput.sendKeys('Greetings');                                                                        // 22424\n         nameInput.clear();                                                                                            // 22425\n         nameInput.sendKeys('user');                                                                                   // 22426\n                                                                                                                       // 22427\n         expect(salutationElem.getText()).toBe('Greetings user!');                                                     // 22428\n       });                                                                                                             // 22429\n     </file>                                                                                                           // 22430\n   </example>                                                                                                          // 22431\n */                                                                                                                    // 22432\nvar ngBindTemplateDirective = ['$interpolate', '$compile', function($interpolate, $compile) {                          // 22433\n  return {                                                                                                             // 22434\n    compile: function ngBindTemplateCompile(templateElement) {                                                         // 22435\n      $compile.$$addBindingClass(templateElement);                                                                     // 22436\n      return function ngBindTemplateLink(scope, element, attr) {                                                       // 22437\n        var interpolateFn = $interpolate(element.attr(attr.$attr.ngBindTemplate));                                     // 22438\n        $compile.$$addBindingInfo(element, interpolateFn.expressions);                                                 // 22439\n        element = element[0];                                                                                          // 22440\n        attr.$observe('ngBindTemplate', function(value) {                                                              // 22441\n          element.textContent = isUndefined(value) ? '' : value;                                                       // 22442\n        });                                                                                                            // 22443\n      };                                                                                                               // 22444\n    }                                                                                                                  // 22445\n  };                                                                                                                   // 22446\n}];                                                                                                                    // 22447\n                                                                                                                       // 22448\n                                                                                                                       // 22449\n/**                                                                                                                    // 22450\n * @ngdoc directive                                                                                                    // 22451\n * @name ngBindHtml                                                                                                    // 22452\n *                                                                                                                     // 22453\n * @description                                                                                                        // 22454\n * Evaluates the expression and inserts the resulting HTML into the element in a secure way. By default,               // 22455\n * the resulting HTML content will be sanitized using the {@link ngSanitize.$sanitize $sanitize} service.              // 22456\n * To utilize this functionality, ensure that `$sanitize` is available, for example, by including {@link               // 22457\n * ngSanitize} in your module's dependencies (not in core Angular). In order to use {@link ngSanitize}                 // 22458\n * in your module's dependencies, you need to include \"angular-sanitize.js\" in your application.                       // 22459\n *                                                                                                                     // 22460\n * You may also bypass sanitization for values you know are safe. To do so, bind to                                    // 22461\n * an explicitly trusted value via {@link ng.$sce#trustAsHtml $sce.trustAsHtml}.  See the example                      // 22462\n * under {@link ng.$sce#show-me-an-example-using-sce- Strict Contextual Escaping (SCE)}.                               // 22463\n *                                                                                                                     // 22464\n * Note: If a `$sanitize` service is unavailable and the bound value isn't explicitly trusted, you                     // 22465\n * will have an exception (instead of an exploit.)                                                                     // 22466\n *                                                                                                                     // 22467\n * @element ANY                                                                                                        // 22468\n * @param {expression} ngBindHtml {@link guide/expression Expression} to evaluate.                                     // 22469\n *                                                                                                                     // 22470\n * @example                                                                                                            // 22471\n                                                                                                                       // 22472\n   <example module=\"bindHtmlExample\" deps=\"angular-sanitize.js\">                                                       // 22473\n     <file name=\"index.html\">                                                                                          // 22474\n       <div ng-controller=\"ExampleController\">                                                                         // 22475\n        <p ng-bind-html=\"myHTML\"></p>                                                                                  // 22476\n       </div>                                                                                                          // 22477\n     </file>                                                                                                           // 22478\n                                                                                                                       // 22479\n     <file name=\"script.js\">                                                                                           // 22480\n       angular.module('bindHtmlExample', ['ngSanitize'])                                                               // 22481\n         .controller('ExampleController', ['$scope', function($scope) {                                                // 22482\n           $scope.myHTML =                                                                                             // 22483\n              'I am an <code>HTML</code>string with ' +                                                                // 22484\n              '<a href=\"#\">links!</a> and other <em>stuff</em>';                                                       // 22485\n         }]);                                                                                                          // 22486\n     </file>                                                                                                           // 22487\n                                                                                                                       // 22488\n     <file name=\"protractor.js\" type=\"protractor\">                                                                     // 22489\n       it('should check ng-bind-html', function() {                                                                    // 22490\n         expect(element(by.binding('myHTML')).getText()).toBe(                                                         // 22491\n             'I am an HTMLstring with links! and other stuff');                                                        // 22492\n       });                                                                                                             // 22493\n     </file>                                                                                                           // 22494\n   </example>                                                                                                          // 22495\n */                                                                                                                    // 22496\nvar ngBindHtmlDirective = ['$sce', '$parse', '$compile', function($sce, $parse, $compile) {                            // 22497\n  return {                                                                                                             // 22498\n    restrict: 'A',                                                                                                     // 22499\n    compile: function ngBindHtmlCompile(tElement, tAttrs) {                                                            // 22500\n      var ngBindHtmlGetter = $parse(tAttrs.ngBindHtml);                                                                // 22501\n      var ngBindHtmlWatch = $parse(tAttrs.ngBindHtml, function getStringValue(value) {                                 // 22502\n        return (value || '').toString();                                                                               // 22503\n      });                                                                                                              // 22504\n      $compile.$$addBindingClass(tElement);                                                                            // 22505\n                                                                                                                       // 22506\n      return function ngBindHtmlLink(scope, element, attr) {                                                           // 22507\n        $compile.$$addBindingInfo(element, attr.ngBindHtml);                                                           // 22508\n                                                                                                                       // 22509\n        scope.$watch(ngBindHtmlWatch, function ngBindHtmlWatchAction() {                                               // 22510\n          // we re-evaluate the expr because we want a TrustedValueHolderType                                          // 22511\n          // for $sce, not a string                                                                                    // 22512\n          element.html($sce.getTrustedHtml(ngBindHtmlGetter(scope)) || '');                                            // 22513\n        });                                                                                                            // 22514\n      };                                                                                                               // 22515\n    }                                                                                                                  // 22516\n  };                                                                                                                   // 22517\n}];                                                                                                                    // 22518\n                                                                                                                       // 22519\n/**                                                                                                                    // 22520\n * @ngdoc directive                                                                                                    // 22521\n * @name ngChange                                                                                                      // 22522\n *                                                                                                                     // 22523\n * @description                                                                                                        // 22524\n * Evaluate the given expression when the user changes the input.                                                      // 22525\n * The expression is evaluated immediately, unlike the JavaScript onchange event                                       // 22526\n * which only triggers at the end of a change (usually, when the user leaves the                                       // 22527\n * form element or presses the return key).                                                                            // 22528\n *                                                                                                                     // 22529\n * The `ngChange` expression is only evaluated when a change in the input value causes                                 // 22530\n * a new value to be committed to the model.                                                                           // 22531\n *                                                                                                                     // 22532\n * It will not be evaluated:                                                                                           // 22533\n * * if the value returned from the `$parsers` transformation pipeline has not changed                                 // 22534\n * * if the input has continued to be invalid since the model will stay `null`                                         // 22535\n * * if the model is changed programmatically and not by a change to the input value                                   // 22536\n *                                                                                                                     // 22537\n *                                                                                                                     // 22538\n * Note, this directive requires `ngModel` to be present.                                                              // 22539\n *                                                                                                                     // 22540\n * @element input                                                                                                      // 22541\n * @param {expression} ngChange {@link guide/expression Expression} to evaluate upon change                            // 22542\n * in input value.                                                                                                     // 22543\n *                                                                                                                     // 22544\n * @example                                                                                                            // 22545\n * <example name=\"ngChange-directive\" module=\"changeExample\">                                                          // 22546\n *   <file name=\"index.html\">                                                                                          // 22547\n *     <script>                                                                                                        // 22548\n *       angular.module('changeExample', [])                                                                           // 22549\n *         .controller('ExampleController', ['$scope', function($scope) {                                              // 22550\n *           $scope.counter = 0;                                                                                       // 22551\n *           $scope.change = function() {                                                                              // 22552\n *             $scope.counter++;                                                                                       // 22553\n *           };                                                                                                        // 22554\n *         }]);                                                                                                        // 22555\n *     </script>                                                                                                       // 22556\n *     <div ng-controller=\"ExampleController\">                                                                         // 22557\n *       <input type=\"checkbox\" ng-model=\"confirmed\" ng-change=\"change()\" id=\"ng-change-example1\" />                   // 22558\n *       <input type=\"checkbox\" ng-model=\"confirmed\" id=\"ng-change-example2\" />                                        // 22559\n *       <label for=\"ng-change-example2\">Confirmed</label><br />                                                       // 22560\n *       <tt>debug = {{confirmed}}</tt><br/>                                                                           // 22561\n *       <tt>counter = {{counter}}</tt><br/>                                                                           // 22562\n *     </div>                                                                                                          // 22563\n *   </file>                                                                                                           // 22564\n *   <file name=\"protractor.js\" type=\"protractor\">                                                                     // 22565\n *     var counter = element(by.binding('counter'));                                                                   // 22566\n *     var debug = element(by.binding('confirmed'));                                                                   // 22567\n *                                                                                                                     // 22568\n *     it('should evaluate the expression if changing from view', function() {                                         // 22569\n *       expect(counter.getText()).toContain('0');                                                                     // 22570\n *                                                                                                                     // 22571\n *       element(by.id('ng-change-example1')).click();                                                                 // 22572\n *                                                                                                                     // 22573\n *       expect(counter.getText()).toContain('1');                                                                     // 22574\n *       expect(debug.getText()).toContain('true');                                                                    // 22575\n *     });                                                                                                             // 22576\n *                                                                                                                     // 22577\n *     it('should not evaluate the expression if changing from model', function() {                                    // 22578\n *       element(by.id('ng-change-example2')).click();                                                                 // 22579\n                                                                                                                       // 22580\n *       expect(counter.getText()).toContain('0');                                                                     // 22581\n *       expect(debug.getText()).toContain('true');                                                                    // 22582\n *     });                                                                                                             // 22583\n *   </file>                                                                                                           // 22584\n * </example>                                                                                                          // 22585\n */                                                                                                                    // 22586\nvar ngChangeDirective = valueFn({                                                                                      // 22587\n  restrict: 'A',                                                                                                       // 22588\n  require: 'ngModel',                                                                                                  // 22589\n  link: function(scope, element, attr, ctrl) {                                                                         // 22590\n    ctrl.$viewChangeListeners.push(function() {                                                                        // 22591\n      scope.$eval(attr.ngChange);                                                                                      // 22592\n    });                                                                                                                // 22593\n  }                                                                                                                    // 22594\n});                                                                                                                    // 22595\n                                                                                                                       // 22596\nfunction classDirective(name, selector) {                                                                              // 22597\n  name = 'ngClass' + name;                                                                                             // 22598\n  return ['$animate', function($animate) {                                                                             // 22599\n    return {                                                                                                           // 22600\n      restrict: 'AC',                                                                                                  // 22601\n      link: function(scope, element, attr) {                                                                           // 22602\n        var oldVal;                                                                                                    // 22603\n                                                                                                                       // 22604\n        scope.$watch(attr[name], ngClassWatchAction, true);                                                            // 22605\n                                                                                                                       // 22606\n        attr.$observe('class', function(value) {                                                                       // 22607\n          ngClassWatchAction(scope.$eval(attr[name]));                                                                 // 22608\n        });                                                                                                            // 22609\n                                                                                                                       // 22610\n                                                                                                                       // 22611\n        if (name !== 'ngClass') {                                                                                      // 22612\n          scope.$watch('$index', function($index, old$index) {                                                         // 22613\n            // jshint bitwise: false                                                                                   // 22614\n            var mod = $index & 1;                                                                                      // 22615\n            if (mod !== (old$index & 1)) {                                                                             // 22616\n              var classes = arrayClasses(scope.$eval(attr[name]));                                                     // 22617\n              mod === selector ?                                                                                       // 22618\n                addClasses(classes) :                                                                                  // 22619\n                removeClasses(classes);                                                                                // 22620\n            }                                                                                                          // 22621\n          });                                                                                                          // 22622\n        }                                                                                                              // 22623\n                                                                                                                       // 22624\n        function addClasses(classes) {                                                                                 // 22625\n          var newClasses = digestClassCounts(classes, 1);                                                              // 22626\n          attr.$addClass(newClasses);                                                                                  // 22627\n        }                                                                                                              // 22628\n                                                                                                                       // 22629\n        function removeClasses(classes) {                                                                              // 22630\n          var newClasses = digestClassCounts(classes, -1);                                                             // 22631\n          attr.$removeClass(newClasses);                                                                               // 22632\n        }                                                                                                              // 22633\n                                                                                                                       // 22634\n        function digestClassCounts(classes, count) {                                                                   // 22635\n          // Use createMap() to prevent class assumptions involving property                                           // 22636\n          // names in Object.prototype                                                                                 // 22637\n          var classCounts = element.data('$classCounts') || createMap();                                               // 22638\n          var classesToUpdate = [];                                                                                    // 22639\n          forEach(classes, function(className) {                                                                       // 22640\n            if (count > 0 || classCounts[className]) {                                                                 // 22641\n              classCounts[className] = (classCounts[className] || 0) + count;                                          // 22642\n              if (classCounts[className] === +(count > 0)) {                                                           // 22643\n                classesToUpdate.push(className);                                                                       // 22644\n              }                                                                                                        // 22645\n            }                                                                                                          // 22646\n          });                                                                                                          // 22647\n          element.data('$classCounts', classCounts);                                                                   // 22648\n          return classesToUpdate.join(' ');                                                                            // 22649\n        }                                                                                                              // 22650\n                                                                                                                       // 22651\n        function updateClasses(oldClasses, newClasses) {                                                               // 22652\n          var toAdd = arrayDifference(newClasses, oldClasses);                                                         // 22653\n          var toRemove = arrayDifference(oldClasses, newClasses);                                                      // 22654\n          toAdd = digestClassCounts(toAdd, 1);                                                                         // 22655\n          toRemove = digestClassCounts(toRemove, -1);                                                                  // 22656\n          if (toAdd && toAdd.length) {                                                                                 // 22657\n            $animate.addClass(element, toAdd);                                                                         // 22658\n          }                                                                                                            // 22659\n          if (toRemove && toRemove.length) {                                                                           // 22660\n            $animate.removeClass(element, toRemove);                                                                   // 22661\n          }                                                                                                            // 22662\n        }                                                                                                              // 22663\n                                                                                                                       // 22664\n        function ngClassWatchAction(newVal) {                                                                          // 22665\n          if (selector === true || scope.$index % 2 === selector) {                                                    // 22666\n            var newClasses = arrayClasses(newVal || []);                                                               // 22667\n            if (!oldVal) {                                                                                             // 22668\n              addClasses(newClasses);                                                                                  // 22669\n            } else if (!equals(newVal,oldVal)) {                                                                       // 22670\n              var oldClasses = arrayClasses(oldVal);                                                                   // 22671\n              updateClasses(oldClasses, newClasses);                                                                   // 22672\n            }                                                                                                          // 22673\n          }                                                                                                            // 22674\n          oldVal = shallowCopy(newVal);                                                                                // 22675\n        }                                                                                                              // 22676\n      }                                                                                                                // 22677\n    };                                                                                                                 // 22678\n                                                                                                                       // 22679\n    function arrayDifference(tokens1, tokens2) {                                                                       // 22680\n      var values = [];                                                                                                 // 22681\n                                                                                                                       // 22682\n      outer:                                                                                                           // 22683\n      for (var i = 0; i < tokens1.length; i++) {                                                                       // 22684\n        var token = tokens1[i];                                                                                        // 22685\n        for (var j = 0; j < tokens2.length; j++) {                                                                     // 22686\n          if (token == tokens2[j]) continue outer;                                                                     // 22687\n        }                                                                                                              // 22688\n        values.push(token);                                                                                            // 22689\n      }                                                                                                                // 22690\n      return values;                                                                                                   // 22691\n    }                                                                                                                  // 22692\n                                                                                                                       // 22693\n    function arrayClasses(classVal) {                                                                                  // 22694\n      var classes = [];                                                                                                // 22695\n      if (isArray(classVal)) {                                                                                         // 22696\n        forEach(classVal, function(v) {                                                                                // 22697\n          classes = classes.concat(arrayClasses(v));                                                                   // 22698\n        });                                                                                                            // 22699\n        return classes;                                                                                                // 22700\n      } else if (isString(classVal)) {                                                                                 // 22701\n        return classVal.split(' ');                                                                                    // 22702\n      } else if (isObject(classVal)) {                                                                                 // 22703\n        forEach(classVal, function(v, k) {                                                                             // 22704\n          if (v) {                                                                                                     // 22705\n            classes = classes.concat(k.split(' '));                                                                    // 22706\n          }                                                                                                            // 22707\n        });                                                                                                            // 22708\n        return classes;                                                                                                // 22709\n      }                                                                                                                // 22710\n      return classVal;                                                                                                 // 22711\n    }                                                                                                                  // 22712\n  }];                                                                                                                  // 22713\n}                                                                                                                      // 22714\n                                                                                                                       // 22715\n/**                                                                                                                    // 22716\n * @ngdoc directive                                                                                                    // 22717\n * @name ngClass                                                                                                       // 22718\n * @restrict AC                                                                                                        // 22719\n *                                                                                                                     // 22720\n * @description                                                                                                        // 22721\n * The `ngClass` directive allows you to dynamically set CSS classes on an HTML element by databinding                 // 22722\n * an expression that represents all classes to be added.                                                              // 22723\n *                                                                                                                     // 22724\n * The directive operates in three different ways, depending on which of three types the expression                    // 22725\n * evaluates to:                                                                                                       // 22726\n *                                                                                                                     // 22727\n * 1. If the expression evaluates to a string, the string should be one or more space-delimited class                  // 22728\n * names.                                                                                                              // 22729\n *                                                                                                                     // 22730\n * 2. If the expression evaluates to an object, then for each key-value pair of the                                    // 22731\n * object with a truthy value the corresponding key is used as a class name.                                           // 22732\n *                                                                                                                     // 22733\n * 3. If the expression evaluates to an array, each element of the array should either be a string as in               // 22734\n * type 1 or an object as in type 2. This means that you can mix strings and objects together in an array              // 22735\n * to give you more control over what CSS classes appear. See the code below for an example of this.                   // 22736\n *                                                                                                                     // 22737\n *                                                                                                                     // 22738\n * The directive won't add duplicate classes if a particular class was already set.                                    // 22739\n *                                                                                                                     // 22740\n * When the expression changes, the previously added classes are removed and only then are the                         // 22741\n * new classes added.                                                                                                  // 22742\n *                                                                                                                     // 22743\n * @animations                                                                                                         // 22744\n * **add** - happens just before the class is applied to the elements                                                  // 22745\n *                                                                                                                     // 22746\n * **remove** - happens just before the class is removed from the element                                              // 22747\n *                                                                                                                     // 22748\n * @element ANY                                                                                                        // 22749\n * @param {expression} ngClass {@link guide/expression Expression} to eval. The result                                 // 22750\n *   of the evaluation can be a string representing space delimited class                                              // 22751\n *   names, an array, or a map of class names to boolean values. In the case of a map, the                             // 22752\n *   names of the properties whose values are truthy will be added as css classes to the                               // 22753\n *   element.                                                                                                          // 22754\n *                                                                                                                     // 22755\n * @example Example that demonstrates basic bindings via ngClass directive.                                            // 22756\n   <example>                                                                                                           // 22757\n     <file name=\"index.html\">                                                                                          // 22758\n       <p ng-class=\"{strike: deleted, bold: important, 'has-error': error}\">Map Syntax Example</p>                     // 22759\n       <label>                                                                                                         // 22760\n          <input type=\"checkbox\" ng-model=\"deleted\">                                                                   // 22761\n          deleted (apply \"strike\" class)                                                                               // 22762\n       </label><br>                                                                                                    // 22763\n       <label>                                                                                                         // 22764\n          <input type=\"checkbox\" ng-model=\"important\">                                                                 // 22765\n          important (apply \"bold\" class)                                                                               // 22766\n       </label><br>                                                                                                    // 22767\n       <label>                                                                                                         // 22768\n          <input type=\"checkbox\" ng-model=\"error\">                                                                     // 22769\n          error (apply \"has-error\" class)                                                                              // 22770\n       </label>                                                                                                        // 22771\n       <hr>                                                                                                            // 22772\n       <p ng-class=\"style\">Using String Syntax</p>                                                                     // 22773\n       <input type=\"text\" ng-model=\"style\"                                                                             // 22774\n              placeholder=\"Type: bold strike red\" aria-label=\"Type: bold strike red\">                                  // 22775\n       <hr>                                                                                                            // 22776\n       <p ng-class=\"[style1, style2, style3]\">Using Array Syntax</p>                                                   // 22777\n       <input ng-model=\"style1\"                                                                                        // 22778\n              placeholder=\"Type: bold, strike or red\" aria-label=\"Type: bold, strike or red\"><br>                      // 22779\n       <input ng-model=\"style2\"                                                                                        // 22780\n              placeholder=\"Type: bold, strike or red\" aria-label=\"Type: bold, strike or red 2\"><br>                    // 22781\n       <input ng-model=\"style3\"                                                                                        // 22782\n              placeholder=\"Type: bold, strike or red\" aria-label=\"Type: bold, strike or red 3\"><br>                    // 22783\n       <hr>                                                                                                            // 22784\n       <p ng-class=\"[style4, {orange: warning}]\">Using Array and Map Syntax</p>                                        // 22785\n       <input ng-model=\"style4\" placeholder=\"Type: bold, strike\" aria-label=\"Type: bold, strike\"><br>                  // 22786\n       <label><input type=\"checkbox\" ng-model=\"warning\"> warning (apply \"orange\" class)</label>                        // 22787\n     </file>                                                                                                           // 22788\n     <file name=\"style.css\">                                                                                           // 22789\n       .strike {                                                                                                       // 22790\n           text-decoration: line-through;                                                                              // 22791\n       }                                                                                                               // 22792\n       .bold {                                                                                                         // 22793\n           font-weight: bold;                                                                                          // 22794\n       }                                                                                                               // 22795\n       .red {                                                                                                          // 22796\n           color: red;                                                                                                 // 22797\n       }                                                                                                               // 22798\n       .has-error {                                                                                                    // 22799\n           color: red;                                                                                                 // 22800\n           background-color: yellow;                                                                                   // 22801\n       }                                                                                                               // 22802\n       .orange {                                                                                                       // 22803\n           color: orange;                                                                                              // 22804\n       }                                                                                                               // 22805\n     </file>                                                                                                           // 22806\n     <file name=\"protractor.js\" type=\"protractor\">                                                                     // 22807\n       var ps = element.all(by.css('p'));                                                                              // 22808\n                                                                                                                       // 22809\n       it('should let you toggle the class', function() {                                                              // 22810\n                                                                                                                       // 22811\n         expect(ps.first().getAttribute('class')).not.toMatch(/bold/);                                                 // 22812\n         expect(ps.first().getAttribute('class')).not.toMatch(/has-error/);                                            // 22813\n                                                                                                                       // 22814\n         element(by.model('important')).click();                                                                       // 22815\n         expect(ps.first().getAttribute('class')).toMatch(/bold/);                                                     // 22816\n                                                                                                                       // 22817\n         element(by.model('error')).click();                                                                           // 22818\n         expect(ps.first().getAttribute('class')).toMatch(/has-error/);                                                // 22819\n       });                                                                                                             // 22820\n                                                                                                                       // 22821\n       it('should let you toggle string example', function() {                                                         // 22822\n         expect(ps.get(1).getAttribute('class')).toBe('');                                                             // 22823\n         element(by.model('style')).clear();                                                                           // 22824\n         element(by.model('style')).sendKeys('red');                                                                   // 22825\n         expect(ps.get(1).getAttribute('class')).toBe('red');                                                          // 22826\n       });                                                                                                             // 22827\n                                                                                                                       // 22828\n       it('array example should have 3 classes', function() {                                                          // 22829\n         expect(ps.get(2).getAttribute('class')).toBe('');                                                             // 22830\n         element(by.model('style1')).sendKeys('bold');                                                                 // 22831\n         element(by.model('style2')).sendKeys('strike');                                                               // 22832\n         element(by.model('style3')).sendKeys('red');                                                                  // 22833\n         expect(ps.get(2).getAttribute('class')).toBe('bold strike red');                                              // 22834\n       });                                                                                                             // 22835\n                                                                                                                       // 22836\n       it('array with map example should have 2 classes', function() {                                                 // 22837\n         expect(ps.last().getAttribute('class')).toBe('');                                                             // 22838\n         element(by.model('style4')).sendKeys('bold');                                                                 // 22839\n         element(by.model('warning')).click();                                                                         // 22840\n         expect(ps.last().getAttribute('class')).toBe('bold orange');                                                  // 22841\n       });                                                                                                             // 22842\n     </file>                                                                                                           // 22843\n   </example>                                                                                                          // 22844\n                                                                                                                       // 22845\n   ## Animations                                                                                                       // 22846\n                                                                                                                       // 22847\n   The example below demonstrates how to perform animations using ngClass.                                             // 22848\n                                                                                                                       // 22849\n   <example module=\"ngAnimate\" deps=\"angular-animate.js\" animations=\"true\">                                            // 22850\n     <file name=\"index.html\">                                                                                          // 22851\n      <input id=\"setbtn\" type=\"button\" value=\"set\" ng-click=\"myVar='my-class'\">                                        // 22852\n      <input id=\"clearbtn\" type=\"button\" value=\"clear\" ng-click=\"myVar=''\">                                            // 22853\n      <br>                                                                                                             // 22854\n      <span class=\"base-class\" ng-class=\"myVar\">Sample Text</span>                                                     // 22855\n     </file>                                                                                                           // 22856\n     <file name=\"style.css\">                                                                                           // 22857\n       .base-class {                                                                                                   // 22858\n         transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;                                                 // 22859\n       }                                                                                                               // 22860\n                                                                                                                       // 22861\n       .base-class.my-class {                                                                                          // 22862\n         color: red;                                                                                                   // 22863\n         font-size:3em;                                                                                                // 22864\n       }                                                                                                               // 22865\n     </file>                                                                                                           // 22866\n     <file name=\"protractor.js\" type=\"protractor\">                                                                     // 22867\n       it('should check ng-class', function() {                                                                        // 22868\n         expect(element(by.css('.base-class')).getAttribute('class')).not.                                             // 22869\n           toMatch(/my-class/);                                                                                        // 22870\n                                                                                                                       // 22871\n         element(by.id('setbtn')).click();                                                                             // 22872\n                                                                                                                       // 22873\n         expect(element(by.css('.base-class')).getAttribute('class')).                                                 // 22874\n           toMatch(/my-class/);                                                                                        // 22875\n                                                                                                                       // 22876\n         element(by.id('clearbtn')).click();                                                                           // 22877\n                                                                                                                       // 22878\n         expect(element(by.css('.base-class')).getAttribute('class')).not.                                             // 22879\n           toMatch(/my-class/);                                                                                        // 22880\n       });                                                                                                             // 22881\n     </file>                                                                                                           // 22882\n   </example>                                                                                                          // 22883\n                                                                                                                       // 22884\n                                                                                                                       // 22885\n   ## ngClass and pre-existing CSS3 Transitions/Animations                                                             // 22886\n   The ngClass directive still supports CSS3 Transitions/Animations even if they do not follow the ngAnimate CSS naming structure.\n   Upon animation ngAnimate will apply supplementary CSS classes to track the start and end of an animation, but this will not hinder\n   any pre-existing CSS transitions already on the element. To get an idea of what happens during a class-based animation, be sure\n   to view the step by step details of {@link $animate#addClass $animate.addClass} and                                 // 22890\n   {@link $animate#removeClass $animate.removeClass}.                                                                  // 22891\n */                                                                                                                    // 22892\nvar ngClassDirective = classDirective('', true);                                                                       // 22893\n                                                                                                                       // 22894\n/**                                                                                                                    // 22895\n * @ngdoc directive                                                                                                    // 22896\n * @name ngClassOdd                                                                                                    // 22897\n * @restrict AC                                                                                                        // 22898\n *                                                                                                                     // 22899\n * @description                                                                                                        // 22900\n * The `ngClassOdd` and `ngClassEven` directives work exactly as                                                       // 22901\n * {@link ng.directive:ngClass ngClass}, except they work in                                                           // 22902\n * conjunction with `ngRepeat` and take effect only on odd (even) rows.                                                // 22903\n *                                                                                                                     // 22904\n * This directive can be applied only within the scope of an                                                           // 22905\n * {@link ng.directive:ngRepeat ngRepeat}.                                                                             // 22906\n *                                                                                                                     // 22907\n * @element ANY                                                                                                        // 22908\n * @param {expression} ngClassOdd {@link guide/expression Expression} to eval. The result                              // 22909\n *   of the evaluation can be a string representing space delimited class names or an array.                           // 22910\n *                                                                                                                     // 22911\n * @example                                                                                                            // 22912\n   <example>                                                                                                           // 22913\n     <file name=\"index.html\">                                                                                          // 22914\n        <ol ng-init=\"names=['John', 'Mary', 'Cate', 'Suz']\">                                                           // 22915\n          <li ng-repeat=\"name in names\">                                                                               // 22916\n           <span ng-class-odd=\"'odd'\" ng-class-even=\"'even'\">                                                          // 22917\n             {{name}}                                                                                                  // 22918\n           </span>                                                                                                     // 22919\n          </li>                                                                                                        // 22920\n        </ol>                                                                                                          // 22921\n     </file>                                                                                                           // 22922\n     <file name=\"style.css\">                                                                                           // 22923\n       .odd {                                                                                                          // 22924\n         color: red;                                                                                                   // 22925\n       }                                                                                                               // 22926\n       .even {                                                                                                         // 22927\n         color: blue;                                                                                                  // 22928\n       }                                                                                                               // 22929\n     </file>                                                                                                           // 22930\n     <file name=\"protractor.js\" type=\"protractor\">                                                                     // 22931\n       it('should check ng-class-odd and ng-class-even', function() {                                                  // 22932\n         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).                    // 22933\n           toMatch(/odd/);                                                                                             // 22934\n         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).                    // 22935\n           toMatch(/even/);                                                                                            // 22936\n       });                                                                                                             // 22937\n     </file>                                                                                                           // 22938\n   </example>                                                                                                          // 22939\n */                                                                                                                    // 22940\nvar ngClassOddDirective = classDirective('Odd', 0);                                                                    // 22941\n                                                                                                                       // 22942\n/**                                                                                                                    // 22943\n * @ngdoc directive                                                                                                    // 22944\n * @name ngClassEven                                                                                                   // 22945\n * @restrict AC                                                                                                        // 22946\n *                                                                                                                     // 22947\n * @description                                                                                                        // 22948\n * The `ngClassOdd` and `ngClassEven` directives work exactly as                                                       // 22949\n * {@link ng.directive:ngClass ngClass}, except they work in                                                           // 22950\n * conjunction with `ngRepeat` and take effect only on odd (even) rows.                                                // 22951\n *                                                                                                                     // 22952\n * This directive can be applied only within the scope of an                                                           // 22953\n * {@link ng.directive:ngRepeat ngRepeat}.                                                                             // 22954\n *                                                                                                                     // 22955\n * @element ANY                                                                                                        // 22956\n * @param {expression} ngClassEven {@link guide/expression Expression} to eval. The                                    // 22957\n *   result of the evaluation can be a string representing space delimited class names or an array.                    // 22958\n *                                                                                                                     // 22959\n * @example                                                                                                            // 22960\n   <example>                                                                                                           // 22961\n     <file name=\"index.html\">                                                                                          // 22962\n        <ol ng-init=\"names=['John', 'Mary', 'Cate', 'Suz']\">                                                           // 22963\n          <li ng-repeat=\"name in names\">                                                                               // 22964\n           <span ng-class-odd=\"'odd'\" ng-class-even=\"'even'\">                                                          // 22965\n             {{name}} &nbsp; &nbsp; &nbsp;                                                                             // 22966\n           </span>                                                                                                     // 22967\n          </li>                                                                                                        // 22968\n        </ol>                                                                                                          // 22969\n     </file>                                                                                                           // 22970\n     <file name=\"style.css\">                                                                                           // 22971\n       .odd {                                                                                                          // 22972\n         color: red;                                                                                                   // 22973\n       }                                                                                                               // 22974\n       .even {                                                                                                         // 22975\n         color: blue;                                                                                                  // 22976\n       }                                                                                                               // 22977\n     </file>                                                                                                           // 22978\n     <file name=\"protractor.js\" type=\"protractor\">                                                                     // 22979\n       it('should check ng-class-odd and ng-class-even', function() {                                                  // 22980\n         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).                    // 22981\n           toMatch(/odd/);                                                                                             // 22982\n         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).                    // 22983\n           toMatch(/even/);                                                                                            // 22984\n       });                                                                                                             // 22985\n     </file>                                                                                                           // 22986\n   </example>                                                                                                          // 22987\n */                                                                                                                    // 22988\nvar ngClassEvenDirective = classDirective('Even', 1);                                                                  // 22989\n                                                                                                                       // 22990\n/**                                                                                                                    // 22991\n * @ngdoc directive                                                                                                    // 22992\n * @name ngCloak                                                                                                       // 22993\n * @restrict AC                                                                                                        // 22994\n *                                                                                                                     // 22995\n * @description                                                                                                        // 22996\n * The `ngCloak` directive is used to prevent the Angular html template from being briefly                             // 22997\n * displayed by the browser in its raw (uncompiled) form while your application is loading. Use this                   // 22998\n * directive to avoid the undesirable flicker effect caused by the html template display.                              // 22999\n *                                                                                                                     // 23000\n * The directive can be applied to the `<body>` element, but the preferred usage is to apply                           // 23001\n * multiple `ngCloak` directives to small portions of the page to permit progressive rendering                         // 23002\n * of the browser view.                                                                                                // 23003\n *                                                                                                                     // 23004\n * `ngCloak` works in cooperation with the following css rule embedded within `angular.js` and                         // 23005\n * `angular.min.js`.                                                                                                   // 23006\n * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).                 // 23007\n *                                                                                                                     // 23008\n * ```css                                                                                                              // 23009\n * [ng\\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {                                    // 23010\n *   display: none !important;                                                                                         // 23011\n * }                                                                                                                   // 23012\n * ```                                                                                                                 // 23013\n *                                                                                                                     // 23014\n * When this css rule is loaded by the browser, all html elements (including their children) that                      // 23015\n * are tagged with the `ngCloak` directive are hidden. When Angular encounters this directive                          // 23016\n * during the compilation of the template it deletes the `ngCloak` element attribute, making                           // 23017\n * the compiled element visible.                                                                                       // 23018\n *                                                                                                                     // 23019\n * For the best result, the `angular.js` script must be loaded in the head section of the html                         // 23020\n * document; alternatively, the css rule above must be included in the external stylesheet of the                      // 23021\n * application.                                                                                                        // 23022\n *                                                                                                                     // 23023\n * @element ANY                                                                                                        // 23024\n *                                                                                                                     // 23025\n * @example                                                                                                            // 23026\n   <example>                                                                                                           // 23027\n     <file name=\"index.html\">                                                                                          // 23028\n        <div id=\"template1\" ng-cloak>{{ 'hello' }}</div>                                                               // 23029\n        <div id=\"template2\" class=\"ng-cloak\">{{ 'world' }}</div>                                                       // 23030\n     </file>                                                                                                           // 23031\n     <file name=\"protractor.js\" type=\"protractor\">                                                                     // 23032\n       it('should remove the template directive and css class', function() {                                           // 23033\n         expect($('#template1').getAttribute('ng-cloak')).                                                             // 23034\n           toBeNull();                                                                                                 // 23035\n         expect($('#template2').getAttribute('ng-cloak')).                                                             // 23036\n           toBeNull();                                                                                                 // 23037\n       });                                                                                                             // 23038\n     </file>                                                                                                           // 23039\n   </example>                                                                                                          // 23040\n *                                                                                                                     // 23041\n */                                                                                                                    // 23042\nvar ngCloakDirective = ngDirective({                                                                                   // 23043\n  compile: function(element, attr) {                                                                                   // 23044\n    attr.$set('ngCloak', undefined);                                                                                   // 23045\n    element.removeClass('ng-cloak');                                                                                   // 23046\n  }                                                                                                                    // 23047\n});                                                                                                                    // 23048\n                                                                                                                       // 23049\n/**                                                                                                                    // 23050\n * @ngdoc directive                                                                                                    // 23051\n * @name ngController                                                                                                  // 23052\n *                                                                                                                     // 23053\n * @description                                                                                                        // 23054\n * The `ngController` directive attaches a controller class to the view. This is a key aspect of how angular           // 23055\n * supports the principles behind the Model-View-Controller design pattern.                                            // 23056\n *                                                                                                                     // 23057\n * MVC components in angular:                                                                                          // 23058\n *                                                                                                                     // 23059\n * * Model — Models are the properties of a scope; scopes are attached to the DOM where scope properties               // 23060\n *   are accessed through bindings.                                                                                    // 23061\n * * View — The template (HTML with data bindings) that is rendered into the View.                                     // 23062\n * * Controller — The `ngController` directive specifies a Controller class; the class contains business               // 23063\n *   logic behind the application to decorate the scope with functions and values                                      // 23064\n *                                                                                                                     // 23065\n * Note that you can also attach controllers to the DOM by declaring it in a route definition                          // 23066\n * via the {@link ngRoute.$route $route} service. A common mistake is to declare the controller                        // 23067\n * again using `ng-controller` in the template itself.  This will cause the controller to be attached                  // 23068\n * and executed twice.                                                                                                 // 23069\n *                                                                                                                     // 23070\n * @element ANY                                                                                                        // 23071\n * @scope                                                                                                              // 23072\n * @priority 500                                                                                                       // 23073\n * @param {expression} ngController Name of a constructor function registered with the current                         // 23074\n * {@link ng.$controllerProvider $controllerProvider} or an {@link guide/expression expression}                        // 23075\n * that on the current scope evaluates to a constructor function.                                                      // 23076\n *                                                                                                                     // 23077\n * The controller instance can be published into a scope property by specifying                                        // 23078\n * `ng-controller=\"as propertyName\"`.                                                                                  // 23079\n *                                                                                                                     // 23080\n * If the current `$controllerProvider` is configured to use globals (via                                              // 23081\n * {@link ng.$controllerProvider#allowGlobals `$controllerProvider.allowGlobals()` }), this may                        // 23082\n * also be the name of a globally accessible constructor function (not recommended).                                   // 23083\n *                                                                                                                     // 23084\n * @example                                                                                                            // 23085\n * Here is a simple form for editing user contact information. Adding, removing, clearing, and                         // 23086\n * greeting are methods declared on the controller (see source tab). These methods can                                 // 23087\n * easily be called from the angular markup. Any changes to the data are automatically reflected                       // 23088\n * in the View without the need for a manual update.                                                                   // 23089\n *                                                                                                                     // 23090\n * Two different declaration styles are included below:                                                                // 23091\n *                                                                                                                     // 23092\n * * one binds methods and properties directly onto the controller using `this`:                                       // 23093\n * `ng-controller=\"SettingsController1 as settings\"`                                                                   // 23094\n * * one injects `$scope` into the controller:                                                                         // 23095\n * `ng-controller=\"SettingsController2\"`                                                                               // 23096\n *                                                                                                                     // 23097\n * The second option is more common in the Angular community, and is generally used in boilerplates                    // 23098\n * and in this guide. However, there are advantages to binding properties directly to the controller                   // 23099\n * and avoiding scope.                                                                                                 // 23100\n *                                                                                                                     // 23101\n * * Using `controller as` makes it obvious which controller you are accessing in the template when                    // 23102\n * multiple controllers apply to an element.                                                                           // 23103\n * * If you are writing your controllers as classes you have easier access to the properties and                       // 23104\n * methods, which will appear on the scope, from inside the controller code.                                           // 23105\n * * Since there is always a `.` in the bindings, you don't have to worry about prototypal                             // 23106\n * inheritance masking primitives.                                                                                     // 23107\n *                                                                                                                     // 23108\n * This example demonstrates the `controller as` syntax.                                                               // 23109\n *                                                                                                                     // 23110\n * <example name=\"ngControllerAs\" module=\"controllerAsExample\">                                                        // 23111\n *   <file name=\"index.html\">                                                                                          // 23112\n *    <div id=\"ctrl-as-exmpl\" ng-controller=\"SettingsController1 as settings\">                                         // 23113\n *      <label>Name: <input type=\"text\" ng-model=\"settings.name\"/></label>                                             // 23114\n *      <button ng-click=\"settings.greet()\">greet</button><br/>                                                        // 23115\n *      Contact:                                                                                                       // 23116\n *      <ul>                                                                                                           // 23117\n *        <li ng-repeat=\"contact in settings.contacts\">                                                                // 23118\n *          <select ng-model=\"contact.type\" aria-label=\"Contact method\" id=\"select_{{$index}}\">                        // 23119\n *             <option>phone</option>                                                                                  // 23120\n *             <option>email</option>                                                                                  // 23121\n *          </select>                                                                                                  // 23122\n *          <input type=\"text\" ng-model=\"contact.value\" aria-labelledby=\"select_{{$index}}\" />                         // 23123\n *          <button ng-click=\"settings.clearContact(contact)\">clear</button>                                           // 23124\n *          <button ng-click=\"settings.removeContact(contact)\" aria-label=\"Remove\">X</button>                          // 23125\n *        </li>                                                                                                        // 23126\n *        <li><button ng-click=\"settings.addContact()\">add</button></li>                                               // 23127\n *     </ul>                                                                                                           // 23128\n *    </div>                                                                                                           // 23129\n *   </file>                                                                                                           // 23130\n *   <file name=\"app.js\">                                                                                              // 23131\n *    angular.module('controllerAsExample', [])                                                                        // 23132\n *      .controller('SettingsController1', SettingsController1);                                                       // 23133\n *                                                                                                                     // 23134\n *    function SettingsController1() {                                                                                 // 23135\n *      this.name = \"John Smith\";                                                                                      // 23136\n *      this.contacts = [                                                                                              // 23137\n *        {type: 'phone', value: '408 555 1212'},                                                                      // 23138\n *        {type: 'email', value: 'john.smith@example.org'} ];                                                          // 23139\n *    }                                                                                                                // 23140\n *                                                                                                                     // 23141\n *    SettingsController1.prototype.greet = function() {                                                               // 23142\n *      alert(this.name);                                                                                              // 23143\n *    };                                                                                                               // 23144\n *                                                                                                                     // 23145\n *    SettingsController1.prototype.addContact = function() {                                                          // 23146\n *      this.contacts.push({type: 'email', value: 'yourname@example.org'});                                            // 23147\n *    };                                                                                                               // 23148\n *                                                                                                                     // 23149\n *    SettingsController1.prototype.removeContact = function(contactToRemove) {                                        // 23150\n *     var index = this.contacts.indexOf(contactToRemove);                                                             // 23151\n *      this.contacts.splice(index, 1);                                                                                // 23152\n *    };                                                                                                               // 23153\n *                                                                                                                     // 23154\n *    SettingsController1.prototype.clearContact = function(contact) {                                                 // 23155\n *      contact.type = 'phone';                                                                                        // 23156\n *      contact.value = '';                                                                                            // 23157\n *    };                                                                                                               // 23158\n *   </file>                                                                                                           // 23159\n *   <file name=\"protractor.js\" type=\"protractor\">                                                                     // 23160\n *     it('should check controller as', function() {                                                                   // 23161\n *       var container = element(by.id('ctrl-as-exmpl'));                                                              // 23162\n *         expect(container.element(by.model('settings.name'))                                                         // 23163\n *           .getAttribute('value')).toBe('John Smith');                                                               // 23164\n *                                                                                                                     // 23165\n *       var firstRepeat =                                                                                             // 23166\n *           container.element(by.repeater('contact in settings.contacts').row(0));                                    // 23167\n *       var secondRepeat =                                                                                            // 23168\n *           container.element(by.repeater('contact in settings.contacts').row(1));                                    // 23169\n *                                                                                                                     // 23170\n *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))                                  // 23171\n *           .toBe('408 555 1212');                                                                                    // 23172\n *                                                                                                                     // 23173\n *       expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))                                 // 23174\n *           .toBe('john.smith@example.org');                                                                          // 23175\n *                                                                                                                     // 23176\n *       firstRepeat.element(by.buttonText('clear')).click();                                                          // 23177\n *                                                                                                                     // 23178\n *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))                                  // 23179\n *           .toBe('');                                                                                                // 23180\n *                                                                                                                     // 23181\n *       container.element(by.buttonText('add')).click();                                                              // 23182\n *                                                                                                                     // 23183\n *       expect(container.element(by.repeater('contact in settings.contacts').row(2))                                  // 23184\n *           .element(by.model('contact.value'))                                                                       // 23185\n *           .getAttribute('value'))                                                                                   // 23186\n *           .toBe('yourname@example.org');                                                                            // 23187\n *     });                                                                                                             // 23188\n *   </file>                                                                                                           // 23189\n * </example>                                                                                                          // 23190\n *                                                                                                                     // 23191\n * This example demonstrates the \"attach to `$scope`\" style of controller.                                             // 23192\n *                                                                                                                     // 23193\n * <example name=\"ngController\" module=\"controllerExample\">                                                            // 23194\n *  <file name=\"index.html\">                                                                                           // 23195\n *   <div id=\"ctrl-exmpl\" ng-controller=\"SettingsController2\">                                                         // 23196\n *     <label>Name: <input type=\"text\" ng-model=\"name\"/></label>                                                       // 23197\n *     <button ng-click=\"greet()\">greet</button><br/>                                                                  // 23198\n *     Contact:                                                                                                        // 23199\n *     <ul>                                                                                                            // 23200\n *       <li ng-repeat=\"contact in contacts\">                                                                          // 23201\n *         <select ng-model=\"contact.type\" id=\"select_{{$index}}\">                                                     // 23202\n *            <option>phone</option>                                                                                   // 23203\n *            <option>email</option>                                                                                   // 23204\n *         </select>                                                                                                   // 23205\n *         <input type=\"text\" ng-model=\"contact.value\" aria-labelledby=\"select_{{$index}}\" />                          // 23206\n *         <button ng-click=\"clearContact(contact)\">clear</button>                                                     // 23207\n *         <button ng-click=\"removeContact(contact)\">X</button>                                                        // 23208\n *       </li>                                                                                                         // 23209\n *       <li>[ <button ng-click=\"addContact()\">add</button> ]</li>                                                     // 23210\n *    </ul>                                                                                                            // 23211\n *   </div>                                                                                                            // 23212\n *  </file>                                                                                                            // 23213\n *  <file name=\"app.js\">                                                                                               // 23214\n *   angular.module('controllerExample', [])                                                                           // 23215\n *     .controller('SettingsController2', ['$scope', SettingsController2]);                                            // 23216\n *                                                                                                                     // 23217\n *   function SettingsController2($scope) {                                                                            // 23218\n *     $scope.name = \"John Smith\";                                                                                     // 23219\n *     $scope.contacts = [                                                                                             // 23220\n *       {type:'phone', value:'408 555 1212'},                                                                         // 23221\n *       {type:'email', value:'john.smith@example.org'} ];                                                             // 23222\n *                                                                                                                     // 23223\n *     $scope.greet = function() {                                                                                     // 23224\n *       alert($scope.name);                                                                                           // 23225\n *     };                                                                                                              // 23226\n *                                                                                                                     // 23227\n *     $scope.addContact = function() {                                                                                // 23228\n *       $scope.contacts.push({type:'email', value:'yourname@example.org'});                                           // 23229\n *     };                                                                                                              // 23230\n *                                                                                                                     // 23231\n *     $scope.removeContact = function(contactToRemove) {                                                              // 23232\n *       var index = $scope.contacts.indexOf(contactToRemove);                                                         // 23233\n *       $scope.contacts.splice(index, 1);                                                                             // 23234\n *     };                                                                                                              // 23235\n *                                                                                                                     // 23236\n *     $scope.clearContact = function(contact) {                                                                       // 23237\n *       contact.type = 'phone';                                                                                       // 23238\n *       contact.value = '';                                                                                           // 23239\n *     };                                                                                                              // 23240\n *   }                                                                                                                 // 23241\n *  </file>                                                                                                            // 23242\n *  <file name=\"protractor.js\" type=\"protractor\">                                                                      // 23243\n *    it('should check controller', function() {                                                                       // 23244\n *      var container = element(by.id('ctrl-exmpl'));                                                                  // 23245\n *                                                                                                                     // 23246\n *      expect(container.element(by.model('name'))                                                                     // 23247\n *          .getAttribute('value')).toBe('John Smith');                                                                // 23248\n *                                                                                                                     // 23249\n *      var firstRepeat =                                                                                              // 23250\n *          container.element(by.repeater('contact in contacts').row(0));                                              // 23251\n *      var secondRepeat =                                                                                             // 23252\n *          container.element(by.repeater('contact in contacts').row(1));                                              // 23253\n *                                                                                                                     // 23254\n *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))                                   // 23255\n *          .toBe('408 555 1212');                                                                                     // 23256\n *      expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))                                  // 23257\n *          .toBe('john.smith@example.org');                                                                           // 23258\n *                                                                                                                     // 23259\n *      firstRepeat.element(by.buttonText('clear')).click();                                                           // 23260\n *                                                                                                                     // 23261\n *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))                                   // 23262\n *          .toBe('');                                                                                                 // 23263\n *                                                                                                                     // 23264\n *      container.element(by.buttonText('add')).click();                                                               // 23265\n *                                                                                                                     // 23266\n *      expect(container.element(by.repeater('contact in contacts').row(2))                                            // 23267\n *          .element(by.model('contact.value'))                                                                        // 23268\n *          .getAttribute('value'))                                                                                    // 23269\n *          .toBe('yourname@example.org');                                                                             // 23270\n *    });                                                                                                              // 23271\n *  </file>                                                                                                            // 23272\n *</example>                                                                                                           // 23273\n                                                                                                                       // 23274\n */                                                                                                                    // 23275\nvar ngControllerDirective = [function() {                                                                              // 23276\n  return {                                                                                                             // 23277\n    restrict: 'A',                                                                                                     // 23278\n    scope: true,                                                                                                       // 23279\n    controller: '@',                                                                                                   // 23280\n    priority: 500                                                                                                      // 23281\n  };                                                                                                                   // 23282\n}];                                                                                                                    // 23283\n                                                                                                                       // 23284\n/**                                                                                                                    // 23285\n * @ngdoc directive                                                                                                    // 23286\n * @name ngCsp                                                                                                         // 23287\n *                                                                                                                     // 23288\n * @element html                                                                                                       // 23289\n * @description                                                                                                        // 23290\n *                                                                                                                     // 23291\n * Angular has some features that can break certain                                                                    // 23292\n * [CSP (Content Security Policy)](https://developer.mozilla.org/en/Security/CSP) rules.                               // 23293\n *                                                                                                                     // 23294\n * If you intend to implement these rules then you must tell Angular not to use these features.                        // 23295\n *                                                                                                                     // 23296\n * This is necessary when developing things like Google Chrome Extensions or Universal Windows Apps.                   // 23297\n *                                                                                                                     // 23298\n *                                                                                                                     // 23299\n * The following rules affect Angular:                                                                                 // 23300\n *                                                                                                                     // 23301\n * * `unsafe-eval`: this rule forbids apps to use `eval` or `Function(string)` generated functions                     // 23302\n * (among other things). Angular makes use of this in the {@link $parse} service to provide a 30%                      // 23303\n * increase in the speed of evaluating Angular expressions.                                                            // 23304\n *                                                                                                                     // 23305\n * * `unsafe-inline`: this rule forbids apps from inject custom styles into the document. Angular                      // 23306\n * makes use of this to include some CSS rules (e.g. {@link ngCloak} and {@link ngHide}).                              // 23307\n * To make these directives work when a CSP rule is blocking inline styles, you must link to the                       // 23308\n * `angular-csp.css` in your HTML manually.                                                                            // 23309\n *                                                                                                                     // 23310\n * If you do not provide `ngCsp` then Angular tries to autodetect if CSP is blocking unsafe-eval                       // 23311\n * and automatically deactivates this feature in the {@link $parse} service. This autodetection,                       // 23312\n * however, triggers a CSP error to be logged in the console:                                                          // 23313\n *                                                                                                                     // 23314\n * ```                                                                                                                 // 23315\n * Refused to evaluate a string as JavaScript because 'unsafe-eval' is not an allowed source of                        // 23316\n * script in the following Content Security Policy directive: \"default-src 'self'\". Note that                          // 23317\n * 'script-src' was not explicitly set, so 'default-src' is used as a fallback.                                        // 23318\n * ```                                                                                                                 // 23319\n *                                                                                                                     // 23320\n * This error is harmless but annoying. To prevent the error from showing up, put the `ngCsp`                          // 23321\n * directive on an element of the HTML document that appears before the `<script>` tag that loads                      // 23322\n * the `angular.js` file.                                                                                              // 23323\n *                                                                                                                     // 23324\n * *Note: This directive is only available in the `ng-csp` and `data-ng-csp` attribute form.*                          // 23325\n *                                                                                                                     // 23326\n * You can specify which of the CSP related Angular features should be deactivated by providing                        // 23327\n * a value for the `ng-csp` attribute. The options are as follows:                                                     // 23328\n *                                                                                                                     // 23329\n * * no-inline-style: this stops Angular from injecting CSS styles into the DOM                                        // 23330\n *                                                                                                                     // 23331\n * * no-unsafe-eval: this stops Angular from optimising $parse with unsafe eval of strings                             // 23332\n *                                                                                                                     // 23333\n * You can use these values in the following combinations:                                                             // 23334\n *                                                                                                                     // 23335\n *                                                                                                                     // 23336\n * * No declaration means that Angular will assume that you can do inline styles, but it will do                       // 23337\n * a runtime check for unsafe-eval. E.g. `<body>`. This is backwardly compatible with previous versions                // 23338\n * of Angular.                                                                                                         // 23339\n *                                                                                                                     // 23340\n * * A simple `ng-csp` (or `data-ng-csp`) attribute will tell Angular to deactivate both inline                        // 23341\n * styles and unsafe eval. E.g. `<body ng-csp>`. This is backwardly compatible with previous versions                  // 23342\n * of Angular.                                                                                                         // 23343\n *                                                                                                                     // 23344\n * * Specifying only `no-unsafe-eval` tells Angular that we must not use eval, but that we can inject                  // 23345\n * inline styles. E.g. `<body ng-csp=\"no-unsafe-eval\">`.                                                               // 23346\n *                                                                                                                     // 23347\n * * Specifying only `no-inline-style` tells Angular that we must not inject styles, but that we can                   // 23348\n * run eval - no automcatic check for unsafe eval will occur. E.g. `<body ng-csp=\"no-inline-style\">`                   // 23349\n *                                                                                                                     // 23350\n * * Specifying both `no-unsafe-eval` and `no-inline-style` tells Angular that we must not inject                      // 23351\n * styles nor use eval, which is the same as an empty: ng-csp.                                                         // 23352\n * E.g.`<body ng-csp=\"no-inline-style;no-unsafe-eval\">`                                                                // 23353\n *                                                                                                                     // 23354\n * @example                                                                                                            // 23355\n * This example shows how to apply the `ngCsp` directive to the `html` tag.                                            // 23356\n   ```html                                                                                                             // 23357\n     <!doctype html>                                                                                                   // 23358\n     <html ng-app ng-csp>                                                                                              // 23359\n     ...                                                                                                               // 23360\n     ...                                                                                                               // 23361\n     </html>                                                                                                           // 23362\n   ```                                                                                                                 // 23363\n  * @example                                                                                                           // 23364\n      // Note: the suffix `.csp` in the example name triggers                                                          // 23365\n      // csp mode in our http server!                                                                                  // 23366\n      <example name=\"example.csp\" module=\"cspExample\" ng-csp=\"true\">                                                   // 23367\n        <file name=\"index.html\">                                                                                       // 23368\n          <div ng-controller=\"MainController as ctrl\">                                                                 // 23369\n            <div>                                                                                                      // 23370\n              <button ng-click=\"ctrl.inc()\" id=\"inc\">Increment</button>                                                // 23371\n              <span id=\"counter\">                                                                                      // 23372\n                {{ctrl.counter}}                                                                                       // 23373\n              </span>                                                                                                  // 23374\n            </div>                                                                                                     // 23375\n                                                                                                                       // 23376\n            <div>                                                                                                      // 23377\n              <button ng-click=\"ctrl.evil()\" id=\"evil\">Evil</button>                                                   // 23378\n              <span id=\"evilError\">                                                                                    // 23379\n                {{ctrl.evilError}}                                                                                     // 23380\n              </span>                                                                                                  // 23381\n            </div>                                                                                                     // 23382\n          </div>                                                                                                       // 23383\n        </file>                                                                                                        // 23384\n        <file name=\"script.js\">                                                                                        // 23385\n           angular.module('cspExample', [])                                                                            // 23386\n             .controller('MainController', function() {                                                                // 23387\n                this.counter = 0;                                                                                      // 23388\n                this.inc = function() {                                                                                // 23389\n                  this.counter++;                                                                                      // 23390\n                };                                                                                                     // 23391\n                this.evil = function() {                                                                               // 23392\n                  // jshint evil:true                                                                                  // 23393\n                  try {                                                                                                // 23394\n                    eval('1+2');                                                                                       // 23395\n                  } catch (e) {                                                                                        // 23396\n                    this.evilError = e.message;                                                                        // 23397\n                  }                                                                                                    // 23398\n                };                                                                                                     // 23399\n              });                                                                                                      // 23400\n        </file>                                                                                                        // 23401\n        <file name=\"protractor.js\" type=\"protractor\">                                                                  // 23402\n          var util, webdriver;                                                                                         // 23403\n                                                                                                                       // 23404\n          var incBtn = element(by.id('inc'));                                                                          // 23405\n          var counter = element(by.id('counter'));                                                                     // 23406\n          var evilBtn = element(by.id('evil'));                                                                        // 23407\n          var evilError = element(by.id('evilError'));                                                                 // 23408\n                                                                                                                       // 23409\n          function getAndClearSevereErrors() {                                                                         // 23410\n            return browser.manage().logs().get('browser').then(function(browserLog) {                                  // 23411\n              return browserLog.filter(function(logEntry) {                                                            // 23412\n                return logEntry.level.value > webdriver.logging.Level.WARNING.value;                                   // 23413\n              });                                                                                                      // 23414\n            });                                                                                                        // 23415\n          }                                                                                                            // 23416\n                                                                                                                       // 23417\n          function clearErrors() {                                                                                     // 23418\n            getAndClearSevereErrors();                                                                                 // 23419\n          }                                                                                                            // 23420\n                                                                                                                       // 23421\n          function expectNoErrors() {                                                                                  // 23422\n            getAndClearSevereErrors().then(function(filteredLog) {                                                     // 23423\n              expect(filteredLog.length).toEqual(0);                                                                   // 23424\n              if (filteredLog.length) {                                                                                // 23425\n                console.log('browser console errors: ' + util.inspect(filteredLog));                                   // 23426\n              }                                                                                                        // 23427\n            });                                                                                                        // 23428\n          }                                                                                                            // 23429\n                                                                                                                       // 23430\n          function expectError(regex) {                                                                                // 23431\n            getAndClearSevereErrors().then(function(filteredLog) {                                                     // 23432\n              var found = false;                                                                                       // 23433\n              filteredLog.forEach(function(log) {                                                                      // 23434\n                if (log.message.match(regex)) {                                                                        // 23435\n                  found = true;                                                                                        // 23436\n                }                                                                                                      // 23437\n              });                                                                                                      // 23438\n              if (!found) {                                                                                            // 23439\n                throw new Error('expected an error that matches ' + regex);                                            // 23440\n              }                                                                                                        // 23441\n            });                                                                                                        // 23442\n          }                                                                                                            // 23443\n                                                                                                                       // 23444\n          beforeEach(function() {                                                                                      // 23445\n            util = require('util');                                                                                    // 23446\n            webdriver = require('protractor/node_modules/selenium-webdriver');                                         // 23447\n          });                                                                                                          // 23448\n                                                                                                                       // 23449\n          // For now, we only test on Chrome,                                                                          // 23450\n          // as Safari does not load the page with Protractor's injected scripts,                                      // 23451\n          // and Firefox webdriver always disables content security policy (#6358)                                     // 23452\n          if (browser.params.browser !== 'chrome') {                                                                   // 23453\n            return;                                                                                                    // 23454\n          }                                                                                                            // 23455\n                                                                                                                       // 23456\n          it('should not report errors when the page is loaded', function() {                                          // 23457\n            // clear errors so we are not dependent on previous tests                                                  // 23458\n            clearErrors();                                                                                             // 23459\n            // Need to reload the page as the page is already loaded when                                              // 23460\n            // we come here                                                                                            // 23461\n            browser.driver.getCurrentUrl().then(function(url) {                                                        // 23462\n              browser.get(url);                                                                                        // 23463\n            });                                                                                                        // 23464\n            expectNoErrors();                                                                                          // 23465\n          });                                                                                                          // 23466\n                                                                                                                       // 23467\n          it('should evaluate expressions', function() {                                                               // 23468\n            expect(counter.getText()).toEqual('0');                                                                    // 23469\n            incBtn.click();                                                                                            // 23470\n            expect(counter.getText()).toEqual('1');                                                                    // 23471\n            expectNoErrors();                                                                                          // 23472\n          });                                                                                                          // 23473\n                                                                                                                       // 23474\n          it('should throw and report an error when using \"eval\"', function() {                                        // 23475\n            evilBtn.click();                                                                                           // 23476\n            expect(evilError.getText()).toMatch(/Content Security Policy/);                                            // 23477\n            expectError(/Content Security Policy/);                                                                    // 23478\n          });                                                                                                          // 23479\n        </file>                                                                                                        // 23480\n      </example>                                                                                                       // 23481\n  */                                                                                                                   // 23482\n                                                                                                                       // 23483\n// ngCsp is not implemented as a proper directive any more, because we need it be processed while we                   // 23484\n// bootstrap the system (before $parse is instantiated), for this reason we just have                                  // 23485\n// the csp() fn that looks for the `ng-csp` attribute anywhere in the current doc                                      // 23486\n                                                                                                                       // 23487\n/**                                                                                                                    // 23488\n * @ngdoc directive                                                                                                    // 23489\n * @name ngClick                                                                                                       // 23490\n *                                                                                                                     // 23491\n * @description                                                                                                        // 23492\n * The ngClick directive allows you to specify custom behavior when                                                    // 23493\n * an element is clicked.                                                                                              // 23494\n *                                                                                                                     // 23495\n * @element ANY                                                                                                        // 23496\n * @priority 0                                                                                                         // 23497\n * @param {expression} ngClick {@link guide/expression Expression} to evaluate upon                                    // 23498\n * click. ({@link guide/expression#-event- Event object is available as `$event`})                                     // 23499\n *                                                                                                                     // 23500\n * @example                                                                                                            // 23501\n   <example>                                                                                                           // 23502\n     <file name=\"index.html\">                                                                                          // 23503\n      <button ng-click=\"count = count + 1\" ng-init=\"count=0\">                                                          // 23504\n        Increment                                                                                                      // 23505\n      </button>                                                                                                        // 23506\n      <span>                                                                                                           // 23507\n        count: {{count}}                                                                                               // 23508\n      </span>                                                                                                          // 23509\n     </file>                                                                                                           // 23510\n     <file name=\"protractor.js\" type=\"protractor\">                                                                     // 23511\n       it('should check ng-click', function() {                                                                        // 23512\n         expect(element(by.binding('count')).getText()).toMatch('0');                                                  // 23513\n         element(by.css('button')).click();                                                                            // 23514\n         expect(element(by.binding('count')).getText()).toMatch('1');                                                  // 23515\n       });                                                                                                             // 23516\n     </file>                                                                                                           // 23517\n   </example>                                                                                                          // 23518\n */                                                                                                                    // 23519\n/*                                                                                                                     // 23520\n * A collection of directives that allows creation of custom event handlers that are defined as                        // 23521\n * angular expressions and are compiled and executed within the current scope.                                         // 23522\n */                                                                                                                    // 23523\nvar ngEventDirectives = {};                                                                                            // 23524\n                                                                                                                       // 23525\n// For events that might fire synchronously during DOM manipulation                                                    // 23526\n// we need to execute their event handlers asynchronously using $evalAsync,                                            // 23527\n// so that they are not executed in an inconsistent state.                                                             // 23528\nvar forceAsyncEvents = {                                                                                               // 23529\n  'blur': true,                                                                                                        // 23530\n  'focus': true                                                                                                        // 23531\n};                                                                                                                     // 23532\nforEach(                                                                                                               // 23533\n  'click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste'.split(' '),\n  function(eventName) {                                                                                                // 23535\n    var directiveName = directiveNormalize('ng-' + eventName);                                                         // 23536\n    ngEventDirectives[directiveName] = ['$parse', '$rootScope', function($parse, $rootScope) {                         // 23537\n      return {                                                                                                         // 23538\n        restrict: 'A',                                                                                                 // 23539\n        compile: function($element, attr) {                                                                            // 23540\n          // We expose the powerful $event object on the scope that provides access to the Window,                     // 23541\n          // etc. that isn't protected by the fast paths in $parse.  We explicitly request better                      // 23542\n          // checks at the cost of speed since event handler expressions are not executed as                           // 23543\n          // frequently as regular change detection.                                                                   // 23544\n          var fn = $parse(attr[directiveName], /* interceptorFn */ null, /* expensiveChecks */ true);                  // 23545\n          return function ngEventHandler(scope, element) {                                                             // 23546\n            element.on(eventName, function(event) {                                                                    // 23547\n              var callback = function() {                                                                              // 23548\n                fn(scope, {$event:event});                                                                             // 23549\n              };                                                                                                       // 23550\n              if (forceAsyncEvents[eventName] && $rootScope.$$phase) {                                                 // 23551\n                scope.$evalAsync(callback);                                                                            // 23552\n              } else {                                                                                                 // 23553\n                scope.$apply(callback);                                                                                // 23554\n              }                                                                                                        // 23555\n            });                                                                                                        // 23556\n          };                                                                                                           // 23557\n        }                                                                                                              // 23558\n      };                                                                                                               // 23559\n    }];                                                                                                                // 23560\n  }                                                                                                                    // 23561\n);                                                                                                                     // 23562\n                                                                                                                       // 23563\n/**                                                                                                                    // 23564\n * @ngdoc directive                                                                                                    // 23565\n * @name ngDblclick                                                                                                    // 23566\n *                                                                                                                     // 23567\n * @description                                                                                                        // 23568\n * The `ngDblclick` directive allows you to specify custom behavior on a dblclick event.                               // 23569\n *                                                                                                                     // 23570\n * @element ANY                                                                                                        // 23571\n * @priority 0                                                                                                         // 23572\n * @param {expression} ngDblclick {@link guide/expression Expression} to evaluate upon                                 // 23573\n * a dblclick. (The Event object is available as `$event`)                                                             // 23574\n *                                                                                                                     // 23575\n * @example                                                                                                            // 23576\n   <example>                                                                                                           // 23577\n     <file name=\"index.html\">                                                                                          // 23578\n      <button ng-dblclick=\"count = count + 1\" ng-init=\"count=0\">                                                       // 23579\n        Increment (on double click)                                                                                    // 23580\n      </button>                                                                                                        // 23581\n      count: {{count}}                                                                                                 // 23582\n     </file>                                                                                                           // 23583\n   </example>                                                                                                          // 23584\n */                                                                                                                    // 23585\n                                                                                                                       // 23586\n                                                                                                                       // 23587\n/**                                                                                                                    // 23588\n * @ngdoc directive                                                                                                    // 23589\n * @name ngMousedown                                                                                                   // 23590\n *                                                                                                                     // 23591\n * @description                                                                                                        // 23592\n * The ngMousedown directive allows you to specify custom behavior on mousedown event.                                 // 23593\n *                                                                                                                     // 23594\n * @element ANY                                                                                                        // 23595\n * @priority 0                                                                                                         // 23596\n * @param {expression} ngMousedown {@link guide/expression Expression} to evaluate upon                                // 23597\n * mousedown. ({@link guide/expression#-event- Event object is available as `$event`})                                 // 23598\n *                                                                                                                     // 23599\n * @example                                                                                                            // 23600\n   <example>                                                                                                           // 23601\n     <file name=\"index.html\">                                                                                          // 23602\n      <button ng-mousedown=\"count = count + 1\" ng-init=\"count=0\">                                                      // 23603\n        Increment (on mouse down)                                                                                      // 23604\n      </button>                                                                                                        // 23605\n      count: {{count}}                                                                                                 // 23606\n     </file>                                                                                                           // 23607\n   </example>                                                                                                          // 23608\n */                                                                                                                    // 23609\n                                                                                                                       // 23610\n                                                                                                                       // 23611\n/**                                                                                                                    // 23612\n * @ngdoc directive                                                                                                    // 23613\n * @name ngMouseup                                                                                                     // 23614\n *                                                                                                                     // 23615\n * @description                                                                                                        // 23616\n * Specify custom behavior on mouseup event.                                                                           // 23617\n *                                                                                                                     // 23618\n * @element ANY                                                                                                        // 23619\n * @priority 0                                                                                                         // 23620\n * @param {expression} ngMouseup {@link guide/expression Expression} to evaluate upon                                  // 23621\n * mouseup. ({@link guide/expression#-event- Event object is available as `$event`})                                   // 23622\n *                                                                                                                     // 23623\n * @example                                                                                                            // 23624\n   <example>                                                                                                           // 23625\n     <file name=\"index.html\">                                                                                          // 23626\n      <button ng-mouseup=\"count = count + 1\" ng-init=\"count=0\">                                                        // 23627\n        Increment (on mouse up)                                                                                        // 23628\n      </button>                                                                                                        // 23629\n      count: {{count}}                                                                                                 // 23630\n     </file>                                                                                                           // 23631\n   </example>                                                                                                          // 23632\n */                                                                                                                    // 23633\n                                                                                                                       // 23634\n/**                                                                                                                    // 23635\n * @ngdoc directive                                                                                                    // 23636\n * @name ngMouseover                                                                                                   // 23637\n *                                                                                                                     // 23638\n * @description                                                                                                        // 23639\n * Specify custom behavior on mouseover event.                                                                         // 23640\n *                                                                                                                     // 23641\n * @element ANY                                                                                                        // 23642\n * @priority 0                                                                                                         // 23643\n * @param {expression} ngMouseover {@link guide/expression Expression} to evaluate upon                                // 23644\n * mouseover. ({@link guide/expression#-event- Event object is available as `$event`})                                 // 23645\n *                                                                                                                     // 23646\n * @example                                                                                                            // 23647\n   <example>                                                                                                           // 23648\n     <file name=\"index.html\">                                                                                          // 23649\n      <button ng-mouseover=\"count = count + 1\" ng-init=\"count=0\">                                                      // 23650\n        Increment (when mouse is over)                                                                                 // 23651\n      </button>                                                                                                        // 23652\n      count: {{count}}                                                                                                 // 23653\n     </file>                                                                                                           // 23654\n   </example>                                                                                                          // 23655\n */                                                                                                                    // 23656\n                                                                                                                       // 23657\n                                                                                                                       // 23658\n/**                                                                                                                    // 23659\n * @ngdoc directive                                                                                                    // 23660\n * @name ngMouseenter                                                                                                  // 23661\n *                                                                                                                     // 23662\n * @description                                                                                                        // 23663\n * Specify custom behavior on mouseenter event.                                                                        // 23664\n *                                                                                                                     // 23665\n * @element ANY                                                                                                        // 23666\n * @priority 0                                                                                                         // 23667\n * @param {expression} ngMouseenter {@link guide/expression Expression} to evaluate upon                               // 23668\n * mouseenter. ({@link guide/expression#-event- Event object is available as `$event`})                                // 23669\n *                                                                                                                     // 23670\n * @example                                                                                                            // 23671\n   <example>                                                                                                           // 23672\n     <file name=\"index.html\">                                                                                          // 23673\n      <button ng-mouseenter=\"count = count + 1\" ng-init=\"count=0\">                                                     // 23674\n        Increment (when mouse enters)                                                                                  // 23675\n      </button>                                                                                                        // 23676\n      count: {{count}}                                                                                                 // 23677\n     </file>                                                                                                           // 23678\n   </example>                                                                                                          // 23679\n */                                                                                                                    // 23680\n                                                                                                                       // 23681\n                                                                                                                       // 23682\n/**                                                                                                                    // 23683\n * @ngdoc directive                                                                                                    // 23684\n * @name ngMouseleave                                                                                                  // 23685\n *                                                                                                                     // 23686\n * @description                                                                                                        // 23687\n * Specify custom behavior on mouseleave event.                                                                        // 23688\n *                                                                                                                     // 23689\n * @element ANY                                                                                                        // 23690\n * @priority 0                                                                                                         // 23691\n * @param {expression} ngMouseleave {@link guide/expression Expression} to evaluate upon                               // 23692\n * mouseleave. ({@link guide/expression#-event- Event object is available as `$event`})                                // 23693\n *                                                                                                                     // 23694\n * @example                                                                                                            // 23695\n   <example>                                                                                                           // 23696\n     <file name=\"index.html\">                                                                                          // 23697\n      <button ng-mouseleave=\"count = count + 1\" ng-init=\"count=0\">                                                     // 23698\n        Increment (when mouse leaves)                                                                                  // 23699\n      </button>                                                                                                        // 23700\n      count: {{count}}                                                                                                 // 23701\n     </file>                                                                                                           // 23702\n   </example>                                                                                                          // 23703\n */                                                                                                                    // 23704\n                                                                                                                       // 23705\n                                                                                                                       // 23706\n/**                                                                                                                    // 23707\n * @ngdoc directive                                                                                                    // 23708\n * @name ngMousemove                                                                                                   // 23709\n *                                                                                                                     // 23710\n * @description                                                                                                        // 23711\n * Specify custom behavior on mousemove event.                                                                         // 23712\n *                                                                                                                     // 23713\n * @element ANY                                                                                                        // 23714\n * @priority 0                                                                                                         // 23715\n * @param {expression} ngMousemove {@link guide/expression Expression} to evaluate upon                                // 23716\n * mousemove. ({@link guide/expression#-event- Event object is available as `$event`})                                 // 23717\n *                                                                                                                     // 23718\n * @example                                                                                                            // 23719\n   <example>                                                                                                           // 23720\n     <file name=\"index.html\">                                                                                          // 23721\n      <button ng-mousemove=\"count = count + 1\" ng-init=\"count=0\">                                                      // 23722\n        Increment (when mouse moves)                                                                                   // 23723\n      </button>                                                                                                        // 23724\n      count: {{count}}                                                                                                 // 23725\n     </file>                                                                                                           // 23726\n   </example>                                                                                                          // 23727\n */                                                                                                                    // 23728\n                                                                                                                       // 23729\n                                                                                                                       // 23730\n/**                                                                                                                    // 23731\n * @ngdoc directive                                                                                                    // 23732\n * @name ngKeydown                                                                                                     // 23733\n *                                                                                                                     // 23734\n * @description                                                                                                        // 23735\n * Specify custom behavior on keydown event.                                                                           // 23736\n *                                                                                                                     // 23737\n * @element ANY                                                                                                        // 23738\n * @priority 0                                                                                                         // 23739\n * @param {expression} ngKeydown {@link guide/expression Expression} to evaluate upon                                  // 23740\n * keydown. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)                  // 23741\n *                                                                                                                     // 23742\n * @example                                                                                                            // 23743\n   <example>                                                                                                           // 23744\n     <file name=\"index.html\">                                                                                          // 23745\n      <input ng-keydown=\"count = count + 1\" ng-init=\"count=0\">                                                         // 23746\n      key down count: {{count}}                                                                                        // 23747\n     </file>                                                                                                           // 23748\n   </example>                                                                                                          // 23749\n */                                                                                                                    // 23750\n                                                                                                                       // 23751\n                                                                                                                       // 23752\n/**                                                                                                                    // 23753\n * @ngdoc directive                                                                                                    // 23754\n * @name ngKeyup                                                                                                       // 23755\n *                                                                                                                     // 23756\n * @description                                                                                                        // 23757\n * Specify custom behavior on keyup event.                                                                             // 23758\n *                                                                                                                     // 23759\n * @element ANY                                                                                                        // 23760\n * @priority 0                                                                                                         // 23761\n * @param {expression} ngKeyup {@link guide/expression Expression} to evaluate upon                                    // 23762\n * keyup. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)                    // 23763\n *                                                                                                                     // 23764\n * @example                                                                                                            // 23765\n   <example>                                                                                                           // 23766\n     <file name=\"index.html\">                                                                                          // 23767\n       <p>Typing in the input box below updates the key count</p>                                                      // 23768\n       <input ng-keyup=\"count = count + 1\" ng-init=\"count=0\"> key up count: {{count}}                                  // 23769\n                                                                                                                       // 23770\n       <p>Typing in the input box below updates the keycode</p>                                                        // 23771\n       <input ng-keyup=\"event=$event\">                                                                                 // 23772\n       <p>event keyCode: {{ event.keyCode }}</p>                                                                       // 23773\n       <p>event altKey: {{ event.altKey }}</p>                                                                         // 23774\n     </file>                                                                                                           // 23775\n   </example>                                                                                                          // 23776\n */                                                                                                                    // 23777\n                                                                                                                       // 23778\n                                                                                                                       // 23779\n/**                                                                                                                    // 23780\n * @ngdoc directive                                                                                                    // 23781\n * @name ngKeypress                                                                                                    // 23782\n *                                                                                                                     // 23783\n * @description                                                                                                        // 23784\n * Specify custom behavior on keypress event.                                                                          // 23785\n *                                                                                                                     // 23786\n * @element ANY                                                                                                        // 23787\n * @param {expression} ngKeypress {@link guide/expression Expression} to evaluate upon                                 // 23788\n * keypress. ({@link guide/expression#-event- Event object is available as `$event`}                                   // 23789\n * and can be interrogated for keyCode, altKey, etc.)                                                                  // 23790\n *                                                                                                                     // 23791\n * @example                                                                                                            // 23792\n   <example>                                                                                                           // 23793\n     <file name=\"index.html\">                                                                                          // 23794\n      <input ng-keypress=\"count = count + 1\" ng-init=\"count=0\">                                                        // 23795\n      key press count: {{count}}                                                                                       // 23796\n     </file>                                                                                                           // 23797\n   </example>                                                                                                          // 23798\n */                                                                                                                    // 23799\n                                                                                                                       // 23800\n                                                                                                                       // 23801\n/**                                                                                                                    // 23802\n * @ngdoc directive                                                                                                    // 23803\n * @name ngSubmit                                                                                                      // 23804\n *                                                                                                                     // 23805\n * @description                                                                                                        // 23806\n * Enables binding angular expressions to onsubmit events.                                                             // 23807\n *                                                                                                                     // 23808\n * Additionally it prevents the default action (which for form means sending the request to the                        // 23809\n * server and reloading the current page), but only if the form does not contain `action`,                             // 23810\n * `data-action`, or `x-action` attributes.                                                                            // 23811\n *                                                                                                                     // 23812\n * <div class=\"alert alert-warning\">                                                                                   // 23813\n * **Warning:** Be careful not to cause \"double-submission\" by using both the `ngClick` and                            // 23814\n * `ngSubmit` handlers together. See the                                                                               // 23815\n * {@link form#submitting-a-form-and-preventing-the-default-action `form` directive documentation}                     // 23816\n * for a detailed discussion of when `ngSubmit` may be triggered.                                                      // 23817\n * </div>                                                                                                              // 23818\n *                                                                                                                     // 23819\n * @element form                                                                                                       // 23820\n * @priority 0                                                                                                         // 23821\n * @param {expression} ngSubmit {@link guide/expression Expression} to eval.                                           // 23822\n * ({@link guide/expression#-event- Event object is available as `$event`})                                            // 23823\n *                                                                                                                     // 23824\n * @example                                                                                                            // 23825\n   <example module=\"submitExample\">                                                                                    // 23826\n     <file name=\"index.html\">                                                                                          // 23827\n      <script>                                                                                                         // 23828\n        angular.module('submitExample', [])                                                                            // 23829\n          .controller('ExampleController', ['$scope', function($scope) {                                               // 23830\n            $scope.list = [];                                                                                          // 23831\n            $scope.text = 'hello';                                                                                     // 23832\n            $scope.submit = function() {                                                                               // 23833\n              if ($scope.text) {                                                                                       // 23834\n                $scope.list.push(this.text);                                                                           // 23835\n                $scope.text = '';                                                                                      // 23836\n              }                                                                                                        // 23837\n            };                                                                                                         // 23838\n          }]);                                                                                                         // 23839\n      </script>                                                                                                        // 23840\n      <form ng-submit=\"submit()\" ng-controller=\"ExampleController\">                                                    // 23841\n        Enter text and hit enter:                                                                                      // 23842\n        <input type=\"text\" ng-model=\"text\" name=\"text\" />                                                              // 23843\n        <input type=\"submit\" id=\"submit\" value=\"Submit\" />                                                             // 23844\n        <pre>list={{list}}</pre>                                                                                       // 23845\n      </form>                                                                                                          // 23846\n     </file>                                                                                                           // 23847\n     <file name=\"protractor.js\" type=\"protractor\">                                                                     // 23848\n       it('should check ng-submit', function() {                                                                       // 23849\n         expect(element(by.binding('list')).getText()).toBe('list=[]');                                                // 23850\n         element(by.css('#submit')).click();                                                                           // 23851\n         expect(element(by.binding('list')).getText()).toContain('hello');                                             // 23852\n         expect(element(by.model('text')).getAttribute('value')).toBe('');                                             // 23853\n       });                                                                                                             // 23854\n       it('should ignore empty strings', function() {                                                                  // 23855\n         expect(element(by.binding('list')).getText()).toBe('list=[]');                                                // 23856\n         element(by.css('#submit')).click();                                                                           // 23857\n         element(by.css('#submit')).click();                                                                           // 23858\n         expect(element(by.binding('list')).getText()).toContain('hello');                                             // 23859\n        });                                                                                                            // 23860\n     </file>                                                                                                           // 23861\n   </example>                                                                                                          // 23862\n */                                                                                                                    // 23863\n                                                                                                                       // 23864\n/**                                                                                                                    // 23865\n * @ngdoc directive                                                                                                    // 23866\n * @name ngFocus                                                                                                       // 23867\n *                                                                                                                     // 23868\n * @description                                                                                                        // 23869\n * Specify custom behavior on focus event.                                                                             // 23870\n *                                                                                                                     // 23871\n * Note: As the `focus` event is executed synchronously when calling `input.focus()`                                   // 23872\n * AngularJS executes the expression using `scope.$evalAsync` if the event is fired                                    // 23873\n * during an `$apply` to ensure a consistent state.                                                                    // 23874\n *                                                                                                                     // 23875\n * @element window, input, select, textarea, a                                                                         // 23876\n * @priority 0                                                                                                         // 23877\n * @param {expression} ngFocus {@link guide/expression Expression} to evaluate upon                                    // 23878\n * focus. ({@link guide/expression#-event- Event object is available as `$event`})                                     // 23879\n *                                                                                                                     // 23880\n * @example                                                                                                            // 23881\n * See {@link ng.directive:ngClick ngClick}                                                                            // 23882\n */                                                                                                                    // 23883\n                                                                                                                       // 23884\n/**                                                                                                                    // 23885\n * @ngdoc directive                                                                                                    // 23886\n * @name ngBlur                                                                                                        // 23887\n *                                                                                                                     // 23888\n * @description                                                                                                        // 23889\n * Specify custom behavior on blur event.                                                                              // 23890\n *                                                                                                                     // 23891\n * A [blur event](https://developer.mozilla.org/en-US/docs/Web/Events/blur) fires when                                 // 23892\n * an element has lost focus.                                                                                          // 23893\n *                                                                                                                     // 23894\n * Note: As the `blur` event is executed synchronously also during DOM manipulations                                   // 23895\n * (e.g. removing a focussed input),                                                                                   // 23896\n * AngularJS executes the expression using `scope.$evalAsync` if the event is fired                                    // 23897\n * during an `$apply` to ensure a consistent state.                                                                    // 23898\n *                                                                                                                     // 23899\n * @element window, input, select, textarea, a                                                                         // 23900\n * @priority 0                                                                                                         // 23901\n * @param {expression} ngBlur {@link guide/expression Expression} to evaluate upon                                     // 23902\n * blur. ({@link guide/expression#-event- Event object is available as `$event`})                                      // 23903\n *                                                                                                                     // 23904\n * @example                                                                                                            // 23905\n * See {@link ng.directive:ngClick ngClick}                                                                            // 23906\n */                                                                                                                    // 23907\n                                                                                                                       // 23908\n/**                                                                                                                    // 23909\n * @ngdoc directive                                                                                                    // 23910\n * @name ngCopy                                                                                                        // 23911\n *                                                                                                                     // 23912\n * @description                                                                                                        // 23913\n * Specify custom behavior on copy event.                                                                              // 23914\n *                                                                                                                     // 23915\n * @element window, input, select, textarea, a                                                                         // 23916\n * @priority 0                                                                                                         // 23917\n * @param {expression} ngCopy {@link guide/expression Expression} to evaluate upon                                     // 23918\n * copy. ({@link guide/expression#-event- Event object is available as `$event`})                                      // 23919\n *                                                                                                                     // 23920\n * @example                                                                                                            // 23921\n   <example>                                                                                                           // 23922\n     <file name=\"index.html\">                                                                                          // 23923\n      <input ng-copy=\"copied=true\" ng-init=\"copied=false; value='copy me'\" ng-model=\"value\">                           // 23924\n      copied: {{copied}}                                                                                               // 23925\n     </file>                                                                                                           // 23926\n   </example>                                                                                                          // 23927\n */                                                                                                                    // 23928\n                                                                                                                       // 23929\n/**                                                                                                                    // 23930\n * @ngdoc directive                                                                                                    // 23931\n * @name ngCut                                                                                                         // 23932\n *                                                                                                                     // 23933\n * @description                                                                                                        // 23934\n * Specify custom behavior on cut event.                                                                               // 23935\n *                                                                                                                     // 23936\n * @element window, input, select, textarea, a                                                                         // 23937\n * @priority 0                                                                                                         // 23938\n * @param {expression} ngCut {@link guide/expression Expression} to evaluate upon                                      // 23939\n * cut. ({@link guide/expression#-event- Event object is available as `$event`})                                       // 23940\n *                                                                                                                     // 23941\n * @example                                                                                                            // 23942\n   <example>                                                                                                           // 23943\n     <file name=\"index.html\">                                                                                          // 23944\n      <input ng-cut=\"cut=true\" ng-init=\"cut=false; value='cut me'\" ng-model=\"value\">                                   // 23945\n      cut: {{cut}}                                                                                                     // 23946\n     </file>                                                                                                           // 23947\n   </example>                                                                                                          // 23948\n */                                                                                                                    // 23949\n                                                                                                                       // 23950\n/**                                                                                                                    // 23951\n * @ngdoc directive                                                                                                    // 23952\n * @name ngPaste                                                                                                       // 23953\n *                                                                                                                     // 23954\n * @description                                                                                                        // 23955\n * Specify custom behavior on paste event.                                                                             // 23956\n *                                                                                                                     // 23957\n * @element window, input, select, textarea, a                                                                         // 23958\n * @priority 0                                                                                                         // 23959\n * @param {expression} ngPaste {@link guide/expression Expression} to evaluate upon                                    // 23960\n * paste. ({@link guide/expression#-event- Event object is available as `$event`})                                     // 23961\n *                                                                                                                     // 23962\n * @example                                                                                                            // 23963\n   <example>                                                                                                           // 23964\n     <file name=\"index.html\">                                                                                          // 23965\n      <input ng-paste=\"paste=true\" ng-init=\"paste=false\" placeholder='paste here'>                                     // 23966\n      pasted: {{paste}}                                                                                                // 23967\n     </file>                                                                                                           // 23968\n   </example>                                                                                                          // 23969\n */                                                                                                                    // 23970\n                                                                                                                       // 23971\n/**                                                                                                                    // 23972\n * @ngdoc directive                                                                                                    // 23973\n * @name ngIf                                                                                                          // 23974\n * @restrict A                                                                                                         // 23975\n * @multiElement                                                                                                       // 23976\n *                                                                                                                     // 23977\n * @description                                                                                                        // 23978\n * The `ngIf` directive removes or recreates a portion of the DOM tree based on an                                     // 23979\n * {expression}. If the expression assigned to `ngIf` evaluates to a false                                             // 23980\n * value then the element is removed from the DOM, otherwise a clone of the                                            // 23981\n * element is reinserted into the DOM.                                                                                 // 23982\n *                                                                                                                     // 23983\n * `ngIf` differs from `ngShow` and `ngHide` in that `ngIf` completely removes and recreates the                       // 23984\n * element in the DOM rather than changing its visibility via the `display` css property.  A common                    // 23985\n * case when this difference is significant is when using css selectors that rely on an element's                      // 23986\n * position within the DOM, such as the `:first-child` or `:last-child` pseudo-classes.                                // 23987\n *                                                                                                                     // 23988\n * Note that when an element is removed using `ngIf` its scope is destroyed and a new scope                            // 23989\n * is created when the element is restored.  The scope created within `ngIf` inherits from                             // 23990\n * its parent scope using                                                                                              // 23991\n * [prototypal inheritance](https://github.com/angular/angular.js/wiki/Understanding-Scopes#javascript-prototypal-inheritance).\n * An important implication of this is if `ngModel` is used within `ngIf` to bind to                                   // 23993\n * a javascript primitive defined in the parent scope. In this case any modifications made to the                      // 23994\n * variable within the child scope will override (hide) the value in the parent scope.                                 // 23995\n *                                                                                                                     // 23996\n * Also, `ngIf` recreates elements using their compiled state. An example of this behavior                             // 23997\n * is if an element's class attribute is directly modified after it's compiled, using something like                   // 23998\n * jQuery's `.addClass()` method, and the element is later removed. When `ngIf` recreates the element                  // 23999\n * the added class will be lost because the original compiled state is used to regenerate the element.                 // 24000\n *                                                                                                                     // 24001\n * Additionally, you can provide animations via the `ngAnimate` module to animate the `enter`                          // 24002\n * and `leave` effects.                                                                                                // 24003\n *                                                                                                                     // 24004\n * @animations                                                                                                         // 24005\n * enter - happens just after the `ngIf` contents change and a new DOM element is created and injected into the `ngIf` container\n * leave - happens just before the `ngIf` contents are removed from the DOM                                            // 24007\n *                                                                                                                     // 24008\n * @element ANY                                                                                                        // 24009\n * @scope                                                                                                              // 24010\n * @priority 600                                                                                                       // 24011\n * @param {expression} ngIf If the {@link guide/expression expression} is falsy then                                   // 24012\n *     the element is removed from the DOM tree. If it is truthy a copy of the compiled                                // 24013\n *     element is added to the DOM tree.                                                                               // 24014\n *                                                                                                                     // 24015\n * @example                                                                                                            // 24016\n  <example module=\"ngAnimate\" deps=\"angular-animate.js\" animations=\"true\">                                             // 24017\n    <file name=\"index.html\">                                                                                           // 24018\n      <label>Click me: <input type=\"checkbox\" ng-model=\"checked\" ng-init=\"checked=true\" /></label><br/>                // 24019\n      Show when checked:                                                                                               // 24020\n      <span ng-if=\"checked\" class=\"animate-if\">                                                                        // 24021\n        This is removed when the checkbox is unchecked.                                                                // 24022\n      </span>                                                                                                          // 24023\n    </file>                                                                                                            // 24024\n    <file name=\"animations.css\">                                                                                       // 24025\n      .animate-if {                                                                                                    // 24026\n        background:white;                                                                                              // 24027\n        border:1px solid black;                                                                                        // 24028\n        padding:10px;                                                                                                  // 24029\n      }                                                                                                                // 24030\n                                                                                                                       // 24031\n      .animate-if.ng-enter, .animate-if.ng-leave {                                                                     // 24032\n        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;                                                  // 24033\n      }                                                                                                                // 24034\n                                                                                                                       // 24035\n      .animate-if.ng-enter,                                                                                            // 24036\n      .animate-if.ng-leave.ng-leave-active {                                                                           // 24037\n        opacity:0;                                                                                                     // 24038\n      }                                                                                                                // 24039\n                                                                                                                       // 24040\n      .animate-if.ng-leave,                                                                                            // 24041\n      .animate-if.ng-enter.ng-enter-active {                                                                           // 24042\n        opacity:1;                                                                                                     // 24043\n      }                                                                                                                // 24044\n    </file>                                                                                                            // 24045\n  </example>                                                                                                           // 24046\n */                                                                                                                    // 24047\nvar ngIfDirective = ['$animate', function($animate) {                                                                  // 24048\n  return {                                                                                                             // 24049\n    multiElement: true,                                                                                                // 24050\n    transclude: 'element',                                                                                             // 24051\n    priority: 600,                                                                                                     // 24052\n    terminal: true,                                                                                                    // 24053\n    restrict: 'A',                                                                                                     // 24054\n    $$tlb: true,                                                                                                       // 24055\n    link: function($scope, $element, $attr, ctrl, $transclude) {                                                       // 24056\n        var block, childScope, previousElements;                                                                       // 24057\n        $scope.$watch($attr.ngIf, function ngIfWatchAction(value) {                                                    // 24058\n                                                                                                                       // 24059\n          if (value) {                                                                                                 // 24060\n            if (!childScope) {                                                                                         // 24061\n              $transclude(function(clone, newScope) {                                                                  // 24062\n                childScope = newScope;                                                                                 // 24063\n                clone[clone.length++] = document.createComment(' end ngIf: ' + $attr.ngIf + ' ');                      // 24064\n                // Note: We only need the first/last node of the cloned nodes.                                         // 24065\n                // However, we need to keep the reference to the jqlite wrapper as it might be changed later           // 24066\n                // by a directive with templateUrl when its template arrives.                                          // 24067\n                block = {                                                                                              // 24068\n                  clone: clone                                                                                         // 24069\n                };                                                                                                     // 24070\n                $animate.enter(clone, $element.parent(), $element);                                                    // 24071\n              });                                                                                                      // 24072\n            }                                                                                                          // 24073\n          } else {                                                                                                     // 24074\n            if (previousElements) {                                                                                    // 24075\n              previousElements.remove();                                                                               // 24076\n              previousElements = null;                                                                                 // 24077\n            }                                                                                                          // 24078\n            if (childScope) {                                                                                          // 24079\n              childScope.$destroy();                                                                                   // 24080\n              childScope = null;                                                                                       // 24081\n            }                                                                                                          // 24082\n            if (block) {                                                                                               // 24083\n              previousElements = getBlockNodes(block.clone);                                                           // 24084\n              $animate.leave(previousElements).then(function() {                                                       // 24085\n                previousElements = null;                                                                               // 24086\n              });                                                                                                      // 24087\n              block = null;                                                                                            // 24088\n            }                                                                                                          // 24089\n          }                                                                                                            // 24090\n        });                                                                                                            // 24091\n    }                                                                                                                  // 24092\n  };                                                                                                                   // 24093\n}];                                                                                                                    // 24094\n                                                                                                                       // 24095\n/**                                                                                                                    // 24096\n * @ngdoc directive                                                                                                    // 24097\n * @name ngInclude                                                                                                     // 24098\n * @restrict ECA                                                                                                       // 24099\n *                                                                                                                     // 24100\n * @description                                                                                                        // 24101\n * Fetches, compiles and includes an external HTML fragment.                                                           // 24102\n *                                                                                                                     // 24103\n * By default, the template URL is restricted to the same domain and protocol as the                                   // 24104\n * application document. This is done by calling {@link $sce#getTrustedResourceUrl                                     // 24105\n * $sce.getTrustedResourceUrl} on it. To load templates from other domains or protocols                                // 24106\n * you may either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist them} or                               // 24107\n * {@link $sce#trustAsResourceUrl wrap them} as trusted values. Refer to Angular's {@link                              // 24108\n * ng.$sce Strict Contextual Escaping}.                                                                                // 24109\n *                                                                                                                     // 24110\n * In addition, the browser's                                                                                          // 24111\n * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)         // 24112\n * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)                                              // 24113\n * policy may further restrict whether the template is successfully loaded.                                            // 24114\n * For example, `ngInclude` won't work for cross-domain requests on all browsers and for `file://`                     // 24115\n * access on some browsers.                                                                                            // 24116\n *                                                                                                                     // 24117\n * @animations                                                                                                         // 24118\n * enter - animation is used to bring new content into the browser.                                                    // 24119\n * leave - animation is used to animate existing content away.                                                         // 24120\n *                                                                                                                     // 24121\n * The enter and leave animation occur concurrently.                                                                   // 24122\n *                                                                                                                     // 24123\n * @scope                                                                                                              // 24124\n * @priority 400                                                                                                       // 24125\n *                                                                                                                     // 24126\n * @param {string} ngInclude|src angular expression evaluating to URL. If the source is a string constant,             // 24127\n *                 make sure you wrap it in **single** quotes, e.g. `src=\"'myPartialTemplate.html'\"`.                  // 24128\n * @param {string=} onload Expression to evaluate when a new partial is loaded.                                        // 24129\n *                                                                                                                     // 24130\n * @param {string=} autoscroll Whether `ngInclude` should call {@link ng.$anchorScroll                                 // 24131\n *                  $anchorScroll} to scroll the viewport after the content is loaded.                                 // 24132\n *                                                                                                                     // 24133\n *                  - If the attribute is not set, disable scrolling.                                                  // 24134\n *                  - If the attribute is set without value, enable scrolling.                                         // 24135\n *                  - Otherwise enable scrolling only if the expression evaluates to truthy value.                     // 24136\n *                                                                                                                     // 24137\n * @example                                                                                                            // 24138\n  <example module=\"includeExample\" deps=\"angular-animate.js\" animations=\"true\">                                        // 24139\n    <file name=\"index.html\">                                                                                           // 24140\n     <div ng-controller=\"ExampleController\">                                                                           // 24141\n       <select ng-model=\"template\" ng-options=\"t.name for t in templates\">                                             // 24142\n        <option value=\"\">(blank)</option>                                                                              // 24143\n       </select>                                                                                                       // 24144\n       url of the template: <code>{{template.url}}</code>                                                              // 24145\n       <hr/>                                                                                                           // 24146\n       <div class=\"slide-animate-container\">                                                                           // 24147\n         <div class=\"slide-animate\" ng-include=\"template.url\"></div>                                                   // 24148\n       </div>                                                                                                          // 24149\n     </div>                                                                                                            // 24150\n    </file>                                                                                                            // 24151\n    <file name=\"script.js\">                                                                                            // 24152\n      angular.module('includeExample', ['ngAnimate'])                                                                  // 24153\n        .controller('ExampleController', ['$scope', function($scope) {                                                 // 24154\n          $scope.templates =                                                                                           // 24155\n            [ { name: 'template1.html', url: 'template1.html'},                                                        // 24156\n              { name: 'template2.html', url: 'template2.html'} ];                                                      // 24157\n          $scope.template = $scope.templates[0];                                                                       // 24158\n        }]);                                                                                                           // 24159\n     </file>                                                                                                           // 24160\n    <file name=\"template1.html\">                                                                                       // 24161\n      Content of template1.html                                                                                        // 24162\n    </file>                                                                                                            // 24163\n    <file name=\"template2.html\">                                                                                       // 24164\n      Content of template2.html                                                                                        // 24165\n    </file>                                                                                                            // 24166\n    <file name=\"animations.css\">                                                                                       // 24167\n      .slide-animate-container {                                                                                       // 24168\n        position:relative;                                                                                             // 24169\n        background:white;                                                                                              // 24170\n        border:1px solid black;                                                                                        // 24171\n        height:40px;                                                                                                   // 24172\n        overflow:hidden;                                                                                               // 24173\n      }                                                                                                                // 24174\n                                                                                                                       // 24175\n      .slide-animate {                                                                                                 // 24176\n        padding:10px;                                                                                                  // 24177\n      }                                                                                                                // 24178\n                                                                                                                       // 24179\n      .slide-animate.ng-enter, .slide-animate.ng-leave {                                                               // 24180\n        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;                                                  // 24181\n                                                                                                                       // 24182\n        position:absolute;                                                                                             // 24183\n        top:0;                                                                                                         // 24184\n        left:0;                                                                                                        // 24185\n        right:0;                                                                                                       // 24186\n        bottom:0;                                                                                                      // 24187\n        display:block;                                                                                                 // 24188\n        padding:10px;                                                                                                  // 24189\n      }                                                                                                                // 24190\n                                                                                                                       // 24191\n      .slide-animate.ng-enter {                                                                                        // 24192\n        top:-50px;                                                                                                     // 24193\n      }                                                                                                                // 24194\n      .slide-animate.ng-enter.ng-enter-active {                                                                        // 24195\n        top:0;                                                                                                         // 24196\n      }                                                                                                                // 24197\n                                                                                                                       // 24198\n      .slide-animate.ng-leave {                                                                                        // 24199\n        top:0;                                                                                                         // 24200\n      }                                                                                                                // 24201\n      .slide-animate.ng-leave.ng-leave-active {                                                                        // 24202\n        top:50px;                                                                                                      // 24203\n      }                                                                                                                // 24204\n    </file>                                                                                                            // 24205\n    <file name=\"protractor.js\" type=\"protractor\">                                                                      // 24206\n      var templateSelect = element(by.model('template'));                                                              // 24207\n      var includeElem = element(by.css('[ng-include]'));                                                               // 24208\n                                                                                                                       // 24209\n      it('should load template1.html', function() {                                                                    // 24210\n        expect(includeElem.getText()).toMatch(/Content of template1.html/);                                            // 24211\n      });                                                                                                              // 24212\n                                                                                                                       // 24213\n      it('should load template2.html', function() {                                                                    // 24214\n        if (browser.params.browser == 'firefox') {                                                                     // 24215\n          // Firefox can't handle using selects                                                                        // 24216\n          // See https://github.com/angular/protractor/issues/480                                                      // 24217\n          return;                                                                                                      // 24218\n        }                                                                                                              // 24219\n        templateSelect.click();                                                                                        // 24220\n        templateSelect.all(by.css('option')).get(2).click();                                                           // 24221\n        expect(includeElem.getText()).toMatch(/Content of template2.html/);                                            // 24222\n      });                                                                                                              // 24223\n                                                                                                                       // 24224\n      it('should change to blank', function() {                                                                        // 24225\n        if (browser.params.browser == 'firefox') {                                                                     // 24226\n          // Firefox can't handle using selects                                                                        // 24227\n          return;                                                                                                      // 24228\n        }                                                                                                              // 24229\n        templateSelect.click();                                                                                        // 24230\n        templateSelect.all(by.css('option')).get(0).click();                                                           // 24231\n        expect(includeElem.isPresent()).toBe(false);                                                                   // 24232\n      });                                                                                                              // 24233\n    </file>                                                                                                            // 24234\n  </example>                                                                                                           // 24235\n */                                                                                                                    // 24236\n                                                                                                                       // 24237\n                                                                                                                       // 24238\n/**                                                                                                                    // 24239\n * @ngdoc event                                                                                                        // 24240\n * @name ngInclude#$includeContentRequested                                                                            // 24241\n * @eventType emit on the scope ngInclude was declared in                                                              // 24242\n * @description                                                                                                        // 24243\n * Emitted every time the ngInclude content is requested.                                                              // 24244\n *                                                                                                                     // 24245\n * @param {Object} angularEvent Synthetic event object.                                                                // 24246\n * @param {String} src URL of content to load.                                                                         // 24247\n */                                                                                                                    // 24248\n                                                                                                                       // 24249\n                                                                                                                       // 24250\n/**                                                                                                                    // 24251\n * @ngdoc event                                                                                                        // 24252\n * @name ngInclude#$includeContentLoaded                                                                               // 24253\n * @eventType emit on the current ngInclude scope                                                                      // 24254\n * @description                                                                                                        // 24255\n * Emitted every time the ngInclude content is reloaded.                                                               // 24256\n *                                                                                                                     // 24257\n * @param {Object} angularEvent Synthetic event object.                                                                // 24258\n * @param {String} src URL of content to load.                                                                         // 24259\n */                                                                                                                    // 24260\n                                                                                                                       // 24261\n                                                                                                                       // 24262\n/**                                                                                                                    // 24263\n * @ngdoc event                                                                                                        // 24264\n * @name ngInclude#$includeContentError                                                                                // 24265\n * @eventType emit on the scope ngInclude was declared in                                                              // 24266\n * @description                                                                                                        // 24267\n * Emitted when a template HTTP request yields an erroneous response (status < 200 || status > 299)                    // 24268\n *                                                                                                                     // 24269\n * @param {Object} angularEvent Synthetic event object.                                                                // 24270\n * @param {String} src URL of content to load.                                                                         // 24271\n */                                                                                                                    // 24272\nvar ngIncludeDirective = ['$templateRequest', '$anchorScroll', '$animate',                                             // 24273\n                  function($templateRequest,   $anchorScroll,   $animate) {                                            // 24274\n  return {                                                                                                             // 24275\n    restrict: 'ECA',                                                                                                   // 24276\n    priority: 400,                                                                                                     // 24277\n    terminal: true,                                                                                                    // 24278\n    transclude: 'element',                                                                                             // 24279\n    controller: angular.noop,                                                                                          // 24280\n    compile: function(element, attr) {                                                                                 // 24281\n      var srcExp = attr.ngInclude || attr.src,                                                                         // 24282\n          onloadExp = attr.onload || '',                                                                               // 24283\n          autoScrollExp = attr.autoscroll;                                                                             // 24284\n                                                                                                                       // 24285\n      return function(scope, $element, $attr, ctrl, $transclude) {                                                     // 24286\n        var changeCounter = 0,                                                                                         // 24287\n            currentScope,                                                                                              // 24288\n            previousElement,                                                                                           // 24289\n            currentElement;                                                                                            // 24290\n                                                                                                                       // 24291\n        var cleanupLastIncludeContent = function() {                                                                   // 24292\n          if (previousElement) {                                                                                       // 24293\n            previousElement.remove();                                                                                  // 24294\n            previousElement = null;                                                                                    // 24295\n          }                                                                                                            // 24296\n          if (currentScope) {                                                                                          // 24297\n            currentScope.$destroy();                                                                                   // 24298\n            currentScope = null;                                                                                       // 24299\n          }                                                                                                            // 24300\n          if (currentElement) {                                                                                        // 24301\n            $animate.leave(currentElement).then(function() {                                                           // 24302\n              previousElement = null;                                                                                  // 24303\n            });                                                                                                        // 24304\n            previousElement = currentElement;                                                                          // 24305\n            currentElement = null;                                                                                     // 24306\n          }                                                                                                            // 24307\n        };                                                                                                             // 24308\n                                                                                                                       // 24309\n        scope.$watch(srcExp, function ngIncludeWatchAction(src) {                                                      // 24310\n          var afterAnimation = function() {                                                                            // 24311\n            if (isDefined(autoScrollExp) && (!autoScrollExp || scope.$eval(autoScrollExp))) {                          // 24312\n              $anchorScroll();                                                                                         // 24313\n            }                                                                                                          // 24314\n          };                                                                                                           // 24315\n          var thisChangeId = ++changeCounter;                                                                          // 24316\n                                                                                                                       // 24317\n          if (src) {                                                                                                   // 24318\n            //set the 2nd param to true to ignore the template request error so that the inner                         // 24319\n            //contents and scope can be cleaned up.                                                                    // 24320\n            $templateRequest(src, true).then(function(response) {                                                      // 24321\n              if (thisChangeId !== changeCounter) return;                                                              // 24322\n              var newScope = scope.$new();                                                                             // 24323\n              ctrl.template = response;                                                                                // 24324\n                                                                                                                       // 24325\n              // Note: This will also link all children of ng-include that were contained in the original              // 24326\n              // html. If that content contains controllers, ... they could pollute/change the scope.                  // 24327\n              // However, using ng-include on an element with additional content does not make sense...                // 24328\n              // Note: We can't remove them in the cloneAttchFn of $transclude as that                                 // 24329\n              // function is called before linking the content, which would apply child                                // 24330\n              // directives to non existing elements.                                                                  // 24331\n              var clone = $transclude(newScope, function(clone) {                                                      // 24332\n                cleanupLastIncludeContent();                                                                           // 24333\n                $animate.enter(clone, null, $element).then(afterAnimation);                                            // 24334\n              });                                                                                                      // 24335\n                                                                                                                       // 24336\n              currentScope = newScope;                                                                                 // 24337\n              currentElement = clone;                                                                                  // 24338\n                                                                                                                       // 24339\n              currentScope.$emit('$includeContentLoaded', src);                                                        // 24340\n              scope.$eval(onloadExp);                                                                                  // 24341\n            }, function() {                                                                                            // 24342\n              if (thisChangeId === changeCounter) {                                                                    // 24343\n                cleanupLastIncludeContent();                                                                           // 24344\n                scope.$emit('$includeContentError', src);                                                              // 24345\n              }                                                                                                        // 24346\n            });                                                                                                        // 24347\n            scope.$emit('$includeContentRequested', src);                                                              // 24348\n          } else {                                                                                                     // 24349\n            cleanupLastIncludeContent();                                                                               // 24350\n            ctrl.template = null;                                                                                      // 24351\n          }                                                                                                            // 24352\n        });                                                                                                            // 24353\n      };                                                                                                               // 24354\n    }                                                                                                                  // 24355\n  };                                                                                                                   // 24356\n}];                                                                                                                    // 24357\n                                                                                                                       // 24358\n// This directive is called during the $transclude call of the first `ngInclude` directive.                            // 24359\n// It will replace and compile the content of the element with the loaded template.                                    // 24360\n// We need this directive so that the element content is already filled when                                           // 24361\n// the link function of another directive on the same element as ngInclude                                             // 24362\n// is called.                                                                                                          // 24363\nvar ngIncludeFillContentDirective = ['$compile',                                                                       // 24364\n  function($compile) {                                                                                                 // 24365\n    return {                                                                                                           // 24366\n      restrict: 'ECA',                                                                                                 // 24367\n      priority: -400,                                                                                                  // 24368\n      require: 'ngInclude',                                                                                            // 24369\n      link: function(scope, $element, $attr, ctrl) {                                                                   // 24370\n        if (/SVG/.test($element[0].toString())) {                                                                      // 24371\n          // WebKit: https://bugs.webkit.org/show_bug.cgi?id=135698 --- SVG elements do not                            // 24372\n          // support innerHTML, so detect this here and try to generate the contents                                   // 24373\n          // specially.                                                                                                // 24374\n          $element.empty();                                                                                            // 24375\n          $compile(jqLiteBuildFragment(ctrl.template, document).childNodes)(scope,                                     // 24376\n              function namespaceAdaptedClone(clone) {                                                                  // 24377\n            $element.append(clone);                                                                                    // 24378\n          }, {futureParentElement: $element});                                                                         // 24379\n          return;                                                                                                      // 24380\n        }                                                                                                              // 24381\n                                                                                                                       // 24382\n        $element.html(ctrl.template);                                                                                  // 24383\n        $compile($element.contents())(scope);                                                                          // 24384\n      }                                                                                                                // 24385\n    };                                                                                                                 // 24386\n  }];                                                                                                                  // 24387\n                                                                                                                       // 24388\n/**                                                                                                                    // 24389\n * @ngdoc directive                                                                                                    // 24390\n * @name ngInit                                                                                                        // 24391\n * @restrict AC                                                                                                        // 24392\n *                                                                                                                     // 24393\n * @description                                                                                                        // 24394\n * The `ngInit` directive allows you to evaluate an expression in the                                                  // 24395\n * current scope.                                                                                                      // 24396\n *                                                                                                                     // 24397\n * <div class=\"alert alert-danger\">                                                                                    // 24398\n * This directive can be abused to add unnecessary amounts of logic into your templates.                               // 24399\n * There are only a few appropriate uses of `ngInit`, such as for aliasing special properties of                       // 24400\n * {@link ng.directive:ngRepeat `ngRepeat`}, as seen in the demo below; and for injecting data via                     // 24401\n * server side scripting. Besides these few cases, you should use {@link guide/controller controllers}                 // 24402\n * rather than `ngInit` to initialize values on a scope.                                                               // 24403\n * </div>                                                                                                              // 24404\n *                                                                                                                     // 24405\n * <div class=\"alert alert-warning\">                                                                                   // 24406\n * **Note**: If you have assignment in `ngInit` along with a {@link ng.$filter `filter`}, make                         // 24407\n * sure you have parentheses to ensure correct operator precedence:                                                    // 24408\n * <pre class=\"prettyprint\">                                                                                           // 24409\n * `<div ng-init=\"test1 = ($index | toString)\"></div>`                                                                 // 24410\n * </pre>                                                                                                              // 24411\n * </div>                                                                                                              // 24412\n *                                                                                                                     // 24413\n * @priority 450                                                                                                       // 24414\n *                                                                                                                     // 24415\n * @element ANY                                                                                                        // 24416\n * @param {expression} ngInit {@link guide/expression Expression} to eval.                                             // 24417\n *                                                                                                                     // 24418\n * @example                                                                                                            // 24419\n   <example module=\"initExample\">                                                                                      // 24420\n     <file name=\"index.html\">                                                                                          // 24421\n   <script>                                                                                                            // 24422\n     angular.module('initExample', [])                                                                                 // 24423\n       .controller('ExampleController', ['$scope', function($scope) {                                                  // 24424\n         $scope.list = [['a', 'b'], ['c', 'd']];                                                                       // 24425\n       }]);                                                                                                            // 24426\n   </script>                                                                                                           // 24427\n   <div ng-controller=\"ExampleController\">                                                                             // 24428\n     <div ng-repeat=\"innerList in list\" ng-init=\"outerIndex = $index\">                                                 // 24429\n       <div ng-repeat=\"value in innerList\" ng-init=\"innerIndex = $index\">                                              // 24430\n          <span class=\"example-init\">list[ {{outerIndex}} ][ {{innerIndex}} ] = {{value}};</span>                      // 24431\n       </div>                                                                                                          // 24432\n     </div>                                                                                                            // 24433\n   </div>                                                                                                              // 24434\n     </file>                                                                                                           // 24435\n     <file name=\"protractor.js\" type=\"protractor\">                                                                     // 24436\n       it('should alias index positions', function() {                                                                 // 24437\n         var elements = element.all(by.css('.example-init'));                                                          // 24438\n         expect(elements.get(0).getText()).toBe('list[ 0 ][ 0 ] = a;');                                                // 24439\n         expect(elements.get(1).getText()).toBe('list[ 0 ][ 1 ] = b;');                                                // 24440\n         expect(elements.get(2).getText()).toBe('list[ 1 ][ 0 ] = c;');                                                // 24441\n         expect(elements.get(3).getText()).toBe('list[ 1 ][ 1 ] = d;');                                                // 24442\n       });                                                                                                             // 24443\n     </file>                                                                                                           // 24444\n   </example>                                                                                                          // 24445\n */                                                                                                                    // 24446\nvar ngInitDirective = ngDirective({                                                                                    // 24447\n  priority: 450,                                                                                                       // 24448\n  compile: function() {                                                                                                // 24449\n    return {                                                                                                           // 24450\n      pre: function(scope, element, attrs) {                                                                           // 24451\n        scope.$eval(attrs.ngInit);                                                                                     // 24452\n      }                                                                                                                // 24453\n    };                                                                                                                 // 24454\n  }                                                                                                                    // 24455\n});                                                                                                                    // 24456\n                                                                                                                       // 24457\n/**                                                                                                                    // 24458\n * @ngdoc directive                                                                                                    // 24459\n * @name ngList                                                                                                        // 24460\n *                                                                                                                     // 24461\n * @description                                                                                                        // 24462\n * Text input that converts between a delimited string and an array of strings. The default                            // 24463\n * delimiter is a comma followed by a space - equivalent to `ng-list=\", \"`. You can specify a custom                   // 24464\n * delimiter as the value of the `ngList` attribute - for example, `ng-list=\" | \"`.                                    // 24465\n *                                                                                                                     // 24466\n * The behaviour of the directive is affected by the use of the `ngTrim` attribute.                                    // 24467\n * * If `ngTrim` is set to `\"false\"` then whitespace around both the separator and each                                // 24468\n *   list item is respected. This implies that the user of the directive is responsible for                            // 24469\n *   dealing with whitespace but also allows you to use whitespace as a delimiter, such as a                           // 24470\n *   tab or newline character.                                                                                         // 24471\n * * Otherwise whitespace around the delimiter is ignored when splitting (although it is respected                     // 24472\n *   when joining the list items back together) and whitespace around each list item is stripped                       // 24473\n *   before it is added to the model.                                                                                  // 24474\n *                                                                                                                     // 24475\n * ### Example with Validation                                                                                         // 24476\n *                                                                                                                     // 24477\n * <example name=\"ngList-directive\" module=\"listExample\">                                                              // 24478\n *   <file name=\"app.js\">                                                                                              // 24479\n *      angular.module('listExample', [])                                                                              // 24480\n *        .controller('ExampleController', ['$scope', function($scope) {                                               // 24481\n *          $scope.names = ['morpheus', 'neo', 'trinity'];                                                             // 24482\n *        }]);                                                                                                         // 24483\n *   </file>                                                                                                           // 24484\n *   <file name=\"index.html\">                                                                                          // 24485\n *    <form name=\"myForm\" ng-controller=\"ExampleController\">                                                           // 24486\n *      <label>List: <input name=\"namesInput\" ng-model=\"names\" ng-list required></label>                               // 24487\n *      <span role=\"alert\">                                                                                            // 24488\n *        <span class=\"error\" ng-show=\"myForm.namesInput.$error.required\">                                             // 24489\n *        Required!</span>                                                                                             // 24490\n *      </span>                                                                                                        // 24491\n *      <br>                                                                                                           // 24492\n *      <tt>names = {{names}}</tt><br/>                                                                                // 24493\n *      <tt>myForm.namesInput.$valid = {{myForm.namesInput.$valid}}</tt><br/>                                          // 24494\n *      <tt>myForm.namesInput.$error = {{myForm.namesInput.$error}}</tt><br/>                                          // 24495\n *      <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                                // 24496\n *      <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                            // 24497\n *     </form>                                                                                                         // 24498\n *   </file>                                                                                                           // 24499\n *   <file name=\"protractor.js\" type=\"protractor\">                                                                     // 24500\n *     var listInput = element(by.model('names'));                                                                     // 24501\n *     var names = element(by.exactBinding('names'));                                                                  // 24502\n *     var valid = element(by.binding('myForm.namesInput.$valid'));                                                    // 24503\n *     var error = element(by.css('span.error'));                                                                      // 24504\n *                                                                                                                     // 24505\n *     it('should initialize to model', function() {                                                                   // 24506\n *       expect(names.getText()).toContain('[\"morpheus\",\"neo\",\"trinity\"]');                                            // 24507\n *       expect(valid.getText()).toContain('true');                                                                    // 24508\n *       expect(error.getCssValue('display')).toBe('none');                                                            // 24509\n *     });                                                                                                             // 24510\n *                                                                                                                     // 24511\n *     it('should be invalid if empty', function() {                                                                   // 24512\n *       listInput.clear();                                                                                            // 24513\n *       listInput.sendKeys('');                                                                                       // 24514\n *                                                                                                                     // 24515\n *       expect(names.getText()).toContain('');                                                                        // 24516\n *       expect(valid.getText()).toContain('false');                                                                   // 24517\n *       expect(error.getCssValue('display')).not.toBe('none');                                                        // 24518\n *     });                                                                                                             // 24519\n *   </file>                                                                                                           // 24520\n * </example>                                                                                                          // 24521\n *                                                                                                                     // 24522\n * ### Example - splitting on newline                                                                                  // 24523\n * <example name=\"ngList-directive-newlines\">                                                                          // 24524\n *   <file name=\"index.html\">                                                                                          // 24525\n *    <textarea ng-model=\"list\" ng-list=\"&#10;\" ng-trim=\"false\"></textarea>                                            // 24526\n *    <pre>{{ list | json }}</pre>                                                                                     // 24527\n *   </file>                                                                                                           // 24528\n *   <file name=\"protractor.js\" type=\"protractor\">                                                                     // 24529\n *     it(\"should split the text by newlines\", function() {                                                            // 24530\n *       var listInput = element(by.model('list'));                                                                    // 24531\n *       var output = element(by.binding('list | json'));                                                              // 24532\n *       listInput.sendKeys('abc\\ndef\\nghi');                                                                          // 24533\n *       expect(output.getText()).toContain('[\\n  \"abc\",\\n  \"def\",\\n  \"ghi\"\\n]');                                      // 24534\n *     });                                                                                                             // 24535\n *   </file>                                                                                                           // 24536\n * </example>                                                                                                          // 24537\n *                                                                                                                     // 24538\n * @element input                                                                                                      // 24539\n * @param {string=} ngList optional delimiter that should be used to split the value.                                  // 24540\n */                                                                                                                    // 24541\nvar ngListDirective = function() {                                                                                     // 24542\n  return {                                                                                                             // 24543\n    restrict: 'A',                                                                                                     // 24544\n    priority: 100,                                                                                                     // 24545\n    require: 'ngModel',                                                                                                // 24546\n    link: function(scope, element, attr, ctrl) {                                                                       // 24547\n      // We want to control whitespace trimming so we use this convoluted approach                                     // 24548\n      // to access the ngList attribute, which doesn't pre-trim the attribute                                          // 24549\n      var ngList = element.attr(attr.$attr.ngList) || ', ';                                                            // 24550\n      var trimValues = attr.ngTrim !== 'false';                                                                        // 24551\n      var separator = trimValues ? trim(ngList) : ngList;                                                              // 24552\n                                                                                                                       // 24553\n      var parse = function(viewValue) {                                                                                // 24554\n        // If the viewValue is invalid (say required but empty) it will be `undefined`                                 // 24555\n        if (isUndefined(viewValue)) return;                                                                            // 24556\n                                                                                                                       // 24557\n        var list = [];                                                                                                 // 24558\n                                                                                                                       // 24559\n        if (viewValue) {                                                                                               // 24560\n          forEach(viewValue.split(separator), function(value) {                                                        // 24561\n            if (value) list.push(trimValues ? trim(value) : value);                                                    // 24562\n          });                                                                                                          // 24563\n        }                                                                                                              // 24564\n                                                                                                                       // 24565\n        return list;                                                                                                   // 24566\n      };                                                                                                               // 24567\n                                                                                                                       // 24568\n      ctrl.$parsers.push(parse);                                                                                       // 24569\n      ctrl.$formatters.push(function(value) {                                                                          // 24570\n        if (isArray(value)) {                                                                                          // 24571\n          return value.join(ngList);                                                                                   // 24572\n        }                                                                                                              // 24573\n                                                                                                                       // 24574\n        return undefined;                                                                                              // 24575\n      });                                                                                                              // 24576\n                                                                                                                       // 24577\n      // Override the standard $isEmpty because an empty array means the input is empty.                               // 24578\n      ctrl.$isEmpty = function(value) {                                                                                // 24579\n        return !value || !value.length;                                                                                // 24580\n      };                                                                                                               // 24581\n    }                                                                                                                  // 24582\n  };                                                                                                                   // 24583\n};                                                                                                                     // 24584\n                                                                                                                       // 24585\n/* global VALID_CLASS: true,                                                                                           // 24586\n  INVALID_CLASS: true,                                                                                                 // 24587\n  PRISTINE_CLASS: true,                                                                                                // 24588\n  DIRTY_CLASS: true,                                                                                                   // 24589\n  UNTOUCHED_CLASS: true,                                                                                               // 24590\n  TOUCHED_CLASS: true,                                                                                                 // 24591\n*/                                                                                                                     // 24592\n                                                                                                                       // 24593\nvar VALID_CLASS = 'ng-valid',                                                                                          // 24594\n    INVALID_CLASS = 'ng-invalid',                                                                                      // 24595\n    PRISTINE_CLASS = 'ng-pristine',                                                                                    // 24596\n    DIRTY_CLASS = 'ng-dirty',                                                                                          // 24597\n    UNTOUCHED_CLASS = 'ng-untouched',                                                                                  // 24598\n    TOUCHED_CLASS = 'ng-touched',                                                                                      // 24599\n    PENDING_CLASS = 'ng-pending';                                                                                      // 24600\n                                                                                                                       // 24601\nvar ngModelMinErr = minErr('ngModel');                                                                                 // 24602\n                                                                                                                       // 24603\n/**                                                                                                                    // 24604\n * @ngdoc type                                                                                                         // 24605\n * @name ngModel.NgModelController                                                                                     // 24606\n *                                                                                                                     // 24607\n * @property {*} $viewValue The actual value from the control's view. For `input` elements, this is a                  // 24608\n * String. See {@link ngModel.NgModelController#$setViewValue} for information about when the $viewValue               // 24609\n * is set.                                                                                                             // 24610\n * @property {*} $modelValue The value in the model that the control is bound to.                                      // 24611\n * @property {Array.<Function>} $parsers Array of functions to execute, as a pipeline, whenever                        // 24612\n       the control reads value from the DOM. The functions are called in array order, each passing                     // 24613\n       its return value through to the next. The last return value is forwarded to the                                 // 24614\n       {@link ngModel.NgModelController#$validators `$validators`} collection.                                         // 24615\n                                                                                                                       // 24616\nParsers are used to sanitize / convert the {@link ngModel.NgModelController#$viewValue                                 // 24617\n`$viewValue`}.                                                                                                         // 24618\n                                                                                                                       // 24619\nReturning `undefined` from a parser means a parse error occurred. In that case,                                        // 24620\nno {@link ngModel.NgModelController#$validators `$validators`} will run and the `ngModel`                              // 24621\nwill be set to `undefined` unless {@link ngModelOptions `ngModelOptions.allowInvalid`}                                 // 24622\nis set to `true`. The parse error is stored in `ngModel.$error.parse`.                                                 // 24623\n                                                                                                                       // 24624\n *                                                                                                                     // 24625\n * @property {Array.<Function>} $formatters Array of functions to execute, as a pipeline, whenever                     // 24626\n       the model value changes. The functions are called in reverse array order, each passing the value through to the\n       next. The last return value is used as the actual DOM value.                                                    // 24628\n       Used to format / convert values for display in the control.                                                     // 24629\n * ```js                                                                                                               // 24630\n * function formatter(value) {                                                                                         // 24631\n *   if (value) {                                                                                                      // 24632\n *     return value.toUpperCase();                                                                                     // 24633\n *   }                                                                                                                 // 24634\n * }                                                                                                                   // 24635\n * ngModel.$formatters.push(formatter);                                                                                // 24636\n * ```                                                                                                                 // 24637\n *                                                                                                                     // 24638\n * @property {Object.<string, function>} $validators A collection of validators that are applied                       // 24639\n *      whenever the model value changes. The key value within the object refers to the name of the                    // 24640\n *      validator while the function refers to the validation operation. The validation operation is                   // 24641\n *      provided with the model value as an argument and must return a true or false value depending                   // 24642\n *      on the response of that validation.                                                                            // 24643\n *                                                                                                                     // 24644\n * ```js                                                                                                               // 24645\n * ngModel.$validators.validCharacters = function(modelValue, viewValue) {                                             // 24646\n *   var value = modelValue || viewValue;                                                                              // 24647\n *   return /[0-9]+/.test(value) &&                                                                                    // 24648\n *          /[a-z]+/.test(value) &&                                                                                    // 24649\n *          /[A-Z]+/.test(value) &&                                                                                    // 24650\n *          /\\W+/.test(value);                                                                                         // 24651\n * };                                                                                                                  // 24652\n * ```                                                                                                                 // 24653\n *                                                                                                                     // 24654\n * @property {Object.<string, function>} $asyncValidators A collection of validations that are expected to             // 24655\n *      perform an asynchronous validation (e.g. a HTTP request). The validation function that is provided             // 24656\n *      is expected to return a promise when it is run during the model validation process. Once the promise           // 24657\n *      is delivered then the validation status will be set to true when fulfilled and false when rejected.            // 24658\n *      When the asynchronous validators are triggered, each of the validators will run in parallel and the model      // 24659\n *      value will only be updated once all validators have been fulfilled. As long as an asynchronous validator       // 24660\n *      is unfulfilled, its key will be added to the controllers `$pending` property. Also, all asynchronous validators\n *      will only run once all synchronous validators have passed.                                                     // 24662\n *                                                                                                                     // 24663\n * Please note that if $http is used then it is important that the server returns a success HTTP response code         // 24664\n * in order to fulfill the validation and a status level of `4xx` in order to reject the validation.                   // 24665\n *                                                                                                                     // 24666\n * ```js                                                                                                               // 24667\n * ngModel.$asyncValidators.uniqueUsername = function(modelValue, viewValue) {                                         // 24668\n *   var value = modelValue || viewValue;                                                                              // 24669\n *                                                                                                                     // 24670\n *   // Lookup user by username                                                                                        // 24671\n *   return $http.get('/api/users/' + value).                                                                          // 24672\n *      then(function resolved() {                                                                                     // 24673\n *        //username exists, this means validation fails                                                               // 24674\n *        return $q.reject('exists');                                                                                  // 24675\n *      }, function rejected() {                                                                                       // 24676\n *        //username does not exist, therefore this validation passes                                                  // 24677\n *        return true;                                                                                                 // 24678\n *      });                                                                                                            // 24679\n * };                                                                                                                  // 24680\n * ```                                                                                                                 // 24681\n *                                                                                                                     // 24682\n * @property {Array.<Function>} $viewChangeListeners Array of functions to execute whenever the                        // 24683\n *     view value has changed. It is called with no arguments, and its return value is ignored.                        // 24684\n *     This can be used in place of additional $watches against the model value.                                       // 24685\n *                                                                                                                     // 24686\n * @property {Object} $error An object hash with all failing validator ids as keys.                                    // 24687\n * @property {Object} $pending An object hash with all pending validator ids as keys.                                  // 24688\n *                                                                                                                     // 24689\n * @property {boolean} $untouched True if control has not lost focus yet.                                              // 24690\n * @property {boolean} $touched True if control has lost focus.                                                        // 24691\n * @property {boolean} $pristine True if user has not interacted with the control yet.                                 // 24692\n * @property {boolean} $dirty True if user has already interacted with the control.                                    // 24693\n * @property {boolean} $valid True if there is no error.                                                               // 24694\n * @property {boolean} $invalid True if at least one error on the control.                                             // 24695\n * @property {string} $name The name attribute of the control.                                                         // 24696\n *                                                                                                                     // 24697\n * @description                                                                                                        // 24698\n *                                                                                                                     // 24699\n * `NgModelController` provides API for the {@link ngModel `ngModel`} directive.                                       // 24700\n * The controller contains services for data-binding, validation, CSS updates, and value formatting                    // 24701\n * and parsing. It purposefully does not contain any logic which deals with DOM rendering or                           // 24702\n * listening to DOM events.                                                                                            // 24703\n * Such DOM related logic should be provided by other directives which make use of                                     // 24704\n * `NgModelController` for data-binding to control elements.                                                           // 24705\n * Angular provides this DOM logic for most {@link input `input`} elements.                                            // 24706\n * At the end of this page you can find a {@link ngModel.NgModelController#custom-control-example                      // 24707\n * custom control example} that uses `ngModelController` to bind to `contenteditable` elements.                        // 24708\n *                                                                                                                     // 24709\n * @example                                                                                                            // 24710\n * ### Custom Control Example                                                                                          // 24711\n * This example shows how to use `NgModelController` with a custom control to achieve                                  // 24712\n * data-binding. Notice how different directives (`contenteditable`, `ng-model`, and `required`)                       // 24713\n * collaborate together to achieve the desired result.                                                                 // 24714\n *                                                                                                                     // 24715\n * `contenteditable` is an HTML5 attribute, which tells the browser to let the element                                 // 24716\n * contents be edited in place by the user.                                                                            // 24717\n *                                                                                                                     // 24718\n * We are using the {@link ng.service:$sce $sce} service here and include the {@link ngSanitize $sanitize}             // 24719\n * module to automatically remove \"bad\" content like inline event listener (e.g. `<span onclick=\"...\">`).              // 24720\n * However, as we are using `$sce` the model can still decide to provide unsafe content if it marks                    // 24721\n * that content using the `$sce` service.                                                                              // 24722\n *                                                                                                                     // 24723\n * <example name=\"NgModelController\" module=\"customControl\" deps=\"angular-sanitize.js\">                                // 24724\n    <file name=\"style.css\">                                                                                            // 24725\n      [contenteditable] {                                                                                              // 24726\n        border: 1px solid black;                                                                                       // 24727\n        background-color: white;                                                                                       // 24728\n        min-height: 20px;                                                                                              // 24729\n      }                                                                                                                // 24730\n                                                                                                                       // 24731\n      .ng-invalid {                                                                                                    // 24732\n        border: 1px solid red;                                                                                         // 24733\n      }                                                                                                                // 24734\n                                                                                                                       // 24735\n    </file>                                                                                                            // 24736\n    <file name=\"script.js\">                                                                                            // 24737\n      angular.module('customControl', ['ngSanitize']).                                                                 // 24738\n        directive('contenteditable', ['$sce', function($sce) {                                                         // 24739\n          return {                                                                                                     // 24740\n            restrict: 'A', // only activate on element attribute                                                       // 24741\n            require: '?ngModel', // get a hold of NgModelController                                                    // 24742\n            link: function(scope, element, attrs, ngModel) {                                                           // 24743\n              if (!ngModel) return; // do nothing if no ng-model                                                       // 24744\n                                                                                                                       // 24745\n              // Specify how UI should be updated                                                                      // 24746\n              ngModel.$render = function() {                                                                           // 24747\n                element.html($sce.getTrustedHtml(ngModel.$viewValue || ''));                                           // 24748\n              };                                                                                                       // 24749\n                                                                                                                       // 24750\n              // Listen for change events to enable binding                                                            // 24751\n              element.on('blur keyup change', function() {                                                             // 24752\n                scope.$evalAsync(read);                                                                                // 24753\n              });                                                                                                      // 24754\n              read(); // initialize                                                                                    // 24755\n                                                                                                                       // 24756\n              // Write data to the model                                                                               // 24757\n              function read() {                                                                                        // 24758\n                var html = element.html();                                                                             // 24759\n                // When we clear the content editable the browser leaves a <br> behind                                 // 24760\n                // If strip-br attribute is provided then we strip this out                                            // 24761\n                if ( attrs.stripBr && html == '<br>' ) {                                                               // 24762\n                  html = '';                                                                                           // 24763\n                }                                                                                                      // 24764\n                ngModel.$setViewValue(html);                                                                           // 24765\n              }                                                                                                        // 24766\n            }                                                                                                          // 24767\n          };                                                                                                           // 24768\n        }]);                                                                                                           // 24769\n    </file>                                                                                                            // 24770\n    <file name=\"index.html\">                                                                                           // 24771\n      <form name=\"myForm\">                                                                                             // 24772\n       <div contenteditable                                                                                            // 24773\n            name=\"myWidget\" ng-model=\"userContent\"                                                                     // 24774\n            strip-br=\"true\"                                                                                            // 24775\n            required>Change me!</div>                                                                                  // 24776\n        <span ng-show=\"myForm.myWidget.$error.required\">Required!</span>                                               // 24777\n       <hr>                                                                                                            // 24778\n       <textarea ng-model=\"userContent\" aria-label=\"Dynamic textarea\"></textarea>                                      // 24779\n      </form>                                                                                                          // 24780\n    </file>                                                                                                            // 24781\n    <file name=\"protractor.js\" type=\"protractor\">                                                                      // 24782\n    it('should data-bind and become invalid', function() {                                                             // 24783\n      if (browser.params.browser == 'safari' || browser.params.browser == 'firefox') {                                 // 24784\n        // SafariDriver can't handle contenteditable                                                                   // 24785\n        // and Firefox driver can't clear contenteditables very well                                                   // 24786\n        return;                                                                                                        // 24787\n      }                                                                                                                // 24788\n      var contentEditable = element(by.css('[contenteditable]'));                                                      // 24789\n      var content = 'Change me!';                                                                                      // 24790\n                                                                                                                       // 24791\n      expect(contentEditable.getText()).toEqual(content);                                                              // 24792\n                                                                                                                       // 24793\n      contentEditable.clear();                                                                                         // 24794\n      contentEditable.sendKeys(protractor.Key.BACK_SPACE);                                                             // 24795\n      expect(contentEditable.getText()).toEqual('');                                                                   // 24796\n      expect(contentEditable.getAttribute('class')).toMatch(/ng-invalid-required/);                                    // 24797\n    });                                                                                                                // 24798\n    </file>                                                                                                            // 24799\n * </example>                                                                                                          // 24800\n *                                                                                                                     // 24801\n *                                                                                                                     // 24802\n */                                                                                                                    // 24803\nvar NgModelController = ['$scope', '$exceptionHandler', '$attrs', '$element', '$parse', '$animate', '$timeout', '$rootScope', '$q', '$interpolate',\n    function($scope, $exceptionHandler, $attr, $element, $parse, $animate, $timeout, $rootScope, $q, $interpolate) {   // 24805\n  this.$viewValue = Number.NaN;                                                                                        // 24806\n  this.$modelValue = Number.NaN;                                                                                       // 24807\n  this.$$rawModelValue = undefined; // stores the parsed modelValue / model set from scope regardless of validity.     // 24808\n  this.$validators = {};                                                                                               // 24809\n  this.$asyncValidators = {};                                                                                          // 24810\n  this.$parsers = [];                                                                                                  // 24811\n  this.$formatters = [];                                                                                               // 24812\n  this.$viewChangeListeners = [];                                                                                      // 24813\n  this.$untouched = true;                                                                                              // 24814\n  this.$touched = false;                                                                                               // 24815\n  this.$pristine = true;                                                                                               // 24816\n  this.$dirty = false;                                                                                                 // 24817\n  this.$valid = true;                                                                                                  // 24818\n  this.$invalid = false;                                                                                               // 24819\n  this.$error = {}; // keep invalid keys here                                                                          // 24820\n  this.$$success = {}; // keep valid keys here                                                                         // 24821\n  this.$pending = undefined; // keep pending keys here                                                                 // 24822\n  this.$name = $interpolate($attr.name || '', false)($scope);                                                          // 24823\n  this.$$parentForm = nullFormCtrl;                                                                                    // 24824\n                                                                                                                       // 24825\n  var parsedNgModel = $parse($attr.ngModel),                                                                           // 24826\n      parsedNgModelAssign = parsedNgModel.assign,                                                                      // 24827\n      ngModelGet = parsedNgModel,                                                                                      // 24828\n      ngModelSet = parsedNgModelAssign,                                                                                // 24829\n      pendingDebounce = null,                                                                                          // 24830\n      parserValid,                                                                                                     // 24831\n      ctrl = this;                                                                                                     // 24832\n                                                                                                                       // 24833\n  this.$$setOptions = function(options) {                                                                              // 24834\n    ctrl.$options = options;                                                                                           // 24835\n    if (options && options.getterSetter) {                                                                             // 24836\n      var invokeModelGetter = $parse($attr.ngModel + '()'),                                                            // 24837\n          invokeModelSetter = $parse($attr.ngModel + '($$$p)');                                                        // 24838\n                                                                                                                       // 24839\n      ngModelGet = function($scope) {                                                                                  // 24840\n        var modelValue = parsedNgModel($scope);                                                                        // 24841\n        if (isFunction(modelValue)) {                                                                                  // 24842\n          modelValue = invokeModelGetter($scope);                                                                      // 24843\n        }                                                                                                              // 24844\n        return modelValue;                                                                                             // 24845\n      };                                                                                                               // 24846\n      ngModelSet = function($scope, newValue) {                                                                        // 24847\n        if (isFunction(parsedNgModel($scope))) {                                                                       // 24848\n          invokeModelSetter($scope, {$$$p: ctrl.$modelValue});                                                         // 24849\n        } else {                                                                                                       // 24850\n          parsedNgModelAssign($scope, ctrl.$modelValue);                                                               // 24851\n        }                                                                                                              // 24852\n      };                                                                                                               // 24853\n    } else if (!parsedNgModel.assign) {                                                                                // 24854\n      throw ngModelMinErr('nonassign', \"Expression '{0}' is non-assignable. Element: {1}\",                             // 24855\n          $attr.ngModel, startingTag($element));                                                                       // 24856\n    }                                                                                                                  // 24857\n  };                                                                                                                   // 24858\n                                                                                                                       // 24859\n  /**                                                                                                                  // 24860\n   * @ngdoc method                                                                                                     // 24861\n   * @name ngModel.NgModelController#$render                                                                           // 24862\n   *                                                                                                                   // 24863\n   * @description                                                                                                      // 24864\n   * Called when the view needs to be updated. It is expected that the user of the ng-model                            // 24865\n   * directive will implement this method.                                                                             // 24866\n   *                                                                                                                   // 24867\n   * The `$render()` method is invoked in the following situations:                                                    // 24868\n   *                                                                                                                   // 24869\n   * * `$rollbackViewValue()` is called.  If we are rolling back the view value to the last                            // 24870\n   *   committed value then `$render()` is called to update the input control.                                         // 24871\n   * * The value referenced by `ng-model` is changed programmatically and both the `$modelValue` and                   // 24872\n   *   the `$viewValue` are different from last time.                                                                  // 24873\n   *                                                                                                                   // 24874\n   * Since `ng-model` does not do a deep watch, `$render()` is only invoked if the values of                           // 24875\n   * `$modelValue` and `$viewValue` are actually different from their previous value. If `$modelValue`                 // 24876\n   * or `$viewValue` are objects (rather than a string or number) then `$render()` will not be                         // 24877\n   * invoked if you only change a property on the objects.                                                             // 24878\n   */                                                                                                                  // 24879\n  this.$render = noop;                                                                                                 // 24880\n                                                                                                                       // 24881\n  /**                                                                                                                  // 24882\n   * @ngdoc method                                                                                                     // 24883\n   * @name ngModel.NgModelController#$isEmpty                                                                          // 24884\n   *                                                                                                                   // 24885\n   * @description                                                                                                      // 24886\n   * This is called when we need to determine if the value of an input is empty.                                       // 24887\n   *                                                                                                                   // 24888\n   * For instance, the required directive does this to work out if the input has data or not.                          // 24889\n   *                                                                                                                   // 24890\n   * The default `$isEmpty` function checks whether the value is `undefined`, `''`, `null` or `NaN`.                   // 24891\n   *                                                                                                                   // 24892\n   * You can override this for input directives whose concept of being empty is different from the                     // 24893\n   * default. The `checkboxInputType` directive does this because in its case a value of `false`                       // 24894\n   * implies empty.                                                                                                    // 24895\n   *                                                                                                                   // 24896\n   * @param {*} value The value of the input to check for emptiness.                                                   // 24897\n   * @returns {boolean} True if `value` is \"empty\".                                                                    // 24898\n   */                                                                                                                  // 24899\n  this.$isEmpty = function(value) {                                                                                    // 24900\n    return isUndefined(value) || value === '' || value === null || value !== value;                                    // 24901\n  };                                                                                                                   // 24902\n                                                                                                                       // 24903\n  var currentValidationRunId = 0;                                                                                      // 24904\n                                                                                                                       // 24905\n  /**                                                                                                                  // 24906\n   * @ngdoc method                                                                                                     // 24907\n   * @name ngModel.NgModelController#$setValidity                                                                      // 24908\n   *                                                                                                                   // 24909\n   * @description                                                                                                      // 24910\n   * Change the validity state, and notify the form.                                                                   // 24911\n   *                                                                                                                   // 24912\n   * This method can be called within $parsers/$formatters or a custom validation implementation.                      // 24913\n   * However, in most cases it should be sufficient to use the `ngModel.$validators` and                               // 24914\n   * `ngModel.$asyncValidators` collections which will call `$setValidity` automatically.                              // 24915\n   *                                                                                                                   // 24916\n   * @param {string} validationErrorKey Name of the validator. The `validationErrorKey` will be assigned               // 24917\n   *        to either `$error[validationErrorKey]` or `$pending[validationErrorKey]`                                   // 24918\n   *        (for unfulfilled `$asyncValidators`), so that it is available for data-binding.                            // 24919\n   *        The `validationErrorKey` should be in camelCase and will get converted into dash-case                      // 24920\n   *        for class name. Example: `myError` will result in `ng-valid-my-error` and `ng-invalid-my-error`            // 24921\n   *        class and can be bound to as  `{{someForm.someControl.$error.myError}}` .                                  // 24922\n   * @param {boolean} isValid Whether the current state is valid (true), invalid (false), pending (undefined),         // 24923\n   *                          or skipped (null). Pending is used for unfulfilled `$asyncValidators`.                   // 24924\n   *                          Skipped is used by Angular when validators do not run because of parse errors and        // 24925\n   *                          when `$asyncValidators` do not run because any of the `$validators` failed.              // 24926\n   */                                                                                                                  // 24927\n  addSetValidityMethod({                                                                                               // 24928\n    ctrl: this,                                                                                                        // 24929\n    $element: $element,                                                                                                // 24930\n    set: function(object, property) {                                                                                  // 24931\n      object[property] = true;                                                                                         // 24932\n    },                                                                                                                 // 24933\n    unset: function(object, property) {                                                                                // 24934\n      delete object[property];                                                                                         // 24935\n    },                                                                                                                 // 24936\n    $animate: $animate                                                                                                 // 24937\n  });                                                                                                                  // 24938\n                                                                                                                       // 24939\n  /**                                                                                                                  // 24940\n   * @ngdoc method                                                                                                     // 24941\n   * @name ngModel.NgModelController#$setPristine                                                                      // 24942\n   *                                                                                                                   // 24943\n   * @description                                                                                                      // 24944\n   * Sets the control to its pristine state.                                                                           // 24945\n   *                                                                                                                   // 24946\n   * This method can be called to remove the `ng-dirty` class and set the control to its pristine                      // 24947\n   * state (`ng-pristine` class). A model is considered to be pristine when the control                                // 24948\n   * has not been changed from when first compiled.                                                                    // 24949\n   */                                                                                                                  // 24950\n  this.$setPristine = function() {                                                                                     // 24951\n    ctrl.$dirty = false;                                                                                               // 24952\n    ctrl.$pristine = true;                                                                                             // 24953\n    $animate.removeClass($element, DIRTY_CLASS);                                                                       // 24954\n    $animate.addClass($element, PRISTINE_CLASS);                                                                       // 24955\n  };                                                                                                                   // 24956\n                                                                                                                       // 24957\n  /**                                                                                                                  // 24958\n   * @ngdoc method                                                                                                     // 24959\n   * @name ngModel.NgModelController#$setDirty                                                                         // 24960\n   *                                                                                                                   // 24961\n   * @description                                                                                                      // 24962\n   * Sets the control to its dirty state.                                                                              // 24963\n   *                                                                                                                   // 24964\n   * This method can be called to remove the `ng-pristine` class and set the control to its dirty                      // 24965\n   * state (`ng-dirty` class). A model is considered to be dirty when the control has been changed                     // 24966\n   * from when first compiled.                                                                                         // 24967\n   */                                                                                                                  // 24968\n  this.$setDirty = function() {                                                                                        // 24969\n    ctrl.$dirty = true;                                                                                                // 24970\n    ctrl.$pristine = false;                                                                                            // 24971\n    $animate.removeClass($element, PRISTINE_CLASS);                                                                    // 24972\n    $animate.addClass($element, DIRTY_CLASS);                                                                          // 24973\n    ctrl.$$parentForm.$setDirty();                                                                                     // 24974\n  };                                                                                                                   // 24975\n                                                                                                                       // 24976\n  /**                                                                                                                  // 24977\n   * @ngdoc method                                                                                                     // 24978\n   * @name ngModel.NgModelController#$setUntouched                                                                     // 24979\n   *                                                                                                                   // 24980\n   * @description                                                                                                      // 24981\n   * Sets the control to its untouched state.                                                                          // 24982\n   *                                                                                                                   // 24983\n   * This method can be called to remove the `ng-touched` class and set the control to its                             // 24984\n   * untouched state (`ng-untouched` class). Upon compilation, a model is set as untouched                             // 24985\n   * by default, however this function can be used to restore that state if the model has                              // 24986\n   * already been touched by the user.                                                                                 // 24987\n   */                                                                                                                  // 24988\n  this.$setUntouched = function() {                                                                                    // 24989\n    ctrl.$touched = false;                                                                                             // 24990\n    ctrl.$untouched = true;                                                                                            // 24991\n    $animate.setClass($element, UNTOUCHED_CLASS, TOUCHED_CLASS);                                                       // 24992\n  };                                                                                                                   // 24993\n                                                                                                                       // 24994\n  /**                                                                                                                  // 24995\n   * @ngdoc method                                                                                                     // 24996\n   * @name ngModel.NgModelController#$setTouched                                                                       // 24997\n   *                                                                                                                   // 24998\n   * @description                                                                                                      // 24999\n   * Sets the control to its touched state.                                                                            // 25000\n   *                                                                                                                   // 25001\n   * This method can be called to remove the `ng-untouched` class and set the control to its                           // 25002\n   * touched state (`ng-touched` class). A model is considered to be touched when the user has                         // 25003\n   * first focused the control element and then shifted focus away from the control (blur event).                      // 25004\n   */                                                                                                                  // 25005\n  this.$setTouched = function() {                                                                                      // 25006\n    ctrl.$touched = true;                                                                                              // 25007\n    ctrl.$untouched = false;                                                                                           // 25008\n    $animate.setClass($element, TOUCHED_CLASS, UNTOUCHED_CLASS);                                                       // 25009\n  };                                                                                                                   // 25010\n                                                                                                                       // 25011\n  /**                                                                                                                  // 25012\n   * @ngdoc method                                                                                                     // 25013\n   * @name ngModel.NgModelController#$rollbackViewValue                                                                // 25014\n   *                                                                                                                   // 25015\n   * @description                                                                                                      // 25016\n   * Cancel an update and reset the input element's value to prevent an update to the `$modelValue`,                   // 25017\n   * which may be caused by a pending debounced event or because the input is waiting for a some                       // 25018\n   * future event.                                                                                                     // 25019\n   *                                                                                                                   // 25020\n   * If you have an input that uses `ng-model-options` to set up debounced events or events such                       // 25021\n   * as blur you can have a situation where there is a period when the `$viewValue`                                    // 25022\n   * is out of synch with the ngModel's `$modelValue`.                                                                 // 25023\n   *                                                                                                                   // 25024\n   * In this case, you can run into difficulties if you try to update the ngModel's `$modelValue`                      // 25025\n   * programmatically before these debounced/future events have resolved/occurred, because Angular's                   // 25026\n   * dirty checking mechanism is not able to tell whether the model has actually changed or not.                       // 25027\n   *                                                                                                                   // 25028\n   * The `$rollbackViewValue()` method should be called before programmatically changing the model of an               // 25029\n   * input which may have such events pending. This is important in order to make sure that the                        // 25030\n   * input field will be updated with the new model value and any pending operations are cancelled.                    // 25031\n   *                                                                                                                   // 25032\n   * <example name=\"ng-model-cancel-update\" module=\"cancel-update-example\">                                            // 25033\n   *   <file name=\"app.js\">                                                                                            // 25034\n   *     angular.module('cancel-update-example', [])                                                                   // 25035\n   *                                                                                                                   // 25036\n   *     .controller('CancelUpdateController', ['$scope', function($scope) {                                           // 25037\n   *       $scope.resetWithCancel = function(e) {                                                                      // 25038\n   *         if (e.keyCode == 27) {                                                                                    // 25039\n   *           $scope.myForm.myInput1.$rollbackViewValue();                                                            // 25040\n   *           $scope.myValue = '';                                                                                    // 25041\n   *         }                                                                                                         // 25042\n   *       };                                                                                                          // 25043\n   *       $scope.resetWithoutCancel = function(e) {                                                                   // 25044\n   *         if (e.keyCode == 27) {                                                                                    // 25045\n   *           $scope.myValue = '';                                                                                    // 25046\n   *         }                                                                                                         // 25047\n   *       };                                                                                                          // 25048\n   *     }]);                                                                                                          // 25049\n   *   </file>                                                                                                         // 25050\n   *   <file name=\"index.html\">                                                                                        // 25051\n   *     <div ng-controller=\"CancelUpdateController\">                                                                  // 25052\n   *       <p>Try typing something in each input.  See that the model only updates when you                            // 25053\n   *          blur off the input.                                                                                      // 25054\n   *        </p>                                                                                                       // 25055\n   *        <p>Now see what happens if you start typing then press the Escape key</p>                                  // 25056\n   *                                                                                                                   // 25057\n   *       <form name=\"myForm\" ng-model-options=\"{ updateOn: 'blur' }\">                                                // 25058\n   *         <p id=\"inputDescription1\">With $rollbackViewValue()</p>                                                   // 25059\n   *         <input name=\"myInput1\" aria-describedby=\"inputDescription1\" ng-model=\"myValue\"                            // 25060\n   *                ng-keydown=\"resetWithCancel($event)\"><br/>                                                         // 25061\n   *         myValue: \"{{ myValue }}\"                                                                                  // 25062\n   *                                                                                                                   // 25063\n   *         <p id=\"inputDescription2\">Without $rollbackViewValue()</p>                                                // 25064\n   *         <input name=\"myInput2\" aria-describedby=\"inputDescription2\" ng-model=\"myValue\"                            // 25065\n   *                ng-keydown=\"resetWithoutCancel($event)\"><br/>                                                      // 25066\n   *         myValue: \"{{ myValue }}\"                                                                                  // 25067\n   *       </form>                                                                                                     // 25068\n   *     </div>                                                                                                        // 25069\n   *   </file>                                                                                                         // 25070\n   * </example>                                                                                                        // 25071\n   */                                                                                                                  // 25072\n  this.$rollbackViewValue = function() {                                                                               // 25073\n    $timeout.cancel(pendingDebounce);                                                                                  // 25074\n    ctrl.$viewValue = ctrl.$$lastCommittedViewValue;                                                                   // 25075\n    ctrl.$render();                                                                                                    // 25076\n  };                                                                                                                   // 25077\n                                                                                                                       // 25078\n  /**                                                                                                                  // 25079\n   * @ngdoc method                                                                                                     // 25080\n   * @name ngModel.NgModelController#$validate                                                                         // 25081\n   *                                                                                                                   // 25082\n   * @description                                                                                                      // 25083\n   * Runs each of the registered validators (first synchronous validators and then                                     // 25084\n   * asynchronous validators).                                                                                         // 25085\n   * If the validity changes to invalid, the model will be set to `undefined`,                                         // 25086\n   * unless {@link ngModelOptions `ngModelOptions.allowInvalid`} is `true`.                                            // 25087\n   * If the validity changes to valid, it will set the model to the last available valid                               // 25088\n   * `$modelValue`, i.e. either the last parsed value or the last value set from the scope.                            // 25089\n   */                                                                                                                  // 25090\n  this.$validate = function() {                                                                                        // 25091\n    // ignore $validate before model is initialized                                                                    // 25092\n    if (isNumber(ctrl.$modelValue) && isNaN(ctrl.$modelValue)) {                                                       // 25093\n      return;                                                                                                          // 25094\n    }                                                                                                                  // 25095\n                                                                                                                       // 25096\n    var viewValue = ctrl.$$lastCommittedViewValue;                                                                     // 25097\n    // Note: we use the $$rawModelValue as $modelValue might have been                                                 // 25098\n    // set to undefined during a view -> model update that found validation                                            // 25099\n    // errors. We can't parse the view here, since that could change                                                   // 25100\n    // the model although neither viewValue nor the model on the scope changed                                         // 25101\n    var modelValue = ctrl.$$rawModelValue;                                                                             // 25102\n                                                                                                                       // 25103\n    var prevValid = ctrl.$valid;                                                                                       // 25104\n    var prevModelValue = ctrl.$modelValue;                                                                             // 25105\n                                                                                                                       // 25106\n    var allowInvalid = ctrl.$options && ctrl.$options.allowInvalid;                                                    // 25107\n                                                                                                                       // 25108\n    ctrl.$$runValidators(modelValue, viewValue, function(allValid) {                                                   // 25109\n      // If there was no change in validity, don't update the model                                                    // 25110\n      // This prevents changing an invalid modelValue to undefined                                                     // 25111\n      if (!allowInvalid && prevValid !== allValid) {                                                                   // 25112\n        // Note: Don't check ctrl.$valid here, as we could have                                                        // 25113\n        // external validators (e.g. calculated on the server),                                                        // 25114\n        // that just call $setValidity and need the model value                                                        // 25115\n        // to calculate their validity.                                                                                // 25116\n        ctrl.$modelValue = allValid ? modelValue : undefined;                                                          // 25117\n                                                                                                                       // 25118\n        if (ctrl.$modelValue !== prevModelValue) {                                                                     // 25119\n          ctrl.$$writeModelToScope();                                                                                  // 25120\n        }                                                                                                              // 25121\n      }                                                                                                                // 25122\n    });                                                                                                                // 25123\n                                                                                                                       // 25124\n  };                                                                                                                   // 25125\n                                                                                                                       // 25126\n  this.$$runValidators = function(modelValue, viewValue, doneCallback) {                                               // 25127\n    currentValidationRunId++;                                                                                          // 25128\n    var localValidationRunId = currentValidationRunId;                                                                 // 25129\n                                                                                                                       // 25130\n    // check parser error                                                                                              // 25131\n    if (!processParseErrors()) {                                                                                       // 25132\n      validationDone(false);                                                                                           // 25133\n      return;                                                                                                          // 25134\n    }                                                                                                                  // 25135\n    if (!processSyncValidators()) {                                                                                    // 25136\n      validationDone(false);                                                                                           // 25137\n      return;                                                                                                          // 25138\n    }                                                                                                                  // 25139\n    processAsyncValidators();                                                                                          // 25140\n                                                                                                                       // 25141\n    function processParseErrors() {                                                                                    // 25142\n      var errorKey = ctrl.$$parserName || 'parse';                                                                     // 25143\n      if (isUndefined(parserValid)) {                                                                                  // 25144\n        setValidity(errorKey, null);                                                                                   // 25145\n      } else {                                                                                                         // 25146\n        if (!parserValid) {                                                                                            // 25147\n          forEach(ctrl.$validators, function(v, name) {                                                                // 25148\n            setValidity(name, null);                                                                                   // 25149\n          });                                                                                                          // 25150\n          forEach(ctrl.$asyncValidators, function(v, name) {                                                           // 25151\n            setValidity(name, null);                                                                                   // 25152\n          });                                                                                                          // 25153\n        }                                                                                                              // 25154\n        // Set the parse error last, to prevent unsetting it, should a $validators key == parserName                   // 25155\n        setValidity(errorKey, parserValid);                                                                            // 25156\n        return parserValid;                                                                                            // 25157\n      }                                                                                                                // 25158\n      return true;                                                                                                     // 25159\n    }                                                                                                                  // 25160\n                                                                                                                       // 25161\n    function processSyncValidators() {                                                                                 // 25162\n      var syncValidatorsValid = true;                                                                                  // 25163\n      forEach(ctrl.$validators, function(validator, name) {                                                            // 25164\n        var result = validator(modelValue, viewValue);                                                                 // 25165\n        syncValidatorsValid = syncValidatorsValid && result;                                                           // 25166\n        setValidity(name, result);                                                                                     // 25167\n      });                                                                                                              // 25168\n      if (!syncValidatorsValid) {                                                                                      // 25169\n        forEach(ctrl.$asyncValidators, function(v, name) {                                                             // 25170\n          setValidity(name, null);                                                                                     // 25171\n        });                                                                                                            // 25172\n        return false;                                                                                                  // 25173\n      }                                                                                                                // 25174\n      return true;                                                                                                     // 25175\n    }                                                                                                                  // 25176\n                                                                                                                       // 25177\n    function processAsyncValidators() {                                                                                // 25178\n      var validatorPromises = [];                                                                                      // 25179\n      var allValid = true;                                                                                             // 25180\n      forEach(ctrl.$asyncValidators, function(validator, name) {                                                       // 25181\n        var promise = validator(modelValue, viewValue);                                                                // 25182\n        if (!isPromiseLike(promise)) {                                                                                 // 25183\n          throw ngModelMinErr(\"$asyncValidators\",                                                                      // 25184\n            \"Expected asynchronous validator to return a promise but got '{0}' instead.\", promise);                    // 25185\n        }                                                                                                              // 25186\n        setValidity(name, undefined);                                                                                  // 25187\n        validatorPromises.push(promise.then(function() {                                                               // 25188\n          setValidity(name, true);                                                                                     // 25189\n        }, function(error) {                                                                                           // 25190\n          allValid = false;                                                                                            // 25191\n          setValidity(name, false);                                                                                    // 25192\n        }));                                                                                                           // 25193\n      });                                                                                                              // 25194\n      if (!validatorPromises.length) {                                                                                 // 25195\n        validationDone(true);                                                                                          // 25196\n      } else {                                                                                                         // 25197\n        $q.all(validatorPromises).then(function() {                                                                    // 25198\n          validationDone(allValid);                                                                                    // 25199\n        }, noop);                                                                                                      // 25200\n      }                                                                                                                // 25201\n    }                                                                                                                  // 25202\n                                                                                                                       // 25203\n    function setValidity(name, isValid) {                                                                              // 25204\n      if (localValidationRunId === currentValidationRunId) {                                                           // 25205\n        ctrl.$setValidity(name, isValid);                                                                              // 25206\n      }                                                                                                                // 25207\n    }                                                                                                                  // 25208\n                                                                                                                       // 25209\n    function validationDone(allValid) {                                                                                // 25210\n      if (localValidationRunId === currentValidationRunId) {                                                           // 25211\n                                                                                                                       // 25212\n        doneCallback(allValid);                                                                                        // 25213\n      }                                                                                                                // 25214\n    }                                                                                                                  // 25215\n  };                                                                                                                   // 25216\n                                                                                                                       // 25217\n  /**                                                                                                                  // 25218\n   * @ngdoc method                                                                                                     // 25219\n   * @name ngModel.NgModelController#$commitViewValue                                                                  // 25220\n   *                                                                                                                   // 25221\n   * @description                                                                                                      // 25222\n   * Commit a pending update to the `$modelValue`.                                                                     // 25223\n   *                                                                                                                   // 25224\n   * Updates may be pending by a debounced event or because the input is waiting for a some future                     // 25225\n   * event defined in `ng-model-options`. this method is rarely needed as `NgModelController`                          // 25226\n   * usually handles calling this in response to input events.                                                         // 25227\n   */                                                                                                                  // 25228\n  this.$commitViewValue = function() {                                                                                 // 25229\n    var viewValue = ctrl.$viewValue;                                                                                   // 25230\n                                                                                                                       // 25231\n    $timeout.cancel(pendingDebounce);                                                                                  // 25232\n                                                                                                                       // 25233\n    // If the view value has not changed then we should just exit, except in the case where there is                   // 25234\n    // a native validator on the element. In this case the validation state may have changed even though               // 25235\n    // the viewValue has stayed empty.                                                                                 // 25236\n    if (ctrl.$$lastCommittedViewValue === viewValue && (viewValue !== '' || !ctrl.$$hasNativeValidators)) {            // 25237\n      return;                                                                                                          // 25238\n    }                                                                                                                  // 25239\n    ctrl.$$lastCommittedViewValue = viewValue;                                                                         // 25240\n                                                                                                                       // 25241\n    // change to dirty                                                                                                 // 25242\n    if (ctrl.$pristine) {                                                                                              // 25243\n      this.$setDirty();                                                                                                // 25244\n    }                                                                                                                  // 25245\n    this.$$parseAndValidate();                                                                                         // 25246\n  };                                                                                                                   // 25247\n                                                                                                                       // 25248\n  this.$$parseAndValidate = function() {                                                                               // 25249\n    var viewValue = ctrl.$$lastCommittedViewValue;                                                                     // 25250\n    var modelValue = viewValue;                                                                                        // 25251\n    parserValid = isUndefined(modelValue) ? undefined : true;                                                          // 25252\n                                                                                                                       // 25253\n    if (parserValid) {                                                                                                 // 25254\n      for (var i = 0; i < ctrl.$parsers.length; i++) {                                                                 // 25255\n        modelValue = ctrl.$parsers[i](modelValue);                                                                     // 25256\n        if (isUndefined(modelValue)) {                                                                                 // 25257\n          parserValid = false;                                                                                         // 25258\n          break;                                                                                                       // 25259\n        }                                                                                                              // 25260\n      }                                                                                                                // 25261\n    }                                                                                                                  // 25262\n    if (isNumber(ctrl.$modelValue) && isNaN(ctrl.$modelValue)) {                                                       // 25263\n      // ctrl.$modelValue has not been touched yet...                                                                  // 25264\n      ctrl.$modelValue = ngModelGet($scope);                                                                           // 25265\n    }                                                                                                                  // 25266\n    var prevModelValue = ctrl.$modelValue;                                                                             // 25267\n    var allowInvalid = ctrl.$options && ctrl.$options.allowInvalid;                                                    // 25268\n    ctrl.$$rawModelValue = modelValue;                                                                                 // 25269\n                                                                                                                       // 25270\n    if (allowInvalid) {                                                                                                // 25271\n      ctrl.$modelValue = modelValue;                                                                                   // 25272\n      writeToModelIfNeeded();                                                                                          // 25273\n    }                                                                                                                  // 25274\n                                                                                                                       // 25275\n    // Pass the $$lastCommittedViewValue here, because the cached viewValue might be out of date.                      // 25276\n    // This can happen if e.g. $setViewValue is called from inside a parser                                            // 25277\n    ctrl.$$runValidators(modelValue, ctrl.$$lastCommittedViewValue, function(allValid) {                               // 25278\n      if (!allowInvalid) {                                                                                             // 25279\n        // Note: Don't check ctrl.$valid here, as we could have                                                        // 25280\n        // external validators (e.g. calculated on the server),                                                        // 25281\n        // that just call $setValidity and need the model value                                                        // 25282\n        // to calculate their validity.                                                                                // 25283\n        ctrl.$modelValue = allValid ? modelValue : undefined;                                                          // 25284\n        writeToModelIfNeeded();                                                                                        // 25285\n      }                                                                                                                // 25286\n    });                                                                                                                // 25287\n                                                                                                                       // 25288\n    function writeToModelIfNeeded() {                                                                                  // 25289\n      if (ctrl.$modelValue !== prevModelValue) {                                                                       // 25290\n        ctrl.$$writeModelToScope();                                                                                    // 25291\n      }                                                                                                                // 25292\n    }                                                                                                                  // 25293\n  };                                                                                                                   // 25294\n                                                                                                                       // 25295\n  this.$$writeModelToScope = function() {                                                                              // 25296\n    ngModelSet($scope, ctrl.$modelValue);                                                                              // 25297\n    forEach(ctrl.$viewChangeListeners, function(listener) {                                                            // 25298\n      try {                                                                                                            // 25299\n        listener();                                                                                                    // 25300\n      } catch (e) {                                                                                                    // 25301\n        $exceptionHandler(e);                                                                                          // 25302\n      }                                                                                                                // 25303\n    });                                                                                                                // 25304\n  };                                                                                                                   // 25305\n                                                                                                                       // 25306\n  /**                                                                                                                  // 25307\n   * @ngdoc method                                                                                                     // 25308\n   * @name ngModel.NgModelController#$setViewValue                                                                     // 25309\n   *                                                                                                                   // 25310\n   * @description                                                                                                      // 25311\n   * Update the view value.                                                                                            // 25312\n   *                                                                                                                   // 25313\n   * This method should be called when a control wants to change the view value; typically,                            // 25314\n   * this is done from within a DOM event handler. For example, the {@link ng.directive:input input}                   // 25315\n   * directive calls it when the value of the input changes and {@link ng.directive:select select}                     // 25316\n   * calls it when an option is selected.                                                                              // 25317\n   *                                                                                                                   // 25318\n   * When `$setViewValue` is called, the new `value` will be staged for committing through the `$parsers`              // 25319\n   * and `$validators` pipelines. If there are no special {@link ngModelOptions} specified then the staged             // 25320\n   * value sent directly for processing, finally to be applied to `$modelValue` and then the                           // 25321\n   * **expression** specified in the `ng-model` attribute. Lastly, all the registered change listeners,                // 25322\n   * in the `$viewChangeListeners` list, are called.                                                                   // 25323\n   *                                                                                                                   // 25324\n   * In case the {@link ng.directive:ngModelOptions ngModelOptions} directive is used with `updateOn`                  // 25325\n   * and the `default` trigger is not listed, all those actions will remain pending until one of the                   // 25326\n   * `updateOn` events is triggered on the DOM element.                                                                // 25327\n   * All these actions will be debounced if the {@link ng.directive:ngModelOptions ngModelOptions}                     // 25328\n   * directive is used with a custom debounce for this particular event.                                               // 25329\n   * Note that a `$digest` is only triggered once the `updateOn` events are fired, or if `debounce`                    // 25330\n   * is specified, once the timer runs out.                                                                            // 25331\n   *                                                                                                                   // 25332\n   * When used with standard inputs, the view value will always be a string (which is in some cases                    // 25333\n   * parsed into another type, such as a `Date` object for `input[date]`.)                                             // 25334\n   * However, custom controls might also pass objects to this method. In this case, we should make                     // 25335\n   * a copy of the object before passing it to `$setViewValue`. This is because `ngModel` does not                     // 25336\n   * perform a deep watch of objects, it only looks for a change of identity. If you only change                       // 25337\n   * the property of the object then ngModel will not realise that the object has changed and                          // 25338\n   * will not invoke the `$parsers` and `$validators` pipelines. For this reason, you should                           // 25339\n   * not change properties of the copy once it has been passed to `$setViewValue`.                                     // 25340\n   * Otherwise you may cause the model value on the scope to change incorrectly.                                       // 25341\n   *                                                                                                                   // 25342\n   * <div class=\"alert alert-info\">                                                                                    // 25343\n   * In any case, the value passed to the method should always reflect the current value                               // 25344\n   * of the control. For example, if you are calling `$setViewValue` for an input element,                             // 25345\n   * you should pass the input DOM value. Otherwise, the control and the scope model become                            // 25346\n   * out of sync. It's also important to note that `$setViewValue` does not call `$render` or change                   // 25347\n   * the control's DOM value in any way. If we want to change the control's DOM value                                  // 25348\n   * programmatically, we should update the `ngModel` scope expression. Its new value will be                          // 25349\n   * picked up by the model controller, which will run it through the `$formatters`, `$render` it                      // 25350\n   * to update the DOM, and finally call `$validate` on it.                                                            // 25351\n   * </div>                                                                                                            // 25352\n   *                                                                                                                   // 25353\n   * @param {*} value value from the view.                                                                             // 25354\n   * @param {string} trigger Event that triggered the update.                                                          // 25355\n   */                                                                                                                  // 25356\n  this.$setViewValue = function(value, trigger) {                                                                      // 25357\n    ctrl.$viewValue = value;                                                                                           // 25358\n    if (!ctrl.$options || ctrl.$options.updateOnDefault) {                                                             // 25359\n      ctrl.$$debounceViewValueCommit(trigger);                                                                         // 25360\n    }                                                                                                                  // 25361\n  };                                                                                                                   // 25362\n                                                                                                                       // 25363\n  this.$$debounceViewValueCommit = function(trigger) {                                                                 // 25364\n    var debounceDelay = 0,                                                                                             // 25365\n        options = ctrl.$options,                                                                                       // 25366\n        debounce;                                                                                                      // 25367\n                                                                                                                       // 25368\n    if (options && isDefined(options.debounce)) {                                                                      // 25369\n      debounce = options.debounce;                                                                                     // 25370\n      if (isNumber(debounce)) {                                                                                        // 25371\n        debounceDelay = debounce;                                                                                      // 25372\n      } else if (isNumber(debounce[trigger])) {                                                                        // 25373\n        debounceDelay = debounce[trigger];                                                                             // 25374\n      } else if (isNumber(debounce['default'])) {                                                                      // 25375\n        debounceDelay = debounce['default'];                                                                           // 25376\n      }                                                                                                                // 25377\n    }                                                                                                                  // 25378\n                                                                                                                       // 25379\n    $timeout.cancel(pendingDebounce);                                                                                  // 25380\n    if (debounceDelay) {                                                                                               // 25381\n      pendingDebounce = $timeout(function() {                                                                          // 25382\n        ctrl.$commitViewValue();                                                                                       // 25383\n      }, debounceDelay);                                                                                               // 25384\n    } else if ($rootScope.$$phase) {                                                                                   // 25385\n      ctrl.$commitViewValue();                                                                                         // 25386\n    } else {                                                                                                           // 25387\n      $scope.$apply(function() {                                                                                       // 25388\n        ctrl.$commitViewValue();                                                                                       // 25389\n      });                                                                                                              // 25390\n    }                                                                                                                  // 25391\n  };                                                                                                                   // 25392\n                                                                                                                       // 25393\n  // model -> value                                                                                                    // 25394\n  // Note: we cannot use a normal scope.$watch as we want to detect the following:                                     // 25395\n  // 1. scope value is 'a'                                                                                             // 25396\n  // 2. user enters 'b'                                                                                                // 25397\n  // 3. ng-change kicks in and reverts scope value to 'a'                                                              // 25398\n  //    -> scope value did not change since the last digest as                                                         // 25399\n  //       ng-change executes in apply phase                                                                           // 25400\n  // 4. view should be changed back to 'a'                                                                             // 25401\n  $scope.$watch(function ngModelWatch() {                                                                              // 25402\n    var modelValue = ngModelGet($scope);                                                                               // 25403\n                                                                                                                       // 25404\n    // if scope model value and ngModel value are out of sync                                                          // 25405\n    // TODO(perf): why not move this to the action fn?                                                                 // 25406\n    if (modelValue !== ctrl.$modelValue &&                                                                             // 25407\n       // checks for NaN is needed to allow setting the model to NaN when there's an asyncValidator                    // 25408\n       (ctrl.$modelValue === ctrl.$modelValue || modelValue === modelValue)                                            // 25409\n    ) {                                                                                                                // 25410\n      ctrl.$modelValue = ctrl.$$rawModelValue = modelValue;                                                            // 25411\n      parserValid = undefined;                                                                                         // 25412\n                                                                                                                       // 25413\n      var formatters = ctrl.$formatters,                                                                               // 25414\n          idx = formatters.length;                                                                                     // 25415\n                                                                                                                       // 25416\n      var viewValue = modelValue;                                                                                      // 25417\n      while (idx--) {                                                                                                  // 25418\n        viewValue = formatters[idx](viewValue);                                                                        // 25419\n      }                                                                                                                // 25420\n      if (ctrl.$viewValue !== viewValue) {                                                                             // 25421\n        ctrl.$viewValue = ctrl.$$lastCommittedViewValue = viewValue;                                                   // 25422\n        ctrl.$render();                                                                                                // 25423\n                                                                                                                       // 25424\n        ctrl.$$runValidators(modelValue, viewValue, noop);                                                             // 25425\n      }                                                                                                                // 25426\n    }                                                                                                                  // 25427\n                                                                                                                       // 25428\n    return modelValue;                                                                                                 // 25429\n  });                                                                                                                  // 25430\n}];                                                                                                                    // 25431\n                                                                                                                       // 25432\n                                                                                                                       // 25433\n/**                                                                                                                    // 25434\n * @ngdoc directive                                                                                                    // 25435\n * @name ngModel                                                                                                       // 25436\n *                                                                                                                     // 25437\n * @element input                                                                                                      // 25438\n * @priority 1                                                                                                         // 25439\n *                                                                                                                     // 25440\n * @description                                                                                                        // 25441\n * The `ngModel` directive binds an `input`,`select`, `textarea` (or custom form control) to a                         // 25442\n * property on the scope using {@link ngModel.NgModelController NgModelController},                                    // 25443\n * which is created and exposed by this directive.                                                                     // 25444\n *                                                                                                                     // 25445\n * `ngModel` is responsible for:                                                                                       // 25446\n *                                                                                                                     // 25447\n * - Binding the view into the model, which other directives such as `input`, `textarea` or `select`                   // 25448\n *   require.                                                                                                          // 25449\n * - Providing validation behavior (i.e. required, number, email, url).                                                // 25450\n * - Keeping the state of the control (valid/invalid, dirty/pristine, touched/untouched, validation errors).           // 25451\n * - Setting related css classes on the element (`ng-valid`, `ng-invalid`, `ng-dirty`, `ng-pristine`, `ng-touched`, `ng-untouched`) including animations.\n * - Registering the control with its parent {@link ng.directive:form form}.                                           // 25453\n *                                                                                                                     // 25454\n * Note: `ngModel` will try to bind to the property given by evaluating the expression on the                          // 25455\n * current scope. If the property doesn't already exist on this scope, it will be created                              // 25456\n * implicitly and added to the scope.                                                                                  // 25457\n *                                                                                                                     // 25458\n * For best practices on using `ngModel`, see:                                                                         // 25459\n *                                                                                                                     // 25460\n *  - [Understanding Scopes](https://github.com/angular/angular.js/wiki/Understanding-Scopes)                          // 25461\n *                                                                                                                     // 25462\n * For basic examples, how to use `ngModel`, see:                                                                      // 25463\n *                                                                                                                     // 25464\n *  - {@link ng.directive:input input}                                                                                 // 25465\n *    - {@link input[text] text}                                                                                       // 25466\n *    - {@link input[checkbox] checkbox}                                                                               // 25467\n *    - {@link input[radio] radio}                                                                                     // 25468\n *    - {@link input[number] number}                                                                                   // 25469\n *    - {@link input[email] email}                                                                                     // 25470\n *    - {@link input[url] url}                                                                                         // 25471\n *    - {@link input[date] date}                                                                                       // 25472\n *    - {@link input[datetime-local] datetime-local}                                                                   // 25473\n *    - {@link input[time] time}                                                                                       // 25474\n *    - {@link input[month] month}                                                                                     // 25475\n *    - {@link input[week] week}                                                                                       // 25476\n *  - {@link ng.directive:select select}                                                                               // 25477\n *  - {@link ng.directive:textarea textarea}                                                                           // 25478\n *                                                                                                                     // 25479\n * # CSS classes                                                                                                       // 25480\n * The following CSS classes are added and removed on the associated input/select/textarea element                     // 25481\n * depending on the validity of the model.                                                                             // 25482\n *                                                                                                                     // 25483\n *  - `ng-valid`: the model is valid                                                                                   // 25484\n *  - `ng-invalid`: the model is invalid                                                                               // 25485\n *  - `ng-valid-[key]`: for each valid key added by `$setValidity`                                                     // 25486\n *  - `ng-invalid-[key]`: for each invalid key added by `$setValidity`                                                 // 25487\n *  - `ng-pristine`: the control hasn't been interacted with yet                                                       // 25488\n *  - `ng-dirty`: the control has been interacted with                                                                 // 25489\n *  - `ng-touched`: the control has been blurred                                                                       // 25490\n *  - `ng-untouched`: the control hasn't been blurred                                                                  // 25491\n *  - `ng-pending`: any `$asyncValidators` are unfulfilled                                                             // 25492\n *                                                                                                                     // 25493\n * Keep in mind that ngAnimate can detect each of these classes when added and removed.                                // 25494\n *                                                                                                                     // 25495\n * ## Animation Hooks                                                                                                  // 25496\n *                                                                                                                     // 25497\n * Animations within models are triggered when any of the associated CSS classes are added and removed                 // 25498\n * on the input element which is attached to the model. These classes are: `.ng-pristine`, `.ng-dirty`,                // 25499\n * `.ng-invalid` and `.ng-valid` as well as any other validations that are performed on the model itself.              // 25500\n * The animations that are triggered within ngModel are similar to how they work in ngClass and                        // 25501\n * animations can be hooked into using CSS transitions, keyframes as well as JS animations.                            // 25502\n *                                                                                                                     // 25503\n * The following example shows a simple way to utilize CSS transitions to style an input element                       // 25504\n * that has been rendered as invalid after it has been validated:                                                      // 25505\n *                                                                                                                     // 25506\n * <pre>                                                                                                               // 25507\n * //be sure to include ngAnimate as a module to hook into more                                                        // 25508\n * //advanced animations                                                                                               // 25509\n * .my-input {                                                                                                         // 25510\n *   transition:0.5s linear all;                                                                                       // 25511\n *   background: white;                                                                                                // 25512\n * }                                                                                                                   // 25513\n * .my-input.ng-invalid {                                                                                              // 25514\n *   background: red;                                                                                                  // 25515\n *   color:white;                                                                                                      // 25516\n * }                                                                                                                   // 25517\n * </pre>                                                                                                              // 25518\n *                                                                                                                     // 25519\n * @example                                                                                                            // 25520\n * <example deps=\"angular-animate.js\" animations=\"true\" fixBase=\"true\" module=\"inputExample\">                          // 25521\n     <file name=\"index.html\">                                                                                          // 25522\n       <script>                                                                                                        // 25523\n        angular.module('inputExample', [])                                                                             // 25524\n          .controller('ExampleController', ['$scope', function($scope) {                                               // 25525\n            $scope.val = '1';                                                                                          // 25526\n          }]);                                                                                                         // 25527\n       </script>                                                                                                       // 25528\n       <style>                                                                                                         // 25529\n         .my-input {                                                                                                   // 25530\n           transition:all linear 0.5s;                                                                                 // 25531\n           background: transparent;                                                                                    // 25532\n         }                                                                                                             // 25533\n         .my-input.ng-invalid {                                                                                        // 25534\n           color:white;                                                                                                // 25535\n           background: red;                                                                                            // 25536\n         }                                                                                                             // 25537\n       </style>                                                                                                        // 25538\n       <p id=\"inputDescription\">                                                                                       // 25539\n        Update input to see transitions when valid/invalid.                                                            // 25540\n        Integer is a valid value.                                                                                      // 25541\n       </p>                                                                                                            // 25542\n       <form name=\"testForm\" ng-controller=\"ExampleController\">                                                        // 25543\n         <input ng-model=\"val\" ng-pattern=\"/^\\d+$/\" name=\"anim\" class=\"my-input\"                                       // 25544\n                aria-describedby=\"inputDescription\" />                                                                 // 25545\n       </form>                                                                                                         // 25546\n     </file>                                                                                                           // 25547\n * </example>                                                                                                          // 25548\n *                                                                                                                     // 25549\n * ## Binding to a getter/setter                                                                                       // 25550\n *                                                                                                                     // 25551\n * Sometimes it's helpful to bind `ngModel` to a getter/setter function.  A getter/setter is a                         // 25552\n * function that returns a representation of the model when called with zero arguments, and sets                       // 25553\n * the internal state of a model when called with an argument. It's sometimes useful to use this                       // 25554\n * for models that have an internal representation that's different from what the model exposes                        // 25555\n * to the view.                                                                                                        // 25556\n *                                                                                                                     // 25557\n * <div class=\"alert alert-success\">                                                                                   // 25558\n * **Best Practice:** It's best to keep getters fast because Angular is likely to call them more                       // 25559\n * frequently than other parts of your code.                                                                           // 25560\n * </div>                                                                                                              // 25561\n *                                                                                                                     // 25562\n * You use this behavior by adding `ng-model-options=\"{ getterSetter: true }\"` to an element that                      // 25563\n * has `ng-model` attached to it. You can also add `ng-model-options=\"{ getterSetter: true }\"` to                      // 25564\n * a `<form>`, which will enable this behavior for all `<input>`s within it. See                                       // 25565\n * {@link ng.directive:ngModelOptions `ngModelOptions`} for more.                                                      // 25566\n *                                                                                                                     // 25567\n * The following example shows how to use `ngModel` with a getter/setter:                                              // 25568\n *                                                                                                                     // 25569\n * @example                                                                                                            // 25570\n * <example name=\"ngModel-getter-setter\" module=\"getterSetterExample\">                                                 // 25571\n     <file name=\"index.html\">                                                                                          // 25572\n       <div ng-controller=\"ExampleController\">                                                                         // 25573\n         <form name=\"userForm\">                                                                                        // 25574\n           <label>Name:                                                                                                // 25575\n             <input type=\"text\" name=\"userName\"                                                                        // 25576\n                    ng-model=\"user.name\"                                                                               // 25577\n                    ng-model-options=\"{ getterSetter: true }\" />                                                       // 25578\n           </label>                                                                                                    // 25579\n         </form>                                                                                                       // 25580\n         <pre>user.name = <span ng-bind=\"user.name()\"></span></pre>                                                    // 25581\n       </div>                                                                                                          // 25582\n     </file>                                                                                                           // 25583\n     <file name=\"app.js\">                                                                                              // 25584\n       angular.module('getterSetterExample', [])                                                                       // 25585\n         .controller('ExampleController', ['$scope', function($scope) {                                                // 25586\n           var _name = 'Brian';                                                                                        // 25587\n           $scope.user = {                                                                                             // 25588\n             name: function(newName) {                                                                                 // 25589\n              // Note that newName can be undefined for two reasons:                                                   // 25590\n              // 1. Because it is called as a getter and thus called with no arguments                                 // 25591\n              // 2. Because the property should actually be set to undefined. This happens e.g. if the                 // 25592\n              //    input is invalid                                                                                   // 25593\n              return arguments.length ? (_name = newName) : _name;                                                     // 25594\n             }                                                                                                         // 25595\n           };                                                                                                          // 25596\n         }]);                                                                                                          // 25597\n     </file>                                                                                                           // 25598\n * </example>                                                                                                          // 25599\n */                                                                                                                    // 25600\nvar ngModelDirective = ['$rootScope', function($rootScope) {                                                           // 25601\n  return {                                                                                                             // 25602\n    restrict: 'A',                                                                                                     // 25603\n    require: ['ngModel', '^?form', '^?ngModelOptions'],                                                                // 25604\n    controller: NgModelController,                                                                                     // 25605\n    // Prelink needs to run before any input directive                                                                 // 25606\n    // so that we can set the NgModelOptions in NgModelController                                                      // 25607\n    // before anyone else uses it.                                                                                     // 25608\n    priority: 1,                                                                                                       // 25609\n    compile: function ngModelCompile(element) {                                                                        // 25610\n      // Setup initial state of the control                                                                            // 25611\n      element.addClass(PRISTINE_CLASS).addClass(UNTOUCHED_CLASS).addClass(VALID_CLASS);                                // 25612\n                                                                                                                       // 25613\n      return {                                                                                                         // 25614\n        pre: function ngModelPreLink(scope, element, attr, ctrls) {                                                    // 25615\n          var modelCtrl = ctrls[0],                                                                                    // 25616\n              formCtrl = ctrls[1] || modelCtrl.$$parentForm;                                                           // 25617\n                                                                                                                       // 25618\n          modelCtrl.$$setOptions(ctrls[2] && ctrls[2].$options);                                                       // 25619\n                                                                                                                       // 25620\n          // notify others, especially parent forms                                                                    // 25621\n          formCtrl.$addControl(modelCtrl);                                                                             // 25622\n                                                                                                                       // 25623\n          attr.$observe('name', function(newValue) {                                                                   // 25624\n            if (modelCtrl.$name !== newValue) {                                                                        // 25625\n              modelCtrl.$$parentForm.$$renameControl(modelCtrl, newValue);                                             // 25626\n            }                                                                                                          // 25627\n          });                                                                                                          // 25628\n                                                                                                                       // 25629\n          scope.$on('$destroy', function() {                                                                           // 25630\n            modelCtrl.$$parentForm.$removeControl(modelCtrl);                                                          // 25631\n          });                                                                                                          // 25632\n        },                                                                                                             // 25633\n        post: function ngModelPostLink(scope, element, attr, ctrls) {                                                  // 25634\n          var modelCtrl = ctrls[0];                                                                                    // 25635\n          if (modelCtrl.$options && modelCtrl.$options.updateOn) {                                                     // 25636\n            element.on(modelCtrl.$options.updateOn, function(ev) {                                                     // 25637\n              modelCtrl.$$debounceViewValueCommit(ev && ev.type);                                                      // 25638\n            });                                                                                                        // 25639\n          }                                                                                                            // 25640\n                                                                                                                       // 25641\n          element.on('blur', function(ev) {                                                                            // 25642\n            if (modelCtrl.$touched) return;                                                                            // 25643\n                                                                                                                       // 25644\n            if ($rootScope.$$phase) {                                                                                  // 25645\n              scope.$evalAsync(modelCtrl.$setTouched);                                                                 // 25646\n            } else {                                                                                                   // 25647\n              scope.$apply(modelCtrl.$setTouched);                                                                     // 25648\n            }                                                                                                          // 25649\n          });                                                                                                          // 25650\n        }                                                                                                              // 25651\n      };                                                                                                               // 25652\n    }                                                                                                                  // 25653\n  };                                                                                                                   // 25654\n}];                                                                                                                    // 25655\n                                                                                                                       // 25656\nvar DEFAULT_REGEXP = /(\\s+|^)default(\\s+|$)/;                                                                          // 25657\n                                                                                                                       // 25658\n/**                                                                                                                    // 25659\n * @ngdoc directive                                                                                                    // 25660\n * @name ngModelOptions                                                                                                // 25661\n *                                                                                                                     // 25662\n * @description                                                                                                        // 25663\n * Allows tuning how model updates are done. Using `ngModelOptions` you can specify a custom list of                   // 25664\n * events that will trigger a model update and/or a debouncing delay so that the actual update only                    // 25665\n * takes place when a timer expires; this timer will be reset after another change takes place.                        // 25666\n *                                                                                                                     // 25667\n * Given the nature of `ngModelOptions`, the value displayed inside input fields in the view might                     // 25668\n * be different from the value in the actual model. This means that if you update the model you                        // 25669\n * should also invoke {@link ngModel.NgModelController `$rollbackViewValue`} on the relevant input field in            // 25670\n * order to make sure it is synchronized with the model and that any debounced action is canceled.                     // 25671\n *                                                                                                                     // 25672\n * The easiest way to reference the control's {@link ngModel.NgModelController `$rollbackViewValue`}                   // 25673\n * method is by making sure the input is placed inside a form that has a `name` attribute. This is                     // 25674\n * important because `form` controllers are published to the related scope under the name in their                     // 25675\n * `name` attribute.                                                                                                   // 25676\n *                                                                                                                     // 25677\n * Any pending changes will take place immediately when an enclosing form is submitted via the                         // 25678\n * `submit` event. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`                   // 25679\n * to have access to the updated model.                                                                                // 25680\n *                                                                                                                     // 25681\n * `ngModelOptions` has an effect on the element it's declared on and its descendants.                                 // 25682\n *                                                                                                                     // 25683\n * @param {Object} ngModelOptions options to apply to the current model. Valid keys are:                               // 25684\n *   - `updateOn`: string specifying which event should the input be bound to. You can set several                     // 25685\n *     events using an space delimited list. There is a special event called `default` that                            // 25686\n *     matches the default events belonging of the control.                                                            // 25687\n *   - `debounce`: integer value which contains the debounce model update value in milliseconds. A                     // 25688\n *     value of 0 triggers an immediate update. If an object is supplied instead, you can specify a                    // 25689\n *     custom value for each event. For example:                                                                       // 25690\n *     `ng-model-options=\"{ updateOn: 'default blur', debounce: { 'default': 500, 'blur': 0 } }\"`                      // 25691\n *   - `allowInvalid`: boolean value which indicates that the model can be set with values that did                    // 25692\n *     not validate correctly instead of the default behavior of setting the model to undefined.                       // 25693\n *   - `getterSetter`: boolean value which determines whether or not to treat functions bound to                       // 25694\n       `ngModel` as getters/setters.                                                                                   // 25695\n *   - `timezone`: Defines the timezone to be used to read/write the `Date` instance in the model for                  // 25696\n *     `<input type=\"date\">`, `<input type=\"time\">`, ... . It understands UTC/GMT and the                              // 25697\n *     continental US time zone abbreviations, but for general use, use a time zone offset, for                        // 25698\n *     example, `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)                                         // 25699\n *     If not specified, the timezone of the browser will be used.                                                     // 25700\n *                                                                                                                     // 25701\n * @example                                                                                                            // 25702\n                                                                                                                       // 25703\n  The following example shows how to override immediate updates. Changes on the inputs within the                      // 25704\n  form will update the model only when the control loses focus (blur event). If `escape` key is                        // 25705\n  pressed while the input field is focused, the value is reset to the value in the current model.                      // 25706\n                                                                                                                       // 25707\n  <example name=\"ngModelOptions-directive-blur\" module=\"optionsExample\">                                               // 25708\n    <file name=\"index.html\">                                                                                           // 25709\n      <div ng-controller=\"ExampleController\">                                                                          // 25710\n        <form name=\"userForm\">                                                                                         // 25711\n          <label>Name:                                                                                                 // 25712\n            <input type=\"text\" name=\"userName\"                                                                         // 25713\n                   ng-model=\"user.name\"                                                                                // 25714\n                   ng-model-options=\"{ updateOn: 'blur' }\"                                                             // 25715\n                   ng-keyup=\"cancel($event)\" />                                                                        // 25716\n          </label><br />                                                                                               // 25717\n          <label>Other data:                                                                                           // 25718\n            <input type=\"text\" ng-model=\"user.data\" />                                                                 // 25719\n          </label><br />                                                                                               // 25720\n        </form>                                                                                                        // 25721\n        <pre>user.name = <span ng-bind=\"user.name\"></span></pre>                                                       // 25722\n      </div>                                                                                                           // 25723\n    </file>                                                                                                            // 25724\n    <file name=\"app.js\">                                                                                               // 25725\n      angular.module('optionsExample', [])                                                                             // 25726\n        .controller('ExampleController', ['$scope', function($scope) {                                                 // 25727\n          $scope.user = { name: 'say', data: '' };                                                                     // 25728\n                                                                                                                       // 25729\n          $scope.cancel = function(e) {                                                                                // 25730\n            if (e.keyCode == 27) {                                                                                     // 25731\n              $scope.userForm.userName.$rollbackViewValue();                                                           // 25732\n            }                                                                                                          // 25733\n          };                                                                                                           // 25734\n        }]);                                                                                                           // 25735\n    </file>                                                                                                            // 25736\n    <file name=\"protractor.js\" type=\"protractor\">                                                                      // 25737\n      var model = element(by.binding('user.name'));                                                                    // 25738\n      var input = element(by.model('user.name'));                                                                      // 25739\n      var other = element(by.model('user.data'));                                                                      // 25740\n                                                                                                                       // 25741\n      it('should allow custom events', function() {                                                                    // 25742\n        input.sendKeys(' hello');                                                                                      // 25743\n        input.click();                                                                                                 // 25744\n        expect(model.getText()).toEqual('say');                                                                        // 25745\n        other.click();                                                                                                 // 25746\n        expect(model.getText()).toEqual('say hello');                                                                  // 25747\n      });                                                                                                              // 25748\n                                                                                                                       // 25749\n      it('should $rollbackViewValue when model changes', function() {                                                  // 25750\n        input.sendKeys(' hello');                                                                                      // 25751\n        expect(input.getAttribute('value')).toEqual('say hello');                                                      // 25752\n        input.sendKeys(protractor.Key.ESCAPE);                                                                         // 25753\n        expect(input.getAttribute('value')).toEqual('say');                                                            // 25754\n        other.click();                                                                                                 // 25755\n        expect(model.getText()).toEqual('say');                                                                        // 25756\n      });                                                                                                              // 25757\n    </file>                                                                                                            // 25758\n  </example>                                                                                                           // 25759\n                                                                                                                       // 25760\n  This one shows how to debounce model changes. Model will be updated only 1 sec after last change.                    // 25761\n  If the `Clear` button is pressed, any debounced action is canceled and the value becomes empty.                      // 25762\n                                                                                                                       // 25763\n  <example name=\"ngModelOptions-directive-debounce\" module=\"optionsExample\">                                           // 25764\n    <file name=\"index.html\">                                                                                           // 25765\n      <div ng-controller=\"ExampleController\">                                                                          // 25766\n        <form name=\"userForm\">                                                                                         // 25767\n          <label>Name:                                                                                                 // 25768\n            <input type=\"text\" name=\"userName\"                                                                         // 25769\n                   ng-model=\"user.name\"                                                                                // 25770\n                   ng-model-options=\"{ debounce: 1000 }\" />                                                            // 25771\n          </label>                                                                                                     // 25772\n          <button ng-click=\"userForm.userName.$rollbackViewValue(); user.name=''\">Clear</button>                       // 25773\n          <br />                                                                                                       // 25774\n        </form>                                                                                                        // 25775\n        <pre>user.name = <span ng-bind=\"user.name\"></span></pre>                                                       // 25776\n      </div>                                                                                                           // 25777\n    </file>                                                                                                            // 25778\n    <file name=\"app.js\">                                                                                               // 25779\n      angular.module('optionsExample', [])                                                                             // 25780\n        .controller('ExampleController', ['$scope', function($scope) {                                                 // 25781\n          $scope.user = { name: 'say' };                                                                               // 25782\n        }]);                                                                                                           // 25783\n    </file>                                                                                                            // 25784\n  </example>                                                                                                           // 25785\n                                                                                                                       // 25786\n  This one shows how to bind to getter/setters:                                                                        // 25787\n                                                                                                                       // 25788\n  <example name=\"ngModelOptions-directive-getter-setter\" module=\"getterSetterExample\">                                 // 25789\n    <file name=\"index.html\">                                                                                           // 25790\n      <div ng-controller=\"ExampleController\">                                                                          // 25791\n        <form name=\"userForm\">                                                                                         // 25792\n          <label>Name:                                                                                                 // 25793\n            <input type=\"text\" name=\"userName\"                                                                         // 25794\n                   ng-model=\"user.name\"                                                                                // 25795\n                   ng-model-options=\"{ getterSetter: true }\" />                                                        // 25796\n          </label>                                                                                                     // 25797\n        </form>                                                                                                        // 25798\n        <pre>user.name = <span ng-bind=\"user.name()\"></span></pre>                                                     // 25799\n      </div>                                                                                                           // 25800\n    </file>                                                                                                            // 25801\n    <file name=\"app.js\">                                                                                               // 25802\n      angular.module('getterSetterExample', [])                                                                        // 25803\n        .controller('ExampleController', ['$scope', function($scope) {                                                 // 25804\n          var _name = 'Brian';                                                                                         // 25805\n          $scope.user = {                                                                                              // 25806\n            name: function(newName) {                                                                                  // 25807\n              // Note that newName can be undefined for two reasons:                                                   // 25808\n              // 1. Because it is called as a getter and thus called with no arguments                                 // 25809\n              // 2. Because the property should actually be set to undefined. This happens e.g. if the                 // 25810\n              //    input is invalid                                                                                   // 25811\n              return arguments.length ? (_name = newName) : _name;                                                     // 25812\n            }                                                                                                          // 25813\n          };                                                                                                           // 25814\n        }]);                                                                                                           // 25815\n    </file>                                                                                                            // 25816\n  </example>                                                                                                           // 25817\n */                                                                                                                    // 25818\nvar ngModelOptionsDirective = function() {                                                                             // 25819\n  return {                                                                                                             // 25820\n    restrict: 'A',                                                                                                     // 25821\n    controller: ['$scope', '$attrs', function($scope, $attrs) {                                                        // 25822\n      var that = this;                                                                                                 // 25823\n      this.$options = copy($scope.$eval($attrs.ngModelOptions));                                                       // 25824\n      // Allow adding/overriding bound events                                                                          // 25825\n      if (isDefined(this.$options.updateOn)) {                                                                         // 25826\n        this.$options.updateOnDefault = false;                                                                         // 25827\n        // extract \"default\" pseudo-event from list of events that can trigger a model update                          // 25828\n        this.$options.updateOn = trim(this.$options.updateOn.replace(DEFAULT_REGEXP, function() {                      // 25829\n          that.$options.updateOnDefault = true;                                                                        // 25830\n          return ' ';                                                                                                  // 25831\n        }));                                                                                                           // 25832\n      } else {                                                                                                         // 25833\n        this.$options.updateOnDefault = true;                                                                          // 25834\n      }                                                                                                                // 25835\n    }]                                                                                                                 // 25836\n  };                                                                                                                   // 25837\n};                                                                                                                     // 25838\n                                                                                                                       // 25839\n                                                                                                                       // 25840\n                                                                                                                       // 25841\n// helper methods                                                                                                      // 25842\nfunction addSetValidityMethod(context) {                                                                               // 25843\n  var ctrl = context.ctrl,                                                                                             // 25844\n      $element = context.$element,                                                                                     // 25845\n      classCache = {},                                                                                                 // 25846\n      set = context.set,                                                                                               // 25847\n      unset = context.unset,                                                                                           // 25848\n      $animate = context.$animate;                                                                                     // 25849\n                                                                                                                       // 25850\n  classCache[INVALID_CLASS] = !(classCache[VALID_CLASS] = $element.hasClass(VALID_CLASS));                             // 25851\n                                                                                                                       // 25852\n  ctrl.$setValidity = setValidity;                                                                                     // 25853\n                                                                                                                       // 25854\n  function setValidity(validationErrorKey, state, controller) {                                                        // 25855\n    if (isUndefined(state)) {                                                                                          // 25856\n      createAndSet('$pending', validationErrorKey, controller);                                                        // 25857\n    } else {                                                                                                           // 25858\n      unsetAndCleanup('$pending', validationErrorKey, controller);                                                     // 25859\n    }                                                                                                                  // 25860\n    if (!isBoolean(state)) {                                                                                           // 25861\n      unset(ctrl.$error, validationErrorKey, controller);                                                              // 25862\n      unset(ctrl.$$success, validationErrorKey, controller);                                                           // 25863\n    } else {                                                                                                           // 25864\n      if (state) {                                                                                                     // 25865\n        unset(ctrl.$error, validationErrorKey, controller);                                                            // 25866\n        set(ctrl.$$success, validationErrorKey, controller);                                                           // 25867\n      } else {                                                                                                         // 25868\n        set(ctrl.$error, validationErrorKey, controller);                                                              // 25869\n        unset(ctrl.$$success, validationErrorKey, controller);                                                         // 25870\n      }                                                                                                                // 25871\n    }                                                                                                                  // 25872\n    if (ctrl.$pending) {                                                                                               // 25873\n      cachedToggleClass(PENDING_CLASS, true);                                                                          // 25874\n      ctrl.$valid = ctrl.$invalid = undefined;                                                                         // 25875\n      toggleValidationCss('', null);                                                                                   // 25876\n    } else {                                                                                                           // 25877\n      cachedToggleClass(PENDING_CLASS, false);                                                                         // 25878\n      ctrl.$valid = isObjectEmpty(ctrl.$error);                                                                        // 25879\n      ctrl.$invalid = !ctrl.$valid;                                                                                    // 25880\n      toggleValidationCss('', ctrl.$valid);                                                                            // 25881\n    }                                                                                                                  // 25882\n                                                                                                                       // 25883\n    // re-read the state as the set/unset methods could have                                                           // 25884\n    // combined state in ctrl.$error[validationError] (used for forms),                                                // 25885\n    // where setting/unsetting only increments/decrements the value,                                                   // 25886\n    // and does not replace it.                                                                                        // 25887\n    var combinedState;                                                                                                 // 25888\n    if (ctrl.$pending && ctrl.$pending[validationErrorKey]) {                                                          // 25889\n      combinedState = undefined;                                                                                       // 25890\n    } else if (ctrl.$error[validationErrorKey]) {                                                                      // 25891\n      combinedState = false;                                                                                           // 25892\n    } else if (ctrl.$$success[validationErrorKey]) {                                                                   // 25893\n      combinedState = true;                                                                                            // 25894\n    } else {                                                                                                           // 25895\n      combinedState = null;                                                                                            // 25896\n    }                                                                                                                  // 25897\n                                                                                                                       // 25898\n    toggleValidationCss(validationErrorKey, combinedState);                                                            // 25899\n    ctrl.$$parentForm.$setValidity(validationErrorKey, combinedState, ctrl);                                           // 25900\n  }                                                                                                                    // 25901\n                                                                                                                       // 25902\n  function createAndSet(name, value, controller) {                                                                     // 25903\n    if (!ctrl[name]) {                                                                                                 // 25904\n      ctrl[name] = {};                                                                                                 // 25905\n    }                                                                                                                  // 25906\n    set(ctrl[name], value, controller);                                                                                // 25907\n  }                                                                                                                    // 25908\n                                                                                                                       // 25909\n  function unsetAndCleanup(name, value, controller) {                                                                  // 25910\n    if (ctrl[name]) {                                                                                                  // 25911\n      unset(ctrl[name], value, controller);                                                                            // 25912\n    }                                                                                                                  // 25913\n    if (isObjectEmpty(ctrl[name])) {                                                                                   // 25914\n      ctrl[name] = undefined;                                                                                          // 25915\n    }                                                                                                                  // 25916\n  }                                                                                                                    // 25917\n                                                                                                                       // 25918\n  function cachedToggleClass(className, switchValue) {                                                                 // 25919\n    if (switchValue && !classCache[className]) {                                                                       // 25920\n      $animate.addClass($element, className);                                                                          // 25921\n      classCache[className] = true;                                                                                    // 25922\n    } else if (!switchValue && classCache[className]) {                                                                // 25923\n      $animate.removeClass($element, className);                                                                       // 25924\n      classCache[className] = false;                                                                                   // 25925\n    }                                                                                                                  // 25926\n  }                                                                                                                    // 25927\n                                                                                                                       // 25928\n  function toggleValidationCss(validationErrorKey, isValid) {                                                          // 25929\n    validationErrorKey = validationErrorKey ? '-' + snake_case(validationErrorKey, '-') : '';                          // 25930\n                                                                                                                       // 25931\n    cachedToggleClass(VALID_CLASS + validationErrorKey, isValid === true);                                             // 25932\n    cachedToggleClass(INVALID_CLASS + validationErrorKey, isValid === false);                                          // 25933\n  }                                                                                                                    // 25934\n}                                                                                                                      // 25935\n                                                                                                                       // 25936\nfunction isObjectEmpty(obj) {                                                                                          // 25937\n  if (obj) {                                                                                                           // 25938\n    for (var prop in obj) {                                                                                            // 25939\n      if (obj.hasOwnProperty(prop)) {                                                                                  // 25940\n        return false;                                                                                                  // 25941\n      }                                                                                                                // 25942\n    }                                                                                                                  // 25943\n  }                                                                                                                    // 25944\n  return true;                                                                                                         // 25945\n}                                                                                                                      // 25946\n                                                                                                                       // 25947\n/**                                                                                                                    // 25948\n * @ngdoc directive                                                                                                    // 25949\n * @name ngNonBindable                                                                                                 // 25950\n * @restrict AC                                                                                                        // 25951\n * @priority 1000                                                                                                      // 25952\n *                                                                                                                     // 25953\n * @description                                                                                                        // 25954\n * The `ngNonBindable` directive tells Angular not to compile or bind the contents of the current                      // 25955\n * DOM element. This is useful if the element contains what appears to be Angular directives and                       // 25956\n * bindings but which should be ignored by Angular. This could be the case if you have a site that                     // 25957\n * displays snippets of code, for instance.                                                                            // 25958\n *                                                                                                                     // 25959\n * @element ANY                                                                                                        // 25960\n *                                                                                                                     // 25961\n * @example                                                                                                            // 25962\n * In this example there are two locations where a simple interpolation binding (`{{}}`) is present,                   // 25963\n * but the one wrapped in `ngNonBindable` is left alone.                                                               // 25964\n *                                                                                                                     // 25965\n * @example                                                                                                            // 25966\n    <example>                                                                                                          // 25967\n      <file name=\"index.html\">                                                                                         // 25968\n        <div>Normal: {{1 + 2}}</div>                                                                                   // 25969\n        <div ng-non-bindable>Ignored: {{1 + 2}}</div>                                                                  // 25970\n      </file>                                                                                                          // 25971\n      <file name=\"protractor.js\" type=\"protractor\">                                                                    // 25972\n       it('should check ng-non-bindable', function() {                                                                 // 25973\n         expect(element(by.binding('1 + 2')).getText()).toContain('3');                                                // 25974\n         expect(element.all(by.css('div')).last().getText()).toMatch(/1 \\+ 2/);                                        // 25975\n       });                                                                                                             // 25976\n      </file>                                                                                                          // 25977\n    </example>                                                                                                         // 25978\n */                                                                                                                    // 25979\nvar ngNonBindableDirective = ngDirective({ terminal: true, priority: 1000 });                                          // 25980\n                                                                                                                       // 25981\n/* global jqLiteRemove */                                                                                              // 25982\n                                                                                                                       // 25983\nvar ngOptionsMinErr = minErr('ngOptions');                                                                             // 25984\n                                                                                                                       // 25985\n/**                                                                                                                    // 25986\n * @ngdoc directive                                                                                                    // 25987\n * @name ngOptions                                                                                                     // 25988\n * @restrict A                                                                                                         // 25989\n *                                                                                                                     // 25990\n * @description                                                                                                        // 25991\n *                                                                                                                     // 25992\n * The `ngOptions` attribute can be used to dynamically generate a list of `<option>`                                  // 25993\n * elements for the `<select>` element using the array or object obtained by evaluating the                            // 25994\n * `ngOptions` comprehension expression.                                                                               // 25995\n *                                                                                                                     // 25996\n * In many cases, `ngRepeat` can be used on `<option>` elements instead of `ngOptions` to achieve a                    // 25997\n * similar result. However, `ngOptions` provides some benefits such as reducing memory and                             // 25998\n * increasing speed by not creating a new scope for each repeated instance, as well as providing                       // 25999\n * more flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the                    // 26000\n * comprehension expression. `ngOptions` should be used when the `<select>` model needs to be bound                    // 26001\n *  to a non-string value. This is because an option element can only be bound to string values at                     // 26002\n * present.                                                                                                            // 26003\n *                                                                                                                     // 26004\n * When an item in the `<select>` menu is selected, the array element or object property                               // 26005\n * represented by the selected option will be bound to the model identified by the `ngModel`                           // 26006\n * directive.                                                                                                          // 26007\n *                                                                                                                     // 26008\n * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can                      // 26009\n * be nested into the `<select>` element. This element will then represent the `null` or \"not selected\"                // 26010\n * option. See example below for demonstration.                                                                        // 26011\n *                                                                                                                     // 26012\n * ## Complex Models (objects or collections)                                                                          // 26013\n *                                                                                                                     // 26014\n * **Note:** By default, `ngModel` watches the model by reference, not value. This is important when                   // 26015\n * binding any input directive to a model that is an object or a collection.                                           // 26016\n *                                                                                                                     // 26017\n * Since this is a common situation for `ngOptions` the directive additionally watches the model using                 // 26018\n * `$watchCollection` when the select has the `multiple` attribute or when there is a `track by` clause in             // 26019\n * the options expression. This allows ngOptions to trigger a re-rendering of the options even if the actual           // 26020\n * object/collection has not changed identity but only a property on the object or an item in the collection           // 26021\n * changes.                                                                                                            // 26022\n *                                                                                                                     // 26023\n * Note that `$watchCollection` does a shallow comparison of the properties of the object (or the items in the collection\n * if the model is an array). This means that changing a property deeper inside the object/collection that the         // 26025\n * first level will not trigger a re-rendering.                                                                        // 26026\n *                                                                                                                     // 26027\n *                                                                                                                     // 26028\n * ## `select` **`as`**                                                                                                // 26029\n *                                                                                                                     // 26030\n * Using `select` **`as`** will bind the result of the `select` expression to the model, but                           // 26031\n * the value of the `<select>` and `<option>` html elements will be either the index (for array data sources)          // 26032\n * or property name (for object data sources) of the value within the collection. If a **`track by`** expression       // 26033\n * is used, the result of that expression will be set as the value of the `option` and `select` elements.              // 26034\n *                                                                                                                     // 26035\n *                                                                                                                     // 26036\n * ### `select` **`as`** and **`track by`**                                                                            // 26037\n *                                                                                                                     // 26038\n * <div class=\"alert alert-warning\">                                                                                   // 26039\n * Do not use `select` **`as`** and **`track by`** in the same expression. They are not designed to work together.     // 26040\n * </div>                                                                                                              // 26041\n *                                                                                                                     // 26042\n * Consider the following example:                                                                                     // 26043\n *                                                                                                                     // 26044\n * ```html                                                                                                             // 26045\n * <select ng-options=\"item.subItem as item.label for item in values track by item.id\" ng-model=\"selected\"></select>   // 26046\n * ```                                                                                                                 // 26047\n *                                                                                                                     // 26048\n * ```js                                                                                                               // 26049\n * $scope.values = [{                                                                                                  // 26050\n *   id: 1,                                                                                                            // 26051\n *   label: 'aLabel',                                                                                                  // 26052\n *   subItem: { name: 'aSubItem' }                                                                                     // 26053\n * }, {                                                                                                                // 26054\n *   id: 2,                                                                                                            // 26055\n *   label: 'bLabel',                                                                                                  // 26056\n *   subItem: { name: 'bSubItem' }                                                                                     // 26057\n * }];                                                                                                                 // 26058\n *                                                                                                                     // 26059\n * $scope.selected = { name: 'aSubItem' };                                                                             // 26060\n * ```                                                                                                                 // 26061\n *                                                                                                                     // 26062\n * With the purpose of preserving the selection, the **`track by`** expression is always applied to the element        // 26063\n * of the data source (to `item` in this example). To calculate whether an element is selected, we do the              // 26064\n * following:                                                                                                          // 26065\n *                                                                                                                     // 26066\n * 1. Apply **`track by`** to the elements in the array. In the example: `[1, 2]`                                      // 26067\n * 2. Apply **`track by`** to the already selected value in `ngModel`.                                                 // 26068\n *    In the example: this is not possible as **`track by`** refers to `item.id`, but the selected                     // 26069\n *    value from `ngModel` is `{name: 'aSubItem'}`, so the **`track by`** expression is applied to                     // 26070\n *    a wrong object, the selected element can't be found, `<select>` is always reset to the \"not                      // 26071\n *    selected\" option.                                                                                                // 26072\n *                                                                                                                     // 26073\n *                                                                                                                     // 26074\n * @param {string} ngModel Assignable angular expression to data-bind to.                                              // 26075\n * @param {string=} name Property name of the form under which the control is published.                               // 26076\n * @param {string=} required The control is considered valid only if value is entered.                                 // 26077\n * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                       // 26078\n *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                        // 26079\n *    `required` when you want to data-bind to the `required` attribute.                                               // 26080\n * @param {comprehension_expression=} ngOptions in one of the following forms:                                         // 26081\n *                                                                                                                     // 26082\n *   * for array data sources:                                                                                         // 26083\n *     * `label` **`for`** `value` **`in`** `array`                                                                    // 26084\n *     * `select` **`as`** `label` **`for`** `value` **`in`** `array`                                                  // 26085\n *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array`                                             // 26086\n *     * `label` **`disable when`** `disable` **`for`** `value` **`in`** `array`                                       // 26087\n *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`                  // 26088\n *     * `label` **`disable when`** `disable` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`            // 26089\n *     * `label` **`for`** `value` **`in`** `array` | orderBy:`orderexpr` **`track by`** `trackexpr`                   // 26090\n *        (for including a filter with `track by`)                                                                     // 26091\n *   * for object data sources:                                                                                        // 26092\n *     * `label` **`for (`**`key` **`,`** `value`**`) in`** `object`                                                   // 26093\n *     * `select` **`as`** `label` **`for (`**`key` **`,`** `value`**`) in`** `object`                                 // 26094\n *     * `label` **`group by`** `group` **`for (`**`key`**`,`** `value`**`) in`** `object`                             // 26095\n *     * `label` **`disable when`** `disable` **`for (`**`key`**`,`** `value`**`) in`** `object`                       // 26096\n *     * `select` **`as`** `label` **`group by`** `group`                                                              // 26097\n *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`                                                        // 26098\n *     * `select` **`as`** `label` **`disable when`** `disable`                                                        // 26099\n *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`                                                        // 26100\n *                                                                                                                     // 26101\n * Where:                                                                                                              // 26102\n *                                                                                                                     // 26103\n *   * `array` / `object`: an expression which evaluates to an array / object to iterate over.                         // 26104\n *   * `value`: local variable which will refer to each item in the `array` or each property value                     // 26105\n *      of `object` during iteration.                                                                                  // 26106\n *   * `key`: local variable which will refer to a property name in `object` during iteration.                         // 26107\n *   * `label`: The result of this expression will be the label for `<option>` element. The                            // 26108\n *     `expression` will most likely refer to the `value` variable (e.g. `value.propertyName`).                        // 26109\n *   * `select`: The result of this expression will be bound to the model of the parent `<select>`                     // 26110\n *      element. If not specified, `select` expression will default to `value`.                                        // 26111\n *   * `group`: The result of this expression will be used to group options using the `<optgroup>`                     // 26112\n *      DOM element.                                                                                                   // 26113\n *   * `disable`: The result of this expression will be used to disable the rendered `<option>`                        // 26114\n *      element. Return `true` to disable.                                                                             // 26115\n *   * `trackexpr`: Used when working with an array of objects. The result of this expression will be                  // 26116\n *      used to identify the objects in the array. The `trackexpr` will most likely refer to the                       // 26117\n *     `value` variable (e.g. `value.propertyName`). With this the selection is preserved                              // 26118\n *      even when the options are recreated (e.g. reloaded from the server).                                           // 26119\n *                                                                                                                     // 26120\n * @example                                                                                                            // 26121\n    <example module=\"selectExample\">                                                                                   // 26122\n      <file name=\"index.html\">                                                                                         // 26123\n        <script>                                                                                                       // 26124\n        angular.module('selectExample', [])                                                                            // 26125\n          .controller('ExampleController', ['$scope', function($scope) {                                               // 26126\n            $scope.colors = [                                                                                          // 26127\n              {name:'black', shade:'dark'},                                                                            // 26128\n              {name:'white', shade:'light', notAnOption: true},                                                        // 26129\n              {name:'red', shade:'dark'},                                                                              // 26130\n              {name:'blue', shade:'dark', notAnOption: true},                                                          // 26131\n              {name:'yellow', shade:'light', notAnOption: false}                                                       // 26132\n            ];                                                                                                         // 26133\n            $scope.myColor = $scope.colors[2]; // red                                                                  // 26134\n          }]);                                                                                                         // 26135\n        </script>                                                                                                      // 26136\n        <div ng-controller=\"ExampleController\">                                                                        // 26137\n          <ul>                                                                                                         // 26138\n            <li ng-repeat=\"color in colors\">                                                                           // 26139\n              <label>Name: <input ng-model=\"color.name\"></label>                                                       // 26140\n              <label><input type=\"checkbox\" ng-model=\"color.notAnOption\"> Disabled?</label>                            // 26141\n              <button ng-click=\"colors.splice($index, 1)\" aria-label=\"Remove\">X</button>                               // 26142\n            </li>                                                                                                      // 26143\n            <li>                                                                                                       // 26144\n              <button ng-click=\"colors.push({})\">add</button>                                                          // 26145\n            </li>                                                                                                      // 26146\n          </ul>                                                                                                        // 26147\n          <hr/>                                                                                                        // 26148\n          <label>Color (null not allowed):                                                                             // 26149\n            <select ng-model=\"myColor\" ng-options=\"color.name for color in colors\"></select>                           // 26150\n          </label><br/>                                                                                                // 26151\n          <label>Color (null allowed):                                                                                 // 26152\n          <span  class=\"nullable\">                                                                                     // 26153\n            <select ng-model=\"myColor\" ng-options=\"color.name for color in colors\">                                    // 26154\n              <option value=\"\">-- choose color --</option>                                                             // 26155\n            </select>                                                                                                  // 26156\n          </span></label><br/>                                                                                         // 26157\n                                                                                                                       // 26158\n          <label>Color grouped by shade:                                                                               // 26159\n            <select ng-model=\"myColor\" ng-options=\"color.name group by color.shade for color in colors\">               // 26160\n            </select>                                                                                                  // 26161\n          </label><br/>                                                                                                // 26162\n                                                                                                                       // 26163\n          <label>Color grouped by shade, with some disabled:                                                           // 26164\n            <select ng-model=\"myColor\"                                                                                 // 26165\n                  ng-options=\"color.name group by color.shade disable when color.notAnOption for color in colors\">     // 26166\n            </select>                                                                                                  // 26167\n          </label><br/>                                                                                                // 26168\n                                                                                                                       // 26169\n                                                                                                                       // 26170\n                                                                                                                       // 26171\n          Select <button ng-click=\"myColor = { name:'not in list', shade: 'other' }\">bogus</button>.                   // 26172\n          <br/>                                                                                                        // 26173\n          <hr/>                                                                                                        // 26174\n          Currently selected: {{ {selected_color:myColor} }}                                                           // 26175\n          <div style=\"border:solid 1px black; height:20px\"                                                             // 26176\n               ng-style=\"{'background-color':myColor.name}\">                                                           // 26177\n          </div>                                                                                                       // 26178\n        </div>                                                                                                         // 26179\n      </file>                                                                                                          // 26180\n      <file name=\"protractor.js\" type=\"protractor\">                                                                    // 26181\n         it('should check ng-options', function() {                                                                    // 26182\n           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('red');                           // 26183\n           element.all(by.model('myColor')).first().click();                                                           // 26184\n           element.all(by.css('select[ng-model=\"myColor\"] option')).first().click();                                   // 26185\n           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('black');                         // 26186\n           element(by.css('.nullable select[ng-model=\"myColor\"]')).click();                                            // 26187\n           element.all(by.css('.nullable select[ng-model=\"myColor\"] option')).first().click();                         // 26188\n           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('null');                          // 26189\n         });                                                                                                           // 26190\n      </file>                                                                                                          // 26191\n    </example>                                                                                                         // 26192\n */                                                                                                                    // 26193\n                                                                                                                       // 26194\n// jshint maxlen: false                                                                                                // 26195\n//                     //00001111111111000000000002222222222000000000000000000000333333333300000000000000000000000004444444444400000000000005555555555555550000000006666666666666660000000777777777777777000000000000000888888888800000000000000000009999999999\nvar NG_OPTIONS_REGEXP = /^\\s*([\\s\\S]+?)(?:\\s+as\\s+([\\s\\S]+?))?(?:\\s+group\\s+by\\s+([\\s\\S]+?))?(?:\\s+disable\\s+when\\s+([\\s\\S]+?))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+([\\s\\S]+?)(?:\\s+track\\s+by\\s+([\\s\\S]+?))?$/;\n                        // 1: value expression (valueFn)                                                               // 26198\n                        // 2: label expression (displayFn)                                                             // 26199\n                        // 3: group by expression (groupByFn)                                                          // 26200\n                        // 4: disable when expression (disableWhenFn)                                                  // 26201\n                        // 5: array item variable name                                                                 // 26202\n                        // 6: object item key variable name                                                            // 26203\n                        // 7: object item value variable name                                                          // 26204\n                        // 8: collection expression                                                                    // 26205\n                        // 9: track by expression                                                                      // 26206\n// jshint maxlen: 100                                                                                                  // 26207\n                                                                                                                       // 26208\n                                                                                                                       // 26209\nvar ngOptionsDirective = ['$compile', '$parse', function($compile, $parse) {                                           // 26210\n                                                                                                                       // 26211\n  function parseOptionsExpression(optionsExp, selectElement, scope) {                                                  // 26212\n                                                                                                                       // 26213\n    var match = optionsExp.match(NG_OPTIONS_REGEXP);                                                                   // 26214\n    if (!(match)) {                                                                                                    // 26215\n      throw ngOptionsMinErr('iexp',                                                                                    // 26216\n        \"Expected expression in form of \" +                                                                            // 26217\n        \"'_select_ (as _label_)? for (_key_,)?_value_ in _collection_'\" +                                              // 26218\n        \" but got '{0}'. Element: {1}\",                                                                                // 26219\n        optionsExp, startingTag(selectElement));                                                                       // 26220\n    }                                                                                                                  // 26221\n                                                                                                                       // 26222\n    // Extract the parts from the ngOptions expression                                                                 // 26223\n                                                                                                                       // 26224\n    // The variable name for the value of the item in the collection                                                   // 26225\n    var valueName = match[5] || match[7];                                                                              // 26226\n    // The variable name for the key of the item in the collection                                                     // 26227\n    var keyName = match[6];                                                                                            // 26228\n                                                                                                                       // 26229\n    // An expression that generates the viewValue for an option if there is a label expression                         // 26230\n    var selectAs = / as /.test(match[0]) && match[1];                                                                  // 26231\n    // An expression that is used to track the id of each object in the options collection                             // 26232\n    var trackBy = match[9];                                                                                            // 26233\n    // An expression that generates the viewValue for an option if there is no label expression                        // 26234\n    var valueFn = $parse(match[2] ? match[1] : valueName);                                                             // 26235\n    var selectAsFn = selectAs && $parse(selectAs);                                                                     // 26236\n    var viewValueFn = selectAsFn || valueFn;                                                                           // 26237\n    var trackByFn = trackBy && $parse(trackBy);                                                                        // 26238\n                                                                                                                       // 26239\n    // Get the value by which we are going to track the option                                                         // 26240\n    // if we have a trackFn then use that (passing scope and locals)                                                   // 26241\n    // otherwise just hash the given viewValue                                                                         // 26242\n    var getTrackByValueFn = trackBy ?                                                                                  // 26243\n                              function(value, locals) { return trackByFn(scope, locals); } :                           // 26244\n                              function getHashOfValue(value) { return hashKey(value); };                               // 26245\n    var getTrackByValue = function(value, key) {                                                                       // 26246\n      return getTrackByValueFn(value, getLocals(value, key));                                                          // 26247\n    };                                                                                                                 // 26248\n                                                                                                                       // 26249\n    var displayFn = $parse(match[2] || match[1]);                                                                      // 26250\n    var groupByFn = $parse(match[3] || '');                                                                            // 26251\n    var disableWhenFn = $parse(match[4] || '');                                                                        // 26252\n    var valuesFn = $parse(match[8]);                                                                                   // 26253\n                                                                                                                       // 26254\n    var locals = {};                                                                                                   // 26255\n    var getLocals = keyName ? function(value, key) {                                                                   // 26256\n      locals[keyName] = key;                                                                                           // 26257\n      locals[valueName] = value;                                                                                       // 26258\n      return locals;                                                                                                   // 26259\n    } : function(value) {                                                                                              // 26260\n      locals[valueName] = value;                                                                                       // 26261\n      return locals;                                                                                                   // 26262\n    };                                                                                                                 // 26263\n                                                                                                                       // 26264\n                                                                                                                       // 26265\n    function Option(selectValue, viewValue, label, group, disabled) {                                                  // 26266\n      this.selectValue = selectValue;                                                                                  // 26267\n      this.viewValue = viewValue;                                                                                      // 26268\n      this.label = label;                                                                                              // 26269\n      this.group = group;                                                                                              // 26270\n      this.disabled = disabled;                                                                                        // 26271\n    }                                                                                                                  // 26272\n                                                                                                                       // 26273\n    function getOptionValuesKeys(optionValues) {                                                                       // 26274\n      var optionValuesKeys;                                                                                            // 26275\n                                                                                                                       // 26276\n      if (!keyName && isArrayLike(optionValues)) {                                                                     // 26277\n        optionValuesKeys = optionValues;                                                                               // 26278\n      } else {                                                                                                         // 26279\n        // if object, extract keys, in enumeration order, unsorted                                                     // 26280\n        optionValuesKeys = [];                                                                                         // 26281\n        for (var itemKey in optionValues) {                                                                            // 26282\n          if (optionValues.hasOwnProperty(itemKey) && itemKey.charAt(0) !== '$') {                                     // 26283\n            optionValuesKeys.push(itemKey);                                                                            // 26284\n          }                                                                                                            // 26285\n        }                                                                                                              // 26286\n      }                                                                                                                // 26287\n      return optionValuesKeys;                                                                                         // 26288\n    }                                                                                                                  // 26289\n                                                                                                                       // 26290\n    return {                                                                                                           // 26291\n      trackBy: trackBy,                                                                                                // 26292\n      getTrackByValue: getTrackByValue,                                                                                // 26293\n      getWatchables: $parse(valuesFn, function(optionValues) {                                                         // 26294\n        // Create a collection of things that we would like to watch (watchedArray)                                    // 26295\n        // so that they can all be watched using a single $watchCollection                                             // 26296\n        // that only runs the handler once if anything changes                                                         // 26297\n        var watchedArray = [];                                                                                         // 26298\n        optionValues = optionValues || [];                                                                             // 26299\n                                                                                                                       // 26300\n        var optionValuesKeys = getOptionValuesKeys(optionValues);                                                      // 26301\n        var optionValuesLength = optionValuesKeys.length;                                                              // 26302\n        for (var index = 0; index < optionValuesLength; index++) {                                                     // 26303\n          var key = (optionValues === optionValuesKeys) ? index : optionValuesKeys[index];                             // 26304\n          var value = optionValues[key];                                                                               // 26305\n                                                                                                                       // 26306\n          var locals = getLocals(optionValues[key], key);                                                              // 26307\n          var selectValue = getTrackByValueFn(optionValues[key], locals);                                              // 26308\n          watchedArray.push(selectValue);                                                                              // 26309\n                                                                                                                       // 26310\n          // Only need to watch the displayFn if there is a specific label expression                                  // 26311\n          if (match[2] || match[1]) {                                                                                  // 26312\n            var label = displayFn(scope, locals);                                                                      // 26313\n            watchedArray.push(label);                                                                                  // 26314\n          }                                                                                                            // 26315\n                                                                                                                       // 26316\n          // Only need to watch the disableWhenFn if there is a specific disable expression                            // 26317\n          if (match[4]) {                                                                                              // 26318\n            var disableWhen = disableWhenFn(scope, locals);                                                            // 26319\n            watchedArray.push(disableWhen);                                                                            // 26320\n          }                                                                                                            // 26321\n        }                                                                                                              // 26322\n        return watchedArray;                                                                                           // 26323\n      }),                                                                                                              // 26324\n                                                                                                                       // 26325\n      getOptions: function() {                                                                                         // 26326\n                                                                                                                       // 26327\n        var optionItems = [];                                                                                          // 26328\n        var selectValueMap = {};                                                                                       // 26329\n                                                                                                                       // 26330\n        // The option values were already computed in the `getWatchables` fn,                                          // 26331\n        // which must have been called to trigger `getOptions`                                                         // 26332\n        var optionValues = valuesFn(scope) || [];                                                                      // 26333\n        var optionValuesKeys = getOptionValuesKeys(optionValues);                                                      // 26334\n        var optionValuesLength = optionValuesKeys.length;                                                              // 26335\n                                                                                                                       // 26336\n        for (var index = 0; index < optionValuesLength; index++) {                                                     // 26337\n          var key = (optionValues === optionValuesKeys) ? index : optionValuesKeys[index];                             // 26338\n          var value = optionValues[key];                                                                               // 26339\n          var locals = getLocals(value, key);                                                                          // 26340\n          var viewValue = viewValueFn(scope, locals);                                                                  // 26341\n          var selectValue = getTrackByValueFn(viewValue, locals);                                                      // 26342\n          var label = displayFn(scope, locals);                                                                        // 26343\n          var group = groupByFn(scope, locals);                                                                        // 26344\n          var disabled = disableWhenFn(scope, locals);                                                                 // 26345\n          var optionItem = new Option(selectValue, viewValue, label, group, disabled);                                 // 26346\n                                                                                                                       // 26347\n          optionItems.push(optionItem);                                                                                // 26348\n          selectValueMap[selectValue] = optionItem;                                                                    // 26349\n        }                                                                                                              // 26350\n                                                                                                                       // 26351\n        return {                                                                                                       // 26352\n          items: optionItems,                                                                                          // 26353\n          selectValueMap: selectValueMap,                                                                              // 26354\n          getOptionFromViewValue: function(value) {                                                                    // 26355\n            return selectValueMap[getTrackByValue(value)];                                                             // 26356\n          },                                                                                                           // 26357\n          getViewValueFromOption: function(option) {                                                                   // 26358\n            // If the viewValue could be an object that may be mutated by the application,                             // 26359\n            // we need to make a copy and not return the reference to the value on the option.                         // 26360\n            return trackBy ? angular.copy(option.viewValue) : option.viewValue;                                        // 26361\n          }                                                                                                            // 26362\n        };                                                                                                             // 26363\n      }                                                                                                                // 26364\n    };                                                                                                                 // 26365\n  }                                                                                                                    // 26366\n                                                                                                                       // 26367\n                                                                                                                       // 26368\n  // we can't just jqLite('<option>') since jqLite is not smart enough                                                 // 26369\n  // to create it in <select> and IE barfs otherwise.                                                                  // 26370\n  var optionTemplate = document.createElement('option'),                                                               // 26371\n      optGroupTemplate = document.createElement('optgroup');                                                           // 26372\n                                                                                                                       // 26373\n  return {                                                                                                             // 26374\n    restrict: 'A',                                                                                                     // 26375\n    terminal: true,                                                                                                    // 26376\n    require: ['select', '?ngModel'],                                                                                   // 26377\n    link: function(scope, selectElement, attr, ctrls) {                                                                // 26378\n                                                                                                                       // 26379\n      // if ngModel is not defined, we don't need to do anything                                                       // 26380\n      var ngModelCtrl = ctrls[1];                                                                                      // 26381\n      if (!ngModelCtrl) return;                                                                                        // 26382\n                                                                                                                       // 26383\n      var selectCtrl = ctrls[0];                                                                                       // 26384\n      var multiple = attr.multiple;                                                                                    // 26385\n                                                                                                                       // 26386\n      // The emptyOption allows the application developer to provide their own custom \"empty\"                          // 26387\n      // option when the viewValue does not match any of the option values.                                            // 26388\n      var emptyOption;                                                                                                 // 26389\n      for (var i = 0, children = selectElement.children(), ii = children.length; i < ii; i++) {                        // 26390\n        if (children[i].value === '') {                                                                                // 26391\n          emptyOption = children.eq(i);                                                                                // 26392\n          break;                                                                                                       // 26393\n        }                                                                                                              // 26394\n      }                                                                                                                // 26395\n                                                                                                                       // 26396\n      var providedEmptyOption = !!emptyOption;                                                                         // 26397\n                                                                                                                       // 26398\n      var unknownOption = jqLite(optionTemplate.cloneNode(false));                                                     // 26399\n      unknownOption.val('?');                                                                                          // 26400\n                                                                                                                       // 26401\n      var options;                                                                                                     // 26402\n      var ngOptions = parseOptionsExpression(attr.ngOptions, selectElement, scope);                                    // 26403\n                                                                                                                       // 26404\n                                                                                                                       // 26405\n      var renderEmptyOption = function() {                                                                             // 26406\n        if (!providedEmptyOption) {                                                                                    // 26407\n          selectElement.prepend(emptyOption);                                                                          // 26408\n        }                                                                                                              // 26409\n        selectElement.val('');                                                                                         // 26410\n        emptyOption.prop('selected', true); // needed for IE                                                           // 26411\n        emptyOption.attr('selected', true);                                                                            // 26412\n      };                                                                                                               // 26413\n                                                                                                                       // 26414\n      var removeEmptyOption = function() {                                                                             // 26415\n        if (!providedEmptyOption) {                                                                                    // 26416\n          emptyOption.remove();                                                                                        // 26417\n        }                                                                                                              // 26418\n      };                                                                                                               // 26419\n                                                                                                                       // 26420\n                                                                                                                       // 26421\n      var renderUnknownOption = function() {                                                                           // 26422\n        selectElement.prepend(unknownOption);                                                                          // 26423\n        selectElement.val('?');                                                                                        // 26424\n        unknownOption.prop('selected', true); // needed for IE                                                         // 26425\n        unknownOption.attr('selected', true);                                                                          // 26426\n      };                                                                                                               // 26427\n                                                                                                                       // 26428\n      var removeUnknownOption = function() {                                                                           // 26429\n        unknownOption.remove();                                                                                        // 26430\n      };                                                                                                               // 26431\n                                                                                                                       // 26432\n                                                                                                                       // 26433\n      // Update the controller methods for multiple selectable options                                                 // 26434\n      if (!multiple) {                                                                                                 // 26435\n                                                                                                                       // 26436\n        selectCtrl.writeValue = function writeNgOptionsValue(value) {                                                  // 26437\n          var option = options.getOptionFromViewValue(value);                                                          // 26438\n                                                                                                                       // 26439\n          if (option && !option.disabled) {                                                                            // 26440\n            if (selectElement[0].value !== option.selectValue) {                                                       // 26441\n              removeUnknownOption();                                                                                   // 26442\n              removeEmptyOption();                                                                                     // 26443\n                                                                                                                       // 26444\n              selectElement[0].value = option.selectValue;                                                             // 26445\n              option.element.selected = true;                                                                          // 26446\n              option.element.setAttribute('selected', 'selected');                                                     // 26447\n            }                                                                                                          // 26448\n          } else {                                                                                                     // 26449\n            if (value === null || providedEmptyOption) {                                                               // 26450\n              removeUnknownOption();                                                                                   // 26451\n              renderEmptyOption();                                                                                     // 26452\n            } else {                                                                                                   // 26453\n              removeEmptyOption();                                                                                     // 26454\n              renderUnknownOption();                                                                                   // 26455\n            }                                                                                                          // 26456\n          }                                                                                                            // 26457\n        };                                                                                                             // 26458\n                                                                                                                       // 26459\n        selectCtrl.readValue = function readNgOptionsValue() {                                                         // 26460\n                                                                                                                       // 26461\n          var selectedOption = options.selectValueMap[selectElement.val()];                                            // 26462\n                                                                                                                       // 26463\n          if (selectedOption && !selectedOption.disabled) {                                                            // 26464\n            removeEmptyOption();                                                                                       // 26465\n            removeUnknownOption();                                                                                     // 26466\n            return options.getViewValueFromOption(selectedOption);                                                     // 26467\n          }                                                                                                            // 26468\n          return null;                                                                                                 // 26469\n        };                                                                                                             // 26470\n                                                                                                                       // 26471\n        // If we are using `track by` then we must watch the tracked value on the model                                // 26472\n        // since ngModel only watches for object identity change                                                       // 26473\n        if (ngOptions.trackBy) {                                                                                       // 26474\n          scope.$watch(                                                                                                // 26475\n            function() { return ngOptions.getTrackByValue(ngModelCtrl.$viewValue); },                                  // 26476\n            function() { ngModelCtrl.$render(); }                                                                      // 26477\n          );                                                                                                           // 26478\n        }                                                                                                              // 26479\n                                                                                                                       // 26480\n      } else {                                                                                                         // 26481\n                                                                                                                       // 26482\n        ngModelCtrl.$isEmpty = function(value) {                                                                       // 26483\n          return !value || value.length === 0;                                                                         // 26484\n        };                                                                                                             // 26485\n                                                                                                                       // 26486\n                                                                                                                       // 26487\n        selectCtrl.writeValue = function writeNgOptionsMultiple(value) {                                               // 26488\n          options.items.forEach(function(option) {                                                                     // 26489\n            option.element.selected = false;                                                                           // 26490\n          });                                                                                                          // 26491\n                                                                                                                       // 26492\n          if (value) {                                                                                                 // 26493\n            value.forEach(function(item) {                                                                             // 26494\n              var option = options.getOptionFromViewValue(item);                                                       // 26495\n              if (option && !option.disabled) option.element.selected = true;                                          // 26496\n            });                                                                                                        // 26497\n          }                                                                                                            // 26498\n        };                                                                                                             // 26499\n                                                                                                                       // 26500\n                                                                                                                       // 26501\n        selectCtrl.readValue = function readNgOptionsMultiple() {                                                      // 26502\n          var selectedValues = selectElement.val() || [],                                                              // 26503\n              selections = [];                                                                                         // 26504\n                                                                                                                       // 26505\n          forEach(selectedValues, function(value) {                                                                    // 26506\n            var option = options.selectValueMap[value];                                                                // 26507\n            if (option && !option.disabled) selections.push(options.getViewValueFromOption(option));                   // 26508\n          });                                                                                                          // 26509\n                                                                                                                       // 26510\n          return selections;                                                                                           // 26511\n        };                                                                                                             // 26512\n                                                                                                                       // 26513\n        // If we are using `track by` then we must watch these tracked values on the model                             // 26514\n        // since ngModel only watches for object identity change                                                       // 26515\n        if (ngOptions.trackBy) {                                                                                       // 26516\n                                                                                                                       // 26517\n          scope.$watchCollection(function() {                                                                          // 26518\n            if (isArray(ngModelCtrl.$viewValue)) {                                                                     // 26519\n              return ngModelCtrl.$viewValue.map(function(value) {                                                      // 26520\n                return ngOptions.getTrackByValue(value);                                                               // 26521\n              });                                                                                                      // 26522\n            }                                                                                                          // 26523\n          }, function() {                                                                                              // 26524\n            ngModelCtrl.$render();                                                                                     // 26525\n          });                                                                                                          // 26526\n                                                                                                                       // 26527\n        }                                                                                                              // 26528\n      }                                                                                                                // 26529\n                                                                                                                       // 26530\n                                                                                                                       // 26531\n      if (providedEmptyOption) {                                                                                       // 26532\n                                                                                                                       // 26533\n        // we need to remove it before calling selectElement.empty() because otherwise IE will                         // 26534\n        // remove the label from the element. wtf?                                                                     // 26535\n        emptyOption.remove();                                                                                          // 26536\n                                                                                                                       // 26537\n        // compile the element since there might be bindings in it                                                     // 26538\n        $compile(emptyOption)(scope);                                                                                  // 26539\n                                                                                                                       // 26540\n        // remove the class, which is added automatically because we recompile the element and it                      // 26541\n        // becomes the compilation root                                                                                // 26542\n        emptyOption.removeClass('ng-scope');                                                                           // 26543\n      } else {                                                                                                         // 26544\n        emptyOption = jqLite(optionTemplate.cloneNode(false));                                                         // 26545\n      }                                                                                                                // 26546\n                                                                                                                       // 26547\n      // We need to do this here to ensure that the options object is defined                                          // 26548\n      // when we first hit it in writeNgOptionsValue                                                                   // 26549\n      updateOptions();                                                                                                 // 26550\n                                                                                                                       // 26551\n      // We will re-render the option elements if the option values or labels change                                   // 26552\n      scope.$watchCollection(ngOptions.getWatchables, updateOptions);                                                  // 26553\n                                                                                                                       // 26554\n      // ------------------------------------------------------------------ //                                         // 26555\n                                                                                                                       // 26556\n                                                                                                                       // 26557\n      function updateOptionElement(option, element) {                                                                  // 26558\n        option.element = element;                                                                                      // 26559\n        element.disabled = option.disabled;                                                                            // 26560\n        // NOTE: The label must be set before the value, otherwise IE10/11/EDGE create unresponsive                    // 26561\n        // selects in certain circumstances when multiple selects are next to each other and display                   // 26562\n        // the option list in listbox style, i.e. the select is [multiple], or specifies a [size].                     // 26563\n        // See https://github.com/angular/angular.js/issues/11314 for more info.                                       // 26564\n        // This is unfortunately untestable with unit / e2e tests                                                      // 26565\n        if (option.label !== element.label) {                                                                          // 26566\n          element.label = option.label;                                                                                // 26567\n          element.textContent = option.label;                                                                          // 26568\n        }                                                                                                              // 26569\n        if (option.value !== element.value) element.value = option.selectValue;                                        // 26570\n      }                                                                                                                // 26571\n                                                                                                                       // 26572\n      function addOrReuseElement(parent, current, type, templateElement) {                                             // 26573\n        var element;                                                                                                   // 26574\n        // Check whether we can reuse the next element                                                                 // 26575\n        if (current && lowercase(current.nodeName) === type) {                                                         // 26576\n          // The next element is the right type so reuse it                                                            // 26577\n          element = current;                                                                                           // 26578\n        } else {                                                                                                       // 26579\n          // The next element is not the right type so create a new one                                                // 26580\n          element = templateElement.cloneNode(false);                                                                  // 26581\n          if (!current) {                                                                                              // 26582\n            // There are no more elements so just append it to the select                                              // 26583\n            parent.appendChild(element);                                                                               // 26584\n          } else {                                                                                                     // 26585\n            // The next element is not a group so insert the new one                                                   // 26586\n            parent.insertBefore(element, current);                                                                     // 26587\n          }                                                                                                            // 26588\n        }                                                                                                              // 26589\n        return element;                                                                                                // 26590\n      }                                                                                                                // 26591\n                                                                                                                       // 26592\n                                                                                                                       // 26593\n      function removeExcessElements(current) {                                                                         // 26594\n        var next;                                                                                                      // 26595\n        while (current) {                                                                                              // 26596\n          next = current.nextSibling;                                                                                  // 26597\n          jqLiteRemove(current);                                                                                       // 26598\n          current = next;                                                                                              // 26599\n        }                                                                                                              // 26600\n      }                                                                                                                // 26601\n                                                                                                                       // 26602\n                                                                                                                       // 26603\n      function skipEmptyAndUnknownOptions(current) {                                                                   // 26604\n        var emptyOption_ = emptyOption && emptyOption[0];                                                              // 26605\n        var unknownOption_ = unknownOption && unknownOption[0];                                                        // 26606\n                                                                                                                       // 26607\n        if (emptyOption_ || unknownOption_) {                                                                          // 26608\n          while (current &&                                                                                            // 26609\n                (current === emptyOption_ ||                                                                           // 26610\n                current === unknownOption_ ||                                                                          // 26611\n                emptyOption_ && emptyOption_.nodeType === NODE_TYPE_COMMENT)) {                                        // 26612\n            // Empty options might have directives that transclude                                                     // 26613\n            // and insert comments (e.g. ngIf)                                                                         // 26614\n            current = current.nextSibling;                                                                             // 26615\n          }                                                                                                            // 26616\n        }                                                                                                              // 26617\n        return current;                                                                                                // 26618\n      }                                                                                                                // 26619\n                                                                                                                       // 26620\n                                                                                                                       // 26621\n      function updateOptions() {                                                                                       // 26622\n                                                                                                                       // 26623\n        var previousValue = options && selectCtrl.readValue();                                                         // 26624\n                                                                                                                       // 26625\n        options = ngOptions.getOptions();                                                                              // 26626\n                                                                                                                       // 26627\n        var groupMap = {};                                                                                             // 26628\n        var currentElement = selectElement[0].firstChild;                                                              // 26629\n                                                                                                                       // 26630\n        // Ensure that the empty option is always there if it was explicitly provided                                  // 26631\n        if (providedEmptyOption) {                                                                                     // 26632\n          selectElement.prepend(emptyOption);                                                                          // 26633\n        }                                                                                                              // 26634\n                                                                                                                       // 26635\n        currentElement = skipEmptyAndUnknownOptions(currentElement);                                                   // 26636\n                                                                                                                       // 26637\n        options.items.forEach(function updateOption(option) {                                                          // 26638\n          var group;                                                                                                   // 26639\n          var groupElement;                                                                                            // 26640\n          var optionElement;                                                                                           // 26641\n                                                                                                                       // 26642\n          if (option.group) {                                                                                          // 26643\n                                                                                                                       // 26644\n            // This option is to live in a group                                                                       // 26645\n            // See if we have already created this group                                                               // 26646\n            group = groupMap[option.group];                                                                            // 26647\n                                                                                                                       // 26648\n            if (!group) {                                                                                              // 26649\n                                                                                                                       // 26650\n              // We have not already created this group                                                                // 26651\n              groupElement = addOrReuseElement(selectElement[0],                                                       // 26652\n                                               currentElement,                                                         // 26653\n                                               'optgroup',                                                             // 26654\n                                               optGroupTemplate);                                                      // 26655\n              // Move to the next element                                                                              // 26656\n              currentElement = groupElement.nextSibling;                                                               // 26657\n                                                                                                                       // 26658\n              // Update the label on the group element                                                                 // 26659\n              groupElement.label = option.group;                                                                       // 26660\n                                                                                                                       // 26661\n              // Store it for use later                                                                                // 26662\n              group = groupMap[option.group] = {                                                                       // 26663\n                groupElement: groupElement,                                                                            // 26664\n                currentOptionElement: groupElement.firstChild                                                          // 26665\n              };                                                                                                       // 26666\n                                                                                                                       // 26667\n            }                                                                                                          // 26668\n                                                                                                                       // 26669\n            // So now we have a group for this option we add the option to the group                                   // 26670\n            optionElement = addOrReuseElement(group.groupElement,                                                      // 26671\n                                              group.currentOptionElement,                                              // 26672\n                                              'option',                                                                // 26673\n                                              optionTemplate);                                                         // 26674\n            updateOptionElement(option, optionElement);                                                                // 26675\n            // Move to the next element                                                                                // 26676\n            group.currentOptionElement = optionElement.nextSibling;                                                    // 26677\n                                                                                                                       // 26678\n          } else {                                                                                                     // 26679\n                                                                                                                       // 26680\n            // This option is not in a group                                                                           // 26681\n            optionElement = addOrReuseElement(selectElement[0],                                                        // 26682\n                                              currentElement,                                                          // 26683\n                                              'option',                                                                // 26684\n                                              optionTemplate);                                                         // 26685\n            updateOptionElement(option, optionElement);                                                                // 26686\n            // Move to the next element                                                                                // 26687\n            currentElement = optionElement.nextSibling;                                                                // 26688\n          }                                                                                                            // 26689\n        });                                                                                                            // 26690\n                                                                                                                       // 26691\n                                                                                                                       // 26692\n        // Now remove all excess options and group                                                                     // 26693\n        Object.keys(groupMap).forEach(function(key) {                                                                  // 26694\n          removeExcessElements(groupMap[key].currentOptionElement);                                                    // 26695\n        });                                                                                                            // 26696\n        removeExcessElements(currentElement);                                                                          // 26697\n                                                                                                                       // 26698\n        ngModelCtrl.$render();                                                                                         // 26699\n                                                                                                                       // 26700\n        // Check to see if the value has changed due to the update to the options                                      // 26701\n        if (!ngModelCtrl.$isEmpty(previousValue)) {                                                                    // 26702\n          var nextValue = selectCtrl.readValue();                                                                      // 26703\n          if (ngOptions.trackBy ? !equals(previousValue, nextValue) : previousValue !== nextValue) {                   // 26704\n            ngModelCtrl.$setViewValue(nextValue);                                                                      // 26705\n            ngModelCtrl.$render();                                                                                     // 26706\n          }                                                                                                            // 26707\n        }                                                                                                              // 26708\n                                                                                                                       // 26709\n      }                                                                                                                // 26710\n                                                                                                                       // 26711\n    }                                                                                                                  // 26712\n  };                                                                                                                   // 26713\n}];                                                                                                                    // 26714\n                                                                                                                       // 26715\n/**                                                                                                                    // 26716\n * @ngdoc directive                                                                                                    // 26717\n * @name ngPluralize                                                                                                   // 26718\n * @restrict EA                                                                                                        // 26719\n *                                                                                                                     // 26720\n * @description                                                                                                        // 26721\n * `ngPluralize` is a directive that displays messages according to en-US localization rules.                          // 26722\n * These rules are bundled with angular.js, but can be overridden                                                      // 26723\n * (see {@link guide/i18n Angular i18n} dev guide). You configure ngPluralize directive                                // 26724\n * by specifying the mappings between                                                                                  // 26725\n * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)           // 26726\n * and the strings to be displayed.                                                                                    // 26727\n *                                                                                                                     // 26728\n * # Plural categories and explicit number rules                                                                       // 26729\n * There are two                                                                                                       // 26730\n * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)           // 26731\n * in Angular's default en-US locale: \"one\" and \"other\".                                                               // 26732\n *                                                                                                                     // 26733\n * While a plural category may match many numbers (for example, in en-US locale, \"other\" can match                     // 26734\n * any number that is not 1), an explicit number rule can only match one number. For example, the                      // 26735\n * explicit number rule for \"3\" matches the number 3. There are examples of plural categories                          // 26736\n * and explicit number rules throughout the rest of this documentation.                                                // 26737\n *                                                                                                                     // 26738\n * # Configuring ngPluralize                                                                                           // 26739\n * You configure ngPluralize by providing 2 attributes: `count` and `when`.                                            // 26740\n * You can also provide an optional attribute, `offset`.                                                               // 26741\n *                                                                                                                     // 26742\n * The value of the `count` attribute can be either a string or an {@link guide/expression                             // 26743\n * Angular expression}; these are evaluated on the current scope for its bound value.                                  // 26744\n *                                                                                                                     // 26745\n * The `when` attribute specifies the mappings between plural categories and the actual                                // 26746\n * string to be displayed. The value of the attribute should be a JSON object.                                         // 26747\n *                                                                                                                     // 26748\n * The following example shows how to configure ngPluralize:                                                           // 26749\n *                                                                                                                     // 26750\n * ```html                                                                                                             // 26751\n * <ng-pluralize count=\"personCount\"                                                                                   // 26752\n                 when=\"{'0': 'Nobody is viewing.',                                                                     // 26753\n *                      'one': '1 person is viewing.',                                                                 // 26754\n *                      'other': '{} people are viewing.'}\">                                                           // 26755\n * </ng-pluralize>                                                                                                     // 26756\n *```                                                                                                                  // 26757\n *                                                                                                                     // 26758\n * In the example, `\"0: Nobody is viewing.\"` is an explicit number rule. If you did not                                // 26759\n * specify this rule, 0 would be matched to the \"other\" category and \"0 people are viewing\"                            // 26760\n * would be shown instead of \"Nobody is viewing\". You can specify an explicit number rule for                          // 26761\n * other numbers, for example 12, so that instead of showing \"12 people are viewing\", you can                          // 26762\n * show \"a dozen people are viewing\".                                                                                  // 26763\n *                                                                                                                     // 26764\n * You can use a set of closed braces (`{}`) as a placeholder for the number that you want substituted                 // 26765\n * into pluralized strings. In the previous example, Angular will replace `{}` with                                    // 26766\n * <span ng-non-bindable>`{{personCount}}`</span>. The closed braces `{}` is a placeholder                             // 26767\n * for <span ng-non-bindable>{{numberExpression}}</span>.                                                              // 26768\n *                                                                                                                     // 26769\n * If no rule is defined for a category, then an empty string is displayed and a warning is generated.                 // 26770\n * Note that some locales define more categories than `one` and `other`. For example, fr-fr defines `few` and `many`.  // 26771\n *                                                                                                                     // 26772\n * # Configuring ngPluralize with offset                                                                               // 26773\n * The `offset` attribute allows further customization of pluralized text, which can result in                         // 26774\n * a better user experience. For example, instead of the message \"4 people are viewing this document\",                 // 26775\n * you might display \"John, Kate and 2 others are viewing this document\".                                              // 26776\n * The offset attribute allows you to offset a number by any desired value.                                            // 26777\n * Let's take a look at an example:                                                                                    // 26778\n *                                                                                                                     // 26779\n * ```html                                                                                                             // 26780\n * <ng-pluralize count=\"personCount\" offset=2                                                                          // 26781\n *               when=\"{'0': 'Nobody is viewing.',                                                                     // 26782\n *                      '1': '{{person1}} is viewing.',                                                                // 26783\n *                      '2': '{{person1}} and {{person2}} are viewing.',                                               // 26784\n *                      'one': '{{person1}}, {{person2}} and one other person are viewing.',                           // 26785\n *                      'other': '{{person1}}, {{person2}} and {} other people are viewing.'}\">                        // 26786\n * </ng-pluralize>                                                                                                     // 26787\n * ```                                                                                                                 // 26788\n *                                                                                                                     // 26789\n * Notice that we are still using two plural categories(one, other), but we added                                      // 26790\n * three explicit number rules 0, 1 and 2.                                                                             // 26791\n * When one person, perhaps John, views the document, \"John is viewing\" will be shown.                                 // 26792\n * When three people view the document, no explicit number rule is found, so                                           // 26793\n * an offset of 2 is taken off 3, and Angular uses 1 to decide the plural category.                                    // 26794\n * In this case, plural category 'one' is matched and \"John, Mary and one other person are viewing\"                    // 26795\n * is shown.                                                                                                           // 26796\n *                                                                                                                     // 26797\n * Note that when you specify offsets, you must provide explicit number rules for                                      // 26798\n * numbers from 0 up to and including the offset. If you use an offset of 3, for example,                              // 26799\n * you must provide explicit number rules for 0, 1, 2 and 3. You must also provide plural strings for                  // 26800\n * plural categories \"one\" and \"other\".                                                                                // 26801\n *                                                                                                                     // 26802\n * @param {string|expression} count The variable to be bound to.                                                       // 26803\n * @param {string} when The mapping between plural category to its corresponding strings.                              // 26804\n * @param {number=} offset Offset to deduct from the total number.                                                     // 26805\n *                                                                                                                     // 26806\n * @example                                                                                                            // 26807\n    <example module=\"pluralizeExample\">                                                                                // 26808\n      <file name=\"index.html\">                                                                                         // 26809\n        <script>                                                                                                       // 26810\n          angular.module('pluralizeExample', [])                                                                       // 26811\n            .controller('ExampleController', ['$scope', function($scope) {                                             // 26812\n              $scope.person1 = 'Igor';                                                                                 // 26813\n              $scope.person2 = 'Misko';                                                                                // 26814\n              $scope.personCount = 1;                                                                                  // 26815\n            }]);                                                                                                       // 26816\n        </script>                                                                                                      // 26817\n        <div ng-controller=\"ExampleController\">                                                                        // 26818\n          <label>Person 1:<input type=\"text\" ng-model=\"person1\" value=\"Igor\" /></label><br/>                           // 26819\n          <label>Person 2:<input type=\"text\" ng-model=\"person2\" value=\"Misko\" /></label><br/>                          // 26820\n          <label>Number of People:<input type=\"text\" ng-model=\"personCount\" value=\"1\" /></label><br/>                  // 26821\n                                                                                                                       // 26822\n          <!--- Example with simple pluralization rules for en locale --->                                             // 26823\n          Without Offset:                                                                                              // 26824\n          <ng-pluralize count=\"personCount\"                                                                            // 26825\n                        when=\"{'0': 'Nobody is viewing.',                                                              // 26826\n                               'one': '1 person is viewing.',                                                          // 26827\n                               'other': '{} people are viewing.'}\">                                                    // 26828\n          </ng-pluralize><br>                                                                                          // 26829\n                                                                                                                       // 26830\n          <!--- Example with offset --->                                                                               // 26831\n          With Offset(2):                                                                                              // 26832\n          <ng-pluralize count=\"personCount\" offset=2                                                                   // 26833\n                        when=\"{'0': 'Nobody is viewing.',                                                              // 26834\n                               '1': '{{person1}} is viewing.',                                                         // 26835\n                               '2': '{{person1}} and {{person2}} are viewing.',                                        // 26836\n                               'one': '{{person1}}, {{person2}} and one other person are viewing.',                    // 26837\n                               'other': '{{person1}}, {{person2}} and {} other people are viewing.'}\">                 // 26838\n          </ng-pluralize>                                                                                              // 26839\n        </div>                                                                                                         // 26840\n      </file>                                                                                                          // 26841\n      <file name=\"protractor.js\" type=\"protractor\">                                                                    // 26842\n        it('should show correct pluralized string', function() {                                                       // 26843\n          var withoutOffset = element.all(by.css('ng-pluralize')).get(0);                                              // 26844\n          var withOffset = element.all(by.css('ng-pluralize')).get(1);                                                 // 26845\n          var countInput = element(by.model('personCount'));                                                           // 26846\n                                                                                                                       // 26847\n          expect(withoutOffset.getText()).toEqual('1 person is viewing.');                                             // 26848\n          expect(withOffset.getText()).toEqual('Igor is viewing.');                                                    // 26849\n                                                                                                                       // 26850\n          countInput.clear();                                                                                          // 26851\n          countInput.sendKeys('0');                                                                                    // 26852\n                                                                                                                       // 26853\n          expect(withoutOffset.getText()).toEqual('Nobody is viewing.');                                               // 26854\n          expect(withOffset.getText()).toEqual('Nobody is viewing.');                                                  // 26855\n                                                                                                                       // 26856\n          countInput.clear();                                                                                          // 26857\n          countInput.sendKeys('2');                                                                                    // 26858\n                                                                                                                       // 26859\n          expect(withoutOffset.getText()).toEqual('2 people are viewing.');                                            // 26860\n          expect(withOffset.getText()).toEqual('Igor and Misko are viewing.');                                         // 26861\n                                                                                                                       // 26862\n          countInput.clear();                                                                                          // 26863\n          countInput.sendKeys('3');                                                                                    // 26864\n                                                                                                                       // 26865\n          expect(withoutOffset.getText()).toEqual('3 people are viewing.');                                            // 26866\n          expect(withOffset.getText()).toEqual('Igor, Misko and one other person are viewing.');                       // 26867\n                                                                                                                       // 26868\n          countInput.clear();                                                                                          // 26869\n          countInput.sendKeys('4');                                                                                    // 26870\n                                                                                                                       // 26871\n          expect(withoutOffset.getText()).toEqual('4 people are viewing.');                                            // 26872\n          expect(withOffset.getText()).toEqual('Igor, Misko and 2 other people are viewing.');                         // 26873\n        });                                                                                                            // 26874\n        it('should show data-bound names', function() {                                                                // 26875\n          var withOffset = element.all(by.css('ng-pluralize')).get(1);                                                 // 26876\n          var personCount = element(by.model('personCount'));                                                          // 26877\n          var person1 = element(by.model('person1'));                                                                  // 26878\n          var person2 = element(by.model('person2'));                                                                  // 26879\n          personCount.clear();                                                                                         // 26880\n          personCount.sendKeys('4');                                                                                   // 26881\n          person1.clear();                                                                                             // 26882\n          person1.sendKeys('Di');                                                                                      // 26883\n          person2.clear();                                                                                             // 26884\n          person2.sendKeys('Vojta');                                                                                   // 26885\n          expect(withOffset.getText()).toEqual('Di, Vojta and 2 other people are viewing.');                           // 26886\n        });                                                                                                            // 26887\n      </file>                                                                                                          // 26888\n    </example>                                                                                                         // 26889\n */                                                                                                                    // 26890\nvar ngPluralizeDirective = ['$locale', '$interpolate', '$log', function($locale, $interpolate, $log) {                 // 26891\n  var BRACE = /{}/g,                                                                                                   // 26892\n      IS_WHEN = /^when(Minus)?(.+)$/;                                                                                  // 26893\n                                                                                                                       // 26894\n  return {                                                                                                             // 26895\n    link: function(scope, element, attr) {                                                                             // 26896\n      var numberExp = attr.count,                                                                                      // 26897\n          whenExp = attr.$attr.when && element.attr(attr.$attr.when), // we have {{}} in attrs                         // 26898\n          offset = attr.offset || 0,                                                                                   // 26899\n          whens = scope.$eval(whenExp) || {},                                                                          // 26900\n          whensExpFns = {},                                                                                            // 26901\n          startSymbol = $interpolate.startSymbol(),                                                                    // 26902\n          endSymbol = $interpolate.endSymbol(),                                                                        // 26903\n          braceReplacement = startSymbol + numberExp + '-' + offset + endSymbol,                                       // 26904\n          watchRemover = angular.noop,                                                                                 // 26905\n          lastCount;                                                                                                   // 26906\n                                                                                                                       // 26907\n      forEach(attr, function(expression, attributeName) {                                                              // 26908\n        var tmpMatch = IS_WHEN.exec(attributeName);                                                                    // 26909\n        if (tmpMatch) {                                                                                                // 26910\n          var whenKey = (tmpMatch[1] ? '-' : '') + lowercase(tmpMatch[2]);                                             // 26911\n          whens[whenKey] = element.attr(attr.$attr[attributeName]);                                                    // 26912\n        }                                                                                                              // 26913\n      });                                                                                                              // 26914\n      forEach(whens, function(expression, key) {                                                                       // 26915\n        whensExpFns[key] = $interpolate(expression.replace(BRACE, braceReplacement));                                  // 26916\n                                                                                                                       // 26917\n      });                                                                                                              // 26918\n                                                                                                                       // 26919\n      scope.$watch(numberExp, function ngPluralizeWatchAction(newVal) {                                                // 26920\n        var count = parseFloat(newVal);                                                                                // 26921\n        var countIsNaN = isNaN(count);                                                                                 // 26922\n                                                                                                                       // 26923\n        if (!countIsNaN && !(count in whens)) {                                                                        // 26924\n          // If an explicit number rule such as 1, 2, 3... is defined, just use it.                                    // 26925\n          // Otherwise, check it against pluralization rules in $locale service.                                       // 26926\n          count = $locale.pluralCat(count - offset);                                                                   // 26927\n        }                                                                                                              // 26928\n                                                                                                                       // 26929\n        // If both `count` and `lastCount` are NaN, we don't need to re-register a watch.                              // 26930\n        // In JS `NaN !== NaN`, so we have to exlicitly check.                                                         // 26931\n        if ((count !== lastCount) && !(countIsNaN && isNumber(lastCount) && isNaN(lastCount))) {                       // 26932\n          watchRemover();                                                                                              // 26933\n          var whenExpFn = whensExpFns[count];                                                                          // 26934\n          if (isUndefined(whenExpFn)) {                                                                                // 26935\n            if (newVal != null) {                                                                                      // 26936\n              $log.debug(\"ngPluralize: no rule defined for '\" + count + \"' in \" + whenExp);                            // 26937\n            }                                                                                                          // 26938\n            watchRemover = noop;                                                                                       // 26939\n            updateElementText();                                                                                       // 26940\n          } else {                                                                                                     // 26941\n            watchRemover = scope.$watch(whenExpFn, updateElementText);                                                 // 26942\n          }                                                                                                            // 26943\n          lastCount = count;                                                                                           // 26944\n        }                                                                                                              // 26945\n      });                                                                                                              // 26946\n                                                                                                                       // 26947\n      function updateElementText(newText) {                                                                            // 26948\n        element.text(newText || '');                                                                                   // 26949\n      }                                                                                                                // 26950\n    }                                                                                                                  // 26951\n  };                                                                                                                   // 26952\n}];                                                                                                                    // 26953\n                                                                                                                       // 26954\n/**                                                                                                                    // 26955\n * @ngdoc directive                                                                                                    // 26956\n * @name ngRepeat                                                                                                      // 26957\n * @multiElement                                                                                                       // 26958\n *                                                                                                                     // 26959\n * @description                                                                                                        // 26960\n * The `ngRepeat` directive instantiates a template once per item from a collection. Each template                     // 26961\n * instance gets its own scope, where the given loop variable is set to the current collection item,                   // 26962\n * and `$index` is set to the item index or key.                                                                       // 26963\n *                                                                                                                     // 26964\n * Special properties are exposed on the local scope of each template instance, including:                             // 26965\n *                                                                                                                     // 26966\n * | Variable  | Type            | Details                                                                     |       // 26967\n * |-----------|-----------------|-----------------------------------------------------------------------------|       // 26968\n * | `$index`  | {@type number}  | iterator offset of the repeated element (0..length-1)                       |       // 26969\n * | `$first`  | {@type boolean} | true if the repeated element is first in the iterator.                      |       // 26970\n * | `$middle` | {@type boolean} | true if the repeated element is between the first and last in the iterator. |       // 26971\n * | `$last`   | {@type boolean} | true if the repeated element is last in the iterator.                       |       // 26972\n * | `$even`   | {@type boolean} | true if the iterator position `$index` is even (otherwise false).           |       // 26973\n * | `$odd`    | {@type boolean} | true if the iterator position `$index` is odd (otherwise false).            |       // 26974\n *                                                                                                                     // 26975\n * <div class=\"alert alert-info\">                                                                                      // 26976\n *   Creating aliases for these properties is possible with {@link ng.directive:ngInit `ngInit`}.                      // 26977\n *   This may be useful when, for instance, nesting ngRepeats.                                                         // 26978\n * </div>                                                                                                              // 26979\n *                                                                                                                     // 26980\n *                                                                                                                     // 26981\n * # Iterating over object properties                                                                                  // 26982\n *                                                                                                                     // 26983\n * It is possible to get `ngRepeat` to iterate over the properties of an object using the following                    // 26984\n * syntax:                                                                                                             // 26985\n *                                                                                                                     // 26986\n * ```js                                                                                                               // 26987\n * <div ng-repeat=\"(key, value) in myObj\"> ... </div>                                                                  // 26988\n * ```                                                                                                                 // 26989\n *                                                                                                                     // 26990\n * You need to be aware that the JavaScript specification does not define the order of keys                            // 26991\n * returned for an object. (To mitigate this in Angular 1.3 the `ngRepeat` directive                                   // 26992\n * used to sort the keys alphabetically.)                                                                              // 26993\n *                                                                                                                     // 26994\n * Version 1.4 removed the alphabetic sorting. We now rely on the order returned by the browser                        // 26995\n * when running `for key in myObj`. It seems that browsers generally follow the strategy of providing                  // 26996\n * keys in the order in which they were defined, although there are exceptions when keys are deleted                   // 26997\n * and reinstated. See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete#Cross-browser_issues\n *                                                                                                                     // 26999\n * If this is not desired, the recommended workaround is to convert your object into an array                          // 27000\n * that is sorted into the order that you prefer before providing it to `ngRepeat`.  You could                         // 27001\n * do this with a filter such as [toArrayFilter](http://ngmodules.org/modules/angular-toArrayFilter)                   // 27002\n * or implement a `$watch` on the object yourself.                                                                     // 27003\n *                                                                                                                     // 27004\n *                                                                                                                     // 27005\n * # Tracking and Duplicates                                                                                           // 27006\n *                                                                                                                     // 27007\n * When the contents of the collection change, `ngRepeat` makes the corresponding changes to the DOM:                  // 27008\n *                                                                                                                     // 27009\n * * When an item is added, a new instance of the template is added to the DOM.                                        // 27010\n * * When an item is removed, its template instance is removed from the DOM.                                           // 27011\n * * When items are reordered, their respective templates are reordered in the DOM.                                    // 27012\n *                                                                                                                     // 27013\n * By default, `ngRepeat` does not allow duplicate items in arrays. This is because when                               // 27014\n * there are duplicates, it is not possible to maintain a one-to-one mapping between collection                        // 27015\n * items and DOM elements.                                                                                             // 27016\n *                                                                                                                     // 27017\n * If you do need to repeat duplicate items, you can substitute the default tracking behavior                          // 27018\n * with your own using the `track by` expression.                                                                      // 27019\n *                                                                                                                     // 27020\n * For example, you may track items by the index of each item in the collection, using the                             // 27021\n * special scope property `$index`:                                                                                    // 27022\n * ```html                                                                                                             // 27023\n *    <div ng-repeat=\"n in [42, 42, 43, 43] track by $index\">                                                          // 27024\n *      {{n}}                                                                                                          // 27025\n *    </div>                                                                                                           // 27026\n * ```                                                                                                                 // 27027\n *                                                                                                                     // 27028\n * You may use arbitrary expressions in `track by`, including references to custom functions                           // 27029\n * on the scope:                                                                                                       // 27030\n * ```html                                                                                                             // 27031\n *    <div ng-repeat=\"n in [42, 42, 43, 43] track by myTrackingFunction(n)\">                                           // 27032\n *      {{n}}                                                                                                          // 27033\n *    </div>                                                                                                           // 27034\n * ```                                                                                                                 // 27035\n *                                                                                                                     // 27036\n * If you are working with objects that have an identifier property, you can track                                     // 27037\n * by the identifier instead of the whole object. Should you reload your data later, `ngRepeat`                        // 27038\n * will not have to rebuild the DOM elements for items it has already rendered, even if the                            // 27039\n * JavaScript objects in the collection have been substituted for new ones:                                            // 27040\n * ```html                                                                                                             // 27041\n *    <div ng-repeat=\"model in collection track by model.id\">                                                          // 27042\n *      {{model.name}}                                                                                                 // 27043\n *    </div>                                                                                                           // 27044\n * ```                                                                                                                 // 27045\n *                                                                                                                     // 27046\n * When no `track by` expression is provided, it is equivalent to tracking by the built-in                             // 27047\n * `$id` function, which tracks items by their identity:                                                               // 27048\n * ```html                                                                                                             // 27049\n *    <div ng-repeat=\"obj in collection track by $id(obj)\">                                                            // 27050\n *      {{obj.prop}}                                                                                                   // 27051\n *    </div>                                                                                                           // 27052\n * ```                                                                                                                 // 27053\n *                                                                                                                     // 27054\n * <div class=\"alert alert-warning\">                                                                                   // 27055\n * **Note:** `track by` must always be the last expression:                                                            // 27056\n * </div>                                                                                                              // 27057\n * ```                                                                                                                 // 27058\n * <div ng-repeat=\"model in collection | orderBy: 'id' as filtered_result track by model.id\">                          // 27059\n *     {{model.name}}                                                                                                  // 27060\n * </div>                                                                                                              // 27061\n * ```                                                                                                                 // 27062\n *                                                                                                                     // 27063\n * # Special repeat start and end points                                                                               // 27064\n * To repeat a series of elements instead of just one parent element, ngRepeat (as well as other ng directives) supports extending\n * the range of the repeater by defining explicit start and end points by using **ng-repeat-start** and **ng-repeat-end** respectively.\n * The **ng-repeat-start** directive works the same as **ng-repeat**, but will repeat all the HTML code (including the tag it's defined on)\n * up to and including the ending HTML tag where **ng-repeat-end** is placed.                                          // 27068\n *                                                                                                                     // 27069\n * The example below makes use of this feature:                                                                        // 27070\n * ```html                                                                                                             // 27071\n *   <header ng-repeat-start=\"item in items\">                                                                          // 27072\n *     Header {{ item }}                                                                                               // 27073\n *   </header>                                                                                                         // 27074\n *   <div class=\"body\">                                                                                                // 27075\n *     Body {{ item }}                                                                                                 // 27076\n *   </div>                                                                                                            // 27077\n *   <footer ng-repeat-end>                                                                                            // 27078\n *     Footer {{ item }}                                                                                               // 27079\n *   </footer>                                                                                                         // 27080\n * ```                                                                                                                 // 27081\n *                                                                                                                     // 27082\n * And with an input of {@type ['A','B']} for the items variable in the example above, the output will evaluate to:    // 27083\n * ```html                                                                                                             // 27084\n *   <header>                                                                                                          // 27085\n *     Header A                                                                                                        // 27086\n *   </header>                                                                                                         // 27087\n *   <div class=\"body\">                                                                                                // 27088\n *     Body A                                                                                                          // 27089\n *   </div>                                                                                                            // 27090\n *   <footer>                                                                                                          // 27091\n *     Footer A                                                                                                        // 27092\n *   </footer>                                                                                                         // 27093\n *   <header>                                                                                                          // 27094\n *     Header B                                                                                                        // 27095\n *   </header>                                                                                                         // 27096\n *   <div class=\"body\">                                                                                                // 27097\n *     Body B                                                                                                          // 27098\n *   </div>                                                                                                            // 27099\n *   <footer>                                                                                                          // 27100\n *     Footer B                                                                                                        // 27101\n *   </footer>                                                                                                         // 27102\n * ```                                                                                                                 // 27103\n *                                                                                                                     // 27104\n * The custom start and end points for ngRepeat also support all other HTML directive syntax flavors provided in AngularJS (such\n * as **data-ng-repeat-start**, **x-ng-repeat-start** and **ng:repeat-start**).                                        // 27106\n *                                                                                                                     // 27107\n * @animations                                                                                                         // 27108\n * **.enter** - when a new item is added to the list or when an item is revealed after a filter                        // 27109\n *                                                                                                                     // 27110\n * **.leave** - when an item is removed from the list or when an item is filtered out                                  // 27111\n *                                                                                                                     // 27112\n * **.move** - when an adjacent item is filtered out causing a reorder or when the item contents are reordered         // 27113\n *                                                                                                                     // 27114\n * @element ANY                                                                                                        // 27115\n * @scope                                                                                                              // 27116\n * @priority 1000                                                                                                      // 27117\n * @param {repeat_expression} ngRepeat The expression indicating how to enumerate a collection. These                  // 27118\n *   formats are currently supported:                                                                                  // 27119\n *                                                                                                                     // 27120\n *   * `variable in expression` – where variable is the user defined loop variable and `expression`                    // 27121\n *     is a scope expression giving the collection to enumerate.                                                       // 27122\n *                                                                                                                     // 27123\n *     For example: `album in artist.albums`.                                                                          // 27124\n *                                                                                                                     // 27125\n *   * `(key, value) in expression` – where `key` and `value` can be any user defined identifiers,                     // 27126\n *     and `expression` is the scope expression giving the collection to enumerate.                                    // 27127\n *                                                                                                                     // 27128\n *     For example: `(name, age) in {'adam':10, 'amalie':12}`.                                                         // 27129\n *                                                                                                                     // 27130\n *   * `variable in expression track by tracking_expression` – You can also provide an optional tracking expression    // 27131\n *     which can be used to associate the objects in the collection with the DOM elements. If no tracking expression   // 27132\n *     is specified, ng-repeat associates elements by identity. It is an error to have                                 // 27133\n *     more than one tracking expression value resolve to the same key. (This would mean that two distinct objects are\n *     mapped to the same DOM element, which is not possible.)                                                         // 27135\n *                                                                                                                     // 27136\n *     Note that the tracking expression must come last, after any filters, and the alias expression.                  // 27137\n *                                                                                                                     // 27138\n *     For example: `item in items` is equivalent to `item in items track by $id(item)`. This implies that the DOM elements\n *     will be associated by item identity in the array.                                                               // 27140\n *                                                                                                                     // 27141\n *     For example: `item in items track by $id(item)`. A built in `$id()` function can be used to assign a unique     // 27142\n *     `$$hashKey` property to each item in the array. This property is then used as a key to associated DOM elements  // 27143\n *     with the corresponding item in the array by identity. Moving the same object in array would move the DOM        // 27144\n *     element in the same way in the DOM.                                                                             // 27145\n *                                                                                                                     // 27146\n *     For example: `item in items track by item.id` is a typical pattern when the items come from the database. In this\n *     case the object identity does not matter. Two objects are considered equivalent as long as their `id`           // 27148\n *     property is same.                                                                                               // 27149\n *                                                                                                                     // 27150\n *     For example: `item in items | filter:searchText track by item.id` is a pattern that might be used to apply a filter\n *     to items in conjunction with a tracking expression.                                                             // 27152\n *                                                                                                                     // 27153\n *   * `variable in expression as alias_expression` – You can also provide an optional alias expression which will then store the\n *     intermediate results of the repeater after the filters have been applied. Typically this is used to render a special message\n *     when a filter is active on the repeater, but the filtered result set is empty.                                  // 27156\n *                                                                                                                     // 27157\n *     For example: `item in items | filter:x as results` will store the fragment of the repeated items as `results`, but only after\n *     the items have been processed through the filter.                                                               // 27159\n *                                                                                                                     // 27160\n *     Please note that `as [variable name] is not an operator but rather a part of ngRepeat micro-syntax so it can be used only at the end\n *     (and not as operator, inside an expression).                                                                    // 27162\n *                                                                                                                     // 27163\n *     For example: `item in items | filter : x | orderBy : order | limitTo : limit as results` .                      // 27164\n *                                                                                                                     // 27165\n * @example                                                                                                            // 27166\n * This example initializes the scope to a list of names and                                                           // 27167\n * then uses `ngRepeat` to display every person:                                                                       // 27168\n  <example module=\"ngAnimate\" deps=\"angular-animate.js\" animations=\"true\">                                             // 27169\n    <file name=\"index.html\">                                                                                           // 27170\n      <div ng-init=\"friends = [                                                                                        // 27171\n        {name:'John', age:25, gender:'boy'},                                                                           // 27172\n        {name:'Jessie', age:30, gender:'girl'},                                                                        // 27173\n        {name:'Johanna', age:28, gender:'girl'},                                                                       // 27174\n        {name:'Joy', age:15, gender:'girl'},                                                                           // 27175\n        {name:'Mary', age:28, gender:'girl'},                                                                          // 27176\n        {name:'Peter', age:95, gender:'boy'},                                                                          // 27177\n        {name:'Sebastian', age:50, gender:'boy'},                                                                      // 27178\n        {name:'Erika', age:27, gender:'girl'},                                                                         // 27179\n        {name:'Patrick', age:40, gender:'boy'},                                                                        // 27180\n        {name:'Samantha', age:60, gender:'girl'}                                                                       // 27181\n      ]\">                                                                                                              // 27182\n        I have {{friends.length}} friends. They are:                                                                   // 27183\n        <input type=\"search\" ng-model=\"q\" placeholder=\"filter friends...\" aria-label=\"filter friends\" />               // 27184\n        <ul class=\"example-animate-container\">                                                                         // 27185\n          <li class=\"animate-repeat\" ng-repeat=\"friend in friends | filter:q as results\">                              // 27186\n            [{{$index + 1}}] {{friend.name}} who is {{friend.age}} years old.                                          // 27187\n          </li>                                                                                                        // 27188\n          <li class=\"animate-repeat\" ng-if=\"results.length == 0\">                                                      // 27189\n            <strong>No results found...</strong>                                                                       // 27190\n          </li>                                                                                                        // 27191\n        </ul>                                                                                                          // 27192\n      </div>                                                                                                           // 27193\n    </file>                                                                                                            // 27194\n    <file name=\"animations.css\">                                                                                       // 27195\n      .example-animate-container {                                                                                     // 27196\n        background:white;                                                                                              // 27197\n        border:1px solid black;                                                                                        // 27198\n        list-style:none;                                                                                               // 27199\n        margin:0;                                                                                                      // 27200\n        padding:0 10px;                                                                                                // 27201\n      }                                                                                                                // 27202\n                                                                                                                       // 27203\n      .animate-repeat {                                                                                                // 27204\n        line-height:40px;                                                                                              // 27205\n        list-style:none;                                                                                               // 27206\n        box-sizing:border-box;                                                                                         // 27207\n      }                                                                                                                // 27208\n                                                                                                                       // 27209\n      .animate-repeat.ng-move,                                                                                         // 27210\n      .animate-repeat.ng-enter,                                                                                        // 27211\n      .animate-repeat.ng-leave {                                                                                       // 27212\n        transition:all linear 0.5s;                                                                                    // 27213\n      }                                                                                                                // 27214\n                                                                                                                       // 27215\n      .animate-repeat.ng-leave.ng-leave-active,                                                                        // 27216\n      .animate-repeat.ng-move,                                                                                         // 27217\n      .animate-repeat.ng-enter {                                                                                       // 27218\n        opacity:0;                                                                                                     // 27219\n        max-height:0;                                                                                                  // 27220\n      }                                                                                                                // 27221\n                                                                                                                       // 27222\n      .animate-repeat.ng-leave,                                                                                        // 27223\n      .animate-repeat.ng-move.ng-move-active,                                                                          // 27224\n      .animate-repeat.ng-enter.ng-enter-active {                                                                       // 27225\n        opacity:1;                                                                                                     // 27226\n        max-height:40px;                                                                                               // 27227\n      }                                                                                                                // 27228\n    </file>                                                                                                            // 27229\n    <file name=\"protractor.js\" type=\"protractor\">                                                                      // 27230\n      var friends = element.all(by.repeater('friend in friends'));                                                     // 27231\n                                                                                                                       // 27232\n      it('should render initial data set', function() {                                                                // 27233\n        expect(friends.count()).toBe(10);                                                                              // 27234\n        expect(friends.get(0).getText()).toEqual('[1] John who is 25 years old.');                                     // 27235\n        expect(friends.get(1).getText()).toEqual('[2] Jessie who is 30 years old.');                                   // 27236\n        expect(friends.last().getText()).toEqual('[10] Samantha who is 60 years old.');                                // 27237\n        expect(element(by.binding('friends.length')).getText())                                                        // 27238\n            .toMatch(\"I have 10 friends. They are:\");                                                                  // 27239\n      });                                                                                                              // 27240\n                                                                                                                       // 27241\n       it('should update repeater when filter predicate changes', function() {                                         // 27242\n         expect(friends.count()).toBe(10);                                                                             // 27243\n                                                                                                                       // 27244\n         element(by.model('q')).sendKeys('ma');                                                                        // 27245\n                                                                                                                       // 27246\n         expect(friends.count()).toBe(2);                                                                              // 27247\n         expect(friends.get(0).getText()).toEqual('[1] Mary who is 28 years old.');                                    // 27248\n         expect(friends.last().getText()).toEqual('[2] Samantha who is 60 years old.');                                // 27249\n       });                                                                                                             // 27250\n      </file>                                                                                                          // 27251\n    </example>                                                                                                         // 27252\n */                                                                                                                    // 27253\nvar ngRepeatDirective = ['$parse', '$animate', function($parse, $animate) {                                            // 27254\n  var NG_REMOVED = '$$NG_REMOVED';                                                                                     // 27255\n  var ngRepeatMinErr = minErr('ngRepeat');                                                                             // 27256\n                                                                                                                       // 27257\n  var updateScope = function(scope, index, valueIdentifier, value, keyIdentifier, key, arrayLength) {                  // 27258\n    // TODO(perf): generate setters to shave off ~40ms or 1-1.5%                                                       // 27259\n    scope[valueIdentifier] = value;                                                                                    // 27260\n    if (keyIdentifier) scope[keyIdentifier] = key;                                                                     // 27261\n    scope.$index = index;                                                                                              // 27262\n    scope.$first = (index === 0);                                                                                      // 27263\n    scope.$last = (index === (arrayLength - 1));                                                                       // 27264\n    scope.$middle = !(scope.$first || scope.$last);                                                                    // 27265\n    // jshint bitwise: false                                                                                           // 27266\n    scope.$odd = !(scope.$even = (index&1) === 0);                                                                     // 27267\n    // jshint bitwise: true                                                                                            // 27268\n  };                                                                                                                   // 27269\n                                                                                                                       // 27270\n  var getBlockStart = function(block) {                                                                                // 27271\n    return block.clone[0];                                                                                             // 27272\n  };                                                                                                                   // 27273\n                                                                                                                       // 27274\n  var getBlockEnd = function(block) {                                                                                  // 27275\n    return block.clone[block.clone.length - 1];                                                                        // 27276\n  };                                                                                                                   // 27277\n                                                                                                                       // 27278\n                                                                                                                       // 27279\n  return {                                                                                                             // 27280\n    restrict: 'A',                                                                                                     // 27281\n    multiElement: true,                                                                                                // 27282\n    transclude: 'element',                                                                                             // 27283\n    priority: 1000,                                                                                                    // 27284\n    terminal: true,                                                                                                    // 27285\n    $$tlb: true,                                                                                                       // 27286\n    compile: function ngRepeatCompile($element, $attr) {                                                               // 27287\n      var expression = $attr.ngRepeat;                                                                                 // 27288\n      var ngRepeatEndComment = document.createComment(' end ngRepeat: ' + expression + ' ');                           // 27289\n                                                                                                                       // 27290\n      var match = expression.match(/^\\s*([\\s\\S]+?)\\s+in\\s+([\\s\\S]+?)(?:\\s+as\\s+([\\s\\S]+?))?(?:\\s+track\\s+by\\s+([\\s\\S]+?))?\\s*$/);\n                                                                                                                       // 27292\n      if (!match) {                                                                                                    // 27293\n        throw ngRepeatMinErr('iexp', \"Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.\",\n            expression);                                                                                               // 27295\n      }                                                                                                                // 27296\n                                                                                                                       // 27297\n      var lhs = match[1];                                                                                              // 27298\n      var rhs = match[2];                                                                                              // 27299\n      var aliasAs = match[3];                                                                                          // 27300\n      var trackByExp = match[4];                                                                                       // 27301\n                                                                                                                       // 27302\n      match = lhs.match(/^(?:(\\s*[\\$\\w]+)|\\(\\s*([\\$\\w]+)\\s*,\\s*([\\$\\w]+)\\s*\\))$/);                                     // 27303\n                                                                                                                       // 27304\n      if (!match) {                                                                                                    // 27305\n        throw ngRepeatMinErr('iidexp', \"'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.\",\n            lhs);                                                                                                      // 27307\n      }                                                                                                                // 27308\n      var valueIdentifier = match[3] || match[1];                                                                      // 27309\n      var keyIdentifier = match[2];                                                                                    // 27310\n                                                                                                                       // 27311\n      if (aliasAs && (!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(aliasAs) ||                                                   // 27312\n          /^(null|undefined|this|\\$index|\\$first|\\$middle|\\$last|\\$even|\\$odd|\\$parent|\\$root|\\$id)$/.test(aliasAs))) {\n        throw ngRepeatMinErr('badident', \"alias '{0}' is invalid --- must be a valid JS identifier which is not a reserved name.\",\n          aliasAs);                                                                                                    // 27315\n      }                                                                                                                // 27316\n                                                                                                                       // 27317\n      var trackByExpGetter, trackByIdExpFn, trackByIdArrayFn, trackByIdObjFn;                                          // 27318\n      var hashFnLocals = {$id: hashKey};                                                                               // 27319\n                                                                                                                       // 27320\n      if (trackByExp) {                                                                                                // 27321\n        trackByExpGetter = $parse(trackByExp);                                                                         // 27322\n      } else {                                                                                                         // 27323\n        trackByIdArrayFn = function(key, value) {                                                                      // 27324\n          return hashKey(value);                                                                                       // 27325\n        };                                                                                                             // 27326\n        trackByIdObjFn = function(key) {                                                                               // 27327\n          return key;                                                                                                  // 27328\n        };                                                                                                             // 27329\n      }                                                                                                                // 27330\n                                                                                                                       // 27331\n      return function ngRepeatLink($scope, $element, $attr, ctrl, $transclude) {                                       // 27332\n                                                                                                                       // 27333\n        if (trackByExpGetter) {                                                                                        // 27334\n          trackByIdExpFn = function(key, value, index) {                                                               // 27335\n            // assign key, value, and $index to the locals so that they can be used in hash functions                  // 27336\n            if (keyIdentifier) hashFnLocals[keyIdentifier] = key;                                                      // 27337\n            hashFnLocals[valueIdentifier] = value;                                                                     // 27338\n            hashFnLocals.$index = index;                                                                               // 27339\n            return trackByExpGetter($scope, hashFnLocals);                                                             // 27340\n          };                                                                                                           // 27341\n        }                                                                                                              // 27342\n                                                                                                                       // 27343\n        // Store a list of elements from previous run. This is a hash where key is the item from the                   // 27344\n        // iterator, and the value is objects with following properties.                                               // 27345\n        //   - scope: bound scope                                                                                      // 27346\n        //   - element: previous element.                                                                              // 27347\n        //   - index: position                                                                                         // 27348\n        //                                                                                                             // 27349\n        // We are using no-proto object so that we don't need to guard against inherited props via                     // 27350\n        // hasOwnProperty.                                                                                             // 27351\n        var lastBlockMap = createMap();                                                                                // 27352\n                                                                                                                       // 27353\n        //watch props                                                                                                  // 27354\n        $scope.$watchCollection(rhs, function ngRepeatAction(collection) {                                             // 27355\n          var index, length,                                                                                           // 27356\n              previousNode = $element[0],     // node that cloned nodes should be inserted after                       // 27357\n                                              // initialized to the comment node anchor                                // 27358\n              nextNode,                                                                                                // 27359\n              // Same as lastBlockMap but it has the current state. It will become the                                 // 27360\n              // lastBlockMap on the next iteration.                                                                   // 27361\n              nextBlockMap = createMap(),                                                                              // 27362\n              collectionLength,                                                                                        // 27363\n              key, value, // key/value of iteration                                                                    // 27364\n              trackById,                                                                                               // 27365\n              trackByIdFn,                                                                                             // 27366\n              collectionKeys,                                                                                          // 27367\n              block,       // last object information {scope, element, id}                                             // 27368\n              nextBlockOrder,                                                                                          // 27369\n              elementsToRemove;                                                                                        // 27370\n                                                                                                                       // 27371\n          if (aliasAs) {                                                                                               // 27372\n            $scope[aliasAs] = collection;                                                                              // 27373\n          }                                                                                                            // 27374\n                                                                                                                       // 27375\n          if (isArrayLike(collection)) {                                                                               // 27376\n            collectionKeys = collection;                                                                               // 27377\n            trackByIdFn = trackByIdExpFn || trackByIdArrayFn;                                                          // 27378\n          } else {                                                                                                     // 27379\n            trackByIdFn = trackByIdExpFn || trackByIdObjFn;                                                            // 27380\n            // if object, extract keys, in enumeration order, unsorted                                                 // 27381\n            collectionKeys = [];                                                                                       // 27382\n            for (var itemKey in collection) {                                                                          // 27383\n              if (hasOwnProperty.call(collection, itemKey) && itemKey.charAt(0) !== '$') {                             // 27384\n                collectionKeys.push(itemKey);                                                                          // 27385\n              }                                                                                                        // 27386\n            }                                                                                                          // 27387\n          }                                                                                                            // 27388\n                                                                                                                       // 27389\n          collectionLength = collectionKeys.length;                                                                    // 27390\n          nextBlockOrder = new Array(collectionLength);                                                                // 27391\n                                                                                                                       // 27392\n          // locate existing items                                                                                     // 27393\n          for (index = 0; index < collectionLength; index++) {                                                         // 27394\n            key = (collection === collectionKeys) ? index : collectionKeys[index];                                     // 27395\n            value = collection[key];                                                                                   // 27396\n            trackById = trackByIdFn(key, value, index);                                                                // 27397\n            if (lastBlockMap[trackById]) {                                                                             // 27398\n              // found previously seen block                                                                           // 27399\n              block = lastBlockMap[trackById];                                                                         // 27400\n              delete lastBlockMap[trackById];                                                                          // 27401\n              nextBlockMap[trackById] = block;                                                                         // 27402\n              nextBlockOrder[index] = block;                                                                           // 27403\n            } else if (nextBlockMap[trackById]) {                                                                      // 27404\n              // if collision detected. restore lastBlockMap and throw an error                                        // 27405\n              forEach(nextBlockOrder, function(block) {                                                                // 27406\n                if (block && block.scope) lastBlockMap[block.id] = block;                                              // 27407\n              });                                                                                                      // 27408\n              throw ngRepeatMinErr('dupes',                                                                            // 27409\n                  \"Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}\",\n                  expression, trackById, value);                                                                       // 27411\n            } else {                                                                                                   // 27412\n              // new never before seen block                                                                           // 27413\n              nextBlockOrder[index] = {id: trackById, scope: undefined, clone: undefined};                             // 27414\n              nextBlockMap[trackById] = true;                                                                          // 27415\n            }                                                                                                          // 27416\n          }                                                                                                            // 27417\n                                                                                                                       // 27418\n          // remove leftover items                                                                                     // 27419\n          for (var blockKey in lastBlockMap) {                                                                         // 27420\n            block = lastBlockMap[blockKey];                                                                            // 27421\n            elementsToRemove = getBlockNodes(block.clone);                                                             // 27422\n            $animate.leave(elementsToRemove);                                                                          // 27423\n            if (elementsToRemove[0].parentNode) {                                                                      // 27424\n              // if the element was not removed yet because of pending animation, mark it as deleted                   // 27425\n              // so that we can ignore it later                                                                        // 27426\n              for (index = 0, length = elementsToRemove.length; index < length; index++) {                             // 27427\n                elementsToRemove[index][NG_REMOVED] = true;                                                            // 27428\n              }                                                                                                        // 27429\n            }                                                                                                          // 27430\n            block.scope.$destroy();                                                                                    // 27431\n          }                                                                                                            // 27432\n                                                                                                                       // 27433\n          // we are not using forEach for perf reasons (trying to avoid #call)                                         // 27434\n          for (index = 0; index < collectionLength; index++) {                                                         // 27435\n            key = (collection === collectionKeys) ? index : collectionKeys[index];                                     // 27436\n            value = collection[key];                                                                                   // 27437\n            block = nextBlockOrder[index];                                                                             // 27438\n                                                                                                                       // 27439\n            if (block.scope) {                                                                                         // 27440\n              // if we have already seen this object, then we need to reuse the                                        // 27441\n              // associated scope/element                                                                              // 27442\n                                                                                                                       // 27443\n              nextNode = previousNode;                                                                                 // 27444\n                                                                                                                       // 27445\n              // skip nodes that are already pending removal via leave animation                                       // 27446\n              do {                                                                                                     // 27447\n                nextNode = nextNode.nextSibling;                                                                       // 27448\n              } while (nextNode && nextNode[NG_REMOVED]);                                                              // 27449\n                                                                                                                       // 27450\n              if (getBlockStart(block) != nextNode) {                                                                  // 27451\n                // existing item which got moved                                                                       // 27452\n                $animate.move(getBlockNodes(block.clone), null, jqLite(previousNode));                                 // 27453\n              }                                                                                                        // 27454\n              previousNode = getBlockEnd(block);                                                                       // 27455\n              updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);           // 27456\n            } else {                                                                                                   // 27457\n              // new item which we don't know about                                                                    // 27458\n              $transclude(function ngRepeatTransclude(clone, scope) {                                                  // 27459\n                block.scope = scope;                                                                                   // 27460\n                // http://jsperf.com/clone-vs-createcomment                                                            // 27461\n                var endNode = ngRepeatEndComment.cloneNode(false);                                                     // 27462\n                clone[clone.length++] = endNode;                                                                       // 27463\n                                                                                                                       // 27464\n                // TODO(perf): support naked previousNode in `enter` to avoid creation of jqLite wrapper?              // 27465\n                $animate.enter(clone, null, jqLite(previousNode));                                                     // 27466\n                previousNode = endNode;                                                                                // 27467\n                // Note: We only need the first/last node of the cloned nodes.                                         // 27468\n                // However, we need to keep the reference to the jqlite wrapper as it might be changed later           // 27469\n                // by a directive with templateUrl when its template arrives.                                          // 27470\n                block.clone = clone;                                                                                   // 27471\n                nextBlockMap[block.id] = block;                                                                        // 27472\n                updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);         // 27473\n              });                                                                                                      // 27474\n            }                                                                                                          // 27475\n          }                                                                                                            // 27476\n          lastBlockMap = nextBlockMap;                                                                                 // 27477\n        });                                                                                                            // 27478\n      };                                                                                                               // 27479\n    }                                                                                                                  // 27480\n  };                                                                                                                   // 27481\n}];                                                                                                                    // 27482\n                                                                                                                       // 27483\nvar NG_HIDE_CLASS = 'ng-hide';                                                                                         // 27484\nvar NG_HIDE_IN_PROGRESS_CLASS = 'ng-hide-animate';                                                                     // 27485\n/**                                                                                                                    // 27486\n * @ngdoc directive                                                                                                    // 27487\n * @name ngShow                                                                                                        // 27488\n * @multiElement                                                                                                       // 27489\n *                                                                                                                     // 27490\n * @description                                                                                                        // 27491\n * The `ngShow` directive shows or hides the given HTML element based on the expression                                // 27492\n * provided to the `ngShow` attribute. The element is shown or hidden by removing or adding                            // 27493\n * the `.ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined                                   // 27494\n * in AngularJS and sets the display style to none (using an !important flag).                                         // 27495\n * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).                 // 27496\n *                                                                                                                     // 27497\n * ```html                                                                                                             // 27498\n * <!-- when $scope.myValue is truthy (element is visible) -->                                                         // 27499\n * <div ng-show=\"myValue\"></div>                                                                                       // 27500\n *                                                                                                                     // 27501\n * <!-- when $scope.myValue is falsy (element is hidden) -->                                                           // 27502\n * <div ng-show=\"myValue\" class=\"ng-hide\"></div>                                                                       // 27503\n * ```                                                                                                                 // 27504\n *                                                                                                                     // 27505\n * When the `ngShow` expression evaluates to a falsy value then the `.ng-hide` CSS class is added to the class         // 27506\n * attribute on the element causing it to become hidden. When truthy, the `.ng-hide` CSS class is removed              // 27507\n * from the element causing the element not to appear hidden.                                                          // 27508\n *                                                                                                                     // 27509\n * ## Why is !important used?                                                                                          // 27510\n *                                                                                                                     // 27511\n * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector   // 27512\n * can be easily overridden by heavier selectors. For example, something as simple                                     // 27513\n * as changing the display style on a HTML list item would make hidden elements appear visible.                        // 27514\n * This also becomes a bigger issue when dealing with CSS frameworks.                                                  // 27515\n *                                                                                                                     // 27516\n * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector        // 27517\n * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the        // 27518\n * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.        // 27519\n *                                                                                                                     // 27520\n * ### Overriding `.ng-hide`                                                                                           // 27521\n *                                                                                                                     // 27522\n * By default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change       // 27523\n * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`           // 27524\n * class CSS. Note that the selector that needs to be used is actually `.ng-hide:not(.ng-hide-animate)` to cope        // 27525\n * with extra animation classes that can be added.                                                                     // 27526\n *                                                                                                                     // 27527\n * ```css                                                                                                              // 27528\n * .ng-hide:not(.ng-hide-animate) {                                                                                    // 27529\n *   /&#42; this is just another form of hiding an element &#42;/                                                      // 27530\n *   display: block!important;                                                                                         // 27531\n *   position: absolute;                                                                                               // 27532\n *   top: -9999px;                                                                                                     // 27533\n *   left: -9999px;                                                                                                    // 27534\n * }                                                                                                                   // 27535\n * ```                                                                                                                 // 27536\n *                                                                                                                     // 27537\n * By default you don't need to override in CSS anything and the animations will work around the display style.        // 27538\n *                                                                                                                     // 27539\n * ## A note about animations with `ngShow`                                                                            // 27540\n *                                                                                                                     // 27541\n * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression     // 27542\n * is true and false. This system works like the animation system present with ngClass except that                     // 27543\n * you must also include the !important flag to override the display property                                          // 27544\n * so that you can perform an animation when the element is hidden during the time of the animation.                   // 27545\n *                                                                                                                     // 27546\n * ```css                                                                                                              // 27547\n * //                                                                                                                  // 27548\n * //a working example can be found at the bottom of this page                                                         // 27549\n * //                                                                                                                  // 27550\n * .my-element.ng-hide-add, .my-element.ng-hide-remove {                                                               // 27551\n *   /&#42; this is required as of 1.3x to properly                                                                    // 27552\n *      apply all styling in a show/hide animation &#42;/                                                              // 27553\n *   transition: 0s linear all;                                                                                        // 27554\n * }                                                                                                                   // 27555\n *                                                                                                                     // 27556\n * .my-element.ng-hide-add-active,                                                                                     // 27557\n * .my-element.ng-hide-remove-active {                                                                                 // 27558\n *   /&#42; the transition is defined in the active class &#42;/                                                       // 27559\n *   transition: 1s linear all;                                                                                        // 27560\n * }                                                                                                                   // 27561\n *                                                                                                                     // 27562\n * .my-element.ng-hide-add { ... }                                                                                     // 27563\n * .my-element.ng-hide-add.ng-hide-add-active { ... }                                                                  // 27564\n * .my-element.ng-hide-remove { ... }                                                                                  // 27565\n * .my-element.ng-hide-remove.ng-hide-remove-active { ... }                                                            // 27566\n * ```                                                                                                                 // 27567\n *                                                                                                                     // 27568\n * Keep in mind that, as of AngularJS version 1.3.0-beta.11, there is no need to change the display                    // 27569\n * property to block during animation states--ngAnimate will handle the style toggling automatically for you.          // 27570\n *                                                                                                                     // 27571\n * @animations                                                                                                         // 27572\n * addClass: `.ng-hide` - happens after the `ngShow` expression evaluates to a truthy value and the just before contents are set to visible\n * removeClass: `.ng-hide` - happens after the `ngShow` expression evaluates to a non truthy value and just before the contents are set to hidden\n *                                                                                                                     // 27575\n * @element ANY                                                                                                        // 27576\n * @param {expression} ngShow If the {@link guide/expression expression} is truthy                                     // 27577\n *     then the element is shown or hidden respectively.                                                               // 27578\n *                                                                                                                     // 27579\n * @example                                                                                                            // 27580\n  <example module=\"ngAnimate\" deps=\"angular-animate.js\" animations=\"true\">                                             // 27581\n    <file name=\"index.html\">                                                                                           // 27582\n      Click me: <input type=\"checkbox\" ng-model=\"checked\" aria-label=\"Toggle ngHide\"><br/>                             // 27583\n      <div>                                                                                                            // 27584\n        Show:                                                                                                          // 27585\n        <div class=\"check-element animate-show\" ng-show=\"checked\">                                                     // 27586\n          <span class=\"glyphicon glyphicon-thumbs-up\"></span> I show up when your checkbox is checked.                 // 27587\n        </div>                                                                                                         // 27588\n      </div>                                                                                                           // 27589\n      <div>                                                                                                            // 27590\n        Hide:                                                                                                          // 27591\n        <div class=\"check-element animate-show\" ng-hide=\"checked\">                                                     // 27592\n          <span class=\"glyphicon glyphicon-thumbs-down\"></span> I hide when your checkbox is checked.                  // 27593\n        </div>                                                                                                         // 27594\n      </div>                                                                                                           // 27595\n    </file>                                                                                                            // 27596\n    <file name=\"glyphicons.css\">                                                                                       // 27597\n      @import url(../../components/bootstrap-3.1.1/css/bootstrap.css);                                                 // 27598\n    </file>                                                                                                            // 27599\n    <file name=\"animations.css\">                                                                                       // 27600\n      .animate-show {                                                                                                  // 27601\n        line-height: 20px;                                                                                             // 27602\n        opacity: 1;                                                                                                    // 27603\n        padding: 10px;                                                                                                 // 27604\n        border: 1px solid black;                                                                                       // 27605\n        background: white;                                                                                             // 27606\n      }                                                                                                                // 27607\n                                                                                                                       // 27608\n      .animate-show.ng-hide-add, .animate-show.ng-hide-remove {                                                        // 27609\n        transition: all linear 0.5s;                                                                                   // 27610\n      }                                                                                                                // 27611\n                                                                                                                       // 27612\n      .animate-show.ng-hide {                                                                                          // 27613\n        line-height: 0;                                                                                                // 27614\n        opacity: 0;                                                                                                    // 27615\n        padding: 0 10px;                                                                                               // 27616\n      }                                                                                                                // 27617\n                                                                                                                       // 27618\n      .check-element {                                                                                                 // 27619\n        padding: 10px;                                                                                                 // 27620\n        border: 1px solid black;                                                                                       // 27621\n        background: white;                                                                                             // 27622\n      }                                                                                                                // 27623\n    </file>                                                                                                            // 27624\n    <file name=\"protractor.js\" type=\"protractor\">                                                                      // 27625\n      var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));                                                      // 27626\n      var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));                                                  // 27627\n                                                                                                                       // 27628\n      it('should check ng-show / ng-hide', function() {                                                                // 27629\n        expect(thumbsUp.isDisplayed()).toBeFalsy();                                                                    // 27630\n        expect(thumbsDown.isDisplayed()).toBeTruthy();                                                                 // 27631\n                                                                                                                       // 27632\n        element(by.model('checked')).click();                                                                          // 27633\n                                                                                                                       // 27634\n        expect(thumbsUp.isDisplayed()).toBeTruthy();                                                                   // 27635\n        expect(thumbsDown.isDisplayed()).toBeFalsy();                                                                  // 27636\n      });                                                                                                              // 27637\n    </file>                                                                                                            // 27638\n  </example>                                                                                                           // 27639\n */                                                                                                                    // 27640\nvar ngShowDirective = ['$animate', function($animate) {                                                                // 27641\n  return {                                                                                                             // 27642\n    restrict: 'A',                                                                                                     // 27643\n    multiElement: true,                                                                                                // 27644\n    link: function(scope, element, attr) {                                                                             // 27645\n      scope.$watch(attr.ngShow, function ngShowWatchAction(value) {                                                    // 27646\n        // we're adding a temporary, animation-specific class for ng-hide since this way                               // 27647\n        // we can control when the element is actually displayed on screen without having                              // 27648\n        // to have a global/greedy CSS selector that breaks when other animations are run.                             // 27649\n        // Read: https://github.com/angular/angular.js/issues/9103#issuecomment-58335845                               // 27650\n        $animate[value ? 'removeClass' : 'addClass'](element, NG_HIDE_CLASS, {                                         // 27651\n          tempClasses: NG_HIDE_IN_PROGRESS_CLASS                                                                       // 27652\n        });                                                                                                            // 27653\n      });                                                                                                              // 27654\n    }                                                                                                                  // 27655\n  };                                                                                                                   // 27656\n}];                                                                                                                    // 27657\n                                                                                                                       // 27658\n                                                                                                                       // 27659\n/**                                                                                                                    // 27660\n * @ngdoc directive                                                                                                    // 27661\n * @name ngHide                                                                                                        // 27662\n * @multiElement                                                                                                       // 27663\n *                                                                                                                     // 27664\n * @description                                                                                                        // 27665\n * The `ngHide` directive shows or hides the given HTML element based on the expression                                // 27666\n * provided to the `ngHide` attribute. The element is shown or hidden by removing or adding                            // 27667\n * the `ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined                                    // 27668\n * in AngularJS and sets the display style to none (using an !important flag).                                         // 27669\n * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).                 // 27670\n *                                                                                                                     // 27671\n * ```html                                                                                                             // 27672\n * <!-- when $scope.myValue is truthy (element is hidden) -->                                                          // 27673\n * <div ng-hide=\"myValue\" class=\"ng-hide\"></div>                                                                       // 27674\n *                                                                                                                     // 27675\n * <!-- when $scope.myValue is falsy (element is visible) -->                                                          // 27676\n * <div ng-hide=\"myValue\"></div>                                                                                       // 27677\n * ```                                                                                                                 // 27678\n *                                                                                                                     // 27679\n * When the `ngHide` expression evaluates to a truthy value then the `.ng-hide` CSS class is added to the class        // 27680\n * attribute on the element causing it to become hidden. When falsy, the `.ng-hide` CSS class is removed               // 27681\n * from the element causing the element not to appear hidden.                                                          // 27682\n *                                                                                                                     // 27683\n * ## Why is !important used?                                                                                          // 27684\n *                                                                                                                     // 27685\n * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector   // 27686\n * can be easily overridden by heavier selectors. For example, something as simple                                     // 27687\n * as changing the display style on a HTML list item would make hidden elements appear visible.                        // 27688\n * This also becomes a bigger issue when dealing with CSS frameworks.                                                  // 27689\n *                                                                                                                     // 27690\n * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector        // 27691\n * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the        // 27692\n * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.        // 27693\n *                                                                                                                     // 27694\n * ### Overriding `.ng-hide`                                                                                           // 27695\n *                                                                                                                     // 27696\n * By default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change       // 27697\n * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`           // 27698\n * class in CSS:                                                                                                       // 27699\n *                                                                                                                     // 27700\n * ```css                                                                                                              // 27701\n * .ng-hide {                                                                                                          // 27702\n *   /&#42; this is just another form of hiding an element &#42;/                                                      // 27703\n *   display: block!important;                                                                                         // 27704\n *   position: absolute;                                                                                               // 27705\n *   top: -9999px;                                                                                                     // 27706\n *   left: -9999px;                                                                                                    // 27707\n * }                                                                                                                   // 27708\n * ```                                                                                                                 // 27709\n *                                                                                                                     // 27710\n * By default you don't need to override in CSS anything and the animations will work around the display style.        // 27711\n *                                                                                                                     // 27712\n * ## A note about animations with `ngHide`                                                                            // 27713\n *                                                                                                                     // 27714\n * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression     // 27715\n * is true and false. This system works like the animation system present with ngClass, except that the `.ng-hide`     // 27716\n * CSS class is added and removed for you instead of your own CSS class.                                               // 27717\n *                                                                                                                     // 27718\n * ```css                                                                                                              // 27719\n * //                                                                                                                  // 27720\n * //a working example can be found at the bottom of this page                                                         // 27721\n * //                                                                                                                  // 27722\n * .my-element.ng-hide-add, .my-element.ng-hide-remove {                                                               // 27723\n *   transition: 0.5s linear all;                                                                                      // 27724\n * }                                                                                                                   // 27725\n *                                                                                                                     // 27726\n * .my-element.ng-hide-add { ... }                                                                                     // 27727\n * .my-element.ng-hide-add.ng-hide-add-active { ... }                                                                  // 27728\n * .my-element.ng-hide-remove { ... }                                                                                  // 27729\n * .my-element.ng-hide-remove.ng-hide-remove-active { ... }                                                            // 27730\n * ```                                                                                                                 // 27731\n *                                                                                                                     // 27732\n * Keep in mind that, as of AngularJS version 1.3.0-beta.11, there is no need to change the display                    // 27733\n * property to block during animation states--ngAnimate will handle the style toggling automatically for you.          // 27734\n *                                                                                                                     // 27735\n * @animations                                                                                                         // 27736\n * removeClass: `.ng-hide` - happens after the `ngHide` expression evaluates to a truthy value and just before the contents are set to hidden\n * addClass: `.ng-hide` - happens after the `ngHide` expression evaluates to a non truthy value and just before the contents are set to visible\n *                                                                                                                     // 27739\n * @element ANY                                                                                                        // 27740\n * @param {expression} ngHide If the {@link guide/expression expression} is truthy then                                // 27741\n *     the element is shown or hidden respectively.                                                                    // 27742\n *                                                                                                                     // 27743\n * @example                                                                                                            // 27744\n  <example module=\"ngAnimate\" deps=\"angular-animate.js\" animations=\"true\">                                             // 27745\n    <file name=\"index.html\">                                                                                           // 27746\n      Click me: <input type=\"checkbox\" ng-model=\"checked\" aria-label=\"Toggle ngShow\"><br/>                             // 27747\n      <div>                                                                                                            // 27748\n        Show:                                                                                                          // 27749\n        <div class=\"check-element animate-hide\" ng-show=\"checked\">                                                     // 27750\n          <span class=\"glyphicon glyphicon-thumbs-up\"></span> I show up when your checkbox is checked.                 // 27751\n        </div>                                                                                                         // 27752\n      </div>                                                                                                           // 27753\n      <div>                                                                                                            // 27754\n        Hide:                                                                                                          // 27755\n        <div class=\"check-element animate-hide\" ng-hide=\"checked\">                                                     // 27756\n          <span class=\"glyphicon glyphicon-thumbs-down\"></span> I hide when your checkbox is checked.                  // 27757\n        </div>                                                                                                         // 27758\n      </div>                                                                                                           // 27759\n    </file>                                                                                                            // 27760\n    <file name=\"glyphicons.css\">                                                                                       // 27761\n      @import url(../../components/bootstrap-3.1.1/css/bootstrap.css);                                                 // 27762\n    </file>                                                                                                            // 27763\n    <file name=\"animations.css\">                                                                                       // 27764\n      .animate-hide {                                                                                                  // 27765\n        transition: all linear 0.5s;                                                                                   // 27766\n        line-height: 20px;                                                                                             // 27767\n        opacity: 1;                                                                                                    // 27768\n        padding: 10px;                                                                                                 // 27769\n        border: 1px solid black;                                                                                       // 27770\n        background: white;                                                                                             // 27771\n      }                                                                                                                // 27772\n                                                                                                                       // 27773\n      .animate-hide.ng-hide {                                                                                          // 27774\n        line-height: 0;                                                                                                // 27775\n        opacity: 0;                                                                                                    // 27776\n        padding: 0 10px;                                                                                               // 27777\n      }                                                                                                                // 27778\n                                                                                                                       // 27779\n      .check-element {                                                                                                 // 27780\n        padding: 10px;                                                                                                 // 27781\n        border: 1px solid black;                                                                                       // 27782\n        background: white;                                                                                             // 27783\n      }                                                                                                                // 27784\n    </file>                                                                                                            // 27785\n    <file name=\"protractor.js\" type=\"protractor\">                                                                      // 27786\n      var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));                                                      // 27787\n      var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));                                                  // 27788\n                                                                                                                       // 27789\n      it('should check ng-show / ng-hide', function() {                                                                // 27790\n        expect(thumbsUp.isDisplayed()).toBeFalsy();                                                                    // 27791\n        expect(thumbsDown.isDisplayed()).toBeTruthy();                                                                 // 27792\n                                                                                                                       // 27793\n        element(by.model('checked')).click();                                                                          // 27794\n                                                                                                                       // 27795\n        expect(thumbsUp.isDisplayed()).toBeTruthy();                                                                   // 27796\n        expect(thumbsDown.isDisplayed()).toBeFalsy();                                                                  // 27797\n      });                                                                                                              // 27798\n    </file>                                                                                                            // 27799\n  </example>                                                                                                           // 27800\n */                                                                                                                    // 27801\nvar ngHideDirective = ['$animate', function($animate) {                                                                // 27802\n  return {                                                                                                             // 27803\n    restrict: 'A',                                                                                                     // 27804\n    multiElement: true,                                                                                                // 27805\n    link: function(scope, element, attr) {                                                                             // 27806\n      scope.$watch(attr.ngHide, function ngHideWatchAction(value) {                                                    // 27807\n        // The comment inside of the ngShowDirective explains why we add and                                           // 27808\n        // remove a temporary class for the show/hide animation                                                        // 27809\n        $animate[value ? 'addClass' : 'removeClass'](element,NG_HIDE_CLASS, {                                          // 27810\n          tempClasses: NG_HIDE_IN_PROGRESS_CLASS                                                                       // 27811\n        });                                                                                                            // 27812\n      });                                                                                                              // 27813\n    }                                                                                                                  // 27814\n  };                                                                                                                   // 27815\n}];                                                                                                                    // 27816\n                                                                                                                       // 27817\n/**                                                                                                                    // 27818\n * @ngdoc directive                                                                                                    // 27819\n * @name ngStyle                                                                                                       // 27820\n * @restrict AC                                                                                                        // 27821\n *                                                                                                                     // 27822\n * @description                                                                                                        // 27823\n * The `ngStyle` directive allows you to set CSS style on an HTML element conditionally.                               // 27824\n *                                                                                                                     // 27825\n * @element ANY                                                                                                        // 27826\n * @param {expression} ngStyle                                                                                         // 27827\n *                                                                                                                     // 27828\n * {@link guide/expression Expression} which evals to an                                                               // 27829\n * object whose keys are CSS style names and values are corresponding values for those CSS                             // 27830\n * keys.                                                                                                               // 27831\n *                                                                                                                     // 27832\n * Since some CSS style names are not valid keys for an object, they must be quoted.                                   // 27833\n * See the 'background-color' style in the example below.                                                              // 27834\n *                                                                                                                     // 27835\n * @example                                                                                                            // 27836\n   <example>                                                                                                           // 27837\n     <file name=\"index.html\">                                                                                          // 27838\n        <input type=\"button\" value=\"set color\" ng-click=\"myStyle={color:'red'}\">                                       // 27839\n        <input type=\"button\" value=\"set background\" ng-click=\"myStyle={'background-color':'blue'}\">                    // 27840\n        <input type=\"button\" value=\"clear\" ng-click=\"myStyle={}\">                                                      // 27841\n        <br/>                                                                                                          // 27842\n        <span ng-style=\"myStyle\">Sample Text</span>                                                                    // 27843\n        <pre>myStyle={{myStyle}}</pre>                                                                                 // 27844\n     </file>                                                                                                           // 27845\n     <file name=\"style.css\">                                                                                           // 27846\n       span {                                                                                                          // 27847\n         color: black;                                                                                                 // 27848\n       }                                                                                                               // 27849\n     </file>                                                                                                           // 27850\n     <file name=\"protractor.js\" type=\"protractor\">                                                                     // 27851\n       var colorSpan = element(by.css('span'));                                                                        // 27852\n                                                                                                                       // 27853\n       it('should check ng-style', function() {                                                                        // 27854\n         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');                                              // 27855\n         element(by.css('input[value=\\'set color\\']')).click();                                                        // 27856\n         expect(colorSpan.getCssValue('color')).toBe('rgba(255, 0, 0, 1)');                                            // 27857\n         element(by.css('input[value=clear]')).click();                                                                // 27858\n         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');                                              // 27859\n       });                                                                                                             // 27860\n     </file>                                                                                                           // 27861\n   </example>                                                                                                          // 27862\n */                                                                                                                    // 27863\nvar ngStyleDirective = ngDirective(function(scope, element, attr) {                                                    // 27864\n  scope.$watch(attr.ngStyle, function ngStyleWatchAction(newStyles, oldStyles) {                                       // 27865\n    if (oldStyles && (newStyles !== oldStyles)) {                                                                      // 27866\n      forEach(oldStyles, function(val, style) { element.css(style, '');});                                             // 27867\n    }                                                                                                                  // 27868\n    if (newStyles) element.css(newStyles);                                                                             // 27869\n  }, true);                                                                                                            // 27870\n});                                                                                                                    // 27871\n                                                                                                                       // 27872\n/**                                                                                                                    // 27873\n * @ngdoc directive                                                                                                    // 27874\n * @name ngSwitch                                                                                                      // 27875\n * @restrict EA                                                                                                        // 27876\n *                                                                                                                     // 27877\n * @description                                                                                                        // 27878\n * The `ngSwitch` directive is used to conditionally swap DOM structure on your template based on a scope expression.  // 27879\n * Elements within `ngSwitch` but without `ngSwitchWhen` or `ngSwitchDefault` directives will be preserved at the location\n * as specified in the template.                                                                                       // 27881\n *                                                                                                                     // 27882\n * The directive itself works similar to ngInclude, however, instead of downloading template code (or loading it       // 27883\n * from the template cache), `ngSwitch` simply chooses one of the nested elements and makes it visible based on which element\n * matches the value obtained from the evaluated expression. In other words, you define a container element            // 27885\n * (where you place the directive), place an expression on the **`on=\"...\"` attribute**                                // 27886\n * (or the **`ng-switch=\"...\"` attribute**), define any inner elements inside of the directive and place               // 27887\n * a when attribute per element. The when attribute is used to inform ngSwitch which element to display when the on    // 27888\n * expression is evaluated. If a matching expression is not found via a when attribute then an element with the default\n * attribute is displayed.                                                                                             // 27890\n *                                                                                                                     // 27891\n * <div class=\"alert alert-info\">                                                                                      // 27892\n * Be aware that the attribute values to match against cannot be expressions. They are interpreted                     // 27893\n * as literal string values to match against.                                                                          // 27894\n * For example, **`ng-switch-when=\"someVal\"`** will match against the string `\"someVal\"` not against the               // 27895\n * value of the expression `$scope.someVal`.                                                                           // 27896\n * </div>                                                                                                              // 27897\n                                                                                                                       // 27898\n * @animations                                                                                                         // 27899\n * enter - happens after the ngSwitch contents change and the matched child element is placed inside the container     // 27900\n * leave - happens just after the ngSwitch contents change and just before the former contents are removed from the DOM\n *                                                                                                                     // 27902\n * @usage                                                                                                              // 27903\n *                                                                                                                     // 27904\n * ```                                                                                                                 // 27905\n * <ANY ng-switch=\"expression\">                                                                                        // 27906\n *   <ANY ng-switch-when=\"matchValue1\">...</ANY>                                                                       // 27907\n *   <ANY ng-switch-when=\"matchValue2\">...</ANY>                                                                       // 27908\n *   <ANY ng-switch-default>...</ANY>                                                                                  // 27909\n * </ANY>                                                                                                              // 27910\n * ```                                                                                                                 // 27911\n *                                                                                                                     // 27912\n *                                                                                                                     // 27913\n * @scope                                                                                                              // 27914\n * @priority 1200                                                                                                      // 27915\n * @param {*} ngSwitch|on expression to match against <code>ng-switch-when</code>.                                     // 27916\n * On child elements add:                                                                                              // 27917\n *                                                                                                                     // 27918\n * * `ngSwitchWhen`: the case statement to match against. If match then this                                           // 27919\n *   case will be displayed. If the same match appears multiple times, all the                                         // 27920\n *   elements will be displayed.                                                                                       // 27921\n * * `ngSwitchDefault`: the default case when no other case match. If there                                            // 27922\n *   are multiple default cases, all of them will be displayed when no other                                           // 27923\n *   case match.                                                                                                       // 27924\n *                                                                                                                     // 27925\n *                                                                                                                     // 27926\n * @example                                                                                                            // 27927\n  <example module=\"switchExample\" deps=\"angular-animate.js\" animations=\"true\">                                         // 27928\n    <file name=\"index.html\">                                                                                           // 27929\n      <div ng-controller=\"ExampleController\">                                                                          // 27930\n        <select ng-model=\"selection\" ng-options=\"item for item in items\">                                              // 27931\n        </select>                                                                                                      // 27932\n        <code>selection={{selection}}</code>                                                                           // 27933\n        <hr/>                                                                                                          // 27934\n        <div class=\"animate-switch-container\"                                                                          // 27935\n          ng-switch on=\"selection\">                                                                                    // 27936\n            <div class=\"animate-switch\" ng-switch-when=\"settings\">Settings Div</div>                                   // 27937\n            <div class=\"animate-switch\" ng-switch-when=\"home\">Home Span</div>                                          // 27938\n            <div class=\"animate-switch\" ng-switch-default>default</div>                                                // 27939\n        </div>                                                                                                         // 27940\n      </div>                                                                                                           // 27941\n    </file>                                                                                                            // 27942\n    <file name=\"script.js\">                                                                                            // 27943\n      angular.module('switchExample', ['ngAnimate'])                                                                   // 27944\n        .controller('ExampleController', ['$scope', function($scope) {                                                 // 27945\n          $scope.items = ['settings', 'home', 'other'];                                                                // 27946\n          $scope.selection = $scope.items[0];                                                                          // 27947\n        }]);                                                                                                           // 27948\n    </file>                                                                                                            // 27949\n    <file name=\"animations.css\">                                                                                       // 27950\n      .animate-switch-container {                                                                                      // 27951\n        position:relative;                                                                                             // 27952\n        background:white;                                                                                              // 27953\n        border:1px solid black;                                                                                        // 27954\n        height:40px;                                                                                                   // 27955\n        overflow:hidden;                                                                                               // 27956\n      }                                                                                                                // 27957\n                                                                                                                       // 27958\n      .animate-switch {                                                                                                // 27959\n        padding:10px;                                                                                                  // 27960\n      }                                                                                                                // 27961\n                                                                                                                       // 27962\n      .animate-switch.ng-animate {                                                                                     // 27963\n        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;                                                  // 27964\n                                                                                                                       // 27965\n        position:absolute;                                                                                             // 27966\n        top:0;                                                                                                         // 27967\n        left:0;                                                                                                        // 27968\n        right:0;                                                                                                       // 27969\n        bottom:0;                                                                                                      // 27970\n      }                                                                                                                // 27971\n                                                                                                                       // 27972\n      .animate-switch.ng-leave.ng-leave-active,                                                                        // 27973\n      .animate-switch.ng-enter {                                                                                       // 27974\n        top:-50px;                                                                                                     // 27975\n      }                                                                                                                // 27976\n      .animate-switch.ng-leave,                                                                                        // 27977\n      .animate-switch.ng-enter.ng-enter-active {                                                                       // 27978\n        top:0;                                                                                                         // 27979\n      }                                                                                                                // 27980\n    </file>                                                                                                            // 27981\n    <file name=\"protractor.js\" type=\"protractor\">                                                                      // 27982\n      var switchElem = element(by.css('[ng-switch]'));                                                                 // 27983\n      var select = element(by.model('selection'));                                                                     // 27984\n                                                                                                                       // 27985\n      it('should start in settings', function() {                                                                      // 27986\n        expect(switchElem.getText()).toMatch(/Settings Div/);                                                          // 27987\n      });                                                                                                              // 27988\n      it('should change to home', function() {                                                                         // 27989\n        select.all(by.css('option')).get(1).click();                                                                   // 27990\n        expect(switchElem.getText()).toMatch(/Home Span/);                                                             // 27991\n      });                                                                                                              // 27992\n      it('should select default', function() {                                                                         // 27993\n        select.all(by.css('option')).get(2).click();                                                                   // 27994\n        expect(switchElem.getText()).toMatch(/default/);                                                               // 27995\n      });                                                                                                              // 27996\n    </file>                                                                                                            // 27997\n  </example>                                                                                                           // 27998\n */                                                                                                                    // 27999\nvar ngSwitchDirective = ['$animate', function($animate) {                                                              // 28000\n  return {                                                                                                             // 28001\n    require: 'ngSwitch',                                                                                               // 28002\n                                                                                                                       // 28003\n    // asks for $scope to fool the BC controller module                                                                // 28004\n    controller: ['$scope', function ngSwitchController() {                                                             // 28005\n     this.cases = {};                                                                                                  // 28006\n    }],                                                                                                                // 28007\n    link: function(scope, element, attr, ngSwitchController) {                                                         // 28008\n      var watchExpr = attr.ngSwitch || attr.on,                                                                        // 28009\n          selectedTranscludes = [],                                                                                    // 28010\n          selectedElements = [],                                                                                       // 28011\n          previousLeaveAnimations = [],                                                                                // 28012\n          selectedScopes = [];                                                                                         // 28013\n                                                                                                                       // 28014\n      var spliceFactory = function(array, index) {                                                                     // 28015\n          return function() { array.splice(index, 1); };                                                               // 28016\n      };                                                                                                               // 28017\n                                                                                                                       // 28018\n      scope.$watch(watchExpr, function ngSwitchWatchAction(value) {                                                    // 28019\n        var i, ii;                                                                                                     // 28020\n        for (i = 0, ii = previousLeaveAnimations.length; i < ii; ++i) {                                                // 28021\n          $animate.cancel(previousLeaveAnimations[i]);                                                                 // 28022\n        }                                                                                                              // 28023\n        previousLeaveAnimations.length = 0;                                                                            // 28024\n                                                                                                                       // 28025\n        for (i = 0, ii = selectedScopes.length; i < ii; ++i) {                                                         // 28026\n          var selected = getBlockNodes(selectedElements[i].clone);                                                     // 28027\n          selectedScopes[i].$destroy();                                                                                // 28028\n          var promise = previousLeaveAnimations[i] = $animate.leave(selected);                                         // 28029\n          promise.then(spliceFactory(previousLeaveAnimations, i));                                                     // 28030\n        }                                                                                                              // 28031\n                                                                                                                       // 28032\n        selectedElements.length = 0;                                                                                   // 28033\n        selectedScopes.length = 0;                                                                                     // 28034\n                                                                                                                       // 28035\n        if ((selectedTranscludes = ngSwitchController.cases['!' + value] || ngSwitchController.cases['?'])) {          // 28036\n          forEach(selectedTranscludes, function(selectedTransclude) {                                                  // 28037\n            selectedTransclude.transclude(function(caseElement, selectedScope) {                                       // 28038\n              selectedScopes.push(selectedScope);                                                                      // 28039\n              var anchor = selectedTransclude.element;                                                                 // 28040\n              caseElement[caseElement.length++] = document.createComment(' end ngSwitchWhen: ');                       // 28041\n              var block = { clone: caseElement };                                                                      // 28042\n                                                                                                                       // 28043\n              selectedElements.push(block);                                                                            // 28044\n              $animate.enter(caseElement, anchor.parent(), anchor);                                                    // 28045\n            });                                                                                                        // 28046\n          });                                                                                                          // 28047\n        }                                                                                                              // 28048\n      });                                                                                                              // 28049\n    }                                                                                                                  // 28050\n  };                                                                                                                   // 28051\n}];                                                                                                                    // 28052\n                                                                                                                       // 28053\nvar ngSwitchWhenDirective = ngDirective({                                                                              // 28054\n  transclude: 'element',                                                                                               // 28055\n  priority: 1200,                                                                                                      // 28056\n  require: '^ngSwitch',                                                                                                // 28057\n  multiElement: true,                                                                                                  // 28058\n  link: function(scope, element, attrs, ctrl, $transclude) {                                                           // 28059\n    ctrl.cases['!' + attrs.ngSwitchWhen] = (ctrl.cases['!' + attrs.ngSwitchWhen] || []);                               // 28060\n    ctrl.cases['!' + attrs.ngSwitchWhen].push({ transclude: $transclude, element: element });                          // 28061\n  }                                                                                                                    // 28062\n});                                                                                                                    // 28063\n                                                                                                                       // 28064\nvar ngSwitchDefaultDirective = ngDirective({                                                                           // 28065\n  transclude: 'element',                                                                                               // 28066\n  priority: 1200,                                                                                                      // 28067\n  require: '^ngSwitch',                                                                                                // 28068\n  multiElement: true,                                                                                                  // 28069\n  link: function(scope, element, attr, ctrl, $transclude) {                                                            // 28070\n    ctrl.cases['?'] = (ctrl.cases['?'] || []);                                                                         // 28071\n    ctrl.cases['?'].push({ transclude: $transclude, element: element });                                               // 28072\n   }                                                                                                                   // 28073\n});                                                                                                                    // 28074\n                                                                                                                       // 28075\n/**                                                                                                                    // 28076\n * @ngdoc directive                                                                                                    // 28077\n * @name ngTransclude                                                                                                  // 28078\n * @restrict EAC                                                                                                       // 28079\n *                                                                                                                     // 28080\n * @description                                                                                                        // 28081\n * Directive that marks the insertion point for the transcluded DOM of the nearest parent directive that uses transclusion.\n *                                                                                                                     // 28083\n * Any existing content of the element that this directive is placed on will be removed before the transcluded content is inserted.\n *                                                                                                                     // 28085\n * @element ANY                                                                                                        // 28086\n *                                                                                                                     // 28087\n * @example                                                                                                            // 28088\n   <example module=\"transcludeExample\">                                                                                // 28089\n     <file name=\"index.html\">                                                                                          // 28090\n       <script>                                                                                                        // 28091\n         angular.module('transcludeExample', [])                                                                       // 28092\n          .directive('pane', function(){                                                                               // 28093\n             return {                                                                                                  // 28094\n               restrict: 'E',                                                                                          // 28095\n               transclude: true,                                                                                       // 28096\n               scope: { title:'@' },                                                                                   // 28097\n               template: '<div style=\"border: 1px solid black;\">' +                                                    // 28098\n                           '<div style=\"background-color: gray\">{{title}}</div>' +                                     // 28099\n                           '<ng-transclude></ng-transclude>' +                                                         // 28100\n                         '</div>'                                                                                      // 28101\n             };                                                                                                        // 28102\n         })                                                                                                            // 28103\n         .controller('ExampleController', ['$scope', function($scope) {                                                // 28104\n           $scope.title = 'Lorem Ipsum';                                                                               // 28105\n           $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';                                   // 28106\n         }]);                                                                                                          // 28107\n       </script>                                                                                                       // 28108\n       <div ng-controller=\"ExampleController\">                                                                         // 28109\n         <input ng-model=\"title\" aria-label=\"title\"> <br/>                                                             // 28110\n         <textarea ng-model=\"text\" aria-label=\"text\"></textarea> <br/>                                                 // 28111\n         <pane title=\"{{title}}\">{{text}}</pane>                                                                       // 28112\n       </div>                                                                                                          // 28113\n     </file>                                                                                                           // 28114\n     <file name=\"protractor.js\" type=\"protractor\">                                                                     // 28115\n        it('should have transcluded', function() {                                                                     // 28116\n          var titleElement = element(by.model('title'));                                                               // 28117\n          titleElement.clear();                                                                                        // 28118\n          titleElement.sendKeys('TITLE');                                                                              // 28119\n          var textElement = element(by.model('text'));                                                                 // 28120\n          textElement.clear();                                                                                         // 28121\n          textElement.sendKeys('TEXT');                                                                                // 28122\n          expect(element(by.binding('title')).getText()).toEqual('TITLE');                                             // 28123\n          expect(element(by.binding('text')).getText()).toEqual('TEXT');                                               // 28124\n        });                                                                                                            // 28125\n     </file>                                                                                                           // 28126\n   </example>                                                                                                          // 28127\n *                                                                                                                     // 28128\n */                                                                                                                    // 28129\nvar ngTranscludeDirective = ngDirective({                                                                              // 28130\n  restrict: 'EAC',                                                                                                     // 28131\n  link: function($scope, $element, $attrs, controller, $transclude) {                                                  // 28132\n    if (!$transclude) {                                                                                                // 28133\n      throw minErr('ngTransclude')('orphan',                                                                           // 28134\n       'Illegal use of ngTransclude directive in the template! ' +                                                     // 28135\n       'No parent directive that requires a transclusion found. ' +                                                    // 28136\n       'Element: {0}',                                                                                                 // 28137\n       startingTag($element));                                                                                         // 28138\n    }                                                                                                                  // 28139\n                                                                                                                       // 28140\n    $transclude(function(clone) {                                                                                      // 28141\n      $element.empty();                                                                                                // 28142\n      $element.append(clone);                                                                                          // 28143\n    });                                                                                                                // 28144\n  }                                                                                                                    // 28145\n});                                                                                                                    // 28146\n                                                                                                                       // 28147\n/**                                                                                                                    // 28148\n * @ngdoc directive                                                                                                    // 28149\n * @name script                                                                                                        // 28150\n * @restrict E                                                                                                         // 28151\n *                                                                                                                     // 28152\n * @description                                                                                                        // 28153\n * Load the content of a `<script>` element into {@link ng.$templateCache `$templateCache`}, so that the               // 28154\n * template can be used by {@link ng.directive:ngInclude `ngInclude`},                                                 // 28155\n * {@link ngRoute.directive:ngView `ngView`}, or {@link guide/directive directives}. The type of the                   // 28156\n * `<script>` element must be specified as `text/ng-template`, and a cache name for the template must be               // 28157\n * assigned through the element's `id`, which can then be used as a directive's `templateUrl`.                         // 28158\n *                                                                                                                     // 28159\n * @param {string} type Must be set to `'text/ng-template'`.                                                           // 28160\n * @param {string} id Cache name of the template.                                                                      // 28161\n *                                                                                                                     // 28162\n * @example                                                                                                            // 28163\n  <example>                                                                                                            // 28164\n    <file name=\"index.html\">                                                                                           // 28165\n      <script type=\"text/ng-template\" id=\"/tpl.html\">                                                                  // 28166\n        Content of the template.                                                                                       // 28167\n      </script>                                                                                                        // 28168\n                                                                                                                       // 28169\n      <a ng-click=\"currentTpl='/tpl.html'\" id=\"tpl-link\">Load inlined template</a>                                     // 28170\n      <div id=\"tpl-content\" ng-include src=\"currentTpl\"></div>                                                         // 28171\n    </file>                                                                                                            // 28172\n    <file name=\"protractor.js\" type=\"protractor\">                                                                      // 28173\n      it('should load template defined inside script tag', function() {                                                // 28174\n        element(by.css('#tpl-link')).click();                                                                          // 28175\n        expect(element(by.css('#tpl-content')).getText()).toMatch(/Content of the template/);                          // 28176\n      });                                                                                                              // 28177\n    </file>                                                                                                            // 28178\n  </example>                                                                                                           // 28179\n */                                                                                                                    // 28180\nvar scriptDirective = ['$templateCache', function($templateCache) {                                                    // 28181\n  return {                                                                                                             // 28182\n    restrict: 'E',                                                                                                     // 28183\n    terminal: true,                                                                                                    // 28184\n    compile: function(element, attr) {                                                                                 // 28185\n      if (attr.type == 'text/ng-template') {                                                                           // 28186\n        var templateUrl = attr.id,                                                                                     // 28187\n            text = element[0].text;                                                                                    // 28188\n                                                                                                                       // 28189\n        $templateCache.put(templateUrl, text);                                                                         // 28190\n      }                                                                                                                // 28191\n    }                                                                                                                  // 28192\n  };                                                                                                                   // 28193\n}];                                                                                                                    // 28194\n                                                                                                                       // 28195\nvar noopNgModelController = { $setViewValue: noop, $render: noop };                                                    // 28196\n                                                                                                                       // 28197\n/**                                                                                                                    // 28198\n * @ngdoc type                                                                                                         // 28199\n * @name  select.SelectController                                                                                      // 28200\n * @description                                                                                                        // 28201\n * The controller for the `<select>` directive. This provides support for reading                                      // 28202\n * and writing the selected value(s) of the control and also coordinates dynamically                                   // 28203\n * added `<option>` elements, perhaps by an `ngRepeat` directive.                                                      // 28204\n */                                                                                                                    // 28205\nvar SelectController =                                                                                                 // 28206\n        ['$element', '$scope', '$attrs', function($element, $scope, $attrs) {                                          // 28207\n                                                                                                                       // 28208\n  var self = this,                                                                                                     // 28209\n      optionsMap = new HashMap();                                                                                      // 28210\n                                                                                                                       // 28211\n  // If the ngModel doesn't get provided then provide a dummy noop version to prevent errors                           // 28212\n  self.ngModelCtrl = noopNgModelController;                                                                            // 28213\n                                                                                                                       // 28214\n  // The \"unknown\" option is one that is prepended to the list if the viewValue                                        // 28215\n  // does not match any of the options. When it is rendered the value of the unknown                                   // 28216\n  // option is '? XXX ?' where XXX is the hashKey of the value that is not known.                                      // 28217\n  //                                                                                                                   // 28218\n  // We can't just jqLite('<option>') since jqLite is not smart enough                                                 // 28219\n  // to create it in <select> and IE barfs otherwise.                                                                  // 28220\n  self.unknownOption = jqLite(document.createElement('option'));                                                       // 28221\n  self.renderUnknownOption = function(val) {                                                                           // 28222\n    var unknownVal = '? ' + hashKey(val) + ' ?';                                                                       // 28223\n    self.unknownOption.val(unknownVal);                                                                                // 28224\n    $element.prepend(self.unknownOption);                                                                              // 28225\n    $element.val(unknownVal);                                                                                          // 28226\n  };                                                                                                                   // 28227\n                                                                                                                       // 28228\n  $scope.$on('$destroy', function() {                                                                                  // 28229\n    // disable unknown option so that we don't do work when the whole select is being destroyed                        // 28230\n    self.renderUnknownOption = noop;                                                                                   // 28231\n  });                                                                                                                  // 28232\n                                                                                                                       // 28233\n  self.removeUnknownOption = function() {                                                                              // 28234\n    if (self.unknownOption.parent()) self.unknownOption.remove();                                                      // 28235\n  };                                                                                                                   // 28236\n                                                                                                                       // 28237\n                                                                                                                       // 28238\n  // Read the value of the select control, the implementation of this changes depending                                // 28239\n  // upon whether the select can have multiple values and whether ngOptions is at work.                                // 28240\n  self.readValue = function readSingleValue() {                                                                        // 28241\n    self.removeUnknownOption();                                                                                        // 28242\n    return $element.val();                                                                                             // 28243\n  };                                                                                                                   // 28244\n                                                                                                                       // 28245\n                                                                                                                       // 28246\n  // Write the value to the select control, the implementation of this changes depending                               // 28247\n  // upon whether the select can have multiple values and whether ngOptions is at work.                                // 28248\n  self.writeValue = function writeSingleValue(value) {                                                                 // 28249\n    if (self.hasOption(value)) {                                                                                       // 28250\n      self.removeUnknownOption();                                                                                      // 28251\n      $element.val(value);                                                                                             // 28252\n      if (value === '') self.emptyOption.prop('selected', true); // to make IE9 happy                                  // 28253\n    } else {                                                                                                           // 28254\n      if (value == null && self.emptyOption) {                                                                         // 28255\n        self.removeUnknownOption();                                                                                    // 28256\n        $element.val('');                                                                                              // 28257\n      } else {                                                                                                         // 28258\n        self.renderUnknownOption(value);                                                                               // 28259\n      }                                                                                                                // 28260\n    }                                                                                                                  // 28261\n  };                                                                                                                   // 28262\n                                                                                                                       // 28263\n                                                                                                                       // 28264\n  // Tell the select control that an option, with the given value, has been added                                      // 28265\n  self.addOption = function(value, element) {                                                                          // 28266\n    assertNotHasOwnProperty(value, '\"option value\"');                                                                  // 28267\n    if (value === '') {                                                                                                // 28268\n      self.emptyOption = element;                                                                                      // 28269\n    }                                                                                                                  // 28270\n    var count = optionsMap.get(value) || 0;                                                                            // 28271\n    optionsMap.put(value, count + 1);                                                                                  // 28272\n  };                                                                                                                   // 28273\n                                                                                                                       // 28274\n  // Tell the select control that an option, with the given value, has been removed                                    // 28275\n  self.removeOption = function(value) {                                                                                // 28276\n    var count = optionsMap.get(value);                                                                                 // 28277\n    if (count) {                                                                                                       // 28278\n      if (count === 1) {                                                                                               // 28279\n        optionsMap.remove(value);                                                                                      // 28280\n        if (value === '') {                                                                                            // 28281\n          self.emptyOption = undefined;                                                                                // 28282\n        }                                                                                                              // 28283\n      } else {                                                                                                         // 28284\n        optionsMap.put(value, count - 1);                                                                              // 28285\n      }                                                                                                                // 28286\n    }                                                                                                                  // 28287\n  };                                                                                                                   // 28288\n                                                                                                                       // 28289\n  // Check whether the select control has an option matching the given value                                           // 28290\n  self.hasOption = function(value) {                                                                                   // 28291\n    return !!optionsMap.get(value);                                                                                    // 28292\n  };                                                                                                                   // 28293\n}];                                                                                                                    // 28294\n                                                                                                                       // 28295\n/**                                                                                                                    // 28296\n * @ngdoc directive                                                                                                    // 28297\n * @name select                                                                                                        // 28298\n * @restrict E                                                                                                         // 28299\n *                                                                                                                     // 28300\n * @description                                                                                                        // 28301\n * HTML `SELECT` element with angular data-binding.                                                                    // 28302\n *                                                                                                                     // 28303\n * The `select` directive is used together with {@link ngModel `ngModel`} to provide data-binding                      // 28304\n * between the scope and the `<select>` control (including setting default values).                                    // 28305\n * Ìt also handles dynamic `<option>` elements, which can be added using the {@link ngRepeat `ngRepeat}` or            // 28306\n * {@link ngOptions `ngOptions`} directives.                                                                           // 28307\n *                                                                                                                     // 28308\n * When an item in the `<select>` menu is selected, the value of the selected option will be bound                     // 28309\n * to the model identified by the `ngModel` directive. With static or repeated options, this is                        // 28310\n * the content of the `value` attribute or the textContent of the `<option>`, if the value attribute is missing.       // 28311\n * If you want dynamic value attributes, you can use interpolation inside the value attribute.                         // 28312\n *                                                                                                                     // 28313\n * <div class=\"alert alert-warning\">                                                                                   // 28314\n * Note that the value of a `select` directive used without `ngOptions` is always a string.                            // 28315\n * When the model needs to be bound to a non-string value, you must either explictly convert it                        // 28316\n * using a directive (see example below) or use `ngOptions` to specify the set of options.                             // 28317\n * This is because an option element can only be bound to string values at present.                                    // 28318\n * </div>                                                                                                              // 28319\n *                                                                                                                     // 28320\n * If the viewValue of `ngModel` does not match any of the options, then the control                                   // 28321\n * will automatically add an \"unknown\" option, which it then removes when the mismatch is resolved.                    // 28322\n *                                                                                                                     // 28323\n * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can                      // 28324\n * be nested into the `<select>` element. This element will then represent the `null` or \"not selected\"                // 28325\n * option. See example below for demonstration.                                                                        // 28326\n *                                                                                                                     // 28327\n * <div class=\"alert alert-info\">                                                                                      // 28328\n * In many cases, `ngRepeat` can be used on `<option>` elements instead of {@link ng.directive:ngOptions               // 28329\n * ngOptions} to achieve a similar result. However, `ngOptions` provides some benefits, such as                        // 28330\n * more flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the                    // 28331\n * comprehension expression, and additionally in reducing memory and increasing speed by not creating                  // 28332\n * a new scope for each repeated instance.                                                                             // 28333\n * </div>                                                                                                              // 28334\n *                                                                                                                     // 28335\n *                                                                                                                     // 28336\n * @param {string} ngModel Assignable angular expression to data-bind to.                                              // 28337\n * @param {string=} name Property name of the form under which the control is published.                               // 28338\n * @param {string=} required Sets `required` validation error key if the value is not entered.                         // 28339\n * @param {string=} ngRequired Adds required attribute and required validation constraint to                           // 28340\n * the element when the ngRequired expression evaluates to true. Use ngRequired instead of required                    // 28341\n * when you want to data-bind to the required attribute.                                                               // 28342\n * @param {string=} ngChange Angular expression to be executed when selected option(s) changes due to user             // 28343\n *    interaction with the select element.                                                                             // 28344\n * @param {string=} ngOptions sets the options that the select is populated with and defines what is                   // 28345\n * set on the model on selection. See {@link ngOptions `ngOptions`}.                                                   // 28346\n *                                                                                                                     // 28347\n * @example                                                                                                            // 28348\n * ### Simple `select` elements with static options                                                                    // 28349\n *                                                                                                                     // 28350\n * <example name=\"static-select\" module=\"staticSelect\">                                                                // 28351\n * <file name=\"index.html\">                                                                                            // 28352\n * <div ng-controller=\"ExampleController\">                                                                             // 28353\n *   <form name=\"myForm\">                                                                                              // 28354\n *     <label for=\"singleSelect\"> Single select: </label><br>                                                          // 28355\n *     <select name=\"singleSelect\" ng-model=\"data.singleSelect\">                                                       // 28356\n *       <option value=\"option-1\">Option 1</option>                                                                    // 28357\n *       <option value=\"option-2\">Option 2</option>                                                                    // 28358\n *     </select><br>                                                                                                   // 28359\n *                                                                                                                     // 28360\n *     <label for=\"singleSelect\"> Single select with \"not selected\" option and dynamic option values: </label><br>     // 28361\n *     <select name=\"singleSelect\" id=\"singleSelect\" ng-model=\"data.singleSelect\">                                     // 28362\n *       <option value=\"\">---Please select---</option> <!-- not selected / blank option -->                            // 28363\n *       <option value=\"{{data.option1}}\">Option 1</option> <!-- interpolation -->                                     // 28364\n *       <option value=\"option-2\">Option 2</option>                                                                    // 28365\n *     </select><br>                                                                                                   // 28366\n *     <button ng-click=\"forceUnknownOption()\">Force unknown option</button><br>                                       // 28367\n *     <tt>singleSelect = {{data.singleSelect}}</tt>                                                                   // 28368\n *                                                                                                                     // 28369\n *     <hr>                                                                                                            // 28370\n *     <label for=\"multipleSelect\"> Multiple select: </label><br>                                                      // 28371\n *     <select name=\"multipleSelect\" id=\"multipleSelect\" ng-model=\"data.multipleSelect\" multiple>                      // 28372\n *       <option value=\"option-1\">Option 1</option>                                                                    // 28373\n *       <option value=\"option-2\">Option 2</option>                                                                    // 28374\n *       <option value=\"option-3\">Option 3</option>                                                                    // 28375\n *     </select><br>                                                                                                   // 28376\n *     <tt>multipleSelect = {{data.multipleSelect}}</tt><br/>                                                          // 28377\n *   </form>                                                                                                           // 28378\n * </div>                                                                                                              // 28379\n * </file>                                                                                                             // 28380\n * <file name=\"app.js\">                                                                                                // 28381\n *  angular.module('staticSelect', [])                                                                                 // 28382\n *    .controller('ExampleController', ['$scope', function($scope) {                                                   // 28383\n *      $scope.data = {                                                                                                // 28384\n *       singleSelect: null,                                                                                           // 28385\n *       multipleSelect: [],                                                                                           // 28386\n *       option1: 'option-1',                                                                                          // 28387\n *      };                                                                                                             // 28388\n *                                                                                                                     // 28389\n *      $scope.forceUnknownOption = function() {                                                                       // 28390\n *        $scope.data.singleSelect = 'nonsense';                                                                       // 28391\n *      };                                                                                                             // 28392\n *   }]);                                                                                                              // 28393\n * </file>                                                                                                             // 28394\n *</example>                                                                                                           // 28395\n *                                                                                                                     // 28396\n * ### Using `ngRepeat` to generate `select` options                                                                   // 28397\n * <example name=\"ngrepeat-select\" module=\"ngrepeatSelect\">                                                            // 28398\n * <file name=\"index.html\">                                                                                            // 28399\n * <div ng-controller=\"ExampleController\">                                                                             // 28400\n *   <form name=\"myForm\">                                                                                              // 28401\n *     <label for=\"repeatSelect\"> Repeat select: </label>                                                              // 28402\n *     <select name=\"repeatSelect\" id=\"repeatSelect\" ng-model=\"data.repeatSelect\">                                     // 28403\n *       <option ng-repeat=\"option in data.availableOptions\" value=\"{{option.id}}\">{{option.name}}</option>            // 28404\n *     </select>                                                                                                       // 28405\n *   </form>                                                                                                           // 28406\n *   <hr>                                                                                                              // 28407\n *   <tt>repeatSelect = {{data.repeatSelect}}</tt><br/>                                                                // 28408\n * </div>                                                                                                              // 28409\n * </file>                                                                                                             // 28410\n * <file name=\"app.js\">                                                                                                // 28411\n *  angular.module('ngrepeatSelect', [])                                                                               // 28412\n *    .controller('ExampleController', ['$scope', function($scope) {                                                   // 28413\n *      $scope.data = {                                                                                                // 28414\n *       repeatSelect: null,                                                                                           // 28415\n *       availableOptions: [                                                                                           // 28416\n *         {id: '1', name: 'Option A'},                                                                                // 28417\n *         {id: '2', name: 'Option B'},                                                                                // 28418\n *         {id: '3', name: 'Option C'}                                                                                 // 28419\n *       ],                                                                                                            // 28420\n *      };                                                                                                             // 28421\n *   }]);                                                                                                              // 28422\n * </file>                                                                                                             // 28423\n *</example>                                                                                                           // 28424\n *                                                                                                                     // 28425\n *                                                                                                                     // 28426\n * ### Using `select` with `ngOptions` and setting a default value                                                     // 28427\n * See the {@link ngOptions ngOptions documentation} for more `ngOptions` usage examples.                              // 28428\n *                                                                                                                     // 28429\n * <example name=\"select-with-default-values\" module=\"defaultValueSelect\">                                             // 28430\n * <file name=\"index.html\">                                                                                            // 28431\n * <div ng-controller=\"ExampleController\">                                                                             // 28432\n *   <form name=\"myForm\">                                                                                              // 28433\n *     <label for=\"mySelect\">Make a choice:</label>                                                                    // 28434\n *     <select name=\"mySelect\" id=\"mySelect\"                                                                           // 28435\n *       ng-options=\"option.name for option in data.availableOptions track by option.id\"                               // 28436\n *       ng-model=\"data.selectedOption\"></select>                                                                      // 28437\n *   </form>                                                                                                           // 28438\n *   <hr>                                                                                                              // 28439\n *   <tt>option = {{data.selectedOption}}</tt><br/>                                                                    // 28440\n * </div>                                                                                                              // 28441\n * </file>                                                                                                             // 28442\n * <file name=\"app.js\">                                                                                                // 28443\n *  angular.module('defaultValueSelect', [])                                                                           // 28444\n *    .controller('ExampleController', ['$scope', function($scope) {                                                   // 28445\n *      $scope.data = {                                                                                                // 28446\n *       availableOptions: [                                                                                           // 28447\n *         {id: '1', name: 'Option A'},                                                                                // 28448\n *         {id: '2', name: 'Option B'},                                                                                // 28449\n *         {id: '3', name: 'Option C'}                                                                                 // 28450\n *       ],                                                                                                            // 28451\n *       selectedOption: {id: '3', name: 'Option C'} //This sets the default value of the select in the ui             // 28452\n *       };                                                                                                            // 28453\n *   }]);                                                                                                              // 28454\n * </file>                                                                                                             // 28455\n *</example>                                                                                                           // 28456\n *                                                                                                                     // 28457\n *                                                                                                                     // 28458\n * ### Binding `select` to a non-string value via `ngModel` parsing / formatting                                       // 28459\n *                                                                                                                     // 28460\n * <example name=\"select-with-non-string-options\" module=\"nonStringSelect\">                                            // 28461\n *   <file name=\"index.html\">                                                                                          // 28462\n *     <select ng-model=\"model.id\" convert-to-number>                                                                  // 28463\n *       <option value=\"0\">Zero</option>                                                                               // 28464\n *       <option value=\"1\">One</option>                                                                                // 28465\n *       <option value=\"2\">Two</option>                                                                                // 28466\n *     </select>                                                                                                       // 28467\n *     {{ model }}                                                                                                     // 28468\n *   </file>                                                                                                           // 28469\n *   <file name=\"app.js\">                                                                                              // 28470\n *     angular.module('nonStringSelect', [])                                                                           // 28471\n *       .run(function($rootScope) {                                                                                   // 28472\n *         $rootScope.model = { id: 2 };                                                                               // 28473\n *       })                                                                                                            // 28474\n *       .directive('convertToNumber', function() {                                                                    // 28475\n *         return {                                                                                                    // 28476\n *           require: 'ngModel',                                                                                       // 28477\n *           link: function(scope, element, attrs, ngModel) {                                                          // 28478\n *             ngModel.$parsers.push(function(val) {                                                                   // 28479\n *               return parseInt(val, 10);                                                                             // 28480\n *             });                                                                                                     // 28481\n *             ngModel.$formatters.push(function(val) {                                                                // 28482\n *               return '' + val;                                                                                      // 28483\n *             });                                                                                                     // 28484\n *           }                                                                                                         // 28485\n *         };                                                                                                          // 28486\n *       });                                                                                                           // 28487\n *   </file>                                                                                                           // 28488\n *   <file name=\"protractor.js\" type=\"protractor\">                                                                     // 28489\n *     it('should initialize to model', function() {                                                                   // 28490\n *       var select = element(by.css('select'));                                                                       // 28491\n *       expect(element(by.model('model.id')).$('option:checked').getText()).toEqual('Two');                           // 28492\n *     });                                                                                                             // 28493\n *   </file>                                                                                                           // 28494\n * </example>                                                                                                          // 28495\n *                                                                                                                     // 28496\n */                                                                                                                    // 28497\nvar selectDirective = function() {                                                                                     // 28498\n                                                                                                                       // 28499\n  return {                                                                                                             // 28500\n    restrict: 'E',                                                                                                     // 28501\n    require: ['select', '?ngModel'],                                                                                   // 28502\n    controller: SelectController,                                                                                      // 28503\n    link: function(scope, element, attr, ctrls) {                                                                      // 28504\n                                                                                                                       // 28505\n      // if ngModel is not defined, we don't need to do anything                                                       // 28506\n      var ngModelCtrl = ctrls[1];                                                                                      // 28507\n      if (!ngModelCtrl) return;                                                                                        // 28508\n                                                                                                                       // 28509\n      var selectCtrl = ctrls[0];                                                                                       // 28510\n                                                                                                                       // 28511\n      selectCtrl.ngModelCtrl = ngModelCtrl;                                                                            // 28512\n                                                                                                                       // 28513\n      // We delegate rendering to the `writeValue` method, which can be changed                                        // 28514\n      // if the select can have multiple selected values or if the options are being                                   // 28515\n      // generated by `ngOptions`                                                                                      // 28516\n      ngModelCtrl.$render = function() {                                                                               // 28517\n        selectCtrl.writeValue(ngModelCtrl.$viewValue);                                                                 // 28518\n      };                                                                                                               // 28519\n                                                                                                                       // 28520\n      // When the selected item(s) changes we delegate getting the value of the select control                         // 28521\n      // to the `readValue` method, which can be changed if the select can have multiple                               // 28522\n      // selected values or if the options are being generated by `ngOptions`                                          // 28523\n      element.on('change', function() {                                                                                // 28524\n        scope.$apply(function() {                                                                                      // 28525\n          ngModelCtrl.$setViewValue(selectCtrl.readValue());                                                           // 28526\n        });                                                                                                            // 28527\n      });                                                                                                              // 28528\n                                                                                                                       // 28529\n      // If the select allows multiple values then we need to modify how we read and write                             // 28530\n      // values from and to the control; also what it means for the value to be empty and                              // 28531\n      // we have to add an extra watch since ngModel doesn't work well with arrays - it                                // 28532\n      // doesn't trigger rendering if only an item in the array changes.                                               // 28533\n      if (attr.multiple) {                                                                                             // 28534\n                                                                                                                       // 28535\n        // Read value now needs to check each option to see if it is selected                                          // 28536\n        selectCtrl.readValue = function readMultipleValue() {                                                          // 28537\n          var array = [];                                                                                              // 28538\n          forEach(element.find('option'), function(option) {                                                           // 28539\n            if (option.selected) {                                                                                     // 28540\n              array.push(option.value);                                                                                // 28541\n            }                                                                                                          // 28542\n          });                                                                                                          // 28543\n          return array;                                                                                                // 28544\n        };                                                                                                             // 28545\n                                                                                                                       // 28546\n        // Write value now needs to set the selected property of each matching option                                  // 28547\n        selectCtrl.writeValue = function writeMultipleValue(value) {                                                   // 28548\n          var items = new HashMap(value);                                                                              // 28549\n          forEach(element.find('option'), function(option) {                                                           // 28550\n            option.selected = isDefined(items.get(option.value));                                                      // 28551\n          });                                                                                                          // 28552\n        };                                                                                                             // 28553\n                                                                                                                       // 28554\n        // we have to do it on each watch since ngModel watches reference, but                                         // 28555\n        // we need to work of an array, so we need to see if anything was inserted/removed                             // 28556\n        var lastView, lastViewRef = NaN;                                                                               // 28557\n        scope.$watch(function selectMultipleWatch() {                                                                  // 28558\n          if (lastViewRef === ngModelCtrl.$viewValue && !equals(lastView, ngModelCtrl.$viewValue)) {                   // 28559\n            lastView = shallowCopy(ngModelCtrl.$viewValue);                                                            // 28560\n            ngModelCtrl.$render();                                                                                     // 28561\n          }                                                                                                            // 28562\n          lastViewRef = ngModelCtrl.$viewValue;                                                                        // 28563\n        });                                                                                                            // 28564\n                                                                                                                       // 28565\n        // If we are a multiple select then value is now a collection                                                  // 28566\n        // so the meaning of $isEmpty changes                                                                          // 28567\n        ngModelCtrl.$isEmpty = function(value) {                                                                       // 28568\n          return !value || value.length === 0;                                                                         // 28569\n        };                                                                                                             // 28570\n                                                                                                                       // 28571\n      }                                                                                                                // 28572\n    }                                                                                                                  // 28573\n  };                                                                                                                   // 28574\n};                                                                                                                     // 28575\n                                                                                                                       // 28576\n                                                                                                                       // 28577\n// The option directive is purely designed to communicate the existence (or lack of)                                   // 28578\n// of dynamically created (and destroyed) option elements to their containing select                                   // 28579\n// directive via its controller.                                                                                       // 28580\nvar optionDirective = ['$interpolate', function($interpolate) {                                                        // 28581\n                                                                                                                       // 28582\n  function chromeHack(optionElement) {                                                                                 // 28583\n    // Workaround for https://code.google.com/p/chromium/issues/detail?id=381459                                       // 28584\n    // Adding an <option selected=\"selected\"> element to a <select required=\"required\"> should                         // 28585\n    // automatically select the new element                                                                            // 28586\n    if (optionElement[0].hasAttribute('selected')) {                                                                   // 28587\n      optionElement[0].selected = true;                                                                                // 28588\n    }                                                                                                                  // 28589\n  }                                                                                                                    // 28590\n                                                                                                                       // 28591\n  return {                                                                                                             // 28592\n    restrict: 'E',                                                                                                     // 28593\n    priority: 100,                                                                                                     // 28594\n    compile: function(element, attr) {                                                                                 // 28595\n                                                                                                                       // 28596\n      if (isDefined(attr.value)) {                                                                                     // 28597\n        // If the value attribute is defined, check if it contains an interpolation                                    // 28598\n        var valueInterpolated = $interpolate(attr.value, true);                                                        // 28599\n      } else {                                                                                                         // 28600\n        // If the value attribute is not defined then we fall back to the                                              // 28601\n        // text content of the option element, which may be interpolated                                               // 28602\n        var interpolateFn = $interpolate(element.text(), true);                                                        // 28603\n        if (!interpolateFn) {                                                                                          // 28604\n          attr.$set('value', element.text());                                                                          // 28605\n        }                                                                                                              // 28606\n      }                                                                                                                // 28607\n                                                                                                                       // 28608\n      return function(scope, element, attr) {                                                                          // 28609\n                                                                                                                       // 28610\n        // This is an optimization over using ^^ since we don't want to have to search                                 // 28611\n        // all the way to the root of the DOM for every single option element                                          // 28612\n        var selectCtrlName = '$selectController',                                                                      // 28613\n            parent = element.parent(),                                                                                 // 28614\n            selectCtrl = parent.data(selectCtrlName) ||                                                                // 28615\n              parent.parent().data(selectCtrlName); // in case we are in optgroup                                      // 28616\n                                                                                                                       // 28617\n        function addOption(optionValue) {                                                                              // 28618\n          selectCtrl.addOption(optionValue, element);                                                                  // 28619\n          selectCtrl.ngModelCtrl.$render();                                                                            // 28620\n          chromeHack(element);                                                                                         // 28621\n        }                                                                                                              // 28622\n                                                                                                                       // 28623\n        // Only update trigger option updates if this is an option within a `select`                                   // 28624\n        // that also has `ngModel` attached                                                                            // 28625\n        if (selectCtrl && selectCtrl.ngModelCtrl) {                                                                    // 28626\n                                                                                                                       // 28627\n          if (valueInterpolated) {                                                                                     // 28628\n            // The value attribute is interpolated                                                                     // 28629\n            var oldVal;                                                                                                // 28630\n            attr.$observe('value', function valueAttributeObserveAction(newVal) {                                      // 28631\n              if (isDefined(oldVal)) {                                                                                 // 28632\n                selectCtrl.removeOption(oldVal);                                                                       // 28633\n              }                                                                                                        // 28634\n              oldVal = newVal;                                                                                         // 28635\n              addOption(newVal);                                                                                       // 28636\n            });                                                                                                        // 28637\n          } else if (interpolateFn) {                                                                                  // 28638\n            // The text content is interpolated                                                                        // 28639\n            scope.$watch(interpolateFn, function interpolateWatchAction(newVal, oldVal) {                              // 28640\n              attr.$set('value', newVal);                                                                              // 28641\n              if (oldVal !== newVal) {                                                                                 // 28642\n                selectCtrl.removeOption(oldVal);                                                                       // 28643\n              }                                                                                                        // 28644\n              addOption(newVal);                                                                                       // 28645\n            });                                                                                                        // 28646\n          } else {                                                                                                     // 28647\n            // The value attribute is static                                                                           // 28648\n            addOption(attr.value);                                                                                     // 28649\n          }                                                                                                            // 28650\n                                                                                                                       // 28651\n          element.on('$destroy', function() {                                                                          // 28652\n            selectCtrl.removeOption(attr.value);                                                                       // 28653\n            selectCtrl.ngModelCtrl.$render();                                                                          // 28654\n          });                                                                                                          // 28655\n        }                                                                                                              // 28656\n      };                                                                                                               // 28657\n    }                                                                                                                  // 28658\n  };                                                                                                                   // 28659\n}];                                                                                                                    // 28660\n                                                                                                                       // 28661\nvar styleDirective = valueFn({                                                                                         // 28662\n  restrict: 'E',                                                                                                       // 28663\n  terminal: false                                                                                                      // 28664\n});                                                                                                                    // 28665\n                                                                                                                       // 28666\nvar requiredDirective = function() {                                                                                   // 28667\n  return {                                                                                                             // 28668\n    restrict: 'A',                                                                                                     // 28669\n    require: '?ngModel',                                                                                               // 28670\n    link: function(scope, elm, attr, ctrl) {                                                                           // 28671\n      if (!ctrl) return;                                                                                               // 28672\n      attr.required = true; // force truthy in case we are on non input element                                        // 28673\n                                                                                                                       // 28674\n      ctrl.$validators.required = function(modelValue, viewValue) {                                                    // 28675\n        return !attr.required || !ctrl.$isEmpty(viewValue);                                                            // 28676\n      };                                                                                                               // 28677\n                                                                                                                       // 28678\n      attr.$observe('required', function() {                                                                           // 28679\n        ctrl.$validate();                                                                                              // 28680\n      });                                                                                                              // 28681\n    }                                                                                                                  // 28682\n  };                                                                                                                   // 28683\n};                                                                                                                     // 28684\n                                                                                                                       // 28685\n                                                                                                                       // 28686\nvar patternDirective = function() {                                                                                    // 28687\n  return {                                                                                                             // 28688\n    restrict: 'A',                                                                                                     // 28689\n    require: '?ngModel',                                                                                               // 28690\n    link: function(scope, elm, attr, ctrl) {                                                                           // 28691\n      if (!ctrl) return;                                                                                               // 28692\n                                                                                                                       // 28693\n      var regexp, patternExp = attr.ngPattern || attr.pattern;                                                         // 28694\n      attr.$observe('pattern', function(regex) {                                                                       // 28695\n        if (isString(regex) && regex.length > 0) {                                                                     // 28696\n          regex = new RegExp('^' + regex + '$');                                                                       // 28697\n        }                                                                                                              // 28698\n                                                                                                                       // 28699\n        if (regex && !regex.test) {                                                                                    // 28700\n          throw minErr('ngPattern')('noregexp',                                                                        // 28701\n            'Expected {0} to be a RegExp but was {1}. Element: {2}', patternExp,                                       // 28702\n            regex, startingTag(elm));                                                                                  // 28703\n        }                                                                                                              // 28704\n                                                                                                                       // 28705\n        regexp = regex || undefined;                                                                                   // 28706\n        ctrl.$validate();                                                                                              // 28707\n      });                                                                                                              // 28708\n                                                                                                                       // 28709\n      ctrl.$validators.pattern = function(modelValue, viewValue) {                                                     // 28710\n        // HTML5 pattern constraint validates the input value, so we validate the viewValue                            // 28711\n        return ctrl.$isEmpty(viewValue) || isUndefined(regexp) || regexp.test(viewValue);                              // 28712\n      };                                                                                                               // 28713\n    }                                                                                                                  // 28714\n  };                                                                                                                   // 28715\n};                                                                                                                     // 28716\n                                                                                                                       // 28717\n                                                                                                                       // 28718\nvar maxlengthDirective = function() {                                                                                  // 28719\n  return {                                                                                                             // 28720\n    restrict: 'A',                                                                                                     // 28721\n    require: '?ngModel',                                                                                               // 28722\n    link: function(scope, elm, attr, ctrl) {                                                                           // 28723\n      if (!ctrl) return;                                                                                               // 28724\n                                                                                                                       // 28725\n      var maxlength = -1;                                                                                              // 28726\n      attr.$observe('maxlength', function(value) {                                                                     // 28727\n        var intVal = toInt(value);                                                                                     // 28728\n        maxlength = isNaN(intVal) ? -1 : intVal;                                                                       // 28729\n        ctrl.$validate();                                                                                              // 28730\n      });                                                                                                              // 28731\n      ctrl.$validators.maxlength = function(modelValue, viewValue) {                                                   // 28732\n        return (maxlength < 0) || ctrl.$isEmpty(viewValue) || (viewValue.length <= maxlength);                         // 28733\n      };                                                                                                               // 28734\n    }                                                                                                                  // 28735\n  };                                                                                                                   // 28736\n};                                                                                                                     // 28737\n                                                                                                                       // 28738\nvar minlengthDirective = function() {                                                                                  // 28739\n  return {                                                                                                             // 28740\n    restrict: 'A',                                                                                                     // 28741\n    require: '?ngModel',                                                                                               // 28742\n    link: function(scope, elm, attr, ctrl) {                                                                           // 28743\n      if (!ctrl) return;                                                                                               // 28744\n                                                                                                                       // 28745\n      var minlength = 0;                                                                                               // 28746\n      attr.$observe('minlength', function(value) {                                                                     // 28747\n        minlength = toInt(value) || 0;                                                                                 // 28748\n        ctrl.$validate();                                                                                              // 28749\n      });                                                                                                              // 28750\n      ctrl.$validators.minlength = function(modelValue, viewValue) {                                                   // 28751\n        return ctrl.$isEmpty(viewValue) || viewValue.length >= minlength;                                              // 28752\n      };                                                                                                               // 28753\n    }                                                                                                                  // 28754\n  };                                                                                                                   // 28755\n};                                                                                                                     // 28756\n                                                                                                                       // 28757\nif (window.angular.bootstrap) {                                                                                        // 28758\n  //AngularJS is already loaded, so we can return here...                                                              // 28759\n  console.log('WARNING: Tried to load angular more than once.');                                                       // 28760\n  return;                                                                                                              // 28761\n}                                                                                                                      // 28762\n                                                                                                                       // 28763\n//try to bind to jquery now so that one can write jqLite(document).ready()                                             // 28764\n//but we will rebind on bootstrap again.                                                                               // 28765\nbindJQuery();                                                                                                          // 28766\n                                                                                                                       // 28767\npublishExternalAPI(angular);                                                                                           // 28768\n                                                                                                                       // 28769\nangular.module(\"ngLocale\", [], [\"$provide\", function($provide) {                                                       // 28770\nvar PLURAL_CATEGORY = {ZERO: \"zero\", ONE: \"one\", TWO: \"two\", FEW: \"few\", MANY: \"many\", OTHER: \"other\"};                // 28771\nfunction getDecimals(n) {                                                                                              // 28772\n  n = n + '';                                                                                                          // 28773\n  var i = n.indexOf('.');                                                                                              // 28774\n  return (i == -1) ? 0 : n.length - i - 1;                                                                             // 28775\n}                                                                                                                      // 28776\n                                                                                                                       // 28777\nfunction getVF(n, opt_precision) {                                                                                     // 28778\n  var v = opt_precision;                                                                                               // 28779\n                                                                                                                       // 28780\n  if (undefined === v) {                                                                                               // 28781\n    v = Math.min(getDecimals(n), 3);                                                                                   // 28782\n  }                                                                                                                    // 28783\n                                                                                                                       // 28784\n  var base = Math.pow(10, v);                                                                                          // 28785\n  var f = ((n * base) | 0) % base;                                                                                     // 28786\n  return {v: v, f: f};                                                                                                 // 28787\n}                                                                                                                      // 28788\n                                                                                                                       // 28789\n$provide.value(\"$locale\", {                                                                                            // 28790\n  \"DATETIME_FORMATS\": {                                                                                                // 28791\n    \"AMPMS\": [                                                                                                         // 28792\n      \"AM\",                                                                                                            // 28793\n      \"PM\"                                                                                                             // 28794\n    ],                                                                                                                 // 28795\n    \"DAY\": [                                                                                                           // 28796\n      \"Sunday\",                                                                                                        // 28797\n      \"Monday\",                                                                                                        // 28798\n      \"Tuesday\",                                                                                                       // 28799\n      \"Wednesday\",                                                                                                     // 28800\n      \"Thursday\",                                                                                                      // 28801\n      \"Friday\",                                                                                                        // 28802\n      \"Saturday\"                                                                                                       // 28803\n    ],                                                                                                                 // 28804\n    \"ERANAMES\": [                                                                                                      // 28805\n      \"Before Christ\",                                                                                                 // 28806\n      \"Anno Domini\"                                                                                                    // 28807\n    ],                                                                                                                 // 28808\n    \"ERAS\": [                                                                                                          // 28809\n      \"BC\",                                                                                                            // 28810\n      \"AD\"                                                                                                             // 28811\n    ],                                                                                                                 // 28812\n    \"FIRSTDAYOFWEEK\": 6,                                                                                               // 28813\n    \"MONTH\": [                                                                                                         // 28814\n      \"January\",                                                                                                       // 28815\n      \"February\",                                                                                                      // 28816\n      \"March\",                                                                                                         // 28817\n      \"April\",                                                                                                         // 28818\n      \"May\",                                                                                                           // 28819\n      \"June\",                                                                                                          // 28820\n      \"July\",                                                                                                          // 28821\n      \"August\",                                                                                                        // 28822\n      \"September\",                                                                                                     // 28823\n      \"October\",                                                                                                       // 28824\n      \"November\",                                                                                                      // 28825\n      \"December\"                                                                                                       // 28826\n    ],                                                                                                                 // 28827\n    \"SHORTDAY\": [                                                                                                      // 28828\n      \"Sun\",                                                                                                           // 28829\n      \"Mon\",                                                                                                           // 28830\n      \"Tue\",                                                                                                           // 28831\n      \"Wed\",                                                                                                           // 28832\n      \"Thu\",                                                                                                           // 28833\n      \"Fri\",                                                                                                           // 28834\n      \"Sat\"                                                                                                            // 28835\n    ],                                                                                                                 // 28836\n    \"SHORTMONTH\": [                                                                                                    // 28837\n      \"Jan\",                                                                                                           // 28838\n      \"Feb\",                                                                                                           // 28839\n      \"Mar\",                                                                                                           // 28840\n      \"Apr\",                                                                                                           // 28841\n      \"May\",                                                                                                           // 28842\n      \"Jun\",                                                                                                           // 28843\n      \"Jul\",                                                                                                           // 28844\n      \"Aug\",                                                                                                           // 28845\n      \"Sep\",                                                                                                           // 28846\n      \"Oct\",                                                                                                           // 28847\n      \"Nov\",                                                                                                           // 28848\n      \"Dec\"                                                                                                            // 28849\n    ],                                                                                                                 // 28850\n    \"WEEKENDRANGE\": [                                                                                                  // 28851\n      5,                                                                                                               // 28852\n      6                                                                                                                // 28853\n    ],                                                                                                                 // 28854\n    \"fullDate\": \"EEEE, MMMM d, y\",                                                                                     // 28855\n    \"longDate\": \"MMMM d, y\",                                                                                           // 28856\n    \"medium\": \"MMM d, y h:mm:ss a\",                                                                                    // 28857\n    \"mediumDate\": \"MMM d, y\",                                                                                          // 28858\n    \"mediumTime\": \"h:mm:ss a\",                                                                                         // 28859\n    \"short\": \"M/d/yy h:mm a\",                                                                                          // 28860\n    \"shortDate\": \"M/d/yy\",                                                                                             // 28861\n    \"shortTime\": \"h:mm a\"                                                                                              // 28862\n  },                                                                                                                   // 28863\n  \"NUMBER_FORMATS\": {                                                                                                  // 28864\n    \"CURRENCY_SYM\": \"$\",                                                                                               // 28865\n    \"DECIMAL_SEP\": \".\",                                                                                                // 28866\n    \"GROUP_SEP\": \",\",                                                                                                  // 28867\n    \"PATTERNS\": [                                                                                                      // 28868\n      {                                                                                                                // 28869\n        \"gSize\": 3,                                                                                                    // 28870\n        \"lgSize\": 3,                                                                                                   // 28871\n        \"maxFrac\": 3,                                                                                                  // 28872\n        \"minFrac\": 0,                                                                                                  // 28873\n        \"minInt\": 1,                                                                                                   // 28874\n        \"negPre\": \"-\",                                                                                                 // 28875\n        \"negSuf\": \"\",                                                                                                  // 28876\n        \"posPre\": \"\",                                                                                                  // 28877\n        \"posSuf\": \"\"                                                                                                   // 28878\n      },                                                                                                               // 28879\n      {                                                                                                                // 28880\n        \"gSize\": 3,                                                                                                    // 28881\n        \"lgSize\": 3,                                                                                                   // 28882\n        \"maxFrac\": 2,                                                                                                  // 28883\n        \"minFrac\": 2,                                                                                                  // 28884\n        \"minInt\": 1,                                                                                                   // 28885\n        \"negPre\": \"-\\u00a4\",                                                                                           // 28886\n        \"negSuf\": \"\",                                                                                                  // 28887\n        \"posPre\": \"\\u00a4\",                                                                                            // 28888\n        \"posSuf\": \"\"                                                                                                   // 28889\n      }                                                                                                                // 28890\n    ]                                                                                                                  // 28891\n  },                                                                                                                   // 28892\n  \"id\": \"en-us\",                                                                                                       // 28893\n  \"pluralCat\": function(n, opt_precision) {  var i = n | 0;  var vf = getVF(n, opt_precision);  if (i == 1 && vf.v == 0) {    return PLURAL_CATEGORY.ONE;  }  return PLURAL_CATEGORY.OTHER;}\n});                                                                                                                    // 28895\n}]);                                                                                                                   // 28896\n                                                                                                                       // 28897\n  jqLite(document).ready(function() {                                                                                  // 28898\n    angularInit(document, bootstrap);                                                                                  // 28899\n  });                                                                                                                  // 28900\n                                                                                                                       // 28901\n})(window, document);                                                                                                  // 28902\n                                                                                                                       // 28903\n!window.angular.$$csp().noInlineStyle && window.angular.element(document.head).prepend('<style type=\"text/css\">@charset \"UTF-8\";[ng\\\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>');\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}